// Note: For maximum-speed code, see "Optimizing Code" on the Emscripten wiki, https://github.com/kripken/emscripten/wiki/Optimizing-Code
// Note: Some Emscripten settings may limit the speed of the generated code.
// The Module object: Our interface to the outside world. We import
// and export values on it, and do the work to get that through
// closure compiler if necessary. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to do an eval in order to handle the closure compiler
// case, where this code here is minified but Module was defined
// elsewhere (e.g. case 4 above). We also need to check if Module
// already exists (e.g. case 3 above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module;
if (!Module)
  Module = eval(
    "(function() { try { return ioq3 || {} } catch(e) { return {} } })()"
  );

// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
for (var key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

// The environment setup code below is customized to use Module.
// *** Environment setup code ***
var ENVIRONMENT_IS_NODE =
  typeof process === "object" && typeof require === "function";
var ENVIRONMENT_IS_WEB = typeof window === "object";
var ENVIRONMENT_IS_WORKER = typeof importScripts === "function";
var ENVIRONMENT_IS_SHELL =
  !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;

if (ENVIRONMENT_IS_NODE) {
  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  if (!Module["print"])
    Module["print"] = function print(x) {
      process["stdout"].write(x + "\n");
    };
  if (!Module["printErr"])
    Module["printErr"] = function printErr(x) {
      process["stderr"].write(x + "\n");
    };

  var nodeFS = require("fs");
  var nodePath = require("path");

  Module["read"] = function read(filename, binary) {
    filename = nodePath["normalize"](filename);
    var ret = nodeFS["readFileSync"](filename);
    // The path is absolute if the normalized version is the same as the resolved.
    if (!ret && filename != nodePath["resolve"](filename)) {
      filename = path.join(__dirname, "..", "src", filename);
      ret = nodeFS["readFileSync"](filename);
    }
    if (ret && !binary) ret = ret.toString();
    return ret;
  };

  Module["readBinary"] = function readBinary(filename) {
    return Module["read"](filename, true);
  };

  Module["load"] = function load(f) {
    globalEval(read(f));
  };

  Module["arguments"] = process["argv"].slice(2);

  module["exports"] = Module;
} else if (ENVIRONMENT_IS_SHELL) {
  if (!Module["print"]) Module["print"] = print;
  if (typeof printErr != "undefined") Module["printErr"] = printErr; // not present in v8 or older sm

  if (typeof read != "undefined") {
    Module["read"] = read;
  } else {
    Module["read"] = function read() {
      throw "no read() available (jsc?)";
    };
  }

  Module["readBinary"] = function readBinary(f) {
    return read(f, "binary");
  };

  if (typeof scriptArgs != "undefined") {
    Module["arguments"] = scriptArgs;
  } else if (typeof arguments != "undefined") {
    Module["arguments"] = arguments;
  }

  this["ioq3"] = Module;

  eval(
    "if (typeof gc === 'function' && gc.toString().indexOf('[native code]') > 0) var gc = undefined"
  ); // wipe out the SpiderMonkey shell 'gc' function, which can confuse closure (uses it as a minified name, and it is then initted to a non-falsey value unexpectedly)
} else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  Module["read"] = function read(url) {
    var xhr = new XMLHttpRequest();
    xhr.open("GET", url, false);
    xhr.send(null);
    return xhr.responseText;
  };

  if (typeof arguments != "undefined") {
    Module["arguments"] = arguments;
  }

  if (typeof console !== "undefined") {
    if (!Module["print"])
      Module["print"] = function print(x) {
        console.log(x);
      };
    if (!Module["printErr"])
      Module["printErr"] = function printErr(x) {
        console.log(x);
      };
  } else {
    // Probably a worker, and without console.log. We can do very little here...
    var TRY_USE_DUMP = false;
    if (!Module["print"])
      Module["print"] =
        TRY_USE_DUMP && typeof dump !== "undefined"
          ? function (x) {
              dump(x);
            }
          : function (x) {
              // self.postMessage(x); // enable this if you want stdout to be sent as messages
            };
  }

  if (ENVIRONMENT_IS_WEB) {
    this["ioq3"] = Module;
  } else {
    Module["load"] = importScripts;
  }
} else {
  // Unreachable because SHELL is dependant on the others
  throw "Unknown runtime environment. Where are we?";
}

function globalEval(x) {
  eval.call(null, x);
}
if (!Module["load"] == "undefined" && Module["read"]) {
  Module["load"] = function load(f) {
    globalEval(Module["read"](f));
  };
}
if (!Module["print"]) {
  Module["print"] = function () {};
}
if (!Module["printErr"]) {
  Module["printErr"] = Module["print"];
}
if (!Module["arguments"]) {
  Module["arguments"] = [];
}
// *** Environment setup code ***

// Closure helpers
Module.print = Module["print"];
Module.printErr = Module["printErr"];

// Callbacks
Module["preRun"] = [];
Module["postRun"] = [];

// Merge back in the overrides
for (var key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}

// === Auto-generated preamble library stuff ===

//========================================
// Runtime code shared with compiler
//========================================

var Runtime = {
  stackSave: function () {
    return STACKTOP;
  },
  stackRestore: function (stackTop) {
    STACKTOP = stackTop;
  },
  forceAlign: function (target, quantum) {
    quantum = quantum || 4;
    if (quantum == 1) return target;
    if (isNumber(target) && isNumber(quantum)) {
      return Math.ceil(target / quantum) * quantum;
    } else if (isNumber(quantum) && isPowerOfTwo(quantum)) {
      return "(((" + target + ")+" + (quantum - 1) + ")&" + -quantum + ")";
    }
    return "Math.ceil((" + target + ")/" + quantum + ")*" + quantum;
  },
  isNumberType: function (type) {
    return type in Runtime.INT_TYPES || type in Runtime.FLOAT_TYPES;
  },
  isPointerType: function isPointerType(type) {
    return type[type.length - 1] == "*";
  },
  isStructType: function isStructType(type) {
    if (isPointerType(type)) return false;
    if (isArrayType(type)) return true;
    if (/<?{ ?[^}]* ?}>?/.test(type)) return true; // { i32, i8 } etc. - anonymous struct types
    // See comment in isStructPointerType()
    return type[0] == "%";
  },
  INT_TYPES: { i1: 0, i8: 0, i16: 0, i32: 0, i64: 0 },
  FLOAT_TYPES: { float: 0, double: 0 },
  or64: function (x, y) {
    var l = x | 0 | (y | 0);
    var h =
      (Math.round(x / 4294967296) | Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  },
  and64: function (x, y) {
    var l = (x | 0) & (y | 0);
    var h =
      (Math.round(x / 4294967296) & Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  },
  xor64: function (x, y) {
    var l = (x | 0) ^ (y | 0);
    var h =
      (Math.round(x / 4294967296) ^ Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  },
  getNativeTypeSize: function (type) {
    switch (type) {
      case "i1":
      case "i8":
        return 1;
      case "i16":
        return 2;
      case "i32":
        return 4;
      case "i64":
        return 8;
      case "float":
        return 4;
      case "double":
        return 8;
      default: {
        if (type[type.length - 1] === "*") {
          return Runtime.QUANTUM_SIZE; // A pointer
        } else if (type[0] === "i") {
          var bits = parseInt(type.substr(1));
          assert(bits % 8 === 0);
          return bits / 8;
        } else {
          return 0;
        }
      }
    }
  },
  getNativeFieldSize: function (type) {
    return Math.max(Runtime.getNativeTypeSize(type), Runtime.QUANTUM_SIZE);
  },
  dedup: function dedup(items, ident) {
    var seen = {};
    if (ident) {
      return items.filter(function (item) {
        if (seen[item[ident]]) return false;
        seen[item[ident]] = true;
        return true;
      });
    } else {
      return items.filter(function (item) {
        if (seen[item]) return false;
        seen[item] = true;
        return true;
      });
    }
  },
  set: function set() {
    var args = typeof arguments[0] === "object" ? arguments[0] : arguments;
    var ret = {};
    for (var i = 0; i < args.length; i++) {
      ret[args[i]] = 0;
    }
    return ret;
  },
  STACK_ALIGN: 8,
  getAlignSize: function (type, size, vararg) {
    // we align i64s and doubles on 64-bit boundaries, unlike x86
    if (vararg) return 8;
    if (!vararg && (type == "i64" || type == "double")) return 8;
    if (!type) return Math.min(size, 8); // align structures internally to 64 bits
    return Math.min(
      size || (type ? Runtime.getNativeFieldSize(type) : 0),
      Runtime.QUANTUM_SIZE
    );
  },
  calculateStructAlignment: function calculateStructAlignment(type) {
    type.flatSize = 0;
    type.alignSize = 0;
    var diffs = [];
    var prev = -1;
    var index = 0;
    type.flatIndexes = type.fields.map(function (field) {
      index++;
      var size, alignSize;
      if (Runtime.isNumberType(field) || Runtime.isPointerType(field)) {
        size = Runtime.getNativeTypeSize(field); // pack char; char; in structs, also char[X]s.
        alignSize = Runtime.getAlignSize(field, size);
      } else if (Runtime.isStructType(field)) {
        if (field[1] === "0") {
          // this is [0 x something]. When inside another structure like here, it must be at the end,
          // and it adds no size
          // XXX this happens in java-nbody for example... assert(index === type.fields.length, 'zero-length in the middle!');
          size = 0;
          if (Types.types[field]) {
            alignSize = Runtime.getAlignSize(
              null,
              Types.types[field].alignSize
            );
          } else {
            alignSize = type.alignSize || QUANTUM_SIZE;
          }
        } else {
          size = Types.types[field].flatSize;
          alignSize = Runtime.getAlignSize(null, Types.types[field].alignSize);
        }
      } else if (field[0] == "b") {
        // bN, large number field, like a [N x i8]
        size = field.substr(1) | 0;
        alignSize = 1;
      } else if (field[0] === "<") {
        // vector type
        size = alignSize = Types.types[field].flatSize; // fully aligned
      } else if (field[0] === "i") {
        // illegal integer field, that could not be legalized because it is an internal structure field
        // it is ok to have such fields, if we just use them as markers of field size and nothing more complex
        size = alignSize = parseInt(field.substr(1)) / 8;
        assert(size % 1 === 0, "cannot handle non-byte-size field " + field);
      } else {
        assert(false, "invalid type for calculateStructAlignment");
      }
      if (type.packed) alignSize = 1;
      type.alignSize = Math.max(type.alignSize, alignSize);
      var curr = Runtime.alignMemory(type.flatSize, alignSize); // if necessary, place this on aligned memory
      type.flatSize = curr + size;
      if (prev >= 0) {
        diffs.push(curr - prev);
      }
      prev = curr;
      return curr;
    });
    if (type.name_ && type.name_[0] === "[") {
      // arrays have 2 elements, so we get the proper difference. then we scale here. that way we avoid
      // allocating a potentially huge array for [999999 x i8] etc.
      type.flatSize = (parseInt(type.name_.substr(1)) * type.flatSize) / 2;
    }
    type.flatSize = Runtime.alignMemory(type.flatSize, type.alignSize);
    if (diffs.length == 0) {
      type.flatFactor = type.flatSize;
    } else if (Runtime.dedup(diffs).length == 1) {
      type.flatFactor = diffs[0];
    }
    type.needsFlattening = type.flatFactor != 1;
    return type.flatIndexes;
  },
  generateStructInfo: function (struct, typeName, offset) {
    var type, alignment;
    if (typeName) {
      offset = offset || 0;
      type = (typeof Types === "undefined" ? Runtime.typeInfo : Types.types)[
        typeName
      ];
      if (!type) return null;
      if (type.fields.length != struct.length) {
        printErr(
          "Number of named fields must match the type for " +
            typeName +
            ": possibly duplicate struct names. Cannot return structInfo"
        );
        return null;
      }
      alignment = type.flatIndexes;
    } else {
      var type = {
        fields: struct.map(function (item) {
          return item[0];
        }),
      };
      alignment = Runtime.calculateStructAlignment(type);
    }
    var ret = {
      __size__: type.flatSize,
    };
    if (typeName) {
      struct.forEach(function (item, i) {
        if (typeof item === "string") {
          ret[item] = alignment[i] + offset;
        } else {
          // embedded struct
          var key;
          for (var k in item) key = k;
          ret[key] = Runtime.generateStructInfo(
            item[key],
            type.fields[i],
            alignment[i]
          );
        }
      });
    } else {
      struct.forEach(function (item, i) {
        ret[item[1]] = alignment[i];
      });
    }
    return ret;
  },
  dynCall: function (sig, ptr, args) {
    if (args && args.length) {
      if (!args.splice) args = Array.prototype.slice.call(args);
      args.splice(0, 0, ptr);
      return Module["dynCall_" + sig].apply(null, args);
    } else {
      return Module["dynCall_" + sig].call(null, ptr);
    }
  },
  functionPointers: [null],
  addFunction: function (func) {
    for (var i = 0; i < Runtime.functionPointers.length; i++) {
      if (!Runtime.functionPointers[i]) {
        Runtime.functionPointers[i] = func;
        return 2 * (1 + i);
      }
    }
    throw "Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.";
  },
  removeFunction: function (index) {
    Runtime.functionPointers[(index - 2) / 2] = null;
  },
  getAsmConst: function (code, numArgs) {
    // code is a constant string on the heap, so we can cache these
    if (!Runtime.asmConstCache) Runtime.asmConstCache = {};
    var func = Runtime.asmConstCache[code];
    if (func) return func;
    var args = [];
    for (var i = 0; i < numArgs; i++) {
      args.push(String.fromCharCode(36) + i); // $0, $1 etc
    }
    code = Pointer_stringify(code);
    if (code[0] === '"') {
      // tolerate EM_ASM("..code..") even though EM_ASM(..code..) is correct
      if (code.indexOf('"', 1) === code.length - 1) {
        code = code.substr(1, code.length - 2);
      } else {
        // something invalid happened, e.g. EM_ASM("..code($0)..", input)
        abort(
          "invalid EM_ASM input |" +
            code +
            "|. Please use EM_ASM(..code..) (no quotes) or EM_ASM({ ..code($0).. }, input) (to input values)"
        );
      }
    }
    return (Runtime.asmConstCache[code] = eval(
      "(function(" + args.join(",") + "){ " + code + " })"
    )); // new Function does not allow upvars in node
  },
  warnOnce: function (text) {
    if (!Runtime.warnOnce.shown) Runtime.warnOnce.shown = {};
    if (!Runtime.warnOnce.shown[text]) {
      Runtime.warnOnce.shown[text] = 1;
      Module.printErr(text);
    }
  },
  funcWrappers: {},
  getFuncWrapper: function (func, sig) {
    assert(sig);
    if (!Runtime.funcWrappers[func]) {
      Runtime.funcWrappers[func] = function dynCall_wrapper() {
        return Runtime.dynCall(sig, func, arguments);
      };
    }
    return Runtime.funcWrappers[func];
  },
  UTF8Processor: function () {
    var buffer = [];
    var needed = 0;
    this.processCChar = function (code) {
      code = code & 0xff;

      if (buffer.length == 0) {
        if ((code & 0x80) == 0x00) {
          // 0xxxxxxx
          return String.fromCharCode(code);
        }
        buffer.push(code);
        if ((code & 0xe0) == 0xc0) {
          // 110xxxxx
          needed = 1;
        } else if ((code & 0xf0) == 0xe0) {
          // 1110xxxx
          needed = 2;
        } else {
          // 11110xxx
          needed = 3;
        }
        return "";
      }

      if (needed) {
        buffer.push(code);
        needed--;
        if (needed > 0) return "";
      }

      var c1 = buffer[0];
      var c2 = buffer[1];
      var c3 = buffer[2];
      var c4 = buffer[3];
      var ret;
      if (buffer.length == 2) {
        ret = String.fromCharCode(((c1 & 0x1f) << 6) | (c2 & 0x3f));
      } else if (buffer.length == 3) {
        ret = String.fromCharCode(
          ((c1 & 0x0f) << 12) | ((c2 & 0x3f) << 6) | (c3 & 0x3f)
        );
      } else {
        // http://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae
        var codePoint =
          ((c1 & 0x07) << 18) |
          ((c2 & 0x3f) << 12) |
          ((c3 & 0x3f) << 6) |
          (c4 & 0x3f);
        ret = String.fromCharCode(
          Math.floor((codePoint - 0x10000) / 0x400) + 0xd800,
          ((codePoint - 0x10000) % 0x400) + 0xdc00
        );
      }
      buffer.length = 0;
      return ret;
    };
    this.processJSString = function processJSString(string) {
      string = unescape(encodeURIComponent(string));
      var ret = [];
      for (var i = 0; i < string.length; i++) {
        ret.push(string.charCodeAt(i));
      }
      return ret;
    };
  },
  stackAlloc: function (size) {
    var ret = STACKTOP;
    STACKTOP = (STACKTOP + size) | 0;
    STACKTOP = (STACKTOP + 7) & -8;
    return ret;
  },
  staticAlloc: function (size) {
    var ret = STATICTOP;
    STATICTOP = (STATICTOP + size) | 0;
    STATICTOP = (STATICTOP + 7) & -8;
    return ret;
  },
  dynamicAlloc: function (size) {
    var ret = DYNAMICTOP;
    DYNAMICTOP = (DYNAMICTOP + size) | 0;
    DYNAMICTOP = (DYNAMICTOP + 7) & -8;
    if (DYNAMICTOP >= TOTAL_MEMORY) enlargeMemory();
    return ret;
  },
  alignMemory: function (size, quantum) {
    var ret = (size =
      Math.ceil(size / (quantum ? quantum : 8)) * (quantum ? quantum : 8));
    return ret;
  },
  makeBigInt: function (low, high, unsigned) {
    var ret = unsigned
      ? +(low >>> 0) + +(high >>> 0) * +4294967296
      : +(low >>> 0) + +(high | 0) * +4294967296;
    return ret;
  },
  GLOBAL_BASE: 8,
  QUANTUM_SIZE: 4,
  __dummy__: 0,
};

Module["Runtime"] = Runtime;

function jsCall() {
  var args = Array.prototype.slice.call(arguments);
  return Runtime.functionPointers[args[0]].apply(null, args.slice(1));
}

//========================================
// Runtime essentials
//========================================

var __THREW__ = 0; // Used in checking for thrown exceptions.

var ABORT = false; // whether we are quitting the application. no code should run after this. set in exit() and abort()
var EXITSTATUS = 0;

var undef = 0;
// tempInt is used for 32-bit signed values or smaller. tempBigInt is used
// for 32-bit unsigned values or more than 32 bits. TODO: audit all uses of tempInt
var tempValue,
  tempInt,
  tempBigInt,
  tempInt2,
  tempBigInt2,
  tempPair,
  tempBigIntI,
  tempBigIntR,
  tempBigIntS,
  tempBigIntP,
  tempBigIntD,
  tempDouble,
  tempFloat;
var tempI64, tempI64b;
var tempRet0,
  tempRet1,
  tempRet2,
  tempRet3,
  tempRet4,
  tempRet5,
  tempRet6,
  tempRet7,
  tempRet8,
  tempRet9;

function assert(condition, text) {
  if (!condition) {
    abort("Assertion failed: " + text);
  }
}

var globalScope = this;

// C calling interface. A convenient way to call C functions (in C files, or
// defined with extern "C").
//
// Note: LLVM optimizations can inline and remove functions, after which you will not be
//       able to call them. Closure can also do so. To avoid that, add your function to
//       the exports using something like
//
//         -s EXPORTED_FUNCTIONS='["_main", "_myfunc"]'
//
// @param ident      The name of the C function (note that C++ functions will be name-mangled - use extern "C")
// @param returnType The return type of the function, one of the JS types 'number', 'string' or 'array' (use 'number' for any C pointer, and
//                   'array' for JavaScript arrays and typed arrays; note that arrays are 8-bit).
// @param argTypes   An array of the types of arguments for the function (if there are no arguments, this can be ommitted). Types are as in returnType,
//                   except that 'array' is not possible (there is no way for us to know the length of the array)
// @param args       An array of the arguments to the function, as native JS values (as in returnType)
//                   Note that string arguments will be stored on the stack (the JS string will become a C string on the stack).
// @return           The return value, as a native JS value (as in returnType)
function ccall(ident, returnType, argTypes, args) {
  return ccallFunc(getCFunc(ident), returnType, argTypes, args);
}
Module["ccall"] = ccall;

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  try {
    var func = Module["_" + ident]; // closure exported function
    if (!func) func = eval("_" + ident); // explicit lookup
  } catch (e) {}
  assert(
    func,
    "Cannot call unknown function " +
      ident +
      " (perhaps LLVM optimizations or closure removed it?)"
  );
  return func;
}

// Internal function that does a C call using a function, not an identifier
function ccallFunc(func, returnType, argTypes, args) {
  var stack = 0;
  function toC(value, type) {
    if (type == "string") {
      if (value === null || value === undefined || value === 0) return 0; // null string
      value = intArrayFromString(value);
      type = "array";
    }
    if (type == "array") {
      if (!stack) stack = Runtime.stackSave();
      var ret = Runtime.stackAlloc(value.length);
      writeArrayToMemory(value, ret);
      return ret;
    }
    return value;
  }
  function fromC(value, type) {
    if (type == "string") {
      return Pointer_stringify(value);
    }
    assert(type != "array");
    return value;
  }
  var i = 0;
  var cArgs = args
    ? args.map(function (arg) {
        return toC(arg, argTypes[i++]);
      })
    : [];
  var ret = fromC(func.apply(null, cArgs), returnType);
  if (stack) Runtime.stackRestore(stack);
  return ret;
}

// Returns a native JS wrapper for a C function. This is similar to ccall, but
// returns a function you can call repeatedly in a normal way. For example:
//
//   var my_function = cwrap('my_c_function', 'number', ['number', 'number']);
//   alert(my_function(5, 22));
//   alert(my_function(99, 12));
//
function cwrap(ident, returnType, argTypes) {
  var func = getCFunc(ident);
  return function () {
    return ccallFunc(
      func,
      returnType,
      argTypes,
      Array.prototype.slice.call(arguments)
    );
  };
}
Module["cwrap"] = cwrap;

// Sets a value in memory in a dynamic way at run-time. Uses the
// type data. This is the same as makeSetValue, except that
// makeSetValue is done at compile-time and generates the needed
// code then, whereas this function picks the right code at
// run-time.
// Note that setValue and getValue only do *aligned* writes and reads!
// Note that ccall uses JS types as for defining types, while setValue and
// getValue need LLVM types ('i8', 'i32') - this is a lower-level operation
function setValue(ptr, value, type, noSafe) {
  type = type || "i8";
  if (type.charAt(type.length - 1) === "*") type = "i32"; // pointers are 32-bit
  switch (type) {
    case "i1":
      HEAP8[ptr] = value;
      break;
    case "i8":
      HEAP8[ptr] = value;
      break;
    case "i16":
      HEAP16[ptr >> 1] = value;
      break;
    case "i32":
      HEAP32[ptr >> 2] = value;
      break;
    case "i64":
      (tempI64 = [
        value >>> 0,
        ((tempDouble = value),
        +Math_abs(tempDouble) >= +1
          ? tempDouble > +0
            ? (Math_min(+Math_floor(tempDouble / +4294967296), +4294967295) |
                0) >>>
              0
            : ~~+Math_ceil(
                (tempDouble - +(~~tempDouble >>> 0)) / +4294967296
              ) >>> 0
          : 0),
      ]),
        (HEAP32[ptr >> 2] = tempI64[0]),
        (HEAP32[(ptr + 4) >> 2] = tempI64[1]);
      break;
    case "float":
      HEAPF32[ptr >> 2] = value;
      break;
    case "double":
      HEAPF64[ptr >> 3] = value;
      break;
    default:
      abort("invalid type for setValue: " + type);
  }
}
Module["setValue"] = setValue;

// Parallel to setValue.
function getValue(ptr, type, noSafe) {
  type = type || "i8";
  if (type.charAt(type.length - 1) === "*") type = "i32"; // pointers are 32-bit
  switch (type) {
    case "i1":
      return HEAP8[ptr];
    case "i8":
      return HEAP8[ptr];
    case "i16":
      return HEAP16[ptr >> 1];
    case "i32":
      return HEAP32[ptr >> 2];
    case "i64":
      return HEAP32[ptr >> 2];
    case "float":
      return HEAPF32[ptr >> 2];
    case "double":
      return HEAPF64[ptr >> 3];
    default:
      abort("invalid type for setValue: " + type);
  }
  return null;
}
Module["getValue"] = getValue;

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk
var ALLOC_NONE = 4; // Do not allocate
Module["ALLOC_NORMAL"] = ALLOC_NORMAL;
Module["ALLOC_STACK"] = ALLOC_STACK;
Module["ALLOC_STATIC"] = ALLOC_STATIC;
Module["ALLOC_DYNAMIC"] = ALLOC_DYNAMIC;
Module["ALLOC_NONE"] = ALLOC_NONE;

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === "number") {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === "string" ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [
      _malloc,
      Runtime.stackAlloc,
      Runtime.staticAlloc,
      Runtime.dynamicAlloc,
    ][allocator === undefined ? ALLOC_STATIC : allocator](
      Math.max(size, singleType ? 1 : types.length)
    );
  }

  if (zeroinit) {
    var ptr = ret,
      stop;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[ptr >> 2] = 0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[ptr++ | 0] = 0;
    }
    return ret;
  }

  if (singleType === "i8") {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(slab, ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0,
    type,
    typeSize,
    previousType;
  while (i < size) {
    var curr = slab[i];

    if (typeof curr === "function") {
      curr = Runtime.getFunctionIndex(curr);
    }

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }

    if (type == "i64") type = "i32"; // special case: we have one i32 here, and one i32 later

    setValue(ret + i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = Runtime.getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}
Module["allocate"] = allocate;

function Pointer_stringify(ptr, /* optional */ length) {
  // TODO: use TextDecoder
  // Find the length, and check for UTF while doing so
  var hasUtf = false;
  var t;
  var i = 0;
  while (1) {
    t = HEAPU8[(ptr + i) | 0];
    if (t >= 128) hasUtf = true;
    else if (t == 0 && !length) break;
    i++;
    if (length && i == length) break;
  }
  if (!length) length = i;

  var ret = "";

  if (!hasUtf) {
    var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
    var curr;
    while (length > 0) {
      curr = String.fromCharCode.apply(
        String,
        HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK))
      );
      ret = ret ? ret + curr : curr;
      ptr += MAX_CHUNK;
      length -= MAX_CHUNK;
    }
    return ret;
  }

  var utf8 = new Runtime.UTF8Processor();
  for (i = 0; i < length; i++) {
    t = HEAPU8[(ptr + i) | 0];
    ret += utf8.processCChar(t);
  }
  return ret;
}
Module["Pointer_stringify"] = Pointer_stringify;

// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.
function UTF16ToString(ptr) {
  var i = 0;

  var str = "";
  while (1) {
    var codeUnit = HEAP16[(ptr + i * 2) >> 1];
    if (codeUnit == 0) return str;
    ++i;
    // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
    str += String.fromCharCode(codeUnit);
  }
}
Module["UTF16ToString"] = UTF16ToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16LE form. The copy will require at most (str.length*2+1)*2 bytes of space in the HEAP.
function stringToUTF16(str, outPtr) {
  for (var i = 0; i < str.length; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[(outPtr + i * 2) >> 1] = codeUnit;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[(outPtr + str.length * 2) >> 1] = 0;
}
Module["stringToUTF16"] = stringToUTF16;

// Given a pointer 'ptr' to a null-terminated UTF32LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.
function UTF32ToString(ptr) {
  var i = 0;

  var str = "";
  while (1) {
    var utf32 = HEAP32[(ptr + i * 4) >> 2];
    if (utf32 == 0) return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xd800 | (ch >> 10), 0xdc00 | (ch & 0x3ff));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}
Module["UTF32ToString"] = UTF32ToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32LE form. The copy will require at most (str.length+1)*4 bytes of space in the HEAP,
// but can use less, since str.length does not return the number of characters in the string, but the number of UTF-16 code units in the string.
function stringToUTF32(str, outPtr) {
  var iChar = 0;
  for (var iCodeUnit = 0; iCodeUnit < str.length; ++iCodeUnit) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    var codeUnit = str.charCodeAt(iCodeUnit); // possibly a lead surrogate
    if (codeUnit >= 0xd800 && codeUnit <= 0xdfff) {
      var trailSurrogate = str.charCodeAt(++iCodeUnit);
      codeUnit =
        (0x10000 + ((codeUnit & 0x3ff) << 10)) | (trailSurrogate & 0x3ff);
    }
    HEAP32[(outPtr + iChar * 4) >> 2] = codeUnit;
    ++iChar;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[(outPtr + iChar * 4) >> 2] = 0;
}
Module["stringToUTF32"] = stringToUTF32;

function demangle(func) {
  try {
    // Special-case the entry point, since its name differs from other name mangling.
    if (func == "Object._main" || func == "_main") {
      return "main()";
    }
    if (typeof func === "number") func = Pointer_stringify(func);
    if (func[0] !== "_") return func;
    if (func[1] !== "_") return func; // C function
    if (func[2] !== "Z") return func;
    switch (func[3]) {
      case "n":
        return "operator new()";
      case "d":
        return "operator delete()";
    }
    var i = 3;
    // params, etc.
    var basicTypes = {
      v: "void",
      b: "bool",
      c: "char",
      s: "short",
      i: "int",
      l: "long",
      f: "float",
      d: "double",
      w: "wchar_t",
      a: "signed char",
      h: "unsigned char",
      t: "unsigned short",
      j: "unsigned int",
      m: "unsigned long",
      x: "long long",
      y: "unsigned long long",
      z: "...",
    };
    function dump(x) {
      //return;
      if (x) Module.print(x);
      Module.print(func);
      var pre = "";
      for (var a = 0; a < i; a++) pre += " ";
      Module.print(pre + "^");
    }
    var subs = [];
    function parseNested() {
      i++;
      if (func[i] === "K") i++; // ignore const
      var parts = [];
      while (func[i] !== "E") {
        if (func[i] === "S") {
          // substitution
          i++;
          var next = func.indexOf("_", i);
          var num = func.substring(i, next) || 0;
          parts.push(subs[num] || "?");
          i = next + 1;
          continue;
        }
        if (func[i] === "C") {
          // constructor
          parts.push(parts[parts.length - 1]);
          i += 2;
          continue;
        }
        var size = parseInt(func.substr(i));
        var pre = size.toString().length;
        if (!size || !pre) {
          i--;
          break;
        } // counter i++ below us
        var curr = func.substr(i + pre, size);
        parts.push(curr);
        subs.push(curr);
        i += pre + size;
      }
      i++; // skip E
      return parts;
    }
    var first = true;
    function parse(rawList, limit, allowVoid) {
      // main parser
      limit = limit || Infinity;
      var ret = "",
        list = [];
      function flushList() {
        return "(" + list.join(", ") + ")";
      }
      var name;
      if (func[i] === "N") {
        // namespaced N-E
        name = parseNested().join("::");
        limit--;
        if (limit === 0) return rawList ? [name] : name;
      } else {
        // not namespaced
        if (func[i] === "K" || (first && func[i] === "L")) i++; // ignore const and first 'L'
        var size = parseInt(func.substr(i));
        if (size) {
          var pre = size.toString().length;
          name = func.substr(i + pre, size);
          i += pre + size;
        }
      }
      first = false;
      if (func[i] === "I") {
        i++;
        var iList = parse(true);
        var iRet = parse(true, 1, true);
        ret += iRet[0] + " " + name + "<" + iList.join(", ") + ">";
      } else {
        ret = name;
      }
      paramLoop: while (i < func.length && limit-- > 0) {
        //dump('paramLoop');
        var c = func[i++];
        if (c in basicTypes) {
          list.push(basicTypes[c]);
        } else {
          switch (c) {
            case "P":
              list.push(parse(true, 1, true)[0] + "*");
              break; // pointer
            case "R":
              list.push(parse(true, 1, true)[0] + "&");
              break; // reference
            case "L": {
              // literal
              i++; // skip basic type
              var end = func.indexOf("E", i);
              var size = end - i;
              list.push(func.substr(i, size));
              i += size + 2; // size + 'EE'
              break;
            }
            case "A": {
              // array
              var size = parseInt(func.substr(i));
              i += size.toString().length;
              if (func[i] !== "_") throw "?";
              i++; // skip _
              list.push(parse(true, 1, true)[0] + " [" + size + "]");
              break;
            }
            case "E":
              break paramLoop;
            default:
              ret += "?" + c;
              break paramLoop;
          }
        }
      }
      if (!allowVoid && list.length === 1 && list[0] === "void") list = []; // avoid (void)
      return rawList ? list : ret + flushList();
    }
    return parse();
  } catch (e) {
    return func;
  }
}

function demangleAll(text) {
  return text.replace(/__Z[\w\d_]+/g, function (x) {
    var y = demangle(x);
    return x === y ? x : x + " [" + y + "]";
  });
}

function stackTrace() {
  var stack = new Error().stack;
  return stack ? demangleAll(stack) : "(no stack trace available)"; // Stack trace is not available at least on IE10 and Safari 6.
}

// Memory management

var PAGE_SIZE = 4096;
function alignMemoryPage(x) {
  return (x + 4095) & -4096;
}

var HEAP;
var HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;

var STATIC_BASE = 0,
  STATICTOP = 0,
  staticSealed = false; // static area
var STACK_BASE = 0,
  STACKTOP = 0,
  STACK_MAX = 0; // stack area
var DYNAMIC_BASE = 0,
  DYNAMICTOP = 0; // dynamic area handled by sbrk

function enlargeMemory() {
  abort(
    "Cannot enlarge memory arrays in asm.js. Either (1) compile with -s TOTAL_MEMORY=X with X higher than the current value " +
      TOTAL_MEMORY +
      ", or (2) set Module.TOTAL_MEMORY before the program runs."
  );
}

var TOTAL_STACK = Module["TOTAL_STACK"] || 5242880;
var TOTAL_MEMORY = Module["TOTAL_MEMORY"] || 234881024;
var FAST_MEMORY = Module["FAST_MEMORY"] || 2097152;

var totalMemory = 4096;
while (totalMemory < TOTAL_MEMORY || totalMemory < 2 * TOTAL_STACK) {
  if (totalMemory < 16 * 1024 * 1024) {
    totalMemory *= 2;
  } else {
    totalMemory += 16 * 1024 * 1024;
  }
}
if (totalMemory !== TOTAL_MEMORY) {
  Module.printErr(
    "increasing TOTAL_MEMORY to " + totalMemory + " to be more reasonable"
  );
  TOTAL_MEMORY = totalMemory;
}

// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(
  typeof Int32Array !== "undefined" &&
    typeof Float64Array !== "undefined" &&
    !!new Int32Array(1)["subarray"] &&
    !!new Int32Array(1)["set"],
  "Cannot fallback to non-typed array case: Code is too specialized"
);

var buffer = new ArrayBuffer(TOTAL_MEMORY);
HEAP8 = new Int8Array(buffer);
HEAP16 = new Int16Array(buffer);
HEAP32 = new Int32Array(buffer);
HEAPU8 = new Uint8Array(buffer);
HEAPU16 = new Uint16Array(buffer);
HEAPU32 = new Uint32Array(buffer);
HEAPF32 = new Float32Array(buffer);
HEAPF64 = new Float64Array(buffer);

// Endianness check (note: assumes compiler arch was little-endian)
HEAP32[0] = 255;
assert(
  HEAPU8[0] === 255 && HEAPU8[3] === 0,
  "Typed arrays 2 must be run on a little-endian system"
);

Module["HEAP"] = HEAP;
Module["HEAP8"] = HEAP8;
Module["HEAP16"] = HEAP16;
Module["HEAP32"] = HEAP32;
Module["HEAPU8"] = HEAPU8;
Module["HEAPU16"] = HEAPU16;
Module["HEAPU32"] = HEAPU32;
Module["HEAPF32"] = HEAPF32;
Module["HEAPF64"] = HEAPF64;

function callRuntimeCallbacks(callbacks) {
  while (callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == "function") {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === "number") {
      if (callback.arg === undefined) {
        Runtime.dynCall("v", func);
      } else {
        Runtime.dynCall("vi", func, [callback.arg]);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__ = []; // functions called before the runtime is initialized
var __ATINIT__ = []; // functions called during startup
var __ATMAIN__ = []; // functions called when main() is to be run
var __ATEXIT__ = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the runtime has exited

var runtimeInitialized = false;

function preRun() {
  // compatibility - merge in anything from Module['preRun'] at this time
  if (Module["preRun"]) {
    if (typeof Module["preRun"] == "function")
      Module["preRun"] = [Module["preRun"]];
    while (Module["preRun"].length) {
      addOnPreRun(Module["preRun"].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}

function ensureInitRuntime() {
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  callRuntimeCallbacks(__ATEXIT__);
}

function postRun() {
  // compatibility - merge in anything from Module['postRun'] at this time
  if (Module["postRun"]) {
    if (typeof Module["postRun"] == "function")
      Module["postRun"] = [Module["postRun"]];
    while (Module["postRun"].length) {
      addOnPostRun(Module["postRun"].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}
Module["addOnPreRun"] = Module.addOnPreRun = addOnPreRun;

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}
Module["addOnInit"] = Module.addOnInit = addOnInit;

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}
Module["addOnPreMain"] = Module.addOnPreMain = addOnPreMain;

function addOnExit(cb) {
  __ATEXIT__.unshift(cb);
}
Module["addOnExit"] = Module.addOnExit = addOnExit;

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}
Module["addOnPostRun"] = Module.addOnPostRun = addOnPostRun;

// Tools

// This processes a JS string into a C-line array of numbers, 0-terminated.
// For LLVM-originating strings, see parser.js:parseLLVMString function
function intArrayFromString(stringy, dontAddNull, length /* optional */) {
  var ret = new Runtime.UTF8Processor().processJSString(stringy);
  if (length) {
    ret.length = length;
  }
  if (!dontAddNull) {
    ret.push(0);
  }
  return ret;
}
Module["intArrayFromString"] = intArrayFromString;

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xff) {
      chr &= 0xff;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join("");
}
Module["intArrayToString"] = intArrayToString;

// Write a Javascript array to somewhere in the heap
function writeStringToMemory(string, buffer, dontAddNull) {
  var array = intArrayFromString(string, dontAddNull);
  var i = 0;
  while (i < array.length) {
    var chr = array[i];
    HEAP8[(buffer + i) | 0] = chr;
    i = i + 1;
  }
}
Module["writeStringToMemory"] = writeStringToMemory;

function writeArrayToMemory(array, buffer) {
  for (var i = 0; i < array.length; i++) {
    HEAP8[(buffer + i) | 0] = array[i];
  }
}
Module["writeArrayToMemory"] = writeArrayToMemory;

function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; i++) {
    HEAP8[(buffer + i) | 0] = str.charCodeAt(i);
  }
  if (!dontAddNull) HEAP8[(buffer + str.length) | 0] = 0;
}
Module["writeAsciiToMemory"] = writeAsciiToMemory;

function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32
    ? 2 * Math.abs(1 << (bits - 1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
    : Math.pow(2, bits) + value;
}
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half =
    bits <= 32
      ? Math.abs(1 << (bits - 1)) // abs is needed if bits == 32
      : Math.pow(2, bits - 1);
  if (value >= half && (bits <= 32 || value > half)) {
    // for huge values, we can hit the precision limit and always get true here. so don't do that
    // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
    // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2 * half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}

// check for imul support, and also for correctness ( https://bugs.webkit.org/show_bug.cgi?id=126345 )
if (!Math["imul"] || Math["imul"](0xffffffff, 5) !== -5)
  Math["imul"] = function imul(a, b) {
    var ah = a >>> 16;
    var al = a & 0xffff;
    var bh = b >>> 16;
    var bl = b & 0xffff;
    return (al * bl + ((ah * bl + al * bh) << 16)) | 0;
  };
Math.imul = Math["imul"];

var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_min = Math.min;

// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled

function addRunDependency(id) {
  runDependencies++;
  if (Module["monitorRunDependencies"]) {
    Module["monitorRunDependencies"](runDependencies);
  }
}
Module["addRunDependency"] = addRunDependency;
function removeRunDependency(id) {
  runDependencies--;
  if (Module["monitorRunDependencies"]) {
    Module["monitorRunDependencies"](runDependencies);
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}
Module["removeRunDependency"] = removeRunDependency;

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data

var memoryInitializer = null;

// === Body ===

STATIC_BASE = 8;

STATICTOP = STATIC_BASE + 30344800;

/* global initializers */ __ATINIT__.push({
  func: function () {
    runPostSets();
  },
});

var _stdout;
var _stdout = (_stdout = allocate(1, "i32*", ALLOC_STATIC));
var _stderr;
var _stderr = (_stderr = allocate(1, "i32*", ALLOC_STATIC));

var _in6addr_any;
var _in6addr_any = (_in6addr_any = allocate(
  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
  "i8",
  ALLOC_STATIC
));

/* memory initializer */ allocate(
  [
    106, 28, 141, 56, 82, 187, 30, 58, 8, 105, 220, 58, 130, 237, 87, 59, 137,
    99, 178, 59, 3, 42, 5, 60, 48, 220, 57, 60, 180, 62, 119, 60, 28, 163, 158,
    60, 209, 242, 197, 60, 254, 134, 241, 60, 155, 171, 16, 61, 5, 173, 42, 61,
    132, 194, 70, 61, 83, 230, 100, 61, 17, 137, 130, 61, 135, 159, 147, 61,
    203, 178, 165, 61, 209, 190, 184, 61, 58, 191, 204, 61, 84, 175, 225, 61,
    20, 138, 247, 61, 14, 37, 7, 62, 217, 244, 18, 62, 95, 49, 31, 62, 104, 215,
    43, 62, 138, 227, 56, 62, 48, 82, 70, 62, 148, 31, 84, 62, 191, 71, 98, 62,
    142, 198, 112, 62, 176, 151, 127, 62, 82, 91, 135, 62, 96, 15, 143, 62, 152,
    229, 150, 62, 121, 219, 158, 62, 112, 238, 166, 62, 216, 27, 175, 62, 251,
    96, 183, 62, 17, 187, 191, 62, 70, 39, 200, 62, 183, 162, 208, 62, 120, 42,
    217, 62, 148, 187, 225, 62, 12, 83, 234, 62, 222, 237, 242, 62, 6, 137, 251,
    62, 190, 16, 2, 63, 31, 90, 6, 63, 36, 159, 10, 63, 80, 222, 14, 63, 43, 22,
    19, 63, 65, 69, 23, 63, 37, 106, 27, 63, 115, 131, 31, 63, 206, 143, 35, 63,
    230, 141, 39, 63, 116, 124, 43, 63, 63, 90, 47, 63, 25, 38, 51, 63, 231,
    222, 54, 63, 153, 131, 58, 63, 51, 19, 62, 63, 197, 140, 65, 63, 119, 239,
    68, 63, 127, 58, 72, 63, 39, 109, 75, 63, 206, 134, 78, 63, 229, 134, 81,
    63, 241, 108, 84, 63, 142, 56, 87, 63, 105, 233, 89, 63, 69, 127, 92, 63,
    250, 249, 94, 63, 115, 89, 97, 63, 175, 157, 99, 63, 193, 198, 101, 63, 207,
    212, 103, 63, 17, 200, 105, 63, 210, 160, 107, 63, 110, 95, 109, 63, 80, 4,
    111, 63, 244, 143, 112, 63, 230, 2, 114, 63, 189, 93, 115, 63, 31, 161, 116,
    63, 191, 205, 117, 63, 87, 228, 118, 63, 176, 229, 119, 63, 151, 210, 120,
    63, 227, 171, 121, 63, 115, 114, 122, 63, 39, 39, 123, 63, 231, 202, 123,
    63, 157, 94, 124, 63, 53, 227, 124, 63, 156, 89, 125, 63, 189, 194, 125, 63,
    134, 31, 126, 63, 222, 112, 126, 63, 171, 183, 126, 63, 207, 244, 126, 63,
    38, 41, 127, 63, 134, 85, 127, 63, 190, 122, 127, 63, 150, 153, 127, 63,
    204, 178, 127, 63, 20, 199, 127, 63, 28, 215, 127, 63, 130, 227, 127, 63,
    221, 236, 127, 63, 182, 243, 127, 63, 138, 248, 127, 63, 200, 251, 127, 63,
    214, 253, 127, 63, 7, 255, 127, 63, 165, 255, 127, 63, 232, 255, 127, 63,
    253, 255, 127, 63, 0, 0, 128, 63, 40, 2, 0, 0, 240, 1, 0, 0, 240, 226, 1, 0,
    4, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 216,
    49, 2, 0, 8, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 160, 223, 1, 0, 168, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 144, 39, 2, 0, 88, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 40, 220, 1, 0, 172, 0, 0, 0, 2, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 104, 30, 2, 0, 176, 0, 0, 0, 2,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 224, 216, 1, 0,
    180, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    64, 212, 1, 0, 4, 1, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 240, 206, 1, 0, 8, 1, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 208, 202, 1, 0, 12, 1, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 56, 198, 1, 0, 16, 1, 0, 0, 3, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 48, 192, 1, 0, 20, 1, 0, 0,
    3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 188, 1, 0,
    24, 1, 0, 0, 3, 1, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    128, 184, 1, 0, 36, 1, 0, 0, 3, 1, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 224, 180, 1, 0, 48, 1, 0, 0, 3, 1, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 240, 177, 1, 0, 60, 1, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 175, 1, 0, 64, 1, 0, 0, 2, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 170, 1, 0, 68, 1, 0, 0,
    2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 232, 165, 1, 0,
    72, 1, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    128, 162, 1, 0, 76, 1, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 112, 158, 1, 0, 80, 1, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 40, 155, 1, 0, 84, 1, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 89, 2, 0, 6, 0,
    0, 0, 12, 0, 0, 0, 48, 0, 0, 0, 66, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 128, 172, 2, 0, 0, 0, 0, 0, 168, 170, 2, 0, 0, 0, 0, 0, 96, 169, 2, 0,
    0, 0, 0, 0, 152, 168, 2, 0, 0, 0, 0, 0, 152, 167, 2, 0, 0, 0, 0, 0, 216,
    166, 2, 0, 0, 0, 0, 0, 176, 165, 2, 0, 0, 0, 0, 0, 232, 163, 2, 0, 0, 0, 0,
    0, 16, 162, 2, 0, 0, 0, 0, 0, 128, 160, 2, 0, 0, 0, 0, 0, 192, 158, 2, 0, 0,
    0, 0, 0, 40, 157, 2, 0, 0, 0, 0, 0, 128, 156, 2, 0, 0, 0, 0, 0, 200, 155, 2,
    0, 6, 0, 0, 0, 240, 154, 2, 0, 6, 0, 0, 0, 24, 154, 2, 0, 6, 0, 0, 0, 120,
    153, 2, 0, 5, 0, 0, 0, 24, 152, 2, 0, 5, 0, 0, 0, 160, 149, 2, 0, 5, 0, 0,
    0, 248, 148, 2, 0, 0, 0, 0, 0, 184, 147, 2, 0, 0, 0, 0, 0, 0, 146, 2, 0, 4,
    0, 0, 0, 184, 144, 2, 0, 4, 0, 0, 0, 232, 143, 2, 0, 0, 0, 0, 0, 216, 142,
    2, 0, 2, 0, 0, 0, 72, 142, 2, 0, 0, 0, 0, 0, 104, 141, 2, 0, 0, 0, 0, 0, 88,
    138, 2, 0, 0, 0, 0, 0, 88, 136, 2, 0, 5, 0, 0, 0, 88, 135, 2, 0, 5, 0, 0, 0,
    40, 134, 2, 0, 5, 0, 0, 0, 232, 132, 2, 0, 5, 0, 0, 0, 184, 131, 2, 0, 4, 0,
    0, 0, 216, 129, 2, 0, 4, 0, 0, 0, 72, 129, 2, 0, 4, 0, 0, 0, 208, 128, 2, 0,
    5, 0, 0, 0, 112, 127, 2, 0, 4, 0, 0, 0, 192, 125, 2, 0, 1, 0, 0, 0, 0, 124,
    2, 0, 4, 0, 0, 0, 224, 122, 2, 0, 4, 0, 0, 0, 248, 121, 2, 0, 1, 0, 0, 0,
    184, 120, 2, 0, 5, 0, 0, 0, 240, 119, 2, 0, 5, 0, 0, 0, 248, 118, 2, 0, 1,
    0, 0, 0, 96, 118, 2, 0, 5, 0, 0, 0, 144, 117, 2, 0, 6, 0, 0, 0, 176, 116, 2,
    0, 6, 0, 0, 0, 8, 115, 2, 0, 1, 0, 0, 0, 40, 113, 2, 0, 1, 0, 0, 0, 40, 112,
    2, 0, 3, 0, 0, 0, 56, 110, 2, 0, 5, 0, 0, 0, 240, 108, 2, 0, 4, 0, 0, 0, 48,
    108, 2, 0, 4, 0, 0, 0, 200, 107, 2, 0, 4, 0, 0, 0, 40, 107, 2, 0, 4, 0, 0,
    0, 176, 106, 2, 0, 4, 0, 0, 0, 72, 106, 2, 0, 3, 0, 0, 0, 184, 104, 2, 0, 3,
    0, 0, 0, 0, 103, 2, 0, 4, 0, 0, 0, 184, 101, 2, 0, 5, 0, 0, 0, 248, 100, 2,
    0, 4, 0, 0, 0, 120, 99, 2, 0, 4, 0, 0, 0, 200, 98, 2, 0, 1, 0, 0, 0, 24,
    222, 0, 0, 248, 0, 0, 0, 128, 219, 0, 0, 68, 1, 0, 0, 160, 215, 0, 0, 30, 0,
    0, 0, 176, 212, 0, 0, 112, 0, 0, 0, 144, 210, 0, 0, 228, 0, 0, 0, 144, 145,
    1, 0, 214, 0, 0, 0, 176, 208, 0, 0, 220, 0, 0, 0, 0, 207, 0, 0, 250, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 126, 124, 119, 109, 87, 41, 19, 9, 4, 2, 0, 0, 0,
    0, 0, 0, 0, 255, 0, 255, 0, 255, 0, 255, 0, 255, 0, 254, 1, 0, 1, 255, 0,
    254, 0, 253, 2, 0, 1, 255, 0, 254, 0, 253, 3, 0, 1, 255, 2, 1, 0, 0, 0, 0,
    0, 0, 240, 140, 1, 0, 224, 128, 2, 0, 224, 33, 2, 0, 224, 235, 1, 0, 88,
    195, 1, 0, 104, 156, 1, 0, 80, 243, 0, 0, 24, 213, 0, 0, 168, 189, 0, 0, 16,
    173, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 8, 0, 0, 0, 9, 0, 0, 0, 10,
    0, 0, 0, 11, 0, 0, 0, 12, 0, 0, 0, 13, 0, 0, 0, 14, 0, 0, 0, 16, 0, 0, 0,
    17, 0, 0, 0, 19, 0, 0, 0, 21, 0, 0, 0, 23, 0, 0, 0, 25, 0, 0, 0, 28, 0, 0,
    0, 31, 0, 0, 0, 34, 0, 0, 0, 37, 0, 0, 0, 41, 0, 0, 0, 45, 0, 0, 0, 50, 0,
    0, 0, 55, 0, 0, 0, 60, 0, 0, 0, 66, 0, 0, 0, 73, 0, 0, 0, 80, 0, 0, 0, 88,
    0, 0, 0, 97, 0, 0, 0, 107, 0, 0, 0, 118, 0, 0, 0, 130, 0, 0, 0, 143, 0, 0,
    0, 157, 0, 0, 0, 173, 0, 0, 0, 190, 0, 0, 0, 209, 0, 0, 0, 230, 0, 0, 0,
    253, 0, 0, 0, 23, 1, 0, 0, 51, 1, 0, 0, 81, 1, 0, 0, 115, 1, 0, 0, 152, 1,
    0, 0, 193, 1, 0, 0, 238, 1, 0, 0, 32, 2, 0, 0, 86, 2, 0, 0, 146, 2, 0, 0,
    212, 2, 0, 0, 28, 3, 0, 0, 108, 3, 0, 0, 195, 3, 0, 0, 36, 4, 0, 0, 142, 4,
    0, 0, 2, 5, 0, 0, 131, 5, 0, 0, 16, 6, 0, 0, 171, 6, 0, 0, 86, 7, 0, 0, 18,
    8, 0, 0, 224, 8, 0, 0, 195, 9, 0, 0, 189, 10, 0, 0, 208, 11, 0, 0, 255, 12,
    0, 0, 76, 14, 0, 0, 186, 15, 0, 0, 76, 17, 0, 0, 7, 19, 0, 0, 238, 20, 0, 0,
    6, 23, 0, 0, 84, 25, 0, 0, 220, 27, 0, 0, 165, 30, 0, 0, 182, 33, 0, 0, 21,
    37, 0, 0, 202, 40, 0, 0, 223, 44, 0, 0, 91, 49, 0, 0, 75, 54, 0, 0, 185, 59,
    0, 0, 178, 65, 0, 0, 68, 72, 0, 0, 126, 79, 0, 0, 113, 87, 0, 0, 47, 96, 0,
    0, 206, 105, 0, 0, 98, 116, 0, 0, 255, 127, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0,
    11, 0, 0, 0, 10, 0, 0, 0, 16, 0, 0, 0, 24, 0, 0, 0, 40, 0, 0, 0, 51, 0, 0,
    0, 61, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 14, 0, 0, 0, 19, 0, 0, 0, 26, 0,
    0, 0, 58, 0, 0, 0, 60, 0, 0, 0, 55, 0, 0, 0, 14, 0, 0, 0, 13, 0, 0, 0, 16,
    0, 0, 0, 24, 0, 0, 0, 40, 0, 0, 0, 57, 0, 0, 0, 69, 0, 0, 0, 56, 0, 0, 0,
    14, 0, 0, 0, 17, 0, 0, 0, 22, 0, 0, 0, 29, 0, 0, 0, 51, 0, 0, 0, 87, 0, 0,
    0, 80, 0, 0, 0, 62, 0, 0, 0, 18, 0, 0, 0, 22, 0, 0, 0, 37, 0, 0, 0, 56, 0,
    0, 0, 68, 0, 0, 0, 109, 0, 0, 0, 103, 0, 0, 0, 77, 0, 0, 0, 24, 0, 0, 0, 35,
    0, 0, 0, 55, 0, 0, 0, 64, 0, 0, 0, 81, 0, 0, 0, 104, 0, 0, 0, 113, 0, 0, 0,
    92, 0, 0, 0, 49, 0, 0, 0, 64, 0, 0, 0, 78, 0, 0, 0, 87, 0, 0, 0, 103, 0, 0,
    0, 121, 0, 0, 0, 120, 0, 0, 0, 101, 0, 0, 0, 72, 0, 0, 0, 92, 0, 0, 0, 95,
    0, 0, 0, 98, 0, 0, 0, 112, 0, 0, 0, 100, 0, 0, 0, 103, 0, 0, 0, 99, 0, 0, 0,
    0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8,
    9, 10, 11, 0, 0, 0, 0, 1, 2, 3, 0, 4, 17, 5, 18, 33, 49, 65, 6, 19, 81, 97,
    7, 34, 113, 20, 50, 129, 145, 161, 8, 35, 66, 177, 193, 21, 82, 209, 240,
    36, 51, 98, 114, 130, 9, 10, 22, 23, 24, 25, 26, 37, 38, 39, 40, 41, 42, 52,
    53, 54, 55, 56, 57, 58, 67, 68, 69, 70, 71, 72, 73, 74, 83, 84, 85, 86, 87,
    88, 89, 90, 99, 100, 101, 102, 103, 104, 105, 106, 115, 116, 117, 118, 119,
    120, 121, 122, 131, 132, 133, 134, 135, 136, 137, 138, 146, 147, 148, 149,
    150, 151, 152, 153, 154, 162, 163, 164, 165, 166, 167, 168, 169, 170, 178,
    179, 180, 181, 182, 183, 184, 185, 186, 194, 195, 196, 197, 198, 199, 200,
    201, 202, 210, 211, 212, 213, 214, 215, 216, 217, 218, 225, 226, 227, 228,
    229, 230, 231, 232, 233, 234, 241, 242, 243, 244, 245, 246, 247, 248, 249,
    250, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 17, 4, 5, 33, 49, 6, 18, 65, 81, 7, 97,
    113, 19, 34, 50, 129, 8, 20, 66, 145, 161, 177, 193, 9, 35, 51, 82, 240, 21,
    98, 114, 209, 10, 22, 36, 52, 225, 37, 241, 23, 24, 25, 26, 38, 39, 40, 41,
    42, 53, 54, 55, 56, 57, 58, 67, 68, 69, 70, 71, 72, 73, 74, 83, 84, 85, 86,
    87, 88, 89, 90, 99, 100, 101, 102, 103, 104, 105, 106, 115, 116, 117, 118,
    119, 120, 121, 122, 130, 131, 132, 133, 134, 135, 136, 137, 138, 146, 147,
    148, 149, 150, 151, 152, 153, 154, 162, 163, 164, 165, 166, 167, 168, 169,
    170, 178, 179, 180, 181, 182, 183, 184, 185, 186, 194, 195, 196, 197, 198,
    199, 200, 201, 202, 210, 211, 212, 213, 214, 215, 216, 217, 218, 226, 227,
    228, 229, 230, 231, 232, 233, 234, 242, 243, 244, 245, 246, 247, 248, 249,
    250, 0, 0, 0, 0, 0, 0, 0, 0, 1, 5, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 2, 1, 3, 3, 2, 4, 3, 5, 5, 4, 4, 0, 0, 1, 125, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 2, 1, 2, 4, 4, 3, 4, 7, 5, 4, 4, 0, 1, 2, 119, 0, 0, 0, 0,
    0, 0, 0, 17, 0, 0, 0, 18, 0, 0, 0, 24, 0, 0, 0, 47, 0, 0, 0, 99, 0, 0, 0,
    99, 0, 0, 0, 99, 0, 0, 0, 99, 0, 0, 0, 18, 0, 0, 0, 21, 0, 0, 0, 26, 0, 0,
    0, 66, 0, 0, 0, 99, 0, 0, 0, 99, 0, 0, 0, 99, 0, 0, 0, 99, 0, 0, 0, 24, 0,
    0, 0, 26, 0, 0, 0, 56, 0, 0, 0, 99, 0, 0, 0, 99, 0, 0, 0, 99, 0, 0, 0, 99,
    0, 0, 0, 99, 0, 0, 0, 47, 0, 0, 0, 66, 0, 0, 0, 99, 0, 0, 0, 99, 0, 0, 0,
    99, 0, 0, 0, 99, 0, 0, 0, 99, 0, 0, 0, 99, 0, 0, 0, 99, 0, 0, 0, 99, 0, 0,
    0, 99, 0, 0, 0, 99, 0, 0, 0, 99, 0, 0, 0, 99, 0, 0, 0, 99, 0, 0, 0, 99, 0,
    0, 0, 99, 0, 0, 0, 99, 0, 0, 0, 99, 0, 0, 0, 99, 0, 0, 0, 99, 0, 0, 0, 99,
    0, 0, 0, 99, 0, 0, 0, 99, 0, 0, 0, 99, 0, 0, 0, 99, 0, 0, 0, 99, 0, 0, 0,
    99, 0, 0, 0, 99, 0, 0, 0, 99, 0, 0, 0, 99, 0, 0, 0, 99, 0, 0, 0, 99, 0, 0,
    0, 99, 0, 0, 0, 99, 0, 0, 0, 99, 0, 0, 0, 99, 0, 0, 0, 99, 0, 0, 0, 99, 0,
    0, 0, 99, 0, 0, 0, 0, 64, 197, 88, 159, 83, 66, 75, 0, 64, 73, 50, 163, 34,
    168, 17, 197, 88, 33, 123, 252, 115, 98, 104, 197, 88, 191, 69, 11, 48, 126,
    24, 159, 83, 252, 115, 65, 109, 84, 98, 159, 83, 179, 65, 65, 45, 18, 23,
    66, 75, 98, 104, 84, 98, 126, 88, 66, 75, 33, 59, 186, 40, 195, 20, 0, 64,
    197, 88, 159, 83, 66, 75, 0, 64, 73, 50, 163, 34, 168, 17, 73, 50, 191, 69,
    179, 65, 33, 59, 73, 50, 130, 39, 55, 27, 224, 13, 163, 34, 11, 48, 65, 45,
    186, 40, 163, 34, 55, 27, 191, 18, 142, 9, 168, 17, 126, 24, 18, 23, 195,
    20, 168, 17, 224, 13, 142, 9, 223, 4, 0, 0, 0, 0, 0, 0, 240, 63, 239, 97,
    72, 177, 80, 49, 246, 63, 202, 111, 77, 145, 174, 231, 244, 63, 170, 17,
    108, 239, 98, 208, 242, 63, 0, 0, 0, 0, 0, 0, 240, 63, 59, 191, 167, 192,
    105, 36, 233, 63, 187, 32, 199, 123, 122, 81, 225, 63, 93, 171, 114, 222,
    85, 168, 209, 63, 0, 64, 197, 88, 159, 83, 66, 75, 0, 64, 73, 50, 163, 34,
    168, 17, 197, 88, 33, 123, 252, 115, 98, 104, 197, 88, 191, 69, 11, 48, 126,
    24, 159, 83, 252, 115, 65, 109, 84, 98, 159, 83, 179, 65, 65, 45, 18, 23,
    66, 75, 98, 104, 84, 98, 126, 88, 66, 75, 33, 59, 186, 40, 195, 20, 0, 64,
    197, 88, 159, 83, 66, 75, 0, 64, 73, 50, 163, 34, 168, 17, 73, 50, 191, 69,
    179, 65, 33, 59, 73, 50, 130, 39, 55, 27, 224, 13, 163, 34, 11, 48, 65, 45,
    186, 40, 163, 34, 55, 27, 191, 18, 142, 9, 168, 17, 126, 24, 18, 23, 195,
    20, 168, 17, 224, 13, 142, 9, 223, 4, 0, 0, 0, 0, 0, 0, 240, 63, 239, 97,
    72, 177, 80, 49, 246, 63, 202, 111, 77, 145, 174, 231, 244, 63, 170, 17,
    108, 239, 98, 208, 242, 63, 0, 0, 0, 0, 0, 0, 240, 63, 59, 191, 167, 192,
    105, 36, 233, 63, 187, 32, 199, 123, 122, 81, 225, 63, 93, 171, 114, 222,
    85, 168, 209, 63, 25, 23, 2, 0, 0, 0, 0, 0, 255, 255, 255, 255, 0, 0, 0, 0,
    2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 1, 0, 0, 0, 3, 0, 0, 0, 4,
    0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    128, 63, 0, 0, 128, 63, 0, 0, 0, 0, 0, 0, 128, 63, 0, 0, 128, 191, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 128, 191, 0, 0, 128, 63, 0, 0, 0, 0, 0, 0, 128, 63, 0,
    0, 128, 63, 0, 0, 128, 63, 0, 0, 0, 0, 0, 0, 128, 63, 0, 0, 128, 191, 0, 0,
    0, 0, 0, 0, 128, 63, 224, 192, 160, 128, 96, 64, 32, 0, 213, 171, 128, 85,
    43, 0, 0, 0, 205, 154, 102, 51, 0, 0, 0, 0, 192, 128, 64, 0, 0, 0, 0, 0,
    171, 85, 0, 0, 0, 0, 0, 0, 230, 0, 0, 0, 0, 0, 0, 0, 232, 158, 10, 0, 0, 0,
    0, 0, 92, 202, 190, 216, 182, 223, 154, 226, 156, 230, 120, 236, 122, 244,
    204, 252, 52, 3, 134, 11, 136, 19, 100, 25, 102, 29, 74, 32, 66, 39, 164,
    53, 249, 247, 246, 245, 244, 234, 210, 202, 201, 200, 197, 174, 82, 59, 56,
    55, 54, 46, 22, 12, 11, 10, 9, 7, 0, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, 0, 0,
    0, 0, 254, 49, 67, 77, 82, 93, 99, 198, 11, 18, 24, 31, 36, 45, 255, 46, 66,
    78, 87, 94, 104, 208, 14, 21, 32, 42, 51, 66, 255, 94, 104, 109, 112, 115,
    118, 248, 53, 69, 80, 88, 95, 102, 0, 0, 0, 0, 0, 0, 0, 0, 2, 5, 9, 14, 20,
    27, 35, 44, 54, 65, 77, 90, 104, 119, 135, 0, 0, 0, 0, 0, 0, 0, 130, 0, 200,
    58, 0, 231, 130, 26, 0, 244, 184, 76, 12, 0, 249, 214, 130, 43, 6, 0, 252,
    232, 173, 87, 24, 3, 0, 253, 241, 203, 131, 56, 14, 2, 0, 254, 246, 221,
    167, 94, 35, 8, 1, 0, 254, 249, 232, 193, 130, 65, 23, 5, 1, 0, 255, 251,
    239, 211, 162, 99, 45, 15, 4, 1, 0, 255, 251, 243, 223, 186, 131, 74, 33,
    11, 3, 1, 0, 255, 252, 245, 230, 202, 158, 105, 57, 24, 8, 2, 1, 0, 255,
    253, 247, 235, 214, 179, 132, 84, 44, 19, 7, 2, 1, 0, 255, 254, 250, 240,
    223, 196, 159, 112, 69, 36, 15, 6, 2, 1, 0, 255, 254, 253, 245, 231, 209,
    176, 136, 93, 55, 27, 11, 3, 2, 1, 0, 255, 254, 253, 252, 239, 221, 194,
    158, 117, 76, 42, 18, 4, 3, 2, 1, 0, 129, 0, 203, 54, 0, 234, 129, 23, 0,
    245, 184, 73, 10, 0, 250, 215, 129, 41, 5, 0, 252, 232, 173, 86, 24, 3, 0,
    253, 240, 200, 129, 56, 15, 2, 0, 253, 244, 217, 164, 94, 38, 10, 1, 0, 253,
    245, 226, 189, 132, 71, 27, 7, 1, 0, 253, 246, 231, 203, 159, 105, 56, 23,
    6, 1, 0, 255, 248, 235, 213, 179, 133, 85, 47, 19, 5, 1, 0, 255, 254, 243,
    221, 194, 159, 117, 70, 37, 12, 2, 1, 0, 255, 254, 248, 234, 208, 171, 128,
    85, 48, 22, 8, 2, 1, 0, 255, 254, 250, 240, 220, 189, 149, 107, 67, 36, 16,
    6, 2, 1, 0, 255, 254, 251, 243, 227, 201, 166, 128, 90, 55, 29, 13, 5, 2, 1,
    0, 255, 254, 252, 246, 234, 213, 183, 147, 109, 73, 43, 22, 10, 4, 2, 1, 0,
    129, 0, 207, 50, 0, 236, 129, 20, 0, 245, 185, 72, 10, 0, 249, 213, 129, 42,
    6, 0, 250, 226, 169, 87, 27, 4, 0, 251, 233, 194, 130, 62, 20, 4, 0, 250,
    236, 207, 160, 99, 47, 17, 3, 0, 255, 240, 217, 182, 131, 81, 41, 11, 1, 0,
    255, 254, 233, 201, 159, 107, 61, 20, 2, 1, 0, 255, 249, 233, 206, 170, 128,
    86, 50, 23, 7, 1, 0, 255, 250, 238, 217, 186, 148, 108, 70, 39, 18, 6, 1, 0,
    255, 252, 243, 226, 200, 166, 128, 90, 56, 30, 13, 4, 1, 0, 255, 252, 245,
    231, 209, 180, 146, 110, 76, 47, 25, 11, 4, 1, 0, 255, 253, 248, 237, 219,
    194, 163, 128, 93, 62, 37, 19, 8, 3, 1, 0, 255, 254, 250, 241, 226, 205,
    177, 145, 111, 79, 51, 30, 15, 6, 2, 1, 0, 128, 0, 214, 42, 0, 235, 128, 21,
    0, 244, 184, 72, 11, 0, 248, 214, 128, 42, 7, 0, 248, 225, 170, 80, 25, 5,
    0, 251, 236, 198, 126, 54, 18, 3, 0, 250, 238, 211, 159, 82, 35, 15, 5, 0,
    250, 231, 203, 168, 128, 88, 53, 25, 6, 0, 252, 238, 216, 185, 148, 108, 71,
    40, 18, 4, 0, 253, 243, 225, 199, 166, 128, 90, 57, 31, 13, 3, 0, 254, 246,
    233, 212, 183, 147, 109, 73, 44, 23, 10, 2, 0, 255, 250, 240, 223, 198, 166,
    128, 90, 58, 33, 16, 6, 1, 0, 255, 251, 244, 231, 210, 181, 146, 110, 75,
    46, 25, 12, 5, 1, 0, 255, 253, 248, 238, 221, 196, 164, 128, 92, 60, 35, 18,
    8, 3, 1, 0, 255, 253, 249, 242, 229, 208, 180, 146, 110, 76, 48, 27, 14, 7,
    3, 1, 0, 189, 0, 168, 253, 105, 2, 103, 119, 117, 0, 97, 255, 210, 251, 8,
    116, 52, 0, 221, 0, 168, 246, 116, 110, 252, 255, 17, 2, 234, 242, 229, 102,
    208, 255, 246, 2, 140, 240, 165, 93, 176, 255, 137, 3, 117, 239, 6, 83, 157,
    255, 204, 3, 130, 239, 102, 71, 149, 255, 199, 3, 139, 240, 39, 59, 153,
    255, 128, 3, 97, 242, 174, 46, 165, 255, 5, 3, 207, 244, 94, 34, 185, 255,
    99, 2, 161, 247, 152, 22, 210, 255, 169, 1, 161, 250, 180, 11, 241, 190,
    178, 132, 87, 74, 41, 14, 0, 223, 193, 157, 140, 106, 57, 39, 18, 0, 0, 0,
    0, 0, 0, 0, 125, 51, 26, 18, 15, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0,
    198, 105, 45, 22, 15, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, 213, 162,
    116, 83, 59, 43, 32, 24, 18, 15, 12, 9, 7, 6, 5, 3, 2, 0, 239, 187, 116, 59,
    28, 16, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, 250, 229, 188, 135, 86, 51,
    30, 19, 13, 10, 8, 6, 5, 4, 3, 2, 1, 0, 249, 235, 213, 185, 156, 128, 103,
    83, 66, 53, 42, 33, 26, 21, 17, 13, 10, 0, 254, 249, 235, 206, 164, 118, 77,
    46, 27, 16, 10, 7, 5, 4, 3, 2, 1, 0, 255, 253, 249, 239, 220, 191, 156, 119,
    85, 57, 37, 23, 15, 10, 6, 4, 2, 0, 255, 253, 251, 246, 237, 223, 203, 179,
    152, 124, 98, 75, 55, 40, 29, 21, 15, 0, 255, 254, 253, 247, 220, 162, 106,
    67, 42, 28, 18, 12, 9, 6, 4, 3, 2, 0, 0, 0, 0, 0, 253, 250, 244, 233, 212,
    182, 150, 131, 120, 110, 98, 85, 72, 60, 49, 40, 32, 25, 19, 15, 13, 11, 9,
    8, 7, 6, 5, 4, 3, 2, 1, 0, 210, 208, 206, 203, 199, 193, 183, 168, 142, 104,
    74, 52, 37, 27, 20, 14, 10, 6, 4, 2, 0, 0, 0, 0, 223, 201, 183, 167, 152,
    138, 124, 111, 98, 88, 79, 70, 62, 56, 50, 44, 39, 35, 31, 27, 24, 21, 18,
    16, 14, 12, 10, 8, 6, 4, 3, 2, 1, 0, 0, 0, 0, 0, 0, 0, 188, 176, 155, 138,
    119, 97, 67, 43, 26, 10, 0, 0, 0, 0, 0, 0, 165, 119, 80, 61, 47, 35, 27, 20,
    14, 9, 4, 0, 0, 0, 0, 0, 113, 63, 0, 0, 0, 0, 0, 0, 120, 0, 0, 0, 0, 0, 0,
    0, 224, 112, 44, 15, 3, 2, 1, 0, 254, 237, 192, 132, 70, 23, 4, 0, 255, 252,
    226, 155, 61, 11, 2, 0, 250, 245, 234, 203, 71, 50, 42, 38, 35, 33, 31, 29,
    28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10,
    9, 8, 7, 6, 5, 4, 3, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 42, 175, 213, 201, 207,
    255, 64, 0, 17, 0, 99, 255, 97, 1, 16, 254, 163, 0, 39, 43, 189, 86, 217,
    255, 6, 0, 91, 0, 86, 255, 186, 0, 23, 0, 128, 252, 192, 24, 216, 77, 237,
    255, 220, 255, 102, 0, 167, 255, 232, 255, 72, 1, 73, 252, 8, 10, 37, 62, 0,
    0, 0, 0, 0, 0, 135, 199, 61, 201, 64, 0, 128, 0, 134, 255, 36, 0, 54, 1, 0,
    253, 72, 2, 51, 36, 69, 69, 12, 0, 128, 0, 18, 0, 114, 255, 32, 1, 139, 255,
    159, 252, 27, 16, 123, 56, 148, 107, 103, 196, 17, 0, 12, 0, 8, 0, 1, 0,
    246, 255, 234, 255, 226, 255, 224, 255, 234, 255, 3, 0, 44, 0, 100, 0, 168,
    0, 243, 0, 61, 1, 125, 1, 173, 1, 199, 1, 228, 87, 5, 197, 3, 0, 242, 255,
    236, 255, 241, 255, 2, 0, 25, 0, 37, 0, 25, 0, 240, 255, 185, 255, 149, 255,
    177, 255, 50, 0, 36, 1, 111, 2, 214, 3, 8, 5, 184, 5, 230, 62, 198, 196,
    243, 255, 0, 0, 20, 0, 26, 0, 5, 0, 225, 255, 213, 255, 252, 255, 65, 0, 90,
    0, 7, 0, 99, 255, 8, 255, 212, 255, 81, 2, 47, 6, 52, 10, 199, 12, 104, 2,
    13, 200, 246, 255, 39, 0, 58, 0, 210, 255, 172, 255, 120, 0, 184, 0, 197,
    254, 227, 253, 4, 5, 4, 21, 64, 35, 0, 0, 0, 0, 100, 0, 240, 0, 32, 0, 100,
    0, 243, 221, 192, 181, 0, 0, 0, 0, 175, 148, 160, 176, 178, 173, 174, 164,
    177, 174, 196, 182, 198, 192, 182, 68, 62, 66, 60, 72, 117, 85, 90, 118,
    136, 151, 142, 160, 142, 155, 0, 0, 179, 138, 140, 148, 151, 149, 153, 151,
    163, 116, 67, 82, 59, 92, 72, 100, 89, 92, 0, 0, 0, 0, 0, 0, 100, 40, 16, 7,
    3, 1, 0, 0, 100, 0, 3, 0, 40, 0, 3, 0, 3, 0, 3, 0, 5, 0, 14, 0, 14, 0, 10,
    0, 11, 0, 3, 0, 8, 0, 9, 0, 7, 0, 3, 0, 91, 1, 0, 0, 0, 0, 0, 0, 250, 0, 3,
    0, 6, 0, 3, 0, 3, 0, 3, 0, 4, 0, 3, 0, 3, 0, 3, 0, 205, 1, 0, 0, 32, 0, 16,
    0, 102, 38, 171, 1, 160, 28, 0, 0, 32, 28, 0, 0, 144, 24, 0, 0, 240, 25, 0,
    0, 96, 25, 0, 0, 144, 27, 0, 0, 208, 24, 0, 0, 0, 0, 0, 0, 32, 0, 10, 0, 20,
    46, 100, 1, 160, 30, 0, 0, 96, 28, 0, 0, 176, 24, 0, 0, 240, 26, 0, 0, 168,
    25, 0, 0, 216, 27, 0, 0, 248, 24, 0, 0, 0, 0, 0, 0, 255, 254, 253, 244, 12,
    3, 2, 1, 0, 255, 254, 252, 224, 38, 3, 2, 1, 0, 255, 254, 251, 209, 57, 4,
    2, 1, 0, 255, 254, 244, 195, 69, 4, 2, 1, 0, 255, 251, 232, 184, 84, 7, 2,
    1, 0, 255, 254, 240, 186, 86, 14, 2, 1, 0, 255, 254, 239, 178, 91, 30, 5, 1,
    0, 255, 248, 227, 177, 100, 19, 2, 1, 0, 255, 254, 253, 238, 14, 3, 2, 1, 0,
    255, 254, 252, 218, 35, 3, 2, 1, 0, 255, 254, 250, 208, 59, 4, 2, 1, 0, 255,
    254, 246, 194, 71, 10, 2, 1, 0, 255, 252, 236, 183, 82, 8, 2, 1, 0, 255,
    252, 235, 180, 90, 17, 2, 1, 0, 255, 248, 224, 171, 97, 30, 4, 1, 0, 255,
    254, 236, 173, 95, 37, 7, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 102, 102, 68,
    68, 36, 34, 96, 164, 107, 158, 185, 180, 185, 139, 102, 64, 66, 36, 34, 34,
    0, 1, 32, 208, 139, 141, 191, 152, 185, 155, 104, 96, 171, 104, 166, 102,
    102, 102, 132, 1, 0, 0, 0, 0, 16, 16, 0, 80, 109, 78, 107, 185, 139, 103,
    101, 208, 212, 141, 139, 173, 153, 123, 103, 36, 0, 0, 0, 0, 0, 0, 1, 48, 0,
    0, 0, 0, 0, 0, 32, 68, 135, 123, 119, 119, 103, 69, 98, 68, 103, 120, 118,
    118, 102, 71, 98, 134, 136, 157, 184, 182, 153, 139, 134, 208, 168, 248, 75,
    189, 143, 121, 107, 32, 49, 34, 34, 34, 0, 17, 2, 210, 235, 139, 123, 185,
    137, 105, 134, 98, 135, 104, 182, 100, 183, 171, 134, 100, 70, 68, 70, 66,
    66, 34, 131, 64, 166, 102, 68, 36, 2, 1, 0, 134, 166, 102, 68, 34, 34, 66,
    132, 212, 246, 158, 139, 107, 107, 87, 102, 100, 219, 125, 122, 137, 118,
    103, 132, 114, 135, 137, 105, 171, 106, 50, 34, 164, 214, 141, 143, 185,
    151, 121, 103, 192, 34, 0, 0, 0, 0, 0, 1, 208, 109, 74, 187, 134, 249, 159,
    137, 102, 110, 154, 118, 87, 101, 119, 101, 0, 2, 0, 36, 36, 66, 68, 35, 96,
    164, 102, 100, 36, 0, 2, 33, 167, 138, 174, 102, 100, 84, 2, 2, 100, 107,
    120, 119, 36, 197, 24, 0, 16, 0, 0, 0, 0, 99, 66, 36, 36, 34, 36, 34, 34,
    34, 34, 83, 69, 36, 52, 34, 116, 102, 70, 68, 68, 176, 102, 68, 68, 34, 65,
    85, 68, 84, 36, 116, 141, 152, 139, 170, 132, 187, 184, 216, 137, 132, 249,
    168, 185, 139, 104, 102, 100, 68, 68, 178, 218, 185, 185, 170, 244, 216,
    187, 187, 170, 244, 187, 187, 219, 138, 103, 155, 184, 185, 137, 116, 183,
    155, 152, 136, 132, 217, 184, 184, 170, 164, 217, 171, 155, 139, 244, 169,
    184, 185, 170, 164, 216, 223, 218, 138, 214, 143, 188, 218, 168, 244, 141,
    136, 155, 170, 168, 138, 220, 219, 139, 164, 219, 202, 216, 137, 168, 186,
    246, 185, 139, 116, 185, 219, 185, 138, 100, 100, 134, 100, 102, 34, 68, 68,
    100, 68, 168, 203, 221, 218, 168, 167, 154, 136, 104, 70, 164, 246, 171,
    137, 139, 137, 155, 218, 219, 139, 255, 255, 255, 156, 4, 154, 255, 255,
    255, 255, 255, 227, 102, 15, 92, 255, 255, 255, 255, 255, 213, 83, 24, 72,
    236, 255, 255, 255, 255, 150, 76, 33, 63, 214, 255, 255, 255, 190, 121, 77,
    43, 55, 185, 255, 255, 255, 245, 137, 71, 43, 59, 139, 255, 255, 255, 255,
    131, 66, 50, 66, 107, 194, 255, 255, 166, 116, 76, 55, 53, 125, 255, 255,
    255, 255, 255, 131, 6, 145, 255, 255, 255, 255, 255, 236, 93, 15, 96, 255,
    255, 255, 255, 255, 194, 83, 25, 71, 221, 255, 255, 255, 255, 162, 73, 34,
    66, 162, 255, 255, 255, 210, 126, 73, 43, 57, 173, 255, 255, 255, 201, 125,
    71, 48, 58, 130, 255, 255, 255, 166, 110, 73, 57, 62, 104, 210, 255, 255,
    251, 123, 65, 55, 68, 100, 171, 255, 225, 204, 201, 184, 183, 175, 158, 154,
    153, 135, 119, 115, 113, 110, 109, 99, 98, 95, 79, 68, 52, 50, 48, 45, 43,
    32, 31, 27, 18, 10, 3, 0, 255, 251, 235, 230, 212, 201, 196, 182, 167, 166,
    163, 151, 138, 124, 110, 104, 90, 78, 76, 70, 69, 57, 45, 34, 24, 21, 11, 6,
    5, 4, 3, 0, 212, 178, 148, 129, 108, 96, 85, 82, 79, 77, 61, 59, 57, 56, 51,
    49, 48, 45, 42, 41, 40, 38, 36, 34, 31, 30, 21, 12, 10, 3, 1, 0, 255, 245,
    244, 236, 233, 225, 217, 203, 190, 176, 175, 161, 149, 136, 125, 114, 102,
    91, 81, 71, 60, 52, 43, 35, 28, 20, 19, 18, 12, 11, 5, 0, 7, 23, 38, 54, 69,
    85, 100, 116, 131, 147, 162, 178, 193, 208, 223, 239, 13, 25, 41, 55, 69,
    83, 98, 112, 127, 142, 157, 171, 187, 203, 220, 236, 15, 21, 34, 51, 61, 78,
    92, 106, 126, 136, 152, 167, 185, 205, 225, 240, 10, 21, 36, 50, 63, 79, 95,
    110, 126, 141, 157, 173, 189, 205, 221, 237, 17, 20, 37, 51, 59, 78, 89,
    107, 123, 134, 150, 164, 184, 205, 224, 240, 10, 15, 32, 51, 67, 81, 96,
    112, 129, 142, 158, 173, 189, 204, 220, 236, 8, 21, 37, 51, 65, 79, 98, 113,
    126, 138, 155, 168, 179, 192, 209, 218, 12, 15, 34, 55, 63, 78, 87, 108,
    118, 131, 148, 167, 185, 203, 219, 236, 16, 19, 32, 36, 56, 79, 91, 108,
    118, 136, 154, 171, 186, 204, 220, 237, 11, 28, 43, 58, 74, 89, 105, 120,
    135, 150, 165, 180, 196, 211, 226, 241, 6, 16, 33, 46, 60, 75, 92, 107, 123,
    137, 156, 169, 185, 199, 214, 225, 11, 19, 30, 44, 57, 74, 89, 105, 121,
    135, 152, 169, 186, 202, 218, 234, 12, 19, 29, 46, 57, 71, 88, 100, 120,
    132, 148, 165, 182, 199, 216, 233, 17, 23, 35, 46, 56, 77, 92, 106, 123,
    134, 152, 167, 185, 204, 222, 237, 14, 17, 45, 53, 63, 75, 89, 107, 115,
    132, 151, 171, 188, 206, 221, 240, 9, 16, 29, 40, 56, 71, 88, 103, 119, 137,
    154, 171, 189, 205, 222, 237, 16, 19, 36, 48, 57, 76, 87, 105, 118, 132,
    150, 167, 185, 202, 218, 236, 12, 17, 29, 54, 71, 81, 94, 104, 126, 136,
    149, 164, 182, 201, 221, 237, 15, 28, 47, 62, 79, 97, 115, 129, 142, 155,
    168, 180, 194, 208, 223, 238, 8, 14, 30, 45, 62, 78, 94, 111, 127, 143, 159,
    175, 192, 207, 223, 239, 17, 30, 49, 62, 79, 92, 107, 119, 132, 145, 160,
    174, 190, 204, 220, 235, 14, 19, 36, 45, 61, 76, 91, 108, 121, 138, 154,
    172, 189, 205, 222, 238, 12, 18, 31, 45, 60, 76, 91, 107, 123, 138, 154,
    171, 187, 204, 221, 236, 13, 17, 31, 43, 53, 70, 83, 103, 114, 131, 149,
    167, 185, 203, 220, 237, 17, 22, 35, 42, 58, 78, 93, 110, 125, 139, 155,
    170, 188, 206, 224, 240, 8, 15, 34, 50, 67, 83, 99, 115, 131, 146, 162, 178,
    193, 209, 224, 239, 13, 16, 41, 66, 73, 86, 95, 111, 128, 137, 150, 163,
    183, 206, 225, 241, 17, 25, 37, 52, 63, 75, 92, 102, 119, 132, 144, 160,
    175, 191, 212, 231, 19, 31, 49, 65, 83, 100, 117, 133, 147, 161, 174, 187,
    200, 213, 227, 242, 18, 31, 52, 68, 88, 103, 117, 126, 138, 149, 163, 177,
    192, 207, 223, 239, 16, 29, 47, 61, 76, 90, 106, 119, 133, 147, 161, 176,
    193, 209, 224, 240, 15, 21, 35, 50, 61, 73, 86, 97, 110, 119, 129, 141, 175,
    198, 218, 237, 12, 35, 60, 83, 108, 132, 157, 180, 206, 228, 15, 32, 55, 77,
    101, 125, 151, 175, 201, 225, 19, 42, 66, 89, 114, 137, 162, 184, 209, 230,
    12, 25, 50, 72, 97, 120, 147, 172, 200, 223, 26, 44, 69, 90, 114, 135, 159,
    180, 205, 225, 13, 22, 53, 80, 106, 130, 156, 180, 205, 228, 15, 25, 44, 64,
    90, 115, 142, 168, 196, 222, 19, 24, 62, 82, 100, 120, 145, 168, 190, 214,
    22, 31, 50, 79, 103, 120, 151, 170, 203, 227, 21, 29, 45, 65, 106, 124, 150,
    171, 196, 224, 30, 49, 75, 97, 121, 142, 165, 186, 209, 229, 19, 25, 52, 70,
    93, 116, 143, 166, 192, 219, 26, 34, 62, 75, 97, 118, 145, 167, 194, 217,
    25, 33, 56, 70, 91, 113, 143, 165, 196, 223, 21, 34, 51, 72, 97, 117, 145,
    171, 196, 222, 20, 29, 50, 67, 90, 117, 144, 168, 197, 221, 22, 31, 48, 66,
    95, 117, 146, 168, 196, 222, 24, 33, 51, 77, 116, 134, 158, 180, 200, 224,
    21, 28, 70, 87, 106, 124, 149, 170, 194, 217, 26, 33, 53, 64, 83, 117, 152,
    173, 204, 225, 27, 34, 65, 95, 108, 129, 155, 174, 210, 225, 20, 26, 72, 99,
    113, 131, 154, 176, 200, 219, 34, 43, 61, 78, 93, 114, 155, 177, 205, 229,
    23, 29, 54, 97, 124, 138, 163, 179, 209, 229, 30, 38, 56, 89, 118, 129, 158,
    178, 200, 231, 21, 29, 49, 63, 85, 111, 142, 163, 193, 222, 27, 48, 77, 103,
    133, 158, 179, 196, 215, 232, 29, 47, 74, 99, 124, 151, 176, 198, 220, 237,
    33, 42, 61, 76, 93, 121, 155, 174, 207, 225, 29, 53, 87, 112, 136, 154, 170,
    188, 208, 227, 24, 30, 52, 84, 131, 150, 166, 186, 203, 229, 37, 48, 64, 84,
    104, 118, 156, 177, 201, 230, 0, 15, 8, 7, 4, 11, 12, 3, 2, 13, 10, 5, 6, 9,
    14, 1, 0, 9, 6, 3, 4, 5, 8, 1, 2, 7, 0, 0, 0, 0, 0, 0, 128, 64, 0, 0, 0, 0,
    0, 0, 16, 33, 0, 0, 192, 32, 0, 0, 32, 32, 0, 0, 0, 0, 0, 0, 179, 99, 0, 0,
    0, 0, 0, 0, 250, 27, 61, 39, 5, 245, 42, 88, 4, 1, 254, 60, 65, 6, 252, 255,
    251, 73, 56, 1, 247, 19, 94, 29, 247, 0, 12, 99, 6, 4, 8, 237, 102, 46, 243,
    3, 2, 13, 3, 2, 9, 235, 84, 72, 238, 245, 46, 104, 234, 8, 18, 38, 48, 23,
    0, 240, 70, 83, 235, 11, 5, 245, 117, 22, 248, 250, 23, 117, 244, 3, 3, 248,
    95, 28, 4, 246, 15, 77, 60, 241, 255, 4, 124, 2, 252, 3, 38, 84, 24, 231, 2,
    13, 42, 13, 31, 21, 252, 56, 46, 255, 255, 35, 79, 243, 19, 249, 65, 88,
    247, 242, 20, 4, 81, 49, 227, 20, 0, 75, 3, 239, 5, 247, 44, 92, 248, 1,
    253, 22, 69, 31, 250, 95, 41, 244, 5, 39, 67, 16, 252, 1, 0, 250, 120, 55,
    220, 243, 44, 122, 4, 232, 81, 5, 11, 3, 7, 2, 0, 9, 10, 88, 13, 22, 39, 23,
    12, 255, 36, 64, 27, 250, 249, 10, 55, 43, 17, 1, 1, 8, 1, 1, 6, 245, 74,
    53, 247, 244, 55, 76, 244, 8, 253, 3, 93, 27, 252, 26, 39, 59, 3, 248, 2, 0,
    77, 11, 9, 248, 22, 44, 250, 7, 40, 9, 26, 3, 9, 249, 20, 101, 249, 4, 3,
    248, 42, 26, 0, 241, 33, 68, 2, 23, 254, 55, 46, 254, 15, 3, 255, 21, 16,
    41, 4, 6, 24, 7, 5, 0, 0, 2, 0, 0, 12, 28, 41, 13, 252, 247, 15, 42, 25, 14,
    1, 254, 62, 41, 247, 246, 37, 65, 252, 3, 250, 4, 66, 7, 248, 16, 14, 38,
    253, 33, 120, 33, 0, 0, 104, 33, 0, 0, 72, 33, 0, 0, 0, 0, 0, 0, 241, 225,
    211, 199, 187, 175, 164, 153, 142, 132, 123, 114, 105, 96, 88, 80, 72, 64,
    57, 50, 44, 38, 33, 29, 24, 20, 16, 12, 9, 5, 2, 0, 199, 165, 144, 124, 109,
    96, 84, 71, 61, 51, 42, 32, 23, 15, 8, 0, 71, 56, 43, 30, 21, 12, 6, 0, 205,
    60, 0, 48, 0, 32, 0, 0, 0, 32, 254, 31, 246, 31, 234, 31, 216, 31, 194, 31,
    168, 31, 136, 31, 98, 31, 58, 31, 10, 31, 216, 30, 160, 30, 98, 30, 34, 30,
    220, 29, 144, 29, 66, 29, 238, 28, 150, 28, 58, 28, 216, 27, 114, 27, 10,
    27, 156, 26, 42, 26, 180, 25, 58, 25, 188, 24, 60, 24, 182, 23, 46, 23, 160,
    22, 16, 22, 126, 21, 232, 20, 78, 20, 176, 19, 16, 19, 110, 18, 200, 17, 30,
    17, 116, 16, 198, 15, 22, 15, 100, 14, 174, 13, 248, 12, 64, 12, 132, 11,
    200, 10, 10, 10, 74, 9, 138, 8, 198, 7, 2, 7, 62, 6, 120, 5, 178, 4, 234, 3,
    34, 3, 90, 2, 146, 1, 202, 0, 0, 0, 54, 255, 110, 254, 166, 253, 222, 252,
    22, 252, 78, 251, 136, 250, 194, 249, 254, 248, 58, 248, 118, 247, 182, 246,
    246, 245, 56, 245, 124, 244, 192, 243, 8, 243, 82, 242, 156, 241, 234, 240,
    58, 240, 140, 239, 226, 238, 56, 238, 146, 237, 240, 236, 80, 236, 178, 235,
    24, 235, 130, 234, 240, 233, 96, 233, 210, 232, 74, 232, 196, 231, 68, 231,
    198, 230, 76, 230, 214, 229, 100, 229, 246, 228, 142, 228, 40, 228, 198,
    227, 106, 227, 18, 227, 190, 226, 112, 226, 36, 226, 222, 225, 158, 225, 96,
    225, 40, 225, 246, 224, 198, 224, 158, 224, 120, 224, 88, 224, 62, 224, 40,
    224, 22, 224, 10, 224, 2, 224, 0, 224, 0, 0, 0, 0, 0, 0, 160, 34, 0, 0, 152,
    34, 0, 0, 215, 195, 166, 125, 110, 82, 0, 0, 203, 150, 0, 0, 0, 0, 0, 0, 6,
    0, 0, 0, 4, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 255, 1, 255, 2, 254,
    2, 254, 3, 253, 0, 1, 0, 1, 255, 2, 255, 2, 254, 3, 254, 3, 0, 0, 1, 255, 0,
    1, 255, 0, 255, 1, 254, 2, 254, 254, 2, 253, 2, 3, 253, 252, 3, 252, 4, 4,
    251, 5, 250, 251, 6, 249, 6, 5, 8, 247, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 255,
    1, 0, 0, 1, 255, 0, 1, 255, 255, 1, 255, 2, 1, 255, 2, 254, 254, 2, 254, 2,
    2, 3, 253, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 255, 1, 0, 0, 2, 1,
    255, 2, 255, 255, 2, 255, 2, 2, 255, 3, 254, 254, 254, 3, 0, 1, 0, 0, 1, 0,
    1, 255, 2, 255, 2, 255, 2, 3, 254, 3, 254, 254, 4, 4, 253, 5, 253, 252, 6,
    252, 6, 5, 251, 8, 250, 251, 249, 9, 0, 1, 0, 0, 0, 1, 0, 0, 0, 2, 255, 255,
    255, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1,
    0, 0, 0, 0, 0, 255, 2, 1, 0, 1, 1, 0, 0, 255, 255, 0, 0, 0, 0, 80, 73, 44,
    1, 24, 73, 44, 1, 16, 73, 44, 1, 224, 72, 44, 1, 240, 35, 44, 1, 104, 35,
    44, 1, 104, 34, 44, 1, 32, 34, 44, 1, 56, 33, 44, 1, 48, 33, 44, 1, 168, 33,
    44, 1, 152, 33, 44, 1, 144, 33, 44, 1, 232, 32, 44, 1, 1, 0, 0, 0, 0, 0, 0,
    0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 191, 0, 0, 0, 0,
    0, 0, 128, 191, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128,
    63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128,
    63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 191, 0, 0, 0, 0, 0, 0, 128, 191, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 63, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 63, 174, 0, 0, 0,
    144, 0, 0, 0, 244, 0, 0, 0, 64, 0, 0, 0, 12, 1, 0, 0, 138, 0, 0, 0, 114, 0,
    0, 0, 120, 0, 0, 0, 178, 0, 0, 0, 210, 0, 0, 0, 72, 0, 0, 0, 60, 0, 0, 0,
    12, 0, 0, 0, 0, 0, 0, 0, 40, 191, 0, 0, 64, 1, 0, 0, 240, 0, 0, 0, 0, 0,
    128, 63, 48, 174, 0, 0, 144, 1, 0, 0, 44, 1, 0, 0, 0, 0, 128, 63, 72, 205,
    2, 0, 0, 2, 0, 0, 128, 1, 0, 0, 0, 0, 128, 63, 176, 190, 2, 0, 128, 2, 0, 0,
    224, 1, 0, 0, 0, 0, 128, 63, 208, 172, 2, 0, 32, 3, 0, 0, 88, 2, 0, 0, 0, 0,
    128, 63, 232, 158, 2, 0, 192, 3, 0, 0, 208, 2, 0, 0, 0, 0, 128, 63, 232,
    147, 2, 0, 0, 4, 0, 0, 0, 3, 0, 0, 0, 0, 128, 63, 64, 134, 2, 0, 128, 4, 0,
    0, 96, 3, 0, 0, 0, 0, 128, 63, 16, 122, 2, 0, 0, 5, 0, 0, 0, 4, 0, 0, 0, 0,
    128, 63, 96, 110, 2, 0, 64, 6, 0, 0, 176, 4, 0, 0, 0, 0, 128, 63, 24, 101,
    2, 0, 0, 8, 0, 0, 0, 6, 0, 0, 0, 0, 128, 63, 248, 91, 2, 0, 88, 3, 0, 0,
    224, 1, 0, 0, 0, 0, 128, 63, 0, 1, 1, 1, 2, 3, 3, 3, 2, 3, 3, 3, 2, 3, 3, 3,
    0, 3, 12, 15, 48, 51, 60, 63, 192, 195, 204, 207, 240, 243, 252, 255, 208,
    0, 0, 0, 144, 37, 0, 0, 216, 49, 2, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 144, 39, 2, 0, 80, 0, 0, 0, 4, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 104, 30, 2, 0, 160, 0, 0, 0,
    2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 72, 23, 2, 0,
    164, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    184, 17, 2, 0, 168, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 8, 12, 2, 0, 172, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 48, 6, 2, 0, 176, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 104, 2, 2, 0, 180, 0, 0, 0, 2, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 253, 1, 0, 184, 0, 0, 0,
    2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 48, 248, 1, 0,
    188, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    72, 244, 1, 0, 192, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 168, 238, 1, 0, 196, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 216, 233, 1, 0, 200, 0, 0, 0, 3, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 48, 230, 1, 0, 204, 0, 0, 0, 3, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 102, 63, 0, 0, 76, 63, 0, 0, 38, 63, 0, 0, 0, 63, 200, 239, 0, 0, 0,
    0, 0, 0, 32, 0, 0, 0, 48, 255, 1, 0, 20, 0, 0, 0, 0, 0, 0, 0, 248, 249, 1,
    0, 24, 0, 0, 0, 0, 0, 0, 0, 0, 237, 0, 0, 8, 0, 0, 0, 8, 0, 0, 0, 88, 234,
    0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 192, 231, 0, 0, 36, 0, 0, 0, 0, 0, 0, 0, 240,
    229, 0, 0, 156, 0, 0, 0, 0, 0, 0, 0, 144, 226, 0, 0, 152, 0, 0, 0, 0, 0, 0,
    0, 144, 222, 0, 0, 44, 0, 0, 0, 240, 255, 255, 255, 96, 245, 1, 0, 28, 0, 0,
    0, 0, 0, 0, 0, 192, 219, 0, 0, 40, 0, 0, 0, 0, 0, 0, 0, 80, 216, 0, 0, 72,
    0, 0, 0, 8, 0, 0, 0, 0, 213, 0, 0, 16, 0, 0, 0, 240, 255, 255, 255, 176,
    210, 0, 0, 108, 0, 0, 0, 16, 0, 0, 0, 96, 88, 2, 0, 84, 0, 0, 0, 8, 0, 0, 0,
    200, 208, 0, 0, 88, 0, 0, 0, 4,
  ],
  "i8",
  ALLOC_NONE,
  Runtime.GLOBAL_BASE
);
/* memory initializer */ allocate(
  [
    40, 207, 0, 0, 112, 0, 0, 0, 8, 0, 0, 0, 208, 71, 2, 0, 76, 0, 0, 0, 8, 0,
    0, 0, 248, 204, 0, 0, 116, 0, 0, 0, 8, 0, 0, 0, 72, 203, 0, 0, 12, 0, 0, 0,
    16, 0, 0, 0, 208, 61, 2, 0, 68, 0, 0, 0, 10, 0, 0, 0, 152, 200, 0, 0, 148,
    0, 0, 0, 4, 0, 0, 0, 120, 42, 2, 0, 104, 0, 0, 0, 16, 0, 0, 0, 128, 197, 0,
    0, 128, 0, 0, 0, 10, 0, 0, 0, 112, 194, 0, 0, 48, 0, 0, 0, 16, 0, 0, 0, 128,
    191, 0, 0, 52, 0, 0, 0, 16, 0, 0, 0, 144, 189, 0, 0, 60, 0, 0, 0, 16, 0, 0,
    0, 96, 187, 0, 0, 132, 0, 0, 0, 8, 0, 0, 0, 16, 186, 0, 0, 164, 0, 0, 0,
    248, 255, 255, 255, 128, 184, 0, 0, 168, 0, 0, 0, 8, 0, 0, 0, 0, 183, 0, 0,
    172, 0, 0, 0, 8, 0, 0, 0, 224, 181, 0, 0, 176, 0, 0, 0, 8, 0, 0, 0, 72, 180,
    0, 0, 180, 0, 0, 0, 8, 0, 0, 0, 208, 221, 1, 0, 184, 1, 0, 0, 8, 0, 0, 0,
    232, 177, 0, 0, 4, 0, 0, 0, 8, 0, 0, 0, 232, 175, 0, 0, 56, 0, 0, 0, 16, 0,
    0, 0, 80, 174, 0, 0, 64, 0, 0, 0, 16, 0, 0, 0, 248, 172, 0, 0, 80, 0, 0, 0,
    12, 0, 0, 0, 48, 171, 0, 0, 120, 0, 0, 0, 8, 0, 0, 0, 232, 169, 0, 0, 124,
    0, 0, 0, 8, 0, 0, 0, 192, 19, 2, 0, 140, 0, 0, 0, 8, 0, 0, 0, 184, 25, 2, 0,
    144, 0, 0, 0, 5, 0, 0, 0, 200, 168, 0, 0, 160, 0, 0, 0, 0, 0, 0, 0, 224,
    214, 2, 0, 92, 0, 0, 0, 0, 0, 0, 0, 176, 213, 2, 0, 96, 0, 0, 0, 0, 0, 0, 0,
    216, 211, 2, 0, 100, 0, 0, 0, 0, 0, 0, 0, 72, 209, 2, 0, 192, 1, 0, 0, 10,
    0, 0, 0, 32, 225, 1, 0, 188, 1, 0, 0, 16, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    3, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 1, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 4,
    0, 0, 0, 3, 0, 0, 0, 6, 0, 0, 0, 1, 0, 0, 0, 5, 0, 0, 0, 2, 0, 0, 0, 15, 0,
    0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 7, 0, 0, 0, 12, 0, 0, 0, 3, 0, 0, 0, 11, 0, 0,
    0, 4, 0, 0, 0, 14, 0, 0, 0, 1, 0, 0, 0, 9, 0, 0, 0, 6, 0, 0, 0, 13, 0, 0, 0,
    2, 0, 0, 0, 10, 0, 0, 0, 5, 0, 0, 0, 192, 88, 2, 0, 10, 0, 0, 0, 36, 0, 0,
    0, 16, 0, 0, 0, 146, 0, 0, 0, 0, 0, 0, 0, 24, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 17, 74, 29, 0, 48, 0, 0, 0, 24, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 17, 74, 29, 0, 49, 0, 0, 0, 24, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 17, 74, 29, 0, 50, 0, 0, 0, 24, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 17, 74, 29, 0, 51, 0, 0, 0, 24, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 17, 74, 29, 0, 52, 0, 0, 0, 24, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 17, 74, 29, 0, 53, 0, 0, 0, 24, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 17, 74, 29, 0, 54, 0, 0, 0, 24, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 17, 74, 29, 0, 55, 0, 0, 0, 24, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 17, 74, 29, 0, 56, 0, 0, 0, 24, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 17, 74, 29, 0, 57, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 24, 116,
    2, 0, 232, 105, 2, 0, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 255, 255, 255, 255, 0, 0, 0, 0, 203, 209, 3, 0, 233, 160, 0, 0, 148, 24,
    0, 0, 194, 27, 0, 0, 146, 14, 0, 0, 166, 14, 0, 0, 222, 23, 0, 0, 243, 90,
    0, 0, 37, 130, 0, 0, 38, 27, 0, 0, 158, 30, 0, 0, 242, 37, 0, 0, 41, 36, 0,
    0, 107, 67, 0, 0, 109, 15, 0, 0, 242, 6, 0, 0, 96, 32, 0, 0, 68, 6, 0, 0,
    54, 6, 0, 0, 127, 6, 0, 0, 76, 4, 0, 0, 189, 4, 0, 0, 214, 4, 0, 0, 110, 4,
    0, 0, 213, 6, 0, 0, 35, 4, 0, 0, 222, 4, 0, 0, 125, 4, 0, 0, 249, 4, 0, 0,
    134, 17, 0, 0, 245, 10, 0, 0, 144, 13, 0, 0, 59, 85, 0, 0, 135, 4, 0, 0,
    134, 6, 0, 0, 42, 4, 0, 0, 19, 4, 0, 0, 244, 3, 0, 0, 29, 4, 0, 0, 46, 4, 0,
    0, 190, 6, 0, 0, 120, 3, 0, 0, 156, 4, 0, 0, 82, 3, 0, 0, 192, 3, 0, 0, 12,
    3, 0, 0, 216, 6, 0, 0, 224, 12, 0, 0, 134, 41, 0, 0, 162, 17, 0, 0, 249, 22,
    0, 0, 125, 10, 0, 0, 42, 18, 0, 0, 253, 14, 0, 0, 45, 8, 0, 0, 75, 7, 0, 0,
    24, 10, 0, 0, 157, 7, 0, 0, 180, 7, 0, 0, 172, 3, 0, 0, 110, 4, 0, 0, 252,
    6, 0, 0, 134, 6, 0, 0, 182, 4, 0, 0, 87, 22, 0, 0, 240, 23, 0, 0, 54, 28, 0,
    0, 254, 25, 0, 0, 126, 14, 0, 0, 211, 14, 0, 0, 212, 5, 0, 0, 244, 5, 0, 0,
    167, 8, 0, 0, 116, 4, 0, 0, 75, 5, 0, 0, 203, 3, 0, 0, 132, 8, 0, 0, 224, 4,
    0, 0, 48, 5, 0, 0, 171, 4, 0, 0, 234, 6, 0, 0, 54, 4, 0, 0, 240, 4, 0, 0,
    242, 4, 0, 0, 144, 4, 0, 0, 197, 3, 0, 0, 131, 4, 0, 0, 162, 4, 0, 0, 67, 5,
    0, 0, 204, 4, 0, 0, 249, 5, 0, 0, 64, 6, 0, 0, 57, 10, 0, 0, 0, 8, 0, 0,
    242, 9, 0, 0, 203, 12, 0, 0, 106, 9, 0, 0, 1, 14, 0, 0, 200, 9, 0, 0, 240,
    10, 0, 0, 115, 10, 0, 0, 2, 24, 0, 0, 79, 14, 0, 0, 24, 11, 0, 0, 173, 55,
    0, 0, 92, 12, 0, 0, 173, 8, 0, 0, 151, 6, 0, 0, 136, 12, 0, 0, 179, 10, 0,
    0, 184, 13, 0, 0, 188, 18, 0, 0, 251, 15, 0, 0, 187, 13, 0, 0, 168, 20, 0,
    0, 176, 15, 0, 0, 1, 31, 0, 0, 143, 23, 0, 0, 240, 20, 0, 0, 84, 15, 0, 0,
    28, 19, 0, 0, 159, 14, 0, 0, 214, 17, 0, 0, 199, 18, 0, 0, 220, 22, 0, 0, 0,
    25, 0, 0, 81, 24, 0, 0, 99, 32, 0, 0, 203, 90, 0, 0, 158, 30, 0, 0, 161, 27,
    0, 0, 231, 34, 0, 0, 61, 21, 0, 0, 131, 17, 0, 0, 57, 14, 0, 0, 136, 20, 0,
    0, 192, 20, 0, 0, 208, 20, 0, 0, 250, 20, 0, 0, 164, 13, 0, 0, 154, 9, 0, 0,
    158, 6, 0, 0, 29, 7, 0, 0, 73, 8, 0, 0, 124, 7, 0, 0, 125, 4, 0, 0, 236, 5,
    0, 0, 87, 5, 0, 0, 212, 4, 0, 0, 5, 4, 0, 0, 234, 4, 0, 0, 80, 4, 0, 0, 221,
    4, 0, 0, 238, 3, 0, 0, 125, 4, 0, 0, 1, 4, 0, 0, 217, 4, 0, 0, 184, 3, 0, 0,
    7, 5, 0, 0, 229, 3, 0, 0, 177, 6, 0, 0, 241, 3, 0, 0, 163, 4, 0, 0, 111, 3,
    0, 0, 75, 4, 0, 0, 161, 3, 0, 0, 54, 4, 0, 0, 183, 3, 0, 0, 120, 6, 0, 0,
    162, 3, 0, 0, 129, 4, 0, 0, 6, 4, 0, 0, 238, 4, 0, 0, 38, 4, 0, 0, 190, 4,
    0, 0, 36, 4, 0, 0, 85, 6, 0, 0, 162, 3, 0, 0, 82, 4, 0, 0, 144, 3, 0, 0, 10,
    4, 0, 0, 124, 3, 0, 0, 134, 4, 0, 0, 222, 3, 0, 0, 151, 4, 0, 0, 82, 3, 0,
    0, 97, 4, 0, 0, 135, 3, 0, 0, 63, 4, 0, 0, 152, 3, 0, 0, 120, 4, 0, 0, 32,
    4, 0, 0, 134, 13, 0, 0, 192, 8, 0, 0, 45, 17, 0, 0, 104, 47, 0, 0, 78, 30,
    0, 0, 65, 5, 0, 0, 27, 5, 0, 0, 206, 12, 0, 0, 158, 7, 0, 0, 118, 3, 0, 0,
    255, 3, 0, 0, 88, 4, 0, 0, 53, 4, 0, 0, 18, 4, 0, 0, 37, 4, 0, 0, 47, 4, 0,
    0, 204, 5, 0, 0, 233, 3, 0, 0, 72, 4, 0, 0, 147, 3, 0, 0, 28, 4, 0, 0, 227,
    3, 0, 0, 46, 4, 0, 0, 108, 3, 0, 0, 87, 4, 0, 0, 83, 3, 0, 0, 35, 4, 0, 0,
    37, 3, 0, 0, 88, 4, 0, 0, 155, 3, 0, 0, 79, 4, 0, 0, 49, 3, 0, 0, 107, 7, 0,
    0, 80, 7, 0, 0, 208, 3, 0, 0, 73, 3, 0, 0, 103, 4, 0, 0, 188, 3, 0, 0, 135,
    4, 0, 0, 182, 3, 0, 0, 111, 30, 0, 0, 186, 3, 0, 0, 9, 5, 0, 0, 165, 3, 0,
    0, 103, 4, 0, 0, 135, 12, 0, 0, 252, 3, 0, 0, 159, 3, 0, 0, 75, 5, 0, 0, 0,
    3, 0, 0, 16, 4, 0, 0, 233, 2, 0, 0, 184, 3, 0, 0, 37, 3, 0, 0, 49, 4, 0, 0,
    228, 2, 0, 0, 245, 3, 0, 0, 37, 3, 0, 0, 240, 3, 0, 0, 28, 3, 0, 0, 228, 3,
    0, 0, 33, 4, 0, 0, 193, 44, 0, 0, 192, 52, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 208, 176, 1, 0, 0, 38, 0, 0, 0, 38, 0, 0, 248, 141, 2,
    0, 1, 38, 0, 0, 1, 38, 0, 0, 224, 42, 2, 0, 0, 39, 0, 0, 0, 38, 0, 0, 216,
    240, 1, 0, 1, 39, 0, 0, 1, 38, 0, 0, 56, 200, 1, 0, 2, 39, 0, 0, 0, 38, 0,
    0, 240, 159, 1, 0, 3, 39, 0, 0, 1, 38, 0, 0, 200, 47, 2, 0, 54, 0, 0, 0,
    232, 37, 2, 0, 12, 0, 0, 0, 8, 28, 2, 0, 106, 0, 0, 0, 128, 187, 0, 0, 120,
    0, 0, 0, 21, 0, 0, 0, 21, 0, 0, 0, 0, 154, 89, 63, 0, 0, 0, 0, 0, 0, 128,
    63, 0, 0, 128, 63, 24, 116, 0, 0, 3, 0, 0, 0, 8, 0, 0, 0, 120, 0, 0, 0, 11,
    0, 0, 0, 0, 167, 0, 0, 216, 55, 0, 0, 8, 0, 0, 0, 128, 7, 0, 0, 3, 0, 0, 0,
    184, 105, 0, 0, 128, 105, 0, 0, 72, 105, 0, 0, 16, 105, 0, 0, 80, 48, 0, 0,
    136, 1, 0, 0, 168, 162, 0, 0, 40, 164, 0, 0, 128, 163, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 255, 0, 0, 128, 0, 255, 0, 128, 0, 0, 255, 128, 255, 0, 0, 128, 0,
    255, 0, 128, 0, 0, 255, 128, 255, 0, 0, 128, 0, 255, 0, 128, 0, 0, 255, 128,
    255, 0, 0, 128, 0, 255, 0, 128, 0, 0, 255, 128, 255, 0, 0, 128, 0, 255, 0,
    128, 0, 0, 255, 128, 0, 0, 128, 63, 166, 255, 127, 63, 153, 254, 127, 63,
    216, 252, 127, 63, 99, 250, 127, 63, 58, 247, 127, 63, 94, 243, 127, 63,
    206, 238, 127, 63, 139, 233, 127, 63, 148, 227, 127, 63, 233, 220, 127, 63,
    139, 213, 127, 63, 121, 205, 127, 63, 180, 196, 127, 63, 59, 187, 127, 63,
    15, 177, 127, 63, 47, 166, 127, 63, 156, 154, 127, 63, 86, 142, 127, 63, 92,
    129, 127, 63, 175, 115, 127, 63, 78, 101, 127, 63, 58, 86, 127, 63, 116, 70,
    127, 63, 249, 53, 127, 63, 204, 36, 127, 63, 236, 18, 127, 63, 89, 0, 127,
    63, 18, 237, 126, 63, 25, 217, 126, 63, 109, 196, 126, 63, 14, 175, 126, 63,
    253, 152, 126, 63, 56, 130, 126, 63, 193, 106, 126, 63, 152, 82, 126, 63,
    188, 57, 126, 63, 46, 32, 126, 63, 237, 5, 126, 63, 250, 234, 125, 63, 85,
    207, 125, 63, 253, 178, 125, 63, 244, 149, 125, 63, 56, 120, 125, 63, 203,
    89, 125, 63, 172, 58, 125, 63, 219, 26, 125, 63, 89, 250, 124, 63, 37, 217,
    124, 63, 63, 183, 124, 63, 168, 148, 124, 63, 96, 113, 124, 63, 103, 77,
    124, 63, 189, 40, 124, 63, 97, 3, 124, 63, 85, 221, 123, 63, 152, 182, 123,
    63, 42, 143, 123, 63, 12, 103, 123, 63, 61, 62, 123, 63, 190, 20, 123, 63,
    143, 234, 122, 63, 176, 191, 122, 63, 33, 148, 122, 63, 226, 103, 122, 63,
    243, 58, 122, 63, 84, 13, 122, 63, 6, 223, 121, 63, 9, 176, 121, 63, 92,
    128, 121, 63, 0, 80, 121, 63, 246, 30, 121, 63, 60, 237, 120, 63, 212, 186,
    120, 63, 189, 135, 120, 63, 248, 83, 120, 63, 132, 31, 120, 63, 99, 234,
    119, 63, 147, 180, 119, 63, 22, 126, 119, 63, 234, 70, 119, 63, 17, 15, 119,
    63, 139, 214, 118, 63, 88, 157, 118, 63, 119, 99, 118, 63, 234, 40, 118, 63,
    176, 237, 117, 63, 201, 177, 117, 63, 54, 117, 117, 63, 246, 55, 117, 63,
    11, 250, 116, 63, 115, 187, 116, 63, 48, 124, 116, 63, 65, 60, 116, 63, 167,
    251, 115, 63, 97, 186, 115, 63, 112, 120, 115, 63, 213, 53, 115, 63, 143,
    242, 114, 63, 158, 174, 114, 63, 3, 106, 114, 63, 190, 36, 114, 63, 207,
    222, 113, 63, 54, 152, 113, 63, 244, 80, 113, 63, 8, 9, 113, 63, 115, 192,
    112, 63, 53, 119, 112, 63, 79, 45, 112, 63, 191, 226, 111, 63, 136, 151,
    111, 63, 168, 75, 111, 63, 32, 255, 110, 63, 241, 177, 110, 63, 26, 100,
    110, 63, 156, 21, 110, 63, 118, 198, 109, 63, 170, 118, 109, 63, 55, 38,
    109, 63, 30, 213, 108, 63, 94, 131, 108, 63, 249, 48, 108, 63, 237, 221,
    107, 63, 61, 138, 107, 63, 231, 53, 107, 63, 235, 224, 106, 63, 75, 139,
    106, 63, 7, 53, 106, 63, 29, 222, 105, 63, 144, 134, 105, 63, 95, 46, 105,
    63, 138, 213, 104, 63, 18, 124, 104, 63, 247, 33, 104, 63, 57, 199, 103, 63,
    216, 107, 103, 63, 212, 15, 103, 63, 47, 179, 102, 63, 231, 85, 102, 63,
    254, 247, 101, 63, 116, 153, 101, 63, 72, 58, 101, 63, 123, 218, 100, 63,
    14, 122, 100, 63, 1, 25, 100, 63, 83, 183, 99, 63, 6, 85, 99, 63, 25, 242,
    98, 63, 141, 142, 98, 63, 97, 42, 98, 63, 151, 197, 97, 63, 47, 96, 97, 63,
    40, 250, 96, 63, 132, 147, 96, 63, 66, 44, 96, 63, 99, 196, 95, 63, 230, 91,
    95, 63, 205, 242, 94, 63, 23, 137, 94, 63, 197, 30, 94, 63, 215, 179, 93,
    63, 78, 72, 93, 63, 41, 220, 92, 63, 106, 111, 92, 63, 15, 2, 92, 63, 26,
    148, 91, 63, 139, 37, 91, 63, 98, 182, 90, 63, 160, 70, 90, 63, 69, 214, 89,
    63, 80, 101, 89, 63, 196, 243, 88, 63, 158, 129, 88, 63, 225, 14, 88, 63,
    140, 155, 87, 63, 160, 39, 87, 63, 29, 179, 86, 63, 3, 62, 86, 63, 84, 200,
    85, 63, 13, 82, 85, 63, 49, 219, 84, 63, 192, 99, 84, 63, 185, 235, 83, 63,
    30, 115, 83, 63, 239, 249, 82, 63, 43, 128, 82, 63, 212, 5, 82, 63, 234,
    138, 81, 63, 108, 15, 81, 63, 91, 147, 80, 63, 184, 22, 80, 63, 132, 153,
    79, 63, 189, 27, 79, 63, 101, 157, 78, 63, 123, 30, 78, 63, 2, 159, 77, 63,
    248, 30, 77, 63, 94, 158, 76, 63, 53, 29, 76, 63, 124, 155, 75, 63, 53, 25,
    75, 63, 94, 150, 74, 63, 250, 18, 74, 63, 7, 143, 73, 63, 135, 10, 73, 63,
    123, 133, 72, 63, 225, 255, 71, 63, 187, 121, 71, 63, 9, 243, 70, 63, 204,
    107, 70, 63, 3, 228, 69, 63, 175, 91, 69, 63, 209, 210, 68, 63, 105, 73, 68,
    63, 119, 191, 67, 63, 252, 52, 67, 63, 247, 169, 66, 63, 106, 30, 66, 63,
    85, 146, 65, 63, 184, 5, 65, 63, 146, 120, 64, 63, 231, 234, 63, 63, 181,
    92, 63, 63, 251, 205, 62, 63, 189, 62, 62, 63, 249, 174, 61, 63, 176, 30,
    61, 63, 225, 141, 60, 63, 143, 252, 59, 63, 185, 106, 59, 63, 95, 216, 58,
    63, 129, 69, 58, 63, 35, 178, 57, 63, 65, 30, 57, 63, 220, 137, 56, 63, 247,
    244, 55, 63, 144, 95, 55, 63, 169, 201, 54, 63, 65, 51, 54, 63, 90, 156, 53,
    63, 243, 4, 53, 63, 13, 109, 52, 63, 168, 212, 51, 63, 197, 59, 51, 63, 100,
    162, 50, 63, 135, 8, 50, 63, 45, 110, 49, 63, 85, 211, 48, 63, 1, 56, 48,
    63, 50, 156, 47, 63, 232, 255, 46, 63, 34, 99, 46, 63, 226, 197, 45, 63, 41,
    40, 45, 63, 246, 137, 44, 63, 73, 235, 43, 63, 36, 76, 43, 63, 136, 172, 42,
    63, 114, 12, 42, 63, 230, 107, 41, 63, 227, 202, 40, 63, 106, 41, 40, 63,
    121, 135, 39, 63, 20, 229, 38, 63, 58, 66, 38, 63, 235, 158, 37, 63, 39,
    251, 36, 63, 241, 86, 36, 63, 71, 178, 35, 63, 41, 13, 35, 63, 153, 103, 34,
    63, 151, 193, 33, 63, 36, 27, 33, 63, 63, 116, 32, 63, 235, 204, 31, 63, 37,
    37, 31, 63, 241, 124, 30, 63, 76, 212, 29, 63, 58, 43, 29, 63, 184, 129, 28,
    63, 201, 215, 27, 63, 110, 45, 27, 63, 164, 130, 26, 63, 111, 215, 25, 63,
    205, 43, 25, 63, 192, 127, 24, 63, 71, 211, 23, 63, 100, 38, 23, 63, 24,
    121, 22, 63, 98, 203, 21, 63, 66, 29, 21, 63, 185, 110, 20, 63, 201, 191,
    19, 63, 113, 16, 19, 63, 178, 96, 18, 63, 140, 176, 17, 63, 0, 0, 17, 63,
    13, 79, 16, 63, 182, 157, 15, 63, 249, 235, 14, 63, 217, 57, 14, 63, 85,
    135, 13, 63, 110, 212, 12, 63, 36, 33, 12, 63, 118, 109, 11, 63, 104, 185,
    10, 63, 247, 4, 10, 63, 38, 80, 9, 63, 246, 154, 8, 63, 100, 229, 7, 63,
    117, 47, 7, 63, 37, 121, 6, 63, 119, 194, 5, 63, 106, 11, 5, 63, 2, 84, 4,
    63, 62, 156, 3, 63, 27, 228, 2, 63, 156, 43, 2, 63, 194, 114, 1, 63, 143,
    185, 0, 63, 255, 255, 255, 62, 45, 140, 254, 62, 172, 23, 253, 62, 117, 162,
    251, 62, 142, 44, 250, 62, 251, 181, 248, 62, 185, 62, 247, 62, 198, 198,
    245, 62, 39, 78, 244, 62, 220, 212, 242, 62, 235, 90, 241, 62, 76, 224, 239,
    62, 5, 101, 238, 62, 23, 233, 236, 62, 134, 108, 235, 62, 76, 239, 233, 62,
    111, 113, 232, 62, 237, 242, 230, 62, 206, 115, 229, 62, 10, 244, 227, 62,
    169, 115, 226, 62, 170, 242, 224, 62, 9, 113, 223, 62, 203, 238, 221, 62,
    241, 107, 220, 62, 129, 232, 218, 62, 115, 100, 217, 62, 204, 223, 215, 62,
    142, 90, 214, 62, 190, 212, 212, 62, 84, 78, 211, 62, 86, 199, 209, 62, 200,
    63, 208, 62, 168, 183, 206, 62, 244, 46, 205, 62, 175, 165, 203, 62, 223,
    27, 202, 62, 126, 145, 200, 62, 144, 6, 199, 62, 22, 123, 197, 62, 21, 239,
    195, 62, 135, 98, 194, 62, 113, 213, 192, 62, 215, 71, 191, 62, 179, 185,
    189, 62, 10, 43, 188, 62, 221, 155, 186, 62, 52, 12, 185, 62, 2, 124, 183,
    62, 79, 235, 181, 62, 29, 90, 180, 62, 111, 200, 178, 62, 65, 54, 177, 62,
    150, 163, 175, 62, 115, 16, 174, 62, 211, 124, 172, 62, 186, 232, 170, 62,
    40, 84, 169, 62, 36, 191, 167, 62, 166, 41, 166, 62, 179, 147, 164, 62, 81,
    253, 162, 62, 124, 102, 161, 62, 51, 207, 159, 62, 121, 55, 158, 62, 83,
    159, 156, 62, 189, 6, 155, 62, 185, 109, 153, 62, 74, 212, 151, 62, 116, 58,
    150, 62, 48, 160, 148, 62, 132, 5, 147, 62, 113, 106, 145, 62, 252, 206,
    143, 62, 31, 51, 142, 62, 225, 150, 140, 62, 64, 250, 138, 62, 58, 93, 137,
    62, 212, 191, 135, 62, 15, 34, 134, 62, 239, 131, 132, 62, 110, 229, 130,
    62, 146, 70, 129, 62, 180, 78, 127, 62, 154, 15, 124, 62, 200, 207, 120, 62,
    70, 143, 117, 62, 25, 78, 114, 62, 73, 12, 111, 62, 209, 201, 107, 62, 172,
    134, 104, 62, 235, 66, 101, 62, 130, 254, 97, 62, 123, 185, 94, 62, 215,
    115, 91, 62, 161, 45, 88, 62, 203, 230, 84, 62, 96, 159, 81, 62, 97, 87, 78,
    62, 218, 14, 75, 62, 188, 197, 71, 62, 19, 124, 68, 62, 231, 49, 65, 62, 51,
    231, 61, 62, 243, 155, 58, 62, 47, 80, 55, 62, 243, 3, 52, 62, 48, 183, 48,
    62, 241, 105, 45, 62, 57, 28, 42, 62, 17, 206, 38, 62, 108, 127, 35, 62, 85,
    48, 32, 62, 213, 224, 28, 62, 222, 144, 25, 62, 124, 64, 22, 62, 185, 239,
    18, 62, 143, 158, 15, 62, 247, 76, 12, 62, 253, 250, 8, 62, 164, 168, 5, 62,
    244, 85, 2, 62, 194, 5, 254, 61, 234, 94, 247, 61, 115, 183, 240, 61, 68,
    15, 234, 61, 112, 102, 227, 61, 253, 188, 220, 61, 255, 18, 214, 61, 91,
    104, 207, 61, 53, 189, 200, 61, 115, 17, 194, 61, 56, 101, 187, 61, 105,
    184, 180, 61, 28, 11, 174, 61, 101, 93, 167, 61, 40, 175, 160, 61, 122, 0,
    154, 61, 97, 81, 147, 61, 240, 161, 140, 61, 12, 242, 133, 61, 148, 131,
    126, 61, 94, 34, 113, 61, 158, 192, 99, 61, 63, 94, 86, 61, 41, 251, 72, 61,
    166, 151, 59, 61, 128, 51, 46, 61, 223, 206, 32, 61, 205, 105, 19, 61, 116,
    4, 6, 61, 59, 61, 241, 60, 227, 112, 214, 60, 245, 163, 187, 60, 195, 214,
    160, 60, 225, 8, 134, 60, 64, 117, 86, 60, 40, 216, 32, 60, 62, 119, 214,
    59, 43, 119, 86, 59, 46, 189, 59, 179, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 8, 0, 8, 0, 8, 0, 16, 0, 16, 0, 16, 0, 21, 0,
    21, 0, 24, 0, 29, 0, 34, 0, 36, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 0,
    0, 0, 0, 120, 198, 2, 0, 9, 0, 0, 0, 80, 198, 2, 0, 13, 0, 0, 0, 48, 81, 2,
    0, 27, 0, 0, 0, 240, 3, 2, 0, 32, 0, 0, 0, 200, 218, 1, 0, 127, 0, 0, 0,
    120, 176, 1, 0, 132, 0, 0, 0, 96, 139, 1, 0, 133, 0, 0, 0, 224, 229, 0, 0,
    134, 0, 0, 0, 56, 203, 0, 0, 135, 0, 0, 0, 208, 181, 0, 0, 136, 0, 0, 0,
    152, 213, 2, 0, 137, 0, 0, 0, 48, 198, 2, 0, 138, 0, 0, 0, 216, 179, 2, 0,
    128, 0, 0, 0, 24, 166, 2, 0, 129, 0, 0, 0, 168, 153, 2, 0, 145, 0, 0, 0,
    176, 141, 2, 0, 146, 0, 0, 0, 24, 128, 2, 0, 147, 0, 0, 0, 0, 117, 2, 0,
    148, 0, 0, 0, 96, 106, 2, 0, 149, 0, 0, 0, 96, 96, 2, 0, 150, 0, 0, 0, 152,
    88, 2, 0, 151, 0, 0, 0, 40, 81, 2, 0, 152, 0, 0, 0, 16, 72, 2, 0, 153, 0, 0,
    0, 248, 61, 2, 0, 154, 0, 0, 0, 176, 52, 2, 0, 155, 0, 0, 0, 128, 42, 2, 0,
    156, 0, 0, 0, 112, 33, 2, 0, 157, 0, 0, 0, 192, 25, 2, 0, 158, 0, 0, 0, 208,
    19, 2, 0, 159, 0, 0, 0, 8, 14, 2, 0, 139, 0, 0, 0, 0, 8, 2, 0, 140, 0, 0, 0,
    232, 3, 2, 0, 141, 0, 0, 0, 72, 255, 1, 0, 142, 0, 0, 0, 8, 250, 1, 0, 143,
    0, 0, 0, 152, 245, 1, 0, 144, 0, 0, 0, 168, 240, 1, 0, 178, 0, 0, 0, 112,
    235, 1, 0, 179, 0, 0, 0, 184, 231, 1, 0, 180, 0, 0, 0, 104, 228, 1, 0, 181,
    0, 0, 0, 48, 225, 1, 0, 182, 0, 0, 0, 224, 221, 1, 0, 184, 0, 0, 0, 184,
    218, 1, 0, 183, 0, 0, 0, 48, 214, 1, 0, 185, 0, 0, 0, 192, 208, 1, 0, 186,
    0, 0, 0, 0, 204, 1, 0, 187, 0, 0, 0, 240, 199, 1, 0, 188, 0, 0, 0, 200, 194,
    1, 0, 189, 0, 0, 0, 200, 189, 1, 0, 190, 0, 0, 0, 224, 185, 1, 0, 191, 0, 0,
    0, 48, 182, 1, 0, 192, 0, 0, 0, 64, 179, 1, 0, 193, 0, 0, 0, 112, 176, 1, 0,
    194, 0, 0, 0, 144, 171, 1, 0, 195, 0, 0, 0, 216, 166, 1, 0, 196, 0, 0, 0,
    104, 163, 1, 0, 197, 0, 0, 0, 184, 159, 1, 0, 198, 0, 0, 0, 8, 156, 1, 0,
    199, 0, 0, 0, 224, 152, 1, 0, 200, 0, 0, 0, 16, 149, 1, 0, 201, 0, 0, 0,
    232, 145, 1, 0, 202, 0, 0, 0, 136, 142, 1, 0, 203, 0, 0, 0, 88, 139, 1, 0,
    204, 0, 0, 0, 200, 134, 1, 0, 205, 0, 0, 0, 128, 129, 1, 0, 206, 0, 0, 0,
    40, 250, 0, 0, 207, 0, 0, 0, 168, 246, 0, 0, 208, 0, 0, 0, 224, 242, 0, 0,
    209, 0, 0, 0, 192, 239, 0, 0, 210, 0, 0, 0, 248, 236, 0, 0, 211, 0, 0, 0,
    80, 234, 0, 0, 212, 0, 0, 0, 184, 231, 0, 0, 213, 0, 0, 0, 216, 229, 0, 0,
    214, 0, 0, 0, 136, 226, 0, 0, 215, 0, 0, 0, 96, 222, 0, 0, 216, 0, 0, 0,
    184, 219, 0, 0, 217, 0, 0, 0, 216, 216, 0, 0, 218, 0, 0, 0, 96, 213, 0, 0,
    219, 0, 0, 0, 32, 211, 0, 0, 220, 0, 0, 0, 24, 209, 0, 0, 221, 0, 0, 0, 120,
    207, 0, 0, 222, 0, 0, 0, 80, 205, 0, 0, 223, 0, 0, 0, 136, 203, 0, 0, 224,
    0, 0, 0, 40, 201, 0, 0, 225, 0, 0, 0, 8, 198, 0, 0, 226, 0, 0, 0, 248, 194,
    0, 0, 227, 0, 0, 0, 200, 191, 0, 0, 228, 0, 0, 0, 184, 189, 0, 0, 229, 0, 0,
    0, 152, 187, 0, 0, 230, 0, 0, 0, 56, 186, 0, 0, 231, 0, 0, 0, 160, 184, 0,
    0, 232, 0, 0, 0, 48, 183, 0, 0, 160, 0, 0, 0, 0, 182, 0, 0, 161, 0, 0, 0,
    176, 180, 0, 0, 162, 0, 0, 0, 80, 178, 0, 0, 163, 0, 0, 0, 56, 176, 0, 0,
    164, 0, 0, 0, 152, 174, 0, 0, 165, 0, 0, 0, 72, 173, 0, 0, 166, 0, 0, 0,
    112, 171, 0, 0, 167, 0, 0, 0, 56, 170, 0, 0, 168, 0, 0, 0, 0, 169, 0, 0,
    169, 0, 0, 0, 16, 215, 2, 0, 170, 0, 0, 0, 248, 213, 2, 0, 171, 0, 0, 0, 56,
    212, 2, 0, 172, 0, 0, 0, 200, 209, 2, 0, 173, 0, 0, 0, 120, 207, 2, 0, 174,
    0, 0, 0, 176, 205, 2, 0, 175, 0, 0, 0, 120, 204, 2, 0, 176, 0, 0, 0, 216,
    202, 2, 0, 177, 0, 0, 0, 152, 201, 2, 0, 131, 0, 0, 0, 120, 200, 2, 0, 59,
    0, 0, 0, 160, 199, 2, 0, 233, 0, 0, 0, 88, 198, 2, 0, 234, 0, 0, 0, 208,
    196, 2, 0, 235, 0, 0, 0, 224, 194, 2, 0, 236, 0, 0, 0, 168, 192, 2, 0, 237,
    0, 0, 0, 24, 191, 2, 0, 238, 0, 0, 0, 8, 189, 2, 0, 239, 0, 0, 0, 24, 187,
    2, 0, 240, 0, 0, 0, 120, 185, 2, 0, 241, 0, 0, 0, 224, 183, 2, 0, 242, 0, 0,
    0, 232, 181, 2, 0, 243, 0, 0, 0, 64, 180, 2, 0, 244, 0, 0, 0, 144, 178, 2,
    0, 245, 0, 0, 0, 136, 176, 2, 0, 246, 0, 0, 0, 184, 174, 2, 0, 247, 0, 0, 0,
    48, 173, 2, 0, 248, 0, 0, 0, 184, 171, 2, 0, 249, 0, 0, 0, 192, 169, 2, 0,
    250, 0, 0, 0, 0, 169, 2, 0, 251, 0, 0, 0, 72, 168, 2, 0, 252, 0, 0, 0, 32,
    167, 2, 0, 253, 0, 0, 0, 96, 166, 2, 0, 254, 0, 0, 0, 192, 164, 2, 0, 255,
    0, 0, 0, 0, 163, 2, 0, 0, 1, 0, 0, 232, 160, 2, 0, 1, 1, 0, 0, 56, 159, 2,
    0, 2, 1, 0, 0, 0, 158, 2, 0, 3, 1, 0, 0, 192, 156, 2, 0, 4, 1, 0, 0, 56,
    156, 2, 0, 5, 1, 0, 0, 88, 155, 2, 0, 6, 1, 0, 0, 96, 154, 2, 0, 7, 1, 0, 0,
    216, 153, 2, 0, 8, 1, 0, 0, 144, 152, 2, 0, 9, 1, 0, 0, 192, 150, 2, 0, 10,
    1, 0, 0, 48, 149, 2, 0, 11, 1, 0, 0, 0, 148, 2, 0, 12, 1, 0, 0, 224, 146, 2,
    0, 13, 1, 0, 0, 152, 145, 2, 0, 14, 1, 0, 0, 112, 144, 2, 0, 15, 1, 0, 0,
    152, 143, 2, 0, 16, 1, 0, 0, 120, 142, 2, 0, 17, 1, 0, 0, 8, 142, 2, 0, 18,
    1, 0, 0, 160, 140, 2, 0, 19, 1, 0, 0, 168, 137, 2, 0, 20, 1, 0, 0, 168, 135,
    2, 0, 21, 1, 0, 0, 112, 134, 2, 0, 22, 1, 0, 0, 144, 133, 2, 0, 23, 1, 0, 0,
    56, 132, 2, 0, 24, 1, 0, 0, 208, 130, 2, 0, 25, 1, 0, 0, 152, 129, 2, 0, 26,
    1, 0, 0, 0, 129, 2, 0, 27, 1, 0, 0, 88, 128, 2, 0, 28, 1, 0, 0, 120, 126, 2,
    0, 29, 1, 0, 0, 32, 125, 2, 0, 30, 1, 0, 0, 72, 123, 2, 0, 31, 1, 0, 0, 72,
    122, 2, 0, 32, 1, 0, 0, 104, 121, 2, 0, 33, 1, 0, 0, 96, 120, 2, 0, 34, 1,
    0, 0, 88, 119, 2, 0, 35, 1, 0, 0, 168, 118, 2, 0, 36, 1, 0, 0, 192, 117, 2,
    0, 37, 1, 0, 0, 16, 117, 2, 0, 38, 1, 0, 0, 176, 115, 2, 0, 39, 1, 0, 0, 88,
    114, 2, 0, 40, 1, 0, 0, 152, 112, 2, 0, 41, 1, 0, 0, 32, 111, 2, 0, 42, 1,
    0, 0, 200, 109, 2, 0, 43, 1, 0, 0, 128, 108, 2, 0, 44, 1, 0, 0, 0, 108, 2,
    0, 45, 1, 0, 0, 104, 107, 2, 0, 46, 1, 0, 0, 224, 106, 2, 0, 47, 1, 0, 0,
    136, 106, 2, 0, 48, 1, 0, 0, 152, 105, 2, 0, 49, 1, 0, 0, 248, 103, 2, 0,
    50, 1, 0, 0, 112, 102, 2, 0, 51, 1, 0, 0, 80, 101, 2, 0, 52, 1, 0, 0, 120,
    100, 2, 0, 53, 1, 0, 0, 56, 99, 2, 0, 54, 1, 0, 0, 128, 98, 2, 0, 55, 1, 0,
    0, 152, 97, 2, 0, 56, 1, 0, 0, 56, 97, 2, 0, 57, 1, 0, 0, 136, 96, 2, 0, 58,
    1, 0, 0, 168, 95, 2, 0, 59, 1, 0, 0, 24, 94, 2, 0, 60, 1, 0, 0, 240, 92, 2,
    0, 61, 1, 0, 0, 24, 92, 2, 0, 62, 1, 0, 0, 160, 91, 2, 0, 63, 1, 0, 0, 200,
    90, 2, 0, 64, 1, 0, 0, 16, 90, 2, 0, 65, 1, 0, 0, 160, 89, 2, 0, 66, 1, 0,
    0, 8, 89, 2, 0, 67, 1, 0, 0, 200, 88, 2, 0, 68, 1, 0, 0, 192, 87, 2, 0, 69,
    1, 0, 0, 112, 86, 2, 0, 70, 1, 0, 0, 64, 85, 2, 0, 71, 1, 0, 0, 144, 84, 2,
    0, 72, 1, 0, 0, 240, 83, 2, 0, 73, 1, 0, 0, 80, 83, 2, 0, 74, 1, 0, 0, 216,
    82, 2, 0, 75, 1, 0, 0, 112, 82, 2, 0, 76, 1, 0, 0, 200, 81, 2, 0, 77, 1, 0,
    0, 104, 81, 2, 0, 78, 1, 0, 0, 96, 80, 2, 0, 79, 1, 0, 0, 160, 78, 2, 0, 80,
    1, 0, 0, 40, 77, 2, 0, 81, 1, 0, 0, 8, 76, 2, 0, 130, 0, 0, 0, 88, 75, 2, 0,
    82, 1, 0, 0, 88, 74, 2, 0, 83, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 1, 0, 0, 0, 3, 0, 0, 0, 7, 0, 0, 0, 15, 0, 0, 0, 31, 0, 0, 0,
    63, 0, 0, 0, 127, 0, 0, 0, 255, 0, 0, 0, 255, 1, 0, 0, 255, 3, 0, 0, 255, 7,
    0, 0, 255, 15, 0, 0, 255, 31, 0, 0, 255, 63, 0, 0, 255, 127, 0, 0, 255, 255,
    0, 0, 255, 255, 1, 0, 255, 255, 3, 0, 255, 255, 7, 0, 255, 255, 15, 0, 255,
    255, 31, 0, 255, 255, 63, 0, 255, 255, 127, 0, 255, 255, 255, 0, 255, 255,
    255, 1, 255, 255, 255, 3, 255, 255, 255, 7, 255, 255, 255, 15, 255, 255,
    255, 31, 255, 255, 255, 63, 255, 255, 255, 127, 255, 255, 255, 255, 0, 0, 0,
    0, 1, 0, 0, 0, 5, 0, 0, 0, 6, 0, 0, 0, 14, 0, 0, 0, 15, 0, 0, 0, 27, 0, 0,
    0, 2, 0, 0, 0, 4, 0, 0, 0, 7, 0, 0, 0, 13, 0, 0, 0, 16, 0, 0, 0, 26, 0, 0,
    0, 28, 0, 0, 0, 3, 0, 0, 0, 8, 0, 0, 0, 12, 0, 0, 0, 17, 0, 0, 0, 25, 0, 0,
    0, 29, 0, 0, 0, 38, 0, 0, 0, 9, 0, 0, 0, 11, 0, 0, 0, 18, 0, 0, 0, 24, 0, 0,
    0, 30, 0, 0, 0, 37, 0, 0, 0, 39, 0, 0, 0, 10, 0, 0, 0, 19, 0, 0, 0, 23, 0,
    0, 0, 31, 0, 0, 0, 36, 0, 0, 0, 40, 0, 0, 0, 45, 0, 0, 0, 20, 0, 0, 0, 22,
    0, 0, 0, 32, 0, 0, 0, 35, 0, 0, 0, 41, 0, 0, 0, 44, 0, 0, 0, 46, 0, 0, 0,
    21, 0, 0, 0, 33, 0, 0, 0, 34, 0, 0, 0, 42, 0, 0, 0, 43, 0, 0, 0, 47, 0, 0,
    0, 48, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 5, 0, 0, 0, 6, 0, 0, 0,
    14, 0, 0, 0, 15, 0, 0, 0, 2, 0, 0, 0, 4, 0, 0, 0, 7, 0, 0, 0, 13, 0, 0, 0,
    16, 0, 0, 0, 25, 0, 0, 0, 3, 0, 0, 0, 8, 0, 0, 0, 12, 0, 0, 0, 17, 0, 0, 0,
    24, 0, 0, 0, 26, 0, 0, 0, 9, 0, 0, 0, 11, 0, 0, 0, 18, 0, 0, 0, 23, 0, 0, 0,
    27, 0, 0, 0, 32, 0, 0, 0, 10, 0, 0, 0, 19, 0, 0, 0, 22, 0, 0, 0, 28, 0, 0,
    0, 31, 0, 0, 0, 33, 0, 0, 0, 20, 0, 0, 0, 21, 0, 0, 0, 29, 0, 0, 0, 30, 0,
    0, 0, 34, 0, 0, 0, 35, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 5, 0, 0, 0, 6, 0, 0,
    0, 14, 0, 0, 0, 2, 0, 0, 0, 4, 0, 0, 0, 7, 0, 0, 0, 13, 0, 0, 0, 15, 0, 0,
    0, 3, 0, 0, 0, 8, 0, 0, 0, 12, 0, 0, 0, 16, 0, 0, 0, 21, 0, 0, 0, 9, 0, 0,
    0, 11, 0, 0, 0, 17, 0, 0, 0, 20, 0, 0, 0, 22, 0, 0, 0, 10, 0, 0, 0, 18, 0,
    0, 0, 19, 0, 0, 0, 23, 0, 0, 0, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
    0, 0, 5, 0, 0, 0, 6, 0, 0, 0, 2, 0, 0, 0, 4, 0, 0, 0, 7, 0, 0, 0, 12, 0, 0,
    0, 3, 0, 0, 0, 8, 0, 0, 0, 11, 0, 0, 0, 13, 0, 0, 0, 9, 0, 0, 0, 10, 0, 0,
    0, 14, 0, 0, 0, 15, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 5, 0, 0, 0, 2, 0, 0, 0,
    4, 0, 0, 0, 6, 0, 0, 0, 3, 0, 0, 0, 7, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 5, 0,
    0, 0, 6, 0, 0, 0, 14, 0, 0, 0, 15, 0, 0, 0, 27, 0, 0, 0, 28, 0, 0, 0, 2, 0,
    0, 0, 4, 0, 0, 0, 7, 0, 0, 0, 13, 0, 0, 0, 16, 0, 0, 0, 26, 0, 0, 0, 29, 0,
    0, 0, 42, 0, 0, 0, 3, 0, 0, 0, 8, 0, 0, 0, 12, 0, 0, 0, 17, 0, 0, 0, 25, 0,
    0, 0, 30, 0, 0, 0, 41, 0, 0, 0, 43, 0, 0, 0, 9, 0, 0, 0, 11, 0, 0, 0, 18, 0,
    0, 0, 24, 0, 0, 0, 31, 0, 0, 0, 40, 0, 0, 0, 44, 0, 0, 0, 53, 0, 0, 0, 10,
    0, 0, 0, 19, 0, 0, 0, 23, 0, 0, 0, 32, 0, 0, 0, 39, 0, 0, 0, 45, 0, 0, 0,
    52, 0, 0, 0, 54, 0, 0, 0, 20, 0, 0, 0, 22, 0, 0, 0, 33, 0, 0, 0, 38, 0, 0,
    0, 46, 0, 0, 0, 51, 0, 0, 0, 55, 0, 0, 0, 60, 0, 0, 0, 21, 0, 0, 0, 34, 0,
    0, 0, 37, 0, 0, 0, 47, 0, 0, 0, 50, 0, 0, 0, 56, 0, 0, 0, 59, 0, 0, 0, 61,
    0, 0, 0, 35, 0, 0, 0, 36, 0, 0, 0, 48, 0, 0, 0, 49, 0, 0, 0, 57, 0, 0, 0,
    58, 0, 0, 0, 62, 0, 0, 0, 63, 0, 0, 0, 104, 249, 0, 0, 0, 123, 2, 0, 56, 29,
    2, 0, 144, 233, 1, 0, 216, 191, 1, 0, 192, 154, 1, 0, 120, 241, 0, 0, 248,
    211, 0, 0, 184, 188, 0, 0, 56, 172, 0, 0, 184, 203, 2, 0, 88, 188, 2, 0,
    232, 170, 2, 0, 56, 157, 2, 0, 48, 146, 2, 0, 248, 132, 2, 0, 200, 120, 2,
    0, 16, 109, 2, 0, 152, 99, 2, 0, 64, 91, 2, 0, 176, 83, 2, 0, 240, 74, 2, 0,
    40, 66, 2, 0, 0, 56, 2, 0, 176, 46, 2, 0, 104, 37, 2, 0, 120, 27, 2, 0, 16,
    21, 2, 0, 128, 15, 2, 0, 32, 9, 2, 0, 184, 4, 2, 0, 40, 1, 2, 0, 128, 251,
    1, 0, 96, 246, 1, 0, 168, 242, 1, 0, 112, 237, 1, 0, 104, 232, 1, 0, 224,
    228, 1, 0, 144, 225, 1, 0, 96, 222, 1, 0, 40, 219, 1, 0, 152, 215, 1, 0,
    192, 210, 1, 0, 104, 205, 1, 0, 168, 201, 1, 0, 232, 196, 1, 0, 224, 190, 1,
    0, 168, 186, 1, 0, 48, 183, 1, 0, 232, 179, 1, 0, 16, 177, 1, 0, 216, 173,
    1, 0, 144, 168, 1, 0, 80, 164, 1, 0, 24, 161, 1, 0, 72, 157, 1, 0, 24, 154,
    1, 0, 80, 150, 1, 0, 144, 146, 1, 0, 176, 143, 1, 0, 0, 140, 1, 0, 64, 136,
    1, 0, 248, 131, 1, 0, 0, 251, 0, 0, 56, 248, 0, 0, 16, 244, 0, 0, 168, 240,
    0, 0, 200, 237, 0, 0, 160, 234, 0, 0, 112, 232, 0, 0, 56, 230, 0, 0, 192,
    227, 0, 0, 64, 224, 0, 0, 128, 220, 0, 0, 200, 217, 0, 0, 40, 214, 0, 0, 80,
    211, 0, 0, 112, 209, 0, 0, 152, 207, 0, 0, 136, 205, 0, 0, 160, 203, 0, 0,
    160, 201, 0, 0, 128, 198, 0, 0, 80, 195, 0, 0, 192, 192, 0, 0, 32, 190, 0,
    0, 216, 187, 0, 0, 120, 186, 0, 0, 184, 184, 0, 0, 96, 183, 0, 0, 40, 182,
    0, 0, 24, 181, 0, 0, 0, 179, 0, 0, 152, 176, 0, 0, 64, 175, 0, 0, 152, 173,
    0, 0, 200, 171, 0, 0, 112, 170, 0, 0, 64, 169, 0, 0, 8, 168, 0, 0, 16, 214,
    2, 0, 176, 212, 2, 0, 128, 210, 2, 0, 224, 207, 2, 0, 128, 206, 2, 0, 184,
    204, 2, 0, 48, 203, 2, 0, 216, 201, 2, 0, 168, 200, 2, 0, 216, 199, 2, 0,
    152, 198, 2, 0, 104, 197, 2, 0, 144, 195, 2, 0, 16, 193, 2, 0, 184, 191, 2,
    0, 104, 189, 2, 0, 88, 187, 2, 0, 184, 185, 2, 0, 40, 184, 2, 0, 40, 182, 2,
    0, 112, 180, 2, 0, 248, 178, 2, 0, 48, 177, 2, 0, 0, 175, 2, 0, 208, 173, 2,
    0, 40, 172, 2, 0, 248, 169, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 8, 0,
    0, 0, 16, 0, 0, 0, 9, 0, 0, 0, 2, 0, 0, 0, 3, 0, 0, 0, 10, 0, 0, 0, 17, 0,
    0, 0, 24, 0, 0, 0, 32, 0, 0, 0, 25, 0, 0, 0, 18, 0, 0, 0, 11, 0, 0, 0, 4, 0,
    0, 0, 5, 0, 0, 0, 12, 0, 0, 0, 19, 0, 0, 0, 26, 0, 0, 0, 33, 0, 0, 0, 40, 0,
    0, 0, 48, 0, 0, 0, 41, 0, 0, 0, 34, 0, 0, 0, 27, 0, 0, 0, 20, 0, 0, 0, 13,
    0, 0, 0, 6, 0, 0, 0, 14, 0, 0, 0, 21, 0, 0, 0, 28, 0, 0, 0, 35, 0, 0, 0, 42,
    0, 0, 0, 49, 0, 0, 0, 50, 0, 0, 0, 43, 0, 0, 0, 36, 0, 0, 0, 29, 0, 0, 0,
    22, 0, 0, 0, 30, 0, 0, 0, 37, 0, 0, 0, 44, 0, 0, 0, 51, 0, 0, 0, 52, 0, 0,
    0, 45, 0, 0, 0, 38, 0, 0, 0, 46, 0, 0, 0, 53, 0, 0, 0, 54, 0, 0, 0, 63, 0,
    0, 0, 63, 0, 0, 0, 63, 0, 0, 0, 63, 0, 0, 0, 63, 0, 0, 0, 63, 0, 0, 0, 63,
    0, 0, 0, 63, 0, 0, 0, 63, 0, 0, 0, 63, 0, 0, 0, 63, 0, 0, 0, 63, 0, 0, 0,
    63, 0, 0, 0, 63, 0, 0, 0, 63, 0, 0, 0, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    1, 0, 0, 0, 8, 0, 0, 0, 16, 0, 0, 0, 9, 0, 0, 0, 2, 0, 0, 0, 3, 0, 0, 0, 10,
    0, 0, 0, 17, 0, 0, 0, 24, 0, 0, 0, 32, 0, 0, 0, 25, 0, 0, 0, 18, 0, 0, 0,
    11, 0, 0, 0, 4, 0, 0, 0, 5, 0, 0, 0, 12, 0, 0, 0, 19, 0, 0, 0, 26, 0, 0, 0,
    33, 0, 0, 0, 40, 0, 0, 0, 41, 0, 0, 0, 34, 0, 0, 0, 27, 0, 0, 0, 20, 0, 0,
    0, 13, 0, 0, 0, 21, 0, 0, 0, 28, 0, 0, 0, 35, 0, 0, 0, 42, 0, 0, 0, 43, 0,
    0, 0, 36, 0, 0, 0, 29, 0, 0, 0, 37, 0, 0, 0, 44, 0, 0, 0, 45, 0, 0, 0, 63,
    0, 0, 0, 63, 0, 0, 0, 63, 0, 0, 0, 63, 0, 0, 0, 63, 0, 0, 0, 63, 0, 0, 0,
    63, 0, 0, 0, 63, 0, 0, 0, 63, 0, 0, 0, 63, 0, 0, 0, 63, 0, 0, 0, 63, 0, 0,
    0, 63, 0, 0, 0, 63, 0, 0, 0, 63, 0, 0, 0, 63, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
    0, 8, 0, 0, 0, 16, 0, 0, 0, 9, 0, 0, 0, 2, 0, 0, 0, 3, 0, 0, 0, 10, 0, 0, 0,
    17, 0, 0, 0, 24, 0, 0, 0, 32, 0, 0, 0, 25, 0, 0, 0, 18, 0, 0, 0, 11, 0, 0,
    0, 4, 0, 0, 0, 12, 0, 0, 0, 19, 0, 0, 0, 26, 0, 0, 0, 33, 0, 0, 0, 34, 0, 0,
    0, 27, 0, 0, 0, 20, 0, 0, 0, 28, 0, 0, 0, 35, 0, 0, 0, 36, 0, 0, 0, 63, 0,
    0, 0, 63, 0, 0, 0, 63, 0, 0, 0, 63, 0, 0, 0, 63, 0, 0, 0, 63, 0, 0, 0, 63,
    0, 0, 0, 63, 0, 0, 0, 63, 0, 0, 0, 63, 0, 0, 0, 63, 0, 0, 0, 63, 0, 0, 0,
    63, 0, 0, 0, 63, 0, 0, 0, 63, 0, 0, 0, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    1, 0, 0, 0, 8, 0, 0, 0, 16, 0, 0, 0, 9, 0, 0, 0, 2, 0, 0, 0, 3, 0, 0, 0, 10,
    0, 0, 0, 17, 0, 0, 0, 24, 0, 0, 0, 25, 0, 0, 0, 18, 0, 0, 0, 11, 0, 0, 0,
    19, 0, 0, 0, 26, 0, 0, 0, 27, 0, 0, 0, 63, 0, 0, 0, 63, 0, 0, 0, 63, 0, 0,
    0, 63, 0, 0, 0, 63, 0, 0, 0, 63, 0, 0, 0, 63, 0, 0, 0, 63, 0, 0, 0, 63, 0,
    0, 0, 63, 0, 0, 0, 63, 0, 0, 0, 63, 0, 0, 0, 63, 0, 0, 0, 63, 0, 0, 0, 63,
    0, 0, 0, 63, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 8, 0, 0, 0, 16, 0, 0, 0, 9, 0,
    0, 0, 2, 0, 0, 0, 10, 0, 0, 0, 17, 0, 0, 0, 18, 0, 0, 0, 63, 0, 0, 0, 63, 0,
    0, 0, 63, 0, 0, 0, 63, 0, 0, 0, 63, 0, 0, 0, 63, 0, 0, 0, 63, 0, 0, 0, 63,
    0, 0, 0, 63, 0, 0, 0, 63, 0, 0, 0, 63, 0, 0, 0, 63, 0, 0, 0, 63, 0, 0, 0,
    63, 0, 0, 0, 63, 0, 0, 0, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
    8, 0, 0, 0, 9, 0, 0, 0, 63, 0, 0, 0, 63, 0, 0, 0, 63, 0, 0, 0, 63, 0, 0, 0,
    63, 0, 0, 0, 63, 0, 0, 0, 63, 0, 0, 0, 63, 0, 0, 0, 63, 0, 0, 0, 63, 0, 0,
    0, 63, 0, 0, 0, 63, 0, 0, 0, 63, 0, 0, 0, 63, 0, 0, 0, 63, 0, 0, 0, 63, 0,
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 8, 0, 0, 0, 16, 0, 0, 0, 9, 0, 0, 0, 2, 0, 0,
    0, 3, 0, 0, 0, 10, 0, 0, 0, 17, 0, 0, 0, 24, 0, 0, 0, 32, 0, 0, 0, 25, 0, 0,
    0, 18, 0, 0, 0, 11, 0, 0, 0, 4, 0, 0, 0, 5, 0, 0, 0, 12, 0, 0, 0, 19, 0, 0,
    0, 26, 0, 0, 0, 33, 0, 0, 0, 40, 0, 0, 0, 48, 0, 0, 0, 41, 0, 0, 0, 34, 0,
    0, 0, 27, 0, 0, 0, 20, 0, 0, 0, 13, 0, 0, 0, 6, 0, 0, 0, 7, 0, 0, 0, 14, 0,
    0, 0, 21, 0, 0, 0, 28, 0, 0, 0, 35, 0, 0, 0, 42, 0, 0, 0, 49, 0, 0, 0, 56,
    0, 0, 0, 57, 0, 0, 0, 50, 0, 0, 0, 43, 0, 0, 0, 36, 0, 0, 0, 29, 0, 0, 0,
    22, 0, 0, 0, 15, 0, 0, 0, 23, 0, 0, 0, 30, 0, 0, 0, 37, 0, 0, 0, 44, 0, 0,
    0, 51, 0, 0, 0, 58, 0, 0, 0, 59, 0, 0, 0, 52, 0, 0, 0, 45, 0, 0, 0, 38, 0,
    0, 0, 31, 0, 0, 0, 39, 0, 0, 0, 46, 0, 0, 0, 53, 0, 0, 0, 60, 0, 0, 0, 61,
    0, 0, 0, 54, 0, 0, 0, 47, 0, 0, 0, 55, 0, 0, 0, 62, 0, 0, 0, 63, 0, 0, 0,
    63, 0, 0, 0, 63, 0, 0, 0, 63, 0, 0, 0, 63, 0, 0, 0, 63, 0, 0, 0, 63, 0, 0,
    0, 63, 0, 0, 0, 63, 0, 0, 0, 63, 0, 0, 0, 63, 0, 0, 0, 63, 0, 0, 0, 63, 0,
    0, 0, 63, 0, 0, 0, 63, 0, 0, 0, 63, 0, 0, 0, 63, 0, 0, 0, 129, 1, 29, 90,
    14, 2, 134, 37, 16, 3, 20, 17, 18, 4, 11, 8, 20, 5, 216, 3, 23, 6, 218, 1,
    25, 7, 229, 0, 28, 8, 111, 0, 30, 9, 54, 0, 33, 10, 26, 0, 35, 11, 13, 0, 9,
    12, 6, 0, 10, 13, 3, 0, 12, 13, 1, 0, 143, 15, 127, 90, 36, 16, 37, 63, 38,
    17, 242, 44, 39, 18, 124, 32, 40, 19, 185, 23, 42, 20, 130, 17, 43, 21, 239,
    12, 45, 22, 161, 9, 46, 23, 47, 7, 48, 24, 92, 5, 49, 25, 6, 4, 51, 26, 3,
    3, 52, 27, 64, 2, 54, 28, 177, 1, 56, 29, 68, 1, 57, 30, 245, 0, 59, 31,
    183, 0, 60, 32, 138, 0, 62, 33, 104, 0, 63, 34, 78, 0, 32, 35, 59, 0, 33, 9,
    44, 0, 165, 37, 225, 90, 64, 38, 76, 72, 65, 39, 13, 58, 67, 40, 241, 46,
    68, 41, 31, 38, 69, 42, 51, 31, 70, 43, 168, 25, 72, 44, 24, 21, 73, 45,
    119, 17, 74, 46, 116, 14, 75, 47, 251, 11, 77, 48, 248, 9, 78, 49, 97, 8,
    79, 50, 6, 7, 48, 51, 205, 5, 50, 52, 222, 4, 50, 53, 15, 4, 51, 54, 99, 3,
    52, 55, 212, 2, 53, 56, 92, 2, 54, 57, 248, 1, 55, 58, 164, 1, 56, 59, 96,
    1, 57, 60, 37, 1, 58, 61, 246, 0, 59, 62, 203, 0, 61, 63, 171, 0, 61, 32,
    143, 0, 193, 65, 18, 91, 80, 66, 4, 77, 81, 67, 44, 65, 82, 68, 216, 55, 83,
    69, 232, 47, 84, 70, 60, 41, 86, 71, 121, 35, 87, 72, 223, 30, 87, 73, 169,
    26, 72, 74, 78, 23, 72, 75, 36, 20, 74, 76, 156, 17, 74, 77, 107, 15, 75,
    78, 81, 13, 77, 79, 182, 11, 77, 48, 64, 10, 208, 81, 50, 88, 88, 82, 28,
    77, 89, 83, 142, 67, 90, 84, 221, 59, 91, 85, 238, 52, 92, 86, 174, 46, 93,
    87, 154, 41, 86, 71, 22, 37, 216, 89, 112, 85, 95, 90, 169, 76, 96, 91, 217,
    68, 97, 92, 34, 62, 99, 93, 36, 56, 99, 94, 180, 50, 93, 86, 23, 46, 223,
    96, 168, 86, 101, 97, 70, 79, 102, 98, 229, 71, 103, 99, 207, 65, 104, 100,
    61, 60, 99, 93, 94, 55, 105, 102, 49, 82, 106, 103, 15, 76, 107, 104, 57,
    70, 103, 99, 94, 65, 233, 106, 39, 86, 108, 107, 231, 80, 109, 103, 133, 75,
    110, 109, 151, 85, 111, 107, 79, 80, 238, 111, 16, 90, 112, 109, 34, 85,
    240, 111, 235, 89, 113, 113, 29, 90, 134, 0, 0, 0, 135, 0, 0, 0, 132, 0, 0,
    0, 133, 0, 0, 0, 201, 0, 0, 0, 202, 0, 0, 0, 203, 0, 0, 0, 204, 0, 0, 0,
    205, 0, 0, 0, 206, 0, 0, 0, 207, 0, 0, 0, 208, 0, 0, 0, 209, 0, 0, 0, 210,
    0, 0, 0, 211, 0, 0, 0, 212, 0, 0, 0, 236, 0, 0, 0, 176, 75, 0, 0, 8, 247, 1,
    0, 32, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    152, 161, 2, 0, 112, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 224, 58, 2, 0, 192, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 40, 248, 1, 0, 196, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 232, 206, 1, 0, 200, 0, 0, 0, 2, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 216, 165, 1, 0, 204,
    0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128,
    25, 1, 0, 208, 0, 0, 0, 3, 1, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 192, 221, 0, 0, 220, 0, 0, 0, 3, 1, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 0, 0, 0, 0,
    255, 255, 255, 255, 0, 0, 0, 0, 200, 171, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 32,
    0, 0, 0, 56, 158, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 32, 147, 2, 0,
    1, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 176, 133, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 1, 0, 120, 121, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 216, 109, 2,
    0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 136, 100, 2, 0, 1, 0, 0, 0, 0, 64,
    0, 0, 0, 0, 0, 0, 176, 91, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 248,
    83, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 96, 75, 2, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 8, 240, 66, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16,
    144, 56, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 128, 0, 0, 184, 47, 2, 0, 1, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 16, 0, 216, 37, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32,
    0, 0, 28, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, 192, 195, 1, 0, 0, 0,
    0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 176, 21, 2, 0, 0, 0, 0, 0, 0, 128, 0, 0, 0, 0,
    0, 0, 16, 16, 2, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 176, 9, 2, 0, 0, 0,
    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 64, 5, 2, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0,
    0, 104, 1, 2, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 248, 251, 1, 0, 0, 0,
    0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 0, 247, 1, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0,
    0, 0, 64, 243, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 224, 237, 1, 0, 0,
    0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 232, 232, 1, 0, 0, 0, 0, 0, 64, 0, 0, 0,
    0, 0, 0, 0, 120, 229, 1, 0, 0, 0, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 16, 226, 1,
    0, 0, 0, 0, 0, 128, 0, 0, 0, 0, 0, 0, 0, 176, 222, 1, 0, 0, 0, 0, 0, 0, 8,
    0, 0, 0, 0, 0, 0, 112, 219, 1, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 224,
    215, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 8, 211, 1, 0, 0, 0, 0, 0, 0,
    0, 4, 0, 0, 0, 0, 0, 16, 0, 16, 0, 16, 0, 16, 0, 16, 0, 16, 0, 16, 0, 16, 0,
    17, 0, 17, 0, 17, 0, 17, 0, 18, 0, 18, 0, 18, 0, 18, 0, 19, 0, 19, 0, 19, 0,
    19, 0, 20, 0, 20, 0, 20, 0, 20, 0, 21, 0, 21, 0, 21, 0, 21, 0, 16, 0, 201,
    0, 196, 0, 0, 0, 3, 0, 4, 0, 5, 0, 6, 0, 7, 0, 8, 0, 9, 0, 10, 0, 11, 0, 13,
    0, 15, 0, 17, 0, 19, 0, 23, 0, 27, 0, 31, 0, 35, 0, 43, 0, 51, 0, 59, 0, 67,
    0, 83, 0, 99, 0, 115, 0, 131, 0, 163, 0, 195, 0, 227, 0, 2, 1, 0, 0, 0, 0,
    0, 0, 16, 0, 16, 0, 16, 0, 16, 0, 17, 0, 17, 0, 18, 0, 18, 0, 19, 0, 19, 0,
    20, 0, 20, 0, 21, 0, 21, 0, 22, 0, 22, 0, 23, 0, 23, 0, 24, 0, 24, 0, 25, 0,
    25, 0, 26, 0, 26, 0, 27, 0, 27, 0, 28, 0, 28, 0, 29, 0, 29, 0, 64, 0, 64, 0,
    1, 0, 2, 0, 3, 0, 4, 0, 5, 0, 7, 0, 9, 0, 13, 0, 17, 0, 25, 0, 33, 0, 49, 0,
    65, 0, 97, 0, 129, 0, 193, 0, 1, 1, 129, 1, 1, 2, 1, 3, 1, 4, 1, 6, 1, 8, 1,
    12, 1, 16, 1, 24, 1, 32, 1, 48, 1, 64, 1, 96, 0, 0, 0, 0, 16, 0, 17, 0, 18,
    0, 0, 0, 8, 0, 7, 0, 9, 0, 6, 0, 10, 0, 5, 0, 11, 0, 4, 0, 12, 0, 3, 0, 13,
    0, 2, 0, 14, 0, 1, 0, 15, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255,
    255, 255, 255, 255, 255, 255, 255, 255, 2, 0, 0, 0, 4, 0, 0, 0, 6, 0, 0, 0,
    8,
  ],
  "i8",
  ALLOC_NONE,
  Runtime.GLOBAL_BASE + 10240
);
/* memory initializer */ allocate(
  [
    255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
    255, 2, 0, 0, 0, 4, 0, 0, 0, 6, 0, 0, 0, 8, 0, 0, 0, 224, 203, 0, 0, 128, 0,
    0, 0, 248, 201, 0, 0, 96, 0, 0, 0, 24, 199, 0, 0, 96, 0, 0, 0, 224, 195, 0,
    0, 130, 0, 0, 0, 80, 193, 0, 0, 120, 0, 0, 0, 128, 190, 0, 0, 90, 0, 0, 0,
    0, 0, 128, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128,
    63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 63, 0, 0, 0,
    0, 213, 0, 0, 0, 214, 0, 0, 0, 215, 0, 0, 0, 216, 0, 0, 0, 209, 0, 0, 0,
    210, 0, 0, 0, 211, 0, 0, 0, 212, 0, 0, 0, 205, 0, 0, 0, 206, 0, 0, 0, 207,
    0, 0, 0, 208, 0, 0, 0, 201, 0, 0, 0, 202, 0, 0, 0, 203, 0, 0, 0, 204, 0, 0,
    0, 1, 39, 0, 0, 0, 0, 0, 0, 1, 38, 0, 0, 0, 0, 0, 0, 78, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 128, 63, 0, 0, 0, 0, 0, 0, 128, 63, 0, 0, 0, 0, 0,
    0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 0, 0, 0, 0, 128, 63, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 0, 0, 0, 0, 128, 63,
    0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 0, 0, 0, 0, 128, 63, 0,
    0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 96, 7, 0, 0, 0, 8, 80, 0, 0, 8,
    16, 0, 20, 8, 115, 0, 18, 7, 31, 0, 0, 8, 112, 0, 0, 8, 48, 0, 0, 9, 192, 0,
    16, 7, 10, 0, 0, 8, 96, 0, 0, 8, 32, 0, 0, 9, 160, 0, 0, 8, 0, 0, 0, 8, 128,
    0, 0, 8, 64, 0, 0, 9, 224, 0, 16, 7, 6, 0, 0, 8, 88, 0, 0, 8, 24, 0, 0, 9,
    144, 0, 19, 7, 59, 0, 0, 8, 120, 0, 0, 8, 56, 0, 0, 9, 208, 0, 17, 7, 17, 0,
    0, 8, 104, 0, 0, 8, 40, 0, 0, 9, 176, 0, 0, 8, 8, 0, 0, 8, 136, 0, 0, 8, 72,
    0, 0, 9, 240, 0, 16, 7, 4, 0, 0, 8, 84, 0, 0, 8, 20, 0, 21, 8, 227, 0, 19,
    7, 43, 0, 0, 8, 116, 0, 0, 8, 52, 0, 0, 9, 200, 0, 17, 7, 13, 0, 0, 8, 100,
    0, 0, 8, 36, 0, 0, 9, 168, 0, 0, 8, 4, 0, 0, 8, 132, 0, 0, 8, 68, 0, 0, 9,
    232, 0, 16, 7, 8, 0, 0, 8, 92, 0, 0, 8, 28, 0, 0, 9, 152, 0, 20, 7, 83, 0,
    0, 8, 124, 0, 0, 8, 60, 0, 0, 9, 216, 0, 18, 7, 23, 0, 0, 8, 108, 0, 0, 8,
    44, 0, 0, 9, 184, 0, 0, 8, 12, 0, 0, 8, 140, 0, 0, 8, 76, 0, 0, 9, 248, 0,
    16, 7, 3, 0, 0, 8, 82, 0, 0, 8, 18, 0, 21, 8, 163, 0, 19, 7, 35, 0, 0, 8,
    114, 0, 0, 8, 50, 0, 0, 9, 196, 0, 17, 7, 11, 0, 0, 8, 98, 0, 0, 8, 34, 0,
    0, 9, 164, 0, 0, 8, 2, 0, 0, 8, 130, 0, 0, 8, 66, 0, 0, 9, 228, 0, 16, 7, 7,
    0, 0, 8, 90, 0, 0, 8, 26, 0, 0, 9, 148, 0, 20, 7, 67, 0, 0, 8, 122, 0, 0, 8,
    58, 0, 0, 9, 212, 0, 18, 7, 19, 0, 0, 8, 106, 0, 0, 8, 42, 0, 0, 9, 180, 0,
    0, 8, 10, 0, 0, 8, 138, 0, 0, 8, 74, 0, 0, 9, 244, 0, 16, 7, 5, 0, 0, 8, 86,
    0, 0, 8, 22, 0, 64, 8, 0, 0, 19, 7, 51, 0, 0, 8, 118, 0, 0, 8, 54, 0, 0, 9,
    204, 0, 17, 7, 15, 0, 0, 8, 102, 0, 0, 8, 38, 0, 0, 9, 172, 0, 0, 8, 6, 0,
    0, 8, 134, 0, 0, 8, 70, 0, 0, 9, 236, 0, 16, 7, 9, 0, 0, 8, 94, 0, 0, 8, 30,
    0, 0, 9, 156, 0, 20, 7, 99, 0, 0, 8, 126, 0, 0, 8, 62, 0, 0, 9, 220, 0, 18,
    7, 27, 0, 0, 8, 110, 0, 0, 8, 46, 0, 0, 9, 188, 0, 0, 8, 14, 0, 0, 8, 142,
    0, 0, 8, 78, 0, 0, 9, 252, 0, 96, 7, 0, 0, 0, 8, 81, 0, 0, 8, 17, 0, 21, 8,
    131, 0, 18, 7, 31, 0, 0, 8, 113, 0, 0, 8, 49, 0, 0, 9, 194, 0, 16, 7, 10, 0,
    0, 8, 97, 0, 0, 8, 33, 0, 0, 9, 162, 0, 0, 8, 1, 0, 0, 8, 129, 0, 0, 8, 65,
    0, 0, 9, 226, 0, 16, 7, 6, 0, 0, 8, 89, 0, 0, 8, 25, 0, 0, 9, 146, 0, 19, 7,
    59, 0, 0, 8, 121, 0, 0, 8, 57, 0, 0, 9, 210, 0, 17, 7, 17, 0, 0, 8, 105, 0,
    0, 8, 41, 0, 0, 9, 178, 0, 0, 8, 9, 0, 0, 8, 137, 0, 0, 8, 73, 0, 0, 9, 242,
    0, 16, 7, 4, 0, 0, 8, 85, 0, 0, 8, 21, 0, 16, 8, 2, 1, 19, 7, 43, 0, 0, 8,
    117, 0, 0, 8, 53, 0, 0, 9, 202, 0, 17, 7, 13, 0, 0, 8, 101, 0, 0, 8, 37, 0,
    0, 9, 170, 0, 0, 8, 5, 0, 0, 8, 133, 0, 0, 8, 69, 0, 0, 9, 234, 0, 16, 7, 8,
    0, 0, 8, 93, 0, 0, 8, 29, 0, 0, 9, 154, 0, 20, 7, 83, 0, 0, 8, 125, 0, 0, 8,
    61, 0, 0, 9, 218, 0, 18, 7, 23, 0, 0, 8, 109, 0, 0, 8, 45, 0, 0, 9, 186, 0,
    0, 8, 13, 0, 0, 8, 141, 0, 0, 8, 77, 0, 0, 9, 250, 0, 16, 7, 3, 0, 0, 8, 83,
    0, 0, 8, 19, 0, 21, 8, 195, 0, 19, 7, 35, 0, 0, 8, 115, 0, 0, 8, 51, 0, 0,
    9, 198, 0, 17, 7, 11, 0, 0, 8, 99, 0, 0, 8, 35, 0, 0, 9, 166, 0, 0, 8, 3, 0,
    0, 8, 131, 0, 0, 8, 67, 0, 0, 9, 230, 0, 16, 7, 7, 0, 0, 8, 91, 0, 0, 8, 27,
    0, 0, 9, 150, 0, 20, 7, 67, 0, 0, 8, 123, 0, 0, 8, 59, 0, 0, 9, 214, 0, 18,
    7, 19, 0, 0, 8, 107, 0, 0, 8, 43, 0, 0, 9, 182, 0, 0, 8, 11, 0, 0, 8, 139,
    0, 0, 8, 75, 0, 0, 9, 246, 0, 16, 7, 5, 0, 0, 8, 87, 0, 0, 8, 23, 0, 64, 8,
    0, 0, 19, 7, 51, 0, 0, 8, 119, 0, 0, 8, 55, 0, 0, 9, 206, 0, 17, 7, 15, 0,
    0, 8, 103, 0, 0, 8, 39, 0, 0, 9, 174, 0, 0, 8, 7, 0, 0, 8, 135, 0, 0, 8, 71,
    0, 0, 9, 238, 0, 16, 7, 9, 0, 0, 8, 95, 0, 0, 8, 31, 0, 0, 9, 158, 0, 20, 7,
    99, 0, 0, 8, 127, 0, 0, 8, 63, 0, 0, 9, 222, 0, 18, 7, 27, 0, 0, 8, 111, 0,
    0, 8, 47, 0, 0, 9, 190, 0, 0, 8, 15, 0, 0, 8, 143, 0, 0, 8, 79, 0, 0, 9,
    254, 0, 96, 7, 0, 0, 0, 8, 80, 0, 0, 8, 16, 0, 20, 8, 115, 0, 18, 7, 31, 0,
    0, 8, 112, 0, 0, 8, 48, 0, 0, 9, 193, 0, 16, 7, 10, 0, 0, 8, 96, 0, 0, 8,
    32, 0, 0, 9, 161, 0, 0, 8, 0, 0, 0, 8, 128, 0, 0, 8, 64, 0, 0, 9, 225, 0,
    16, 7, 6, 0, 0, 8, 88, 0, 0, 8, 24, 0, 0, 9, 145, 0, 19, 7, 59, 0, 0, 8,
    120, 0, 0, 8, 56, 0, 0, 9, 209, 0, 17, 7, 17, 0, 0, 8, 104, 0, 0, 8, 40, 0,
    0, 9, 177, 0, 0, 8, 8, 0, 0, 8, 136, 0, 0, 8, 72, 0, 0, 9, 241, 0, 16, 7, 4,
    0, 0, 8, 84, 0, 0, 8, 20, 0, 21, 8, 227, 0, 19, 7, 43, 0, 0, 8, 116, 0, 0,
    8, 52, 0, 0, 9, 201, 0, 17, 7, 13, 0, 0, 8, 100, 0, 0, 8, 36, 0, 0, 9, 169,
    0, 0, 8, 4, 0, 0, 8, 132, 0, 0, 8, 68, 0, 0, 9, 233, 0, 16, 7, 8, 0, 0, 8,
    92, 0, 0, 8, 28, 0, 0, 9, 153, 0, 20, 7, 83, 0, 0, 8, 124, 0, 0, 8, 60, 0,
    0, 9, 217, 0, 18, 7, 23, 0, 0, 8, 108, 0, 0, 8, 44, 0, 0, 9, 185, 0, 0, 8,
    12, 0, 0, 8, 140, 0, 0, 8, 76, 0, 0, 9, 249, 0, 16, 7, 3, 0, 0, 8, 82, 0, 0,
    8, 18, 0, 21, 8, 163, 0, 19, 7, 35, 0, 0, 8, 114, 0, 0, 8, 50, 0, 0, 9, 197,
    0, 17, 7, 11, 0, 0, 8, 98, 0, 0, 8, 34, 0, 0, 9, 165, 0, 0, 8, 2, 0, 0, 8,
    130, 0, 0, 8, 66, 0, 0, 9, 229, 0, 16, 7, 7, 0, 0, 8, 90, 0, 0, 8, 26, 0, 0,
    9, 149, 0, 20, 7, 67, 0, 0, 8, 122, 0, 0, 8, 58, 0, 0, 9, 213, 0, 18, 7, 19,
    0, 0, 8, 106, 0, 0, 8, 42, 0, 0, 9, 181, 0, 0, 8, 10, 0, 0, 8, 138, 0, 0, 8,
    74, 0, 0, 9, 245, 0, 16, 7, 5, 0, 0, 8, 86, 0, 0, 8, 22, 0, 64, 8, 0, 0, 19,
    7, 51, 0, 0, 8, 118, 0, 0, 8, 54, 0, 0, 9, 205, 0, 17, 7, 15, 0, 0, 8, 102,
    0, 0, 8, 38, 0, 0, 9, 173, 0, 0, 8, 6, 0, 0, 8, 134, 0, 0, 8, 70, 0, 0, 9,
    237, 0, 16, 7, 9, 0, 0, 8, 94, 0, 0, 8, 30, 0, 0, 9, 157, 0, 20, 7, 99, 0,
    0, 8, 126, 0, 0, 8, 62, 0, 0, 9, 221, 0, 18, 7, 27, 0, 0, 8, 110, 0, 0, 8,
    46, 0, 0, 9, 189, 0, 0, 8, 14, 0, 0, 8, 142, 0, 0, 8, 78, 0, 0, 9, 253, 0,
    96, 7, 0, 0, 0, 8, 81, 0, 0, 8, 17, 0, 21, 8, 131, 0, 18, 7, 31, 0, 0, 8,
    113, 0, 0, 8, 49, 0, 0, 9, 195, 0, 16, 7, 10, 0, 0, 8, 97, 0, 0, 8, 33, 0,
    0, 9, 163, 0, 0, 8, 1, 0, 0, 8, 129, 0, 0, 8, 65, 0, 0, 9, 227, 0, 16, 7, 6,
    0, 0, 8, 89, 0, 0, 8, 25, 0, 0, 9, 147, 0, 19, 7, 59, 0, 0, 8, 121, 0, 0, 8,
    57, 0, 0, 9, 211, 0, 17, 7, 17, 0, 0, 8, 105, 0, 0, 8, 41, 0, 0, 9, 179, 0,
    0, 8, 9, 0, 0, 8, 137, 0, 0, 8, 73, 0, 0, 9, 243, 0, 16, 7, 4, 0, 0, 8, 85,
    0, 0, 8, 21, 0, 16, 8, 2, 1, 19, 7, 43, 0, 0, 8, 117, 0, 0, 8, 53, 0, 0, 9,
    203, 0, 17, 7, 13, 0, 0, 8, 101, 0, 0, 8, 37, 0, 0, 9, 171, 0, 0, 8, 5, 0,
    0, 8, 133, 0, 0, 8, 69, 0, 0, 9, 235, 0, 16, 7, 8, 0, 0, 8, 93, 0, 0, 8, 29,
    0, 0, 9, 155, 0, 20, 7, 83, 0, 0, 8, 125, 0, 0, 8, 61, 0, 0, 9, 219, 0, 18,
    7, 23, 0, 0, 8, 109, 0, 0, 8, 45, 0, 0, 9, 187, 0, 0, 8, 13, 0, 0, 8, 141,
    0, 0, 8, 77, 0, 0, 9, 251, 0, 16, 7, 3, 0, 0, 8, 83, 0, 0, 8, 19, 0, 21, 8,
    195, 0, 19, 7, 35, 0, 0, 8, 115, 0, 0, 8, 51, 0, 0, 9, 199, 0, 17, 7, 11, 0,
    0, 8, 99, 0, 0, 8, 35, 0, 0, 9, 167, 0, 0, 8, 3, 0, 0, 8, 131, 0, 0, 8, 67,
    0, 0, 9, 231, 0, 16, 7, 7, 0, 0, 8, 91, 0, 0, 8, 27, 0, 0, 9, 151, 0, 20, 7,
    67, 0, 0, 8, 123, 0, 0, 8, 59, 0, 0, 9, 215, 0, 18, 7, 19, 0, 0, 8, 107, 0,
    0, 8, 43, 0, 0, 9, 183, 0, 0, 8, 11, 0, 0, 8, 139, 0, 0, 8, 75, 0, 0, 9,
    247, 0, 16, 7, 5, 0, 0, 8, 87, 0, 0, 8, 23, 0, 64, 8, 0, 0, 19, 7, 51, 0, 0,
    8, 119, 0, 0, 8, 55, 0, 0, 9, 207, 0, 17, 7, 15, 0, 0, 8, 103, 0, 0, 8, 39,
    0, 0, 9, 175, 0, 0, 8, 7, 0, 0, 8, 135, 0, 0, 8, 71, 0, 0, 9, 239, 0, 16, 7,
    9, 0, 0, 8, 95, 0, 0, 8, 31, 0, 0, 9, 159, 0, 20, 7, 99, 0, 0, 8, 127, 0, 0,
    8, 63, 0, 0, 9, 223, 0, 18, 7, 27, 0, 0, 8, 111, 0, 0, 8, 47, 0, 0, 9, 191,
    0, 0, 8, 15, 0, 0, 8, 143, 0, 0, 8, 79, 0, 0, 9, 255, 0, 16, 5, 1, 0, 23, 5,
    1, 1, 19, 5, 17, 0, 27, 5, 1, 16, 17, 5, 5, 0, 25, 5, 1, 4, 21, 5, 65, 0,
    29, 5, 1, 64, 16, 5, 3, 0, 24, 5, 1, 2, 20, 5, 33, 0, 28, 5, 1, 32, 18, 5,
    9, 0, 26, 5, 1, 8, 22, 5, 129, 0, 64, 5, 0, 0, 16, 5, 2, 0, 23, 5, 129, 1,
    19, 5, 25, 0, 27, 5, 1, 24, 17, 5, 7, 0, 25, 5, 1, 6, 21, 5, 97, 0, 29, 5,
    1, 96, 16, 5, 4, 0, 24, 5, 1, 3, 20, 5, 49, 0, 28, 5, 1, 48, 18, 5, 13, 0,
    26, 5, 1, 12, 22, 5, 193, 0, 64, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 112, 11,
    58, 1, 48, 9, 58, 1, 208, 11, 58, 1, 144, 11, 58, 1, 64, 6, 0, 0, 128, 62,
    0, 0, 0, 0, 128, 63, 0, 0, 0, 128, 99, 250, 127, 63, 191, 117, 86, 188, 139,
    233, 127, 63, 10, 113, 214, 188, 121, 205, 127, 63, 231, 206, 32, 189, 47,
    166, 127, 63, 58, 94, 86, 189, 175, 115, 127, 63, 19, 242, 133, 189, 249,
    53, 127, 63, 42, 175, 160, 189, 18, 237, 126, 63, 51, 101, 187, 189, 253,
    152, 126, 63, 4, 19, 214, 189, 188, 57, 126, 63, 115, 183, 240, 189, 85,
    207, 125, 63, 168, 168, 5, 190, 203, 89, 125, 63, 187, 239, 18, 190, 37,
    217, 124, 63, 92, 48, 32, 190, 103, 77, 124, 63, 245, 105, 45, 190, 152,
    182, 123, 63, 243, 155, 58, 190, 190, 20, 123, 63, 194, 197, 71, 190, 226,
    103, 122, 63, 205, 230, 84, 190, 9, 176, 121, 63, 130, 254, 97, 190, 60,
    237, 120, 63, 77, 12, 111, 190, 132, 31, 120, 63, 156, 15, 124, 190, 234,
    70, 119, 63, 238, 131, 132, 190, 119, 99, 118, 63, 62, 250, 138, 190, 54,
    117, 117, 63, 117, 106, 145, 190, 48, 124, 116, 63, 76, 212, 151, 190, 113,
    120, 115, 63, 122, 55, 158, 190, 3, 106, 114, 63, 183, 147, 164, 190, 244,
    80, 113, 63, 188, 232, 170, 190, 79, 45, 112, 63, 65, 54, 177, 190, 33, 255,
    110, 63, 1, 124, 183, 190, 118, 198, 109, 63, 180, 185, 189, 190, 94, 131,
    108, 63, 21, 239, 195, 190, 231, 53, 107, 63, 222, 27, 202, 190, 30, 222,
    105, 63, 201, 63, 208, 190, 18, 124, 104, 63, 146, 90, 214, 190, 212, 15,
    103, 63, 243, 107, 220, 190, 116, 153, 101, 63, 170, 115, 226, 190, 1, 25,
    100, 63, 113, 113, 232, 190, 141, 142, 98, 63, 7, 101, 238, 190, 40, 250,
    96, 63, 39, 78, 244, 190, 230, 91, 95, 63, 144, 44, 250, 190, 215, 179, 93,
    63, 0, 0, 0, 191, 15, 2, 92, 63, 27, 228, 2, 191, 160, 70, 90, 63, 119, 194,
    5, 191, 158, 129, 88, 63, 246, 154, 8, 191, 29, 179, 86, 63, 119, 109, 11,
    191, 49, 219, 84, 63, 218, 57, 14, 191, 239, 249, 82, 63, 0, 0, 17, 191,
    108, 15, 81, 63, 202, 191, 19, 191, 189, 27, 79, 63, 24, 121, 22, 191, 248,
    30, 77, 63, 205, 43, 25, 191, 52, 25, 75, 63, 202, 215, 27, 191, 136, 10,
    73, 63, 241, 124, 30, 191, 10, 243, 70, 63, 36, 27, 33, 191, 209, 210, 68,
    63, 70, 178, 35, 191, 247, 169, 66, 63, 58, 66, 38, 191, 147, 120, 64, 63,
    227, 202, 40, 191, 189, 62, 62, 63, 37, 76, 43, 191, 143, 252, 59, 63, 227,
    197, 45, 191, 34, 178, 57, 63, 1, 56, 48, 191, 144, 95, 55, 63, 101, 162,
    50, 191, 243, 4, 53, 63, 243, 4, 53, 191, 101, 162, 50, 63, 144, 95, 55,
    191, 1, 56, 48, 63, 34, 178, 57, 191, 227, 197, 45, 63, 143, 252, 59, 191,
    37, 76, 43, 63, 189, 62, 62, 191, 227, 202, 40, 63, 147, 120, 64, 191, 58,
    66, 38, 63, 247, 169, 66, 191, 70, 178, 35, 63, 209, 210, 68, 191, 36, 27,
    33, 63, 10, 243, 70, 191, 241, 124, 30, 63, 136, 10, 73, 191, 202, 215, 27,
    63, 52, 25, 75, 191, 205, 43, 25, 63, 248, 30, 77, 191, 24, 121, 22, 63,
    189, 27, 79, 191, 202, 191, 19, 63, 108, 15, 81, 191, 0, 0, 17, 63, 239,
    249, 82, 191, 218, 57, 14, 63, 49, 219, 84, 191, 119, 109, 11, 63, 29, 179,
    86, 191, 246, 154, 8, 63, 158, 129, 88, 191, 119, 194, 5, 63, 160, 70, 90,
    191, 27, 228, 2, 63, 15, 2, 92, 191, 0, 0, 0, 63, 215, 179, 93, 191, 144,
    44, 250, 62, 230, 91, 95, 191, 39, 78, 244, 62, 40, 250, 96, 191, 7, 101,
    238, 62, 141, 142, 98, 191, 113, 113, 232, 62, 1, 25, 100, 191, 170, 115,
    226, 62, 116, 153, 101, 191, 243, 107, 220, 62, 212, 15, 103, 191, 146, 90,
    214, 62, 18, 124, 104, 191, 201, 63, 208, 62, 30, 222, 105, 191, 222, 27,
    202, 62, 231, 53, 107, 191, 21, 239, 195, 62, 94, 131, 108, 191, 180, 185,
    189, 62, 118, 198, 109, 191, 1, 124, 183, 62, 33, 255, 110, 191, 65, 54,
    177, 62, 79, 45, 112, 191, 188, 232, 170, 62, 244, 80, 113, 191, 183, 147,
    164, 62, 3, 106, 114, 191, 122, 55, 158, 62, 113, 120, 115, 191, 76, 212,
    151, 62, 48, 124, 116, 191, 117, 106, 145, 62, 54, 117, 117, 191, 62, 250,
    138, 62, 119, 99, 118, 191, 238, 131, 132, 62, 234, 70, 119, 191, 156, 15,
    124, 62, 132, 31, 120, 191, 77, 12, 111, 62, 60, 237, 120, 191, 130, 254,
    97, 62, 9, 176, 121, 191, 205, 230, 84, 62, 226, 103, 122, 191, 194, 197,
    71, 62, 190, 20, 123, 191, 243, 155, 58, 62, 152, 182, 123, 191, 245, 105,
    45, 62, 103, 77, 124, 191, 92, 48, 32, 62, 37, 217, 124, 191, 187, 239, 18,
    62, 203, 89, 125, 191, 168, 168, 5, 62, 85, 207, 125, 191, 115, 183, 240,
    61, 188, 57, 126, 191, 4, 19, 214, 61, 253, 152, 126, 191, 51, 101, 187, 61,
    18, 237, 126, 191, 42, 175, 160, 61, 249, 53, 127, 191, 19, 242, 133, 61,
    175, 115, 127, 191, 58, 94, 86, 61, 47, 166, 127, 191, 231, 206, 32, 61,
    121, 205, 127, 191, 10, 113, 214, 60, 139, 233, 127, 191, 191, 117, 86, 60,
    99, 250, 127, 191, 0, 48, 141, 36, 0, 0, 128, 191, 191, 117, 86, 188, 99,
    250, 127, 191, 10, 113, 214, 188, 139, 233, 127, 191, 231, 206, 32, 189,
    121, 205, 127, 191, 58, 94, 86, 189, 47, 166, 127, 191, 19, 242, 133, 189,
    175, 115, 127, 191, 42, 175, 160, 189, 249, 53, 127, 191, 51, 101, 187, 189,
    18, 237, 126, 191, 4, 19, 214, 189, 253, 152, 126, 191, 115, 183, 240, 189,
    188, 57, 126, 191, 168, 168, 5, 190, 85, 207, 125, 191, 187, 239, 18, 190,
    203, 89, 125, 191, 92, 48, 32, 190, 37, 217, 124, 191, 245, 105, 45, 190,
    103, 77, 124, 191, 243, 155, 58, 190, 152, 182, 123, 191, 194, 197, 71, 190,
    190, 20, 123, 191, 205, 230, 84, 190, 226, 103, 122, 191, 130, 254, 97, 190,
    9, 176, 121, 191, 77, 12, 111, 190, 60, 237, 120, 191, 156, 15, 124, 190,
    132, 31, 120, 191, 238, 131, 132, 190, 234, 70, 119, 191, 62, 250, 138, 190,
    119, 99, 118, 191, 117, 106, 145, 190, 54, 117, 117, 191, 76, 212, 151, 190,
    48, 124, 116, 191, 122, 55, 158, 190, 113, 120, 115, 191, 183, 147, 164,
    190, 3, 106, 114, 191, 188, 232, 170, 190, 244, 80, 113, 191, 65, 54, 177,
    190, 79, 45, 112, 191, 1, 124, 183, 190, 33, 255, 110, 191, 180, 185, 189,
    190, 118, 198, 109, 191, 21, 239, 195, 190, 94, 131, 108, 191, 222, 27, 202,
    190, 231, 53, 107, 191, 201, 63, 208, 190, 30, 222, 105, 191, 146, 90, 214,
    190, 18, 124, 104, 191, 243, 107, 220, 190, 212, 15, 103, 191, 170, 115,
    226, 190, 116, 153, 101, 191, 113, 113, 232, 190, 1, 25, 100, 191, 7, 101,
    238, 190, 141, 142, 98, 191, 39, 78, 244, 190, 40, 250, 96, 191, 144, 44,
    250, 190, 230, 91, 95, 191, 0, 0, 0, 191, 215, 179, 93, 191, 27, 228, 2,
    191, 15, 2, 92, 191, 119, 194, 5, 191, 160, 70, 90, 191, 246, 154, 8, 191,
    158, 129, 88, 191, 119, 109, 11, 191, 29, 179, 86, 191, 218, 57, 14, 191,
    49, 219, 84, 191, 0, 0, 17, 191, 239, 249, 82, 191, 202, 191, 19, 191, 108,
    15, 81, 191, 24, 121, 22, 191, 189, 27, 79, 191, 205, 43, 25, 191, 248, 30,
    77, 191, 202, 215, 27, 191, 52, 25, 75, 191, 241, 124, 30, 191, 136, 10, 73,
    191, 36, 27, 33, 191, 10, 243, 70, 191, 70, 178, 35, 191, 209, 210, 68, 191,
    58, 66, 38, 191, 247, 169, 66, 191, 227, 202, 40, 191, 147, 120, 64, 191,
    37, 76, 43, 191, 189, 62, 62, 191, 227, 197, 45, 191, 143, 252, 59, 191, 1,
    56, 48, 191, 34, 178, 57, 191, 101, 162, 50, 191, 144, 95, 55, 191, 243, 4,
    53, 191, 243, 4, 53, 191, 144, 95, 55, 191, 101, 162, 50, 191, 34, 178, 57,
    191, 1, 56, 48, 191, 143, 252, 59, 191, 227, 197, 45, 191, 189, 62, 62, 191,
    37, 76, 43, 191, 147, 120, 64, 191, 227, 202, 40, 191, 247, 169, 66, 191,
    58, 66, 38, 191, 209, 210, 68, 191, 70, 178, 35, 191, 10, 243, 70, 191, 36,
    27, 33, 191, 136, 10, 73, 191, 241, 124, 30, 191, 52, 25, 75, 191, 202, 215,
    27, 191, 248, 30, 77, 191, 205, 43, 25, 191, 189, 27, 79, 191, 24, 121, 22,
    191, 108, 15, 81, 191, 202, 191, 19, 191, 239, 249, 82, 191, 0, 0, 17, 191,
    49, 219, 84, 191, 218, 57, 14, 191, 29, 179, 86, 191, 119, 109, 11, 191,
    158, 129, 88, 191, 246, 154, 8, 191, 160, 70, 90, 191, 119, 194, 5, 191, 15,
    2, 92, 191, 27, 228, 2, 191, 215, 179, 93, 191, 0, 0, 0, 191, 230, 91, 95,
    191, 144, 44, 250, 190, 40, 250, 96, 191, 39, 78, 244, 190, 141, 142, 98,
    191, 7, 101, 238, 190, 1, 25, 100, 191, 113, 113, 232, 190, 116, 153, 101,
    191, 170, 115, 226, 190, 212, 15, 103, 191, 243, 107, 220, 190, 18, 124,
    104, 191, 146, 90, 214, 190, 30, 222, 105, 191, 201, 63, 208, 190, 231, 53,
    107, 191, 222, 27, 202, 190, 94, 131, 108, 191, 21, 239, 195, 190, 118, 198,
    109, 191, 180, 185, 189, 190, 33, 255, 110, 191, 1, 124, 183, 190, 79, 45,
    112, 191, 65, 54, 177, 190, 244, 80, 113, 191, 188, 232, 170, 190, 3, 106,
    114, 191, 183, 147, 164, 190, 113, 120, 115, 191, 122, 55, 158, 190, 48,
    124, 116, 191, 76, 212, 151, 190, 54, 117, 117, 191, 117, 106, 145, 190,
    119, 99, 118, 191, 62, 250, 138, 190, 234, 70, 119, 191, 238, 131, 132, 190,
    132, 31, 120, 191, 156, 15, 124, 190, 60, 237, 120, 191, 77, 12, 111, 190,
    9, 176, 121, 191, 130, 254, 97, 190, 226, 103, 122, 191, 205, 230, 84, 190,
    190, 20, 123, 191, 194, 197, 71, 190, 152, 182, 123, 191, 243, 155, 58, 190,
    103, 77, 124, 191, 245, 105, 45, 190, 37, 217, 124, 191, 92, 48, 32, 190,
    203, 89, 125, 191, 187, 239, 18, 190, 85, 207, 125, 191, 168, 168, 5, 190,
    188, 57, 126, 191, 115, 183, 240, 189, 253, 152, 126, 191, 4, 19, 214, 189,
    18, 237, 126, 191, 51, 101, 187, 189, 249, 53, 127, 191, 42, 175, 160, 189,
    175, 115, 127, 191, 19, 242, 133, 189, 47, 166, 127, 191, 58, 94, 86, 189,
    121, 205, 127, 191, 231, 206, 32, 189, 139, 233, 127, 191, 10, 113, 214,
    188, 99, 250, 127, 191, 191, 117, 86, 188, 0, 0, 128, 191, 0, 48, 13, 165,
    99, 250, 127, 191, 191, 117, 86, 60, 139, 233, 127, 191, 10, 113, 214, 60,
    121, 205, 127, 191, 231, 206, 32, 61, 47, 166, 127, 191, 58, 94, 86, 61,
    175, 115, 127, 191, 19, 242, 133, 61, 249, 53, 127, 191, 42, 175, 160, 61,
    18, 237, 126, 191, 51, 101, 187, 61, 253, 152, 126, 191, 4, 19, 214, 61,
    188, 57, 126, 191, 115, 183, 240, 61, 85, 207, 125, 191, 168, 168, 5, 62,
    203, 89, 125, 191, 187, 239, 18, 62, 37, 217, 124, 191, 92, 48, 32, 62, 103,
    77, 124, 191, 245, 105, 45, 62, 152, 182, 123, 191, 243, 155, 58, 62, 190,
    20, 123, 191, 194, 197, 71, 62, 226, 103, 122, 191, 205, 230, 84, 62, 9,
    176, 121, 191, 130, 254, 97, 62, 60, 237, 120, 191, 77, 12, 111, 62, 132,
    31, 120, 191, 156, 15, 124, 62, 234, 70, 119, 191, 238, 131, 132, 62, 119,
    99, 118, 191, 62, 250, 138, 62, 54, 117, 117, 191, 117, 106, 145, 62, 48,
    124, 116, 191, 76, 212, 151, 62, 113, 120, 115, 191, 122, 55, 158, 62, 3,
    106, 114, 191, 183, 147, 164, 62, 244, 80, 113, 191, 188, 232, 170, 62, 79,
    45, 112, 191, 65, 54, 177, 62, 33, 255, 110, 191, 1, 124, 183, 62, 118, 198,
    109, 191, 180, 185, 189, 62, 94, 131, 108, 191, 21, 239, 195, 62, 231, 53,
    107, 191, 222, 27, 202, 62, 30, 222, 105, 191, 201, 63, 208, 62, 18, 124,
    104, 191, 146, 90, 214, 62, 212, 15, 103, 191, 243, 107, 220, 62, 116, 153,
    101, 191, 170, 115, 226, 62, 1, 25, 100, 191, 113, 113, 232, 62, 141, 142,
    98, 191, 7, 101, 238, 62, 40, 250, 96, 191, 39, 78, 244, 62, 230, 91, 95,
    191, 144, 44, 250, 62, 215, 179, 93, 191, 0, 0, 0, 63, 15, 2, 92, 191, 27,
    228, 2, 63, 160, 70, 90, 191, 119, 194, 5, 63, 158, 129, 88, 191, 246, 154,
    8, 63, 29, 179, 86, 191, 119, 109, 11, 63, 49, 219, 84, 191, 218, 57, 14,
    63, 239, 249, 82, 191, 0, 0, 17, 63, 108, 15, 81, 191, 202, 191, 19, 63,
    189, 27, 79, 191, 24, 121, 22, 63, 248, 30, 77, 191, 205, 43, 25, 63, 52,
    25, 75, 191, 202, 215, 27, 63, 136, 10, 73, 191, 241, 124, 30, 63, 10, 243,
    70, 191, 36, 27, 33, 63, 209, 210, 68, 191, 70, 178, 35, 63, 247, 169, 66,
    191, 58, 66, 38, 63, 147, 120, 64, 191, 227, 202, 40, 63, 189, 62, 62, 191,
    37, 76, 43, 63, 143, 252, 59, 191, 227, 197, 45, 63, 34, 178, 57, 191, 1,
    56, 48, 63, 144, 95, 55, 191, 101, 162, 50, 63, 243, 4, 53, 191, 243, 4, 53,
    63, 101, 162, 50, 191, 144, 95, 55, 63, 1, 56, 48, 191, 34, 178, 57, 63,
    227, 197, 45, 191, 143, 252, 59, 63, 37, 76, 43, 191, 189, 62, 62, 63, 227,
    202, 40, 191, 147, 120, 64, 63, 58, 66, 38, 191, 247, 169, 66, 63, 70, 178,
    35, 191, 209, 210, 68, 63, 36, 27, 33, 191, 10, 243, 70, 63, 241, 124, 30,
    191, 136, 10, 73, 63, 202, 215, 27, 191, 52, 25, 75, 63, 205, 43, 25, 191,
    248, 30, 77, 63, 24, 121, 22, 191, 189, 27, 79, 63, 202, 191, 19, 191, 108,
    15, 81, 63, 0, 0, 17, 191, 239, 249, 82, 63, 218, 57, 14, 191, 49, 219, 84,
    63, 119, 109, 11, 191, 29, 179, 86, 63, 246, 154, 8, 191, 158, 129, 88, 63,
    119, 194, 5, 191, 160, 70, 90, 63, 27, 228, 2, 191, 15, 2, 92, 63, 0, 0, 0,
    191, 215, 179, 93, 63, 144, 44, 250, 190, 230, 91, 95, 63, 39, 78, 244, 190,
    40, 250, 96, 63, 7, 101, 238, 190, 141, 142, 98, 63, 113, 113, 232, 190, 1,
    25, 100, 63, 170, 115, 226, 190, 116, 153, 101, 63, 243, 107, 220, 190, 212,
    15, 103, 63, 146, 90, 214, 190, 18, 124, 104, 63, 201, 63, 208, 190, 30,
    222, 105, 63, 222, 27, 202, 190, 231, 53, 107, 63, 21, 239, 195, 190, 94,
    131, 108, 63, 180, 185, 189, 190, 118, 198, 109, 63, 1, 124, 183, 190, 33,
    255, 110, 63, 65, 54, 177, 190, 79, 45, 112, 63, 188, 232, 170, 190, 244,
    80, 113, 63, 183, 147, 164, 190, 3, 106, 114, 63, 122, 55, 158, 190, 113,
    120, 115, 63, 76, 212, 151, 190, 48, 124, 116, 63, 117, 106, 145, 190, 54,
    117, 117, 63, 62, 250, 138, 190, 119, 99, 118, 63, 238, 131, 132, 190, 234,
    70, 119, 63, 156, 15, 124, 190, 132, 31, 120, 63, 77, 12, 111, 190, 60, 237,
    120, 63, 130, 254, 97, 190, 9, 176, 121, 63, 205, 230, 84, 190, 226, 103,
    122, 63, 194, 197, 71, 190, 190, 20, 123, 63, 243, 155, 58, 190, 152, 182,
    123, 63, 245, 105, 45, 190, 103, 77, 124, 63, 92, 48, 32, 190, 37, 217, 124,
    63, 187, 239, 18, 190, 203, 89, 125, 63, 168, 168, 5, 190, 85, 207, 125, 63,
    115, 183, 240, 189, 188, 57, 126, 63, 4, 19, 214, 189, 253, 152, 126, 63,
    51, 101, 187, 189, 18, 237, 126, 63, 42, 175, 160, 189, 249, 53, 127, 63,
    19, 242, 133, 189, 175, 115, 127, 63, 58, 94, 86, 189, 47, 166, 127, 63,
    231, 206, 32, 189, 121, 205, 127, 63, 10, 113, 214, 188, 139, 233, 127, 63,
    191, 117, 86, 188, 99, 250, 127, 63, 0, 200, 83, 165, 0, 0, 128, 63, 191,
    117, 86, 60, 99, 250, 127, 63, 10, 113, 214, 60, 139, 233, 127, 63, 231,
    206, 32, 61, 121, 205, 127, 63, 58, 94, 86, 61, 47, 166, 127, 63, 19, 242,
    133, 61, 175, 115, 127, 63, 42, 175, 160, 61, 249, 53, 127, 63, 51, 101,
    187, 61, 18, 237, 126, 63, 4, 19, 214, 61, 253, 152, 126, 63, 115, 183, 240,
    61, 188, 57, 126, 63, 168, 168, 5, 62, 85, 207, 125, 63, 187, 239, 18, 62,
    203, 89, 125, 63, 92, 48, 32, 62, 37, 217, 124, 63, 245, 105, 45, 62, 103,
    77, 124, 63, 243, 155, 58, 62, 152, 182, 123, 63, 194, 197, 71, 62, 190, 20,
    123, 63, 205, 230, 84, 62, 226, 103, 122, 63, 130, 254, 97, 62, 9, 176, 121,
    63, 77, 12, 111, 62, 60, 237, 120, 63, 156, 15, 124, 62, 132, 31, 120, 63,
    238, 131, 132, 62, 234, 70, 119, 63, 62, 250, 138, 62, 119, 99, 118, 63,
    117, 106, 145, 62, 54, 117, 117, 63, 76, 212, 151, 62, 48, 124, 116, 63,
    122, 55, 158, 62, 113, 120, 115, 63, 183, 147, 164, 62, 3, 106, 114, 63,
    188, 232, 170, 62, 244, 80, 113, 63, 65, 54, 177, 62, 79, 45, 112, 63, 1,
    124, 183, 62, 33, 255, 110, 63, 180, 185, 189, 62, 118, 198, 109, 63, 21,
    239, 195, 62, 94, 131, 108, 63, 222, 27, 202, 62, 231, 53, 107, 63, 201, 63,
    208, 62, 30, 222, 105, 63, 146, 90, 214, 62, 18, 124, 104, 63, 243, 107,
    220, 62, 212, 15, 103, 63, 170, 115, 226, 62, 116, 153, 101, 63, 113, 113,
    232, 62, 1, 25, 100, 63, 7, 101, 238, 62, 141, 142, 98, 63, 39, 78, 244, 62,
    40, 250, 96, 63, 144, 44, 250, 62, 230, 91, 95, 63, 0, 0, 0, 63, 215, 179,
    93, 63, 27, 228, 2, 63, 15, 2, 92, 63, 119, 194, 5, 63, 160, 70, 90, 63,
    246, 154, 8, 63, 158, 129, 88, 63, 119, 109, 11, 63, 29, 179, 86, 63, 218,
    57, 14, 63, 49, 219, 84, 63, 0, 0, 17, 63, 239, 249, 82, 63, 202, 191, 19,
    63, 108, 15, 81, 63, 24, 121, 22, 63, 189, 27, 79, 63, 205, 43, 25, 63, 248,
    30, 77, 63, 202, 215, 27, 63, 52, 25, 75, 63, 241, 124, 30, 63, 136, 10, 73,
    63, 36, 27, 33, 63, 10, 243, 70, 63, 70, 178, 35, 63, 209, 210, 68, 63, 58,
    66, 38, 63, 247, 169, 66, 63, 227, 202, 40, 63, 147, 120, 64, 63, 37, 76,
    43, 63, 189, 62, 62, 63, 227, 197, 45, 63, 143, 252, 59, 63, 1, 56, 48, 63,
    34, 178, 57, 63, 101, 162, 50, 63, 144, 95, 55, 63, 243, 4, 53, 63, 243, 4,
    53, 63, 144, 95, 55, 63, 101, 162, 50, 63, 34, 178, 57, 63, 1, 56, 48, 63,
    143, 252, 59, 63, 227, 197, 45, 63, 189, 62, 62, 63, 37, 76, 43, 63, 147,
    120, 64, 63, 227, 202, 40, 63, 247, 169, 66, 63, 58, 66, 38, 63, 209, 210,
    68, 63, 70, 178, 35, 63, 10, 243, 70, 63, 36, 27, 33, 63, 136, 10, 73, 63,
    241, 124, 30, 63, 52, 25, 75, 63, 202, 215, 27, 63, 248, 30, 77, 63, 205,
    43, 25, 63, 189, 27, 79, 63, 24, 121, 22, 63, 108, 15, 81, 63, 202, 191, 19,
    63, 239, 249, 82, 63, 0, 0, 17, 63, 49, 219, 84, 63, 218, 57, 14, 63, 29,
    179, 86, 63, 119, 109, 11, 63, 158, 129, 88, 63, 246, 154, 8, 63, 160, 70,
    90, 63, 119, 194, 5, 63, 15, 2, 92, 63, 27, 228, 2, 63, 215, 179, 93, 63, 0,
    0, 0, 63, 230, 91, 95, 63, 144, 44, 250, 62, 40, 250, 96, 63, 39, 78, 244,
    62, 141, 142, 98, 63, 7, 101, 238, 62, 1, 25, 100, 63, 113, 113, 232, 62,
    116, 153, 101, 63, 170, 115, 226, 62, 212, 15, 103, 63, 243, 107, 220, 62,
    18, 124, 104, 63, 146, 90, 214, 62, 30, 222, 105, 63, 201, 63, 208, 62, 231,
    53, 107, 63, 222, 27, 202, 62, 94, 131, 108, 63, 21, 239, 195, 62, 118, 198,
    109, 63, 180, 185, 189, 62, 33, 255, 110, 63, 1, 124, 183, 62, 79, 45, 112,
    63, 65, 54, 177, 62, 244, 80, 113, 63, 188, 232, 170, 62, 3, 106, 114, 63,
    183, 147, 164, 62, 113, 120, 115, 63, 122, 55, 158, 62, 48, 124, 116, 63,
    76, 212, 151, 62, 54, 117, 117, 63, 117, 106, 145, 62, 119, 99, 118, 63, 62,
    250, 138, 62, 234, 70, 119, 63, 238, 131, 132, 62, 132, 31, 120, 63, 156,
    15, 124, 62, 60, 237, 120, 63, 77, 12, 111, 62, 9, 176, 121, 63, 130, 254,
    97, 62, 226, 103, 122, 63, 205, 230, 84, 62, 190, 20, 123, 63, 194, 197, 71,
    62, 152, 182, 123, 63, 243, 155, 58, 62, 103, 77, 124, 63, 245, 105, 45, 62,
    37, 217, 124, 63, 92, 48, 32, 62, 203, 89, 125, 63, 187, 239, 18, 62, 85,
    207, 125, 63, 168, 168, 5, 62, 188, 57, 126, 63, 115, 183, 240, 61, 253,
    152, 126, 63, 4, 19, 214, 61, 18, 237, 126, 63, 51, 101, 187, 61, 249, 53,
    127, 63, 42, 175, 160, 61, 175, 115, 127, 63, 19, 242, 133, 61, 47, 166,
    127, 63, 58, 94, 86, 61, 121, 205, 127, 63, 231, 206, 32, 61, 139, 233, 127,
    63, 10, 113, 214, 60, 99, 250, 127, 63, 191, 117, 86, 60, 60, 0, 0, 0, 137,
    136, 136, 60, 3, 0, 0, 0, 4, 0, 15, 0, 3, 0, 5, 0, 5, 0, 1, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 240, 105, 0, 0, 16, 90, 0,
    0, 0, 0, 0, 0, 120, 0, 0, 0, 136, 136, 8, 60, 2, 0, 0, 0, 4, 0, 30, 0, 2, 0,
    15, 0, 3, 0, 5, 0, 5, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 8, 112, 0, 0, 16, 90, 0, 0, 0, 0, 0, 0, 240, 0, 0, 0, 137, 136, 136, 59,
    1, 0, 0, 0, 4, 0, 60, 0, 4, 0, 15, 0, 3, 0, 5, 0, 5, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 40, 110, 0, 0, 16, 90, 0, 0, 0, 0, 0, 0,
    224, 1, 0, 0, 135, 136, 8, 59, 255, 255, 255, 255, 4, 0, 120, 0, 4, 0, 30,
    0, 2, 0, 15, 0, 3, 0, 5, 0, 5, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    104, 106, 0, 0, 16, 90, 0, 0, 0, 0, 0, 0, 0, 0, 15, 0, 30, 0, 45, 0, 5, 0,
    20, 0, 35, 0, 50, 0, 10, 0, 25, 0, 40, 0, 55, 0, 1, 0, 16, 0, 31, 0, 46, 0,
    6, 0, 21, 0, 36, 0, 51, 0, 11, 0, 26, 0, 41, 0, 56, 0, 2, 0, 17, 0, 32, 0,
    47, 0, 7, 0, 22, 0, 37, 0, 52, 0, 12, 0, 27, 0, 42, 0, 57, 0, 3, 0, 18, 0,
    33, 0, 48, 0, 8, 0, 23, 0, 38, 0, 53, 0, 13, 0, 28, 0, 43, 0, 58, 0, 4, 0,
    19, 0, 34, 0, 49, 0, 9, 0, 24, 0, 39, 0, 54, 0, 14, 0, 29, 0, 44, 0, 59, 0,
    0, 0, 120, 0, 240, 0, 104, 1, 30, 0, 150, 0, 14, 1, 134, 1, 60, 0, 180, 0,
    44, 1, 164, 1, 90, 0, 210, 0, 74, 1, 194, 1, 15, 0, 135, 0, 255, 0, 119, 1,
    45, 0, 165, 0, 29, 1, 149, 1, 75, 0, 195, 0, 59, 1, 179, 1, 105, 0, 225, 0,
    89, 1, 209, 1, 5, 0, 125, 0, 245, 0, 109, 1, 35, 0, 155, 0, 19, 1, 139, 1,
    65, 0, 185, 0, 49, 1, 169, 1, 95, 0, 215, 0, 79, 1, 199, 1, 20, 0, 140, 0,
    4, 1, 124, 1, 50, 0, 170, 0, 34, 1, 154, 1, 80, 0, 200, 0, 64, 1, 184, 1,
    110, 0, 230, 0, 94, 1, 214, 1, 10, 0, 130, 0, 250, 0, 114, 1, 40, 0, 160, 0,
    24, 1, 144, 1, 70, 0, 190, 0, 54, 1, 174, 1, 100, 0, 220, 0, 84, 1, 204, 1,
    25, 0, 145, 0, 9, 1, 129, 1, 55, 0, 175, 0, 39, 1, 159, 1, 85, 0, 205, 0,
    69, 1, 189, 1, 115, 0, 235, 0, 99, 1, 219, 1, 1, 0, 121, 0, 241, 0, 105, 1,
    31, 0, 151, 0, 15, 1, 135, 1, 61, 0, 181, 0, 45, 1, 165, 1, 91, 0, 211, 0,
    75, 1, 195, 1, 16, 0, 136, 0, 0, 1, 120, 1, 46, 0, 166, 0, 30, 1, 150, 1,
    76, 0, 196, 0, 60, 1, 180, 1, 106, 0, 226, 0, 90, 1, 210, 1, 6, 0, 126, 0,
    246, 0, 110, 1, 36, 0, 156, 0, 20, 1, 140, 1, 66, 0, 186, 0, 50, 1, 170, 1,
    96, 0, 216, 0, 80, 1, 200, 1, 21, 0, 141, 0, 5, 1, 125, 1, 51, 0, 171, 0,
    35, 1, 155, 1, 81, 0, 201, 0, 65, 1, 185, 1, 111, 0, 231, 0, 95, 1, 215, 1,
    11, 0, 131, 0, 251, 0, 115, 1, 41, 0, 161, 0, 25, 1, 145, 1, 71, 0, 191, 0,
    55, 1, 175, 1, 101, 0, 221, 0, 85, 1, 205, 1, 26, 0, 146, 0, 10, 1, 130, 1,
    56, 0, 176, 0, 40, 1, 160, 1, 86, 0, 206, 0, 70, 1, 190, 1, 116, 0, 236, 0,
    100, 1, 220, 1, 2, 0, 122, 0, 242, 0, 106, 1, 32, 0, 152, 0, 16, 1, 136, 1,
    62, 0, 182, 0, 46, 1, 166, 1, 92, 0, 212, 0, 76, 1, 196, 1, 17, 0, 137, 0,
    1, 1, 121, 1, 47, 0, 167, 0, 31, 1, 151, 1, 77, 0, 197, 0, 61, 1, 181, 1,
    107, 0, 227, 0, 91, 1, 211, 1, 7, 0, 127, 0, 247, 0, 111, 1, 37, 0, 157, 0,
    21, 1, 141, 1, 67, 0, 187, 0, 51, 1, 171, 1, 97, 0, 217, 0, 81, 1, 201, 1,
    22, 0, 142, 0, 6, 1, 126, 1, 52, 0, 172, 0, 36, 1, 156, 1, 82, 0, 202, 0,
    66, 1, 186, 1, 112, 0, 232, 0, 96, 1, 216, 1, 12, 0, 132, 0, 252, 0, 116, 1,
    42, 0, 162, 0, 26, 1, 146, 1, 72, 0, 192, 0, 56, 1, 176, 1, 102, 0, 222, 0,
    86, 1, 206, 1, 27, 0, 147, 0, 11, 1, 131, 1, 57, 0, 177, 0, 41, 1, 161, 1,
    87, 0, 207, 0, 71, 1, 191, 1, 117, 0, 237, 0, 101, 1, 221, 1, 3, 0, 123, 0,
    243, 0, 107, 1, 33, 0, 153, 0, 17, 1, 137, 1, 63, 0, 183, 0, 47, 1, 167, 1,
    93, 0, 213, 0, 77, 1, 197, 1, 18, 0, 138, 0, 2, 1, 122, 1, 48, 0, 168, 0,
    32, 1, 152, 1, 78, 0, 198, 0, 62, 1, 182, 1, 108, 0, 228, 0, 92, 1, 212, 1,
    8, 0, 128, 0, 248, 0, 112, 1, 38, 0, 158, 0, 22, 1, 142, 1, 68, 0, 188, 0,
    52, 1, 172, 1, 98, 0, 218, 0, 82, 1, 202, 1, 23, 0, 143, 0, 7, 1, 127, 1,
    53, 0, 173, 0, 37, 1, 157, 1, 83, 0, 203, 0, 67, 1, 187, 1, 113, 0, 233, 0,
    97, 1, 217, 1, 13, 0, 133, 0, 253, 0, 117, 1, 43, 0, 163, 0, 27, 1, 147, 1,
    73, 0, 193, 0, 57, 1, 177, 1, 103, 0, 223, 0, 87, 1, 207, 1, 28, 0, 148, 0,
    12, 1, 132, 1, 58, 0, 178, 0, 42, 1, 162, 1, 88, 0, 208, 0, 72, 1, 192, 1,
    118, 0, 238, 0, 102, 1, 222, 1, 4, 0, 124, 0, 244, 0, 108, 1, 34, 0, 154, 0,
    18, 1, 138, 1, 64, 0, 184, 0, 48, 1, 168, 1, 94, 0, 214, 0, 78, 1, 198, 1,
    19, 0, 139, 0, 3, 1, 123, 1, 49, 0, 169, 0, 33, 1, 153, 1, 79, 0, 199, 0,
    63, 1, 183, 1, 109, 0, 229, 0, 93, 1, 213, 1, 9, 0, 129, 0, 249, 0, 113, 1,
    39, 0, 159, 0, 23, 1, 143, 1, 69, 0, 189, 0, 53, 1, 173, 1, 99, 0, 219, 0,
    83, 1, 203, 1, 24, 0, 144, 0, 8, 1, 128, 1, 54, 0, 174, 0, 38, 1, 158, 1,
    84, 0, 204, 0, 68, 1, 188, 1, 114, 0, 234, 0, 98, 1, 218, 1, 14, 0, 134, 0,
    254, 0, 118, 1, 44, 0, 164, 0, 28, 1, 148, 1, 74, 0, 194, 0, 58, 1, 178, 1,
    104, 0, 224, 0, 88, 1, 208, 1, 29, 0, 149, 0, 13, 1, 133, 1, 59, 0, 179, 0,
    43, 1, 163, 1, 89, 0, 209, 0, 73, 1, 193, 1, 119, 0, 239, 0, 103, 1, 223, 1,
    0, 0, 60, 0, 120, 0, 180, 0, 15, 0, 75, 0, 135, 0, 195, 0, 30, 0, 90, 0,
    150, 0, 210, 0, 45, 0, 105, 0, 165, 0, 225, 0, 5, 0, 65, 0, 125, 0, 185, 0,
    20, 0, 80, 0, 140, 0, 200, 0, 35, 0, 95, 0, 155, 0, 215, 0, 50, 0, 110, 0,
    170, 0, 230, 0, 10, 0, 70, 0, 130, 0, 190, 0, 25, 0, 85, 0, 145, 0, 205, 0,
    40, 0, 100, 0, 160, 0, 220, 0, 55, 0, 115, 0, 175, 0, 235, 0, 1, 0, 61, 0,
    121, 0, 181, 0, 16, 0, 76, 0, 136, 0, 196, 0, 31, 0, 91, 0, 151, 0, 211, 0,
    46, 0, 106, 0, 166, 0, 226, 0, 6, 0, 66, 0, 126, 0, 186, 0, 21, 0, 81, 0,
    141, 0, 201, 0, 36, 0, 96, 0, 156, 0, 216, 0, 51, 0, 111, 0, 171, 0, 231, 0,
    11, 0, 71, 0, 131, 0, 191, 0, 26, 0, 86, 0, 146, 0, 206, 0, 41, 0, 101, 0,
    161, 0, 221, 0, 56, 0, 116, 0, 176, 0, 236, 0, 2, 0, 62, 0, 122, 0, 182, 0,
    17, 0, 77, 0, 137, 0, 197, 0, 32, 0, 92, 0, 152, 0, 212, 0, 47, 0, 107, 0,
    167, 0, 227, 0, 7, 0, 67, 0, 127, 0, 187, 0, 22, 0, 82, 0, 142, 0, 202, 0,
    37, 0, 97, 0, 157, 0, 217, 0, 52, 0, 112, 0, 172, 0, 232, 0, 12, 0, 72, 0,
    132, 0, 192, 0, 27, 0, 87, 0, 147, 0, 207, 0, 42, 0, 102, 0, 162, 0, 222, 0,
    57, 0, 117, 0, 177, 0, 237, 0, 3, 0, 63, 0, 123, 0, 183, 0, 18, 0, 78, 0,
    138, 0, 198, 0, 33, 0, 93, 0, 153, 0, 213, 0, 48, 0, 108, 0, 168, 0, 228, 0,
    8, 0, 68, 0, 128, 0, 188, 0, 23, 0, 83, 0, 143, 0, 203, 0, 38, 0, 98, 0,
    158, 0, 218, 0, 53, 0, 113, 0, 173, 0, 233, 0, 13, 0, 73, 0, 133, 0, 193, 0,
    28, 0, 88, 0, 148, 0, 208, 0, 43, 0, 103, 0, 163, 0, 223, 0, 58, 0, 118, 0,
    178, 0, 238, 0, 4, 0, 64, 0, 124, 0, 184, 0, 19, 0, 79, 0, 139, 0, 199, 0,
    34, 0, 94, 0, 154, 0, 214, 0, 49, 0, 109, 0, 169, 0, 229, 0, 9, 0, 69, 0,
    129, 0, 189, 0, 24, 0, 84, 0, 144, 0, 204, 0, 39, 0, 99, 0, 159, 0, 219, 0,
    54, 0, 114, 0, 174, 0, 234, 0, 14, 0, 74, 0, 134, 0, 194, 0, 29, 0, 89, 0,
    149, 0, 209, 0, 44, 0, 104, 0, 164, 0, 224, 0, 59, 0, 119, 0, 179, 0, 239,
    0, 0, 0, 30, 0, 60, 0, 90, 0, 15, 0, 45, 0, 75, 0, 105, 0, 5, 0, 35, 0, 65,
    0, 95, 0, 20, 0, 50, 0, 80, 0, 110, 0, 10, 0, 40, 0, 70, 0, 100, 0, 25, 0,
    55, 0, 85, 0, 115, 0, 1, 0, 31, 0, 61, 0, 91, 0, 16, 0, 46, 0, 76, 0, 106,
    0, 6, 0, 36, 0, 66, 0, 96, 0, 21, 0, 51, 0, 81, 0, 111, 0, 11, 0, 41, 0, 71,
    0, 101, 0, 26, 0, 56, 0, 86, 0, 116, 0, 2, 0, 32, 0, 62, 0, 92, 0, 17, 0,
    47, 0, 77, 0, 107, 0, 7, 0, 37, 0, 67, 0, 97, 0, 22, 0, 52, 0, 82, 0, 112,
    0, 12, 0, 42, 0, 72, 0, 102, 0, 27, 0, 57, 0, 87, 0, 117, 0, 3, 0, 33, 0,
    63, 0, 93, 0, 18, 0, 48, 0, 78, 0, 108, 0, 8, 0, 38, 0, 68, 0, 98, 0, 23, 0,
    53, 0, 83, 0, 113, 0, 13, 0, 43, 0, 73, 0, 103, 0, 28, 0, 58, 0, 88, 0, 118,
    0, 4, 0, 34, 0, 64, 0, 94, 0, 19, 0, 49, 0, 79, 0, 109, 0, 9, 0, 39, 0, 69,
    0, 99, 0, 24, 0, 54, 0, 84, 0, 114, 0, 14, 0, 44, 0, 74, 0, 104, 0, 29, 0,
    59, 0, 89, 0, 119, 0, 168, 251, 0, 0, 0, 0, 0, 0, 184, 252, 0, 0, 0, 0, 0,
    0, 216, 253, 0, 0, 0, 0, 0, 0, 136, 25, 1, 0, 0, 0, 0, 0, 40, 83, 1, 0, 0,
    0, 0, 0, 168, 105, 1, 0, 0, 0, 0, 0, 24, 110, 1, 0, 0, 0, 0, 0, 48, 120, 1,
    0, 0, 0, 0, 0, 104, 121, 1, 0, 0, 0, 0, 0, 136, 129, 1, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 136, 19, 0, 0, 15, 0, 0, 0, 10, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 10,
    0, 0, 0, 0, 0, 0, 0, 232, 201, 0, 0, 16, 0, 0, 0, 32, 0, 0, 0, 104, 181, 0,
    0, 24, 0, 0, 0, 0, 0, 0, 0, 16, 213, 2, 0, 28, 0, 0, 0, 0, 0, 0, 0, 192,
    197, 2, 0, 36, 0, 0, 0, 0, 0, 0, 0, 48, 179, 2, 0, 40, 0, 0, 0, 0, 0, 0, 0,
    160, 165, 2, 0, 32, 0, 0, 0, 0, 0, 0, 0, 104, 153, 2, 0, 64, 0, 0, 0, 0, 0,
    0, 0, 88, 141, 2, 0, 44, 0, 0, 0, 0, 0, 0, 0, 96, 127, 2, 0, 60, 0, 0, 0, 0,
    0, 0, 0, 168, 116, 2, 0, 180, 0, 0, 0, 10, 0, 0, 0, 56, 106, 2, 0, 132, 0,
    0, 0, 0, 0, 0, 0, 48, 96, 2, 0, 4, 0, 0, 0, 8, 0, 0, 0, 96, 88, 2, 0, 200,
    0, 0, 0, 8, 0, 0, 0, 8, 81, 2, 0, 184, 0, 0, 0, 8, 0, 0, 0, 208, 71, 2, 0,
    196, 0, 0, 0, 8, 0, 0, 0, 208, 61, 2, 0, 148, 0, 0, 0, 10, 0, 0, 0, 160, 52,
    2, 0, 12, 0, 0, 0, 8, 0, 0, 0, 120, 42, 2, 0, 8, 0, 0, 0, 19, 0, 0, 0, 64,
    33, 2, 0, 140, 0, 0, 0, 10, 0, 0, 0, 184, 25, 2, 0, 192, 0, 0, 0, 8, 0, 0,
    0, 192, 19, 2, 0, 168, 0, 0, 0, 8, 0, 0, 0, 248, 13, 2, 0, 120, 0, 0, 0, 0,
    0, 0, 0, 240, 7, 2, 0, 20, 0, 0, 0, 32, 0, 0, 0, 216, 3, 2, 0, 48, 0, 0, 0,
    8, 0, 0, 0, 48, 255, 1, 0, 92, 0, 0, 0, 0, 0, 0, 0, 248, 249, 1, 0, 96, 0,
    0, 0, 0, 0, 0, 0, 96, 245, 1, 0, 100, 0, 0, 0, 0, 0, 0, 0, 160, 240, 1, 0,
    176, 0, 0, 0, 24, 0, 0, 0, 96, 235, 1, 0, 188, 0, 0, 0, 16, 0, 0, 0, 168,
    231, 1, 0, 160, 0, 0, 0, 8, 0, 0, 0, 88, 228, 1, 0, 144, 0, 0, 0, 10, 0, 0,
    0, 32, 225, 1, 0, 156, 0, 0, 0, 8, 0, 0, 0, 208, 221, 1, 0, 204, 0, 0, 0, 8,
    0, 0, 0, 168, 218, 1, 0, 112, 0, 0, 0, 0, 0, 0, 0, 32, 214, 1, 0, 104, 0, 0,
    0, 0, 0, 0, 0, 176, 208, 1, 0, 108, 0, 0, 0, 0, 0, 0, 0, 240, 203, 1, 0,
    164, 0, 0, 0, 8, 0, 0, 0, 224, 199, 1, 0, 116, 0, 0, 0, 0, 0, 0, 0, 208,
    194, 1, 0, 84, 0, 0, 0, 32, 0, 0, 0, 208, 189, 1, 0, 52, 0, 0, 0, 32, 0, 0,
    0, 232, 185, 1, 0, 56, 0, 0, 0, 32, 0, 0, 0, 56, 182, 1, 0, 68, 0, 0, 0, 0,
    0, 0, 0, 72, 179, 1, 0, 72, 0, 0, 0, 0, 0, 0, 0, 128, 176, 1, 0, 76, 0, 0,
    0, 0, 0, 0, 0, 152, 171, 1, 0, 80, 0, 0, 0, 0, 0, 0, 0, 224, 166, 1, 0, 88,
    0, 0, 0, 32, 0, 0, 0, 112, 163, 1, 0, 124, 0, 0, 0, 0, 0, 0, 0, 192, 159, 1,
    0, 128, 0, 0, 0, 0, 0, 0, 0, 48, 156, 1, 0, 136, 0, 0, 0, 0, 0, 0, 0, 32,
    153, 1, 0, 152, 0, 0, 0, 32, 0, 0, 0, 24, 149, 1, 0, 172, 0, 0, 0, 16, 0, 0,
    0, 0, 0, 0, 0, 24, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 74, 29,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0,
    3, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 1, 0, 0, 0, 3, 0, 0, 0, 2, 0, 0, 0, 3,
    0, 0, 0, 0, 0, 1, 0, 2, 0, 3, 0, 4, 0, 5, 0, 6, 0, 7, 0, 8, 0, 10, 0, 12, 0,
    14, 0, 16, 0, 20, 0, 24, 0, 28, 0, 34, 0, 40, 0, 48, 0, 60, 0, 78, 0, 100,
    0, 0, 0, 0, 0, 72, 127, 65, 129, 66, 128, 65, 128, 64, 128, 62, 128, 64,
    128, 64, 128, 92, 78, 92, 79, 92, 78, 90, 79, 116, 41, 115, 40, 114, 40,
    132, 26, 132, 26, 145, 17, 161, 12, 176, 10, 177, 11, 24, 179, 48, 138, 54,
    135, 54, 132, 53, 134, 56, 133, 55, 132, 55, 132, 61, 114, 70, 96, 74, 88,
    75, 88, 87, 74, 89, 66, 91, 67, 100, 59, 108, 50, 120, 40, 122, 37, 97, 43,
    78, 50, 83, 78, 84, 81, 88, 75, 86, 74, 87, 71, 90, 73, 93, 74, 93, 74, 109,
    40, 114, 36, 117, 34, 117, 34, 143, 17, 145, 18, 146, 19, 162, 12, 165, 10,
    178, 7, 189, 6, 190, 8, 177, 9, 23, 178, 54, 115, 63, 102, 66, 98, 69, 99,
    74, 89, 71, 91, 73, 91, 78, 89, 86, 80, 92, 66, 93, 64, 102, 59, 103, 60,
    104, 60, 117, 52, 123, 44, 138, 35, 133, 31, 97, 38, 77, 45, 61, 90, 93, 60,
    105, 42, 107, 41, 110, 45, 116, 38, 113, 38, 112, 38, 124, 26, 132, 27, 136,
    19, 140, 20, 155, 14, 159, 16, 158, 18, 170, 13, 177, 10, 187, 8, 192, 6,
    175, 9, 159, 10, 21, 178, 59, 110, 71, 86, 75, 85, 84, 83, 91, 66, 88, 73,
    87, 72, 92, 75, 98, 72, 105, 58, 107, 54, 115, 52, 114, 55, 112, 56, 129,
    51, 132, 40, 150, 33, 140, 29, 98, 35, 77, 42, 42, 121, 96, 66, 108, 43,
    111, 40, 117, 44, 123, 32, 120, 36, 119, 33, 127, 33, 134, 34, 139, 21, 147,
    23, 152, 20, 158, 25, 154, 26, 166, 21, 173, 16, 184, 13, 184, 10, 150, 13,
    139, 15, 22, 178, 63, 114, 74, 82, 84, 83, 92, 82, 103, 62, 96, 72, 96, 67,
    101, 73, 107, 72, 113, 55, 118, 52, 125, 52, 118, 52, 117, 55, 135, 49, 137,
    39, 157, 32, 145, 29, 97, 33, 77, 40, 0, 0, 206, 64, 0, 0, 200, 64, 0, 0,
    184, 64, 0, 0, 170, 64, 0, 0, 162, 64, 0, 0, 154, 64, 0, 0, 144, 64, 0, 0,
    140, 64, 0, 0, 156, 64, 0, 0, 150, 64, 0, 0, 146, 64, 0, 0, 142, 64, 0, 0,
    156, 64, 0, 0, 148, 64, 0, 0, 138, 64, 0, 0, 144, 64, 0, 0, 140, 64, 0, 0,
    148, 64, 0, 0, 152, 64, 0, 0, 142, 64, 0, 0, 112, 64, 0, 0, 112, 64, 0, 0,
    112, 64, 0, 0, 112, 64, 0, 0, 112, 64, 0, 0, 0, 0, 16, 0, 17, 0, 18, 0, 0,
    0, 8, 0, 7, 0, 9, 0, 6, 0, 10, 0, 5, 0, 11, 0, 4, 0, 12, 0, 3, 0, 13, 0, 2,
    0, 14, 0, 1, 0, 15, 0, 0, 0, 64, 211, 2, 0, 64, 0, 0, 0, 144, 169, 0, 0, 32,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 216, 190, 0, 0, 30, 0, 0, 0, 248, 188, 0, 0, 96, 0, 0, 0,
    248, 186, 0, 0, 18, 0, 0, 0, 112, 185, 0, 0, 104, 0, 0, 0, 24, 184, 0, 0,
    134, 0, 0, 0, 200, 182, 0, 0, 80, 0, 0, 0, 152, 181, 0, 0, 44, 0, 0, 0, 208,
    179, 0, 0, 108, 0, 0, 0, 96, 177, 0, 0, 50, 0, 0, 0, 192, 175, 0, 0, 8, 0,
    0, 0, 16, 174, 0, 0, 122, 0, 0, 0, 88, 172, 0, 0, 94, 0, 0, 0, 224, 170, 0,
    0, 118, 0, 0, 0, 144, 169, 0, 0, 90, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 67, 0, 0, 0, 66, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 6, 0, 3, 0, 7, 3, 0, 1, 10, 0, 2, 6, 18, 10, 12, 0, 4, 0, 2, 0,
    0, 0, 9, 4, 7, 4, 0, 3, 12, 7, 7, 0, 128, 227, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    0, 156, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 216, 54, 2, 0, 3, 0, 0, 0, 0, 0, 0, 0,
    56, 246, 1, 0, 4, 0, 0, 0, 0, 0, 0, 0, 24, 205, 1, 0, 5, 0, 0, 0, 0, 0, 0,
    0, 8, 164, 1, 0, 6, 0, 0, 0, 0, 0, 0, 0, 224, 250, 0, 0, 7, 0, 0, 0, 0, 0,
    0, 0, 64, 220, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 24, 195, 0, 0, 9,
  ],
  "i8",
  ALLOC_NONE,
  Runtime.GLOBAL_BASE + 20480
);
/* memory initializer */ allocate(
  [
    88, 176, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 184, 207, 2, 0, 11, 0, 0, 0, 0, 0,
    0, 0, 224, 192, 2, 0, 12, 0, 0, 0, 0, 0, 0, 0, 216, 174, 2, 0, 13, 0, 0, 0,
    0, 0, 0, 0, 40, 161, 2, 0, 14, 0, 0, 0, 0, 0, 0, 0, 80, 149, 2, 0, 15, 0, 0,
    0, 0, 0, 0, 0, 224, 135, 2, 0, 16, 0, 0, 0, 0, 0, 0, 0, 128, 123, 2, 0, 17,
    0, 0, 0, 0, 0, 0, 0, 208, 112, 2, 0, 18, 0, 0, 0, 0, 0, 0, 0, 168, 102, 2,
    0, 19, 0, 0, 0, 0, 0, 0, 0, 24, 93, 2, 0, 20, 0, 0, 0, 0, 0, 0, 0, 88, 85,
    2, 0, 21, 0, 0, 0, 0, 0, 0, 0, 72, 77, 2, 0, 22, 0, 0, 0, 0, 0, 0, 0, 160,
    68, 2, 0, 23, 0, 0, 0, 0, 0, 0, 0, 208, 58, 2, 0, 24, 0, 0, 0, 0, 0, 0, 0,
    72, 49, 2, 0, 25, 0, 0, 0, 0, 0, 0, 0, 32, 39, 2, 0, 26, 0, 0, 0, 0, 0, 0,
    0, 224, 29, 2, 0, 27, 0, 0, 0, 0, 0, 0, 0, 200, 22, 2, 0, 28, 0, 0, 0, 0, 0,
    0, 0, 88, 17, 2, 0, 29, 0, 0, 0, 0, 0, 0, 0, 176, 11, 2, 0, 30, 0, 0, 0, 0,
    0, 0, 0, 32, 6, 2, 0, 31, 0, 0, 0, 0, 0, 0, 0, 72, 2, 2, 0, 32, 0, 0, 0, 0,
    0, 0, 0, 248, 252, 1, 0, 33, 0, 0, 0, 0, 0, 0, 0, 16, 248, 1, 0, 34, 0, 0,
    0, 0, 0, 0, 0, 40, 244, 1, 0, 35, 0, 0, 0, 0, 0, 0, 0, 120, 238, 1, 0, 36,
    0, 0, 0, 0, 0, 0, 0, 184, 233, 1, 0, 37, 0, 0, 0, 0, 0, 0, 0, 16, 230, 1, 0,
    38, 0, 0, 0, 0, 0, 0, 0, 200, 226, 1, 0, 39, 0, 0, 0, 0, 0, 0, 0, 120, 223,
    1, 0, 40, 0, 0, 0, 0, 0, 0, 0, 0, 220, 1, 0, 41, 0, 0, 0, 0, 0, 0, 0, 176,
    216, 1, 0, 42, 0, 0, 0, 0, 0, 0, 0, 0, 212, 1, 0, 43, 0, 0, 0, 0, 0, 0, 0,
    184, 206, 1, 0, 44, 0, 0, 0, 0, 0, 0, 0, 192, 202, 1, 0, 45, 0, 0, 0, 0, 0,
    0, 0, 16, 198, 1, 0, 46, 0, 0, 0, 0, 0, 0, 0, 8, 192, 1, 0, 47, 0, 0, 0, 0,
    0, 0, 0, 224, 187, 1, 0, 48, 0, 0, 0, 0, 0, 0, 0, 80, 184, 1, 0, 49, 0, 0,
    0, 0, 0, 0, 0, 200, 180, 1, 0, 50, 0, 0, 0, 0, 0, 0, 0, 208, 177, 1, 0, 51,
    0, 0, 0, 0, 0, 0, 0, 232, 174, 1, 0, 52, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 95, 112, 137, 0, 255, 9, 47, 15, 10, 0, 0,
    0, 100, 0, 0, 0, 232, 3, 0, 0, 16, 39, 0, 0, 160, 134, 1, 0, 64, 66, 15, 0,
    128, 150, 152, 0, 0, 225, 245, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 0, 0, 0, 0,
    0, 0, 33, 16, 66, 32, 99, 48, 132, 64, 165, 80, 198, 96, 231, 112, 8, 129,
    41, 145, 74, 161, 107, 177, 140, 193, 173, 209, 206, 225, 239, 241, 49, 18,
    16, 2, 115, 50, 82, 34, 181, 82, 148, 66, 247, 114, 214, 98, 57, 147, 24,
    131, 123, 179, 90, 163, 189, 211, 156, 195, 255, 243, 222, 227, 98, 36, 67,
    52, 32, 4, 1, 20, 230, 100, 199, 116, 164, 68, 133, 84, 106, 165, 75, 181,
    40, 133, 9, 149, 238, 229, 207, 245, 172, 197, 141, 213, 83, 54, 114, 38,
    17, 22, 48, 6, 215, 118, 246, 102, 149, 86, 180, 70, 91, 183, 122, 167, 25,
    151, 56, 135, 223, 247, 254, 231, 157, 215, 188, 199, 196, 72, 229, 88, 134,
    104, 167, 120, 64, 8, 97, 24, 2, 40, 35, 56, 204, 201, 237, 217, 142, 233,
    175, 249, 72, 137, 105, 153, 10, 169, 43, 185, 245, 90, 212, 74, 183, 122,
    150, 106, 113, 26, 80, 10, 51, 58, 18, 42, 253, 219, 220, 203, 191, 251,
    158, 235, 121, 155, 88, 139, 59, 187, 26, 171, 166, 108, 135, 124, 228, 76,
    197, 92, 34, 44, 3, 60, 96, 12, 65, 28, 174, 237, 143, 253, 236, 205, 205,
    221, 42, 173, 11, 189, 104, 141, 73, 157, 151, 126, 182, 110, 213, 94, 244,
    78, 19, 62, 50, 46, 81, 30, 112, 14, 159, 255, 190, 239, 221, 223, 252, 207,
    27, 191, 58, 175, 89, 159, 120, 143, 136, 145, 169, 129, 202, 177, 235, 161,
    12, 209, 45, 193, 78, 241, 111, 225, 128, 16, 161, 0, 194, 48, 227, 32, 4,
    80, 37, 64, 70, 112, 103, 96, 185, 131, 152, 147, 251, 163, 218, 179, 61,
    195, 28, 211, 127, 227, 94, 243, 177, 2, 144, 18, 243, 34, 210, 50, 53, 66,
    20, 82, 119, 98, 86, 114, 234, 181, 203, 165, 168, 149, 137, 133, 110, 245,
    79, 229, 44, 213, 13, 197, 226, 52, 195, 36, 160, 20, 129, 4, 102, 116, 71,
    100, 36, 84, 5, 68, 219, 167, 250, 183, 153, 135, 184, 151, 95, 231, 126,
    247, 29, 199, 60, 215, 211, 38, 242, 54, 145, 6, 176, 22, 87, 102, 118, 118,
    21, 70, 52, 86, 76, 217, 109, 201, 14, 249, 47, 233, 200, 153, 233, 137,
    138, 185, 171, 169, 68, 88, 101, 72, 6, 120, 39, 104, 192, 24, 225, 8, 130,
    56, 163, 40, 125, 203, 92, 219, 63, 235, 30, 251, 249, 139, 216, 155, 187,
    171, 154, 187, 117, 74, 84, 90, 55, 106, 22, 122, 241, 10, 208, 26, 179, 42,
    146, 58, 46, 253, 15, 237, 108, 221, 77, 205, 170, 189, 139, 173, 232, 157,
    201, 141, 38, 124, 7, 108, 100, 92, 69, 76, 162, 60, 131, 44, 224, 28, 193,
    12, 31, 239, 62, 255, 93, 207, 124, 223, 155, 175, 186, 191, 217, 143, 248,
    159, 23, 110, 54, 126, 85, 78, 116, 94, 147, 46, 178, 62, 209, 14, 240, 30,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 150, 48, 7, 119, 44, 97, 14, 238, 186,
    81, 9, 153, 25, 196, 109, 7, 143, 244, 106, 112, 53, 165, 99, 233, 163, 149,
    100, 158, 50, 136, 219, 14, 164, 184, 220, 121, 30, 233, 213, 224, 136, 217,
    210, 151, 43, 76, 182, 9, 189, 124, 177, 126, 7, 45, 184, 231, 145, 29, 191,
    144, 100, 16, 183, 29, 242, 32, 176, 106, 72, 113, 185, 243, 222, 65, 190,
    132, 125, 212, 218, 26, 235, 228, 221, 109, 81, 181, 212, 244, 199, 133,
    211, 131, 86, 152, 108, 19, 192, 168, 107, 100, 122, 249, 98, 253, 236, 201,
    101, 138, 79, 92, 1, 20, 217, 108, 6, 99, 99, 61, 15, 250, 245, 13, 8, 141,
    200, 32, 110, 59, 94, 16, 105, 76, 228, 65, 96, 213, 114, 113, 103, 162,
    209, 228, 3, 60, 71, 212, 4, 75, 253, 133, 13, 210, 107, 181, 10, 165, 250,
    168, 181, 53, 108, 152, 178, 66, 214, 201, 187, 219, 64, 249, 188, 172, 227,
    108, 216, 50, 117, 92, 223, 69, 207, 13, 214, 220, 89, 61, 209, 171, 172,
    48, 217, 38, 58, 0, 222, 81, 128, 81, 215, 200, 22, 97, 208, 191, 181, 244,
    180, 33, 35, 196, 179, 86, 153, 149, 186, 207, 15, 165, 189, 184, 158, 184,
    2, 40, 8, 136, 5, 95, 178, 217, 12, 198, 36, 233, 11, 177, 135, 124, 111,
    47, 17, 76, 104, 88, 171, 29, 97, 193, 61, 45, 102, 182, 144, 65, 220, 118,
    6, 113, 219, 1, 188, 32, 210, 152, 42, 16, 213, 239, 137, 133, 177, 113, 31,
    181, 182, 6, 165, 228, 191, 159, 51, 212, 184, 232, 162, 201, 7, 120, 52,
    249, 0, 15, 142, 168, 9, 150, 24, 152, 14, 225, 187, 13, 106, 127, 45, 61,
    109, 8, 151, 108, 100, 145, 1, 92, 99, 230, 244, 81, 107, 107, 98, 97, 108,
    28, 216, 48, 101, 133, 78, 0, 98, 242, 237, 149, 6, 108, 123, 165, 1, 27,
    193, 244, 8, 130, 87, 196, 15, 245, 198, 217, 176, 101, 80, 233, 183, 18,
    234, 184, 190, 139, 124, 136, 185, 252, 223, 29, 221, 98, 73, 45, 218, 21,
    243, 124, 211, 140, 101, 76, 212, 251, 88, 97, 178, 77, 206, 81, 181, 58,
    116, 0, 188, 163, 226, 48, 187, 212, 65, 165, 223, 74, 215, 149, 216, 61,
    109, 196, 209, 164, 251, 244, 214, 211, 106, 233, 105, 67, 252, 217, 110,
    52, 70, 136, 103, 173, 208, 184, 96, 218, 115, 45, 4, 68, 229, 29, 3, 51,
    95, 76, 10, 170, 201, 124, 13, 221, 60, 113, 5, 80, 170, 65, 2, 39, 16, 16,
    11, 190, 134, 32, 12, 201, 37, 181, 104, 87, 179, 133, 111, 32, 9, 212, 102,
    185, 159, 228, 97, 206, 14, 249, 222, 94, 152, 201, 217, 41, 34, 152, 208,
    176, 180, 168, 215, 199, 23, 61, 179, 89, 129, 13, 180, 46, 59, 92, 189,
    183, 173, 108, 186, 192, 32, 131, 184, 237, 182, 179, 191, 154, 12, 226,
    182, 3, 154, 210, 177, 116, 57, 71, 213, 234, 175, 119, 210, 157, 21, 38,
    219, 4, 131, 22, 220, 115, 18, 11, 99, 227, 132, 59, 100, 148, 62, 106, 109,
    13, 168, 90, 106, 122, 11, 207, 14, 228, 157, 255, 9, 147, 39, 174, 0, 10,
    177, 158, 7, 125, 68, 147, 15, 240, 210, 163, 8, 135, 104, 242, 1, 30, 254,
    194, 6, 105, 93, 87, 98, 247, 203, 103, 101, 128, 113, 54, 108, 25, 231, 6,
    107, 110, 118, 27, 212, 254, 224, 43, 211, 137, 90, 122, 218, 16, 204, 74,
    221, 103, 111, 223, 185, 249, 249, 239, 190, 142, 67, 190, 183, 23, 213,
    142, 176, 96, 232, 163, 214, 214, 126, 147, 209, 161, 196, 194, 216, 56, 82,
    242, 223, 79, 241, 103, 187, 209, 103, 87, 188, 166, 221, 6, 181, 63, 75,
    54, 178, 72, 218, 43, 13, 216, 76, 27, 10, 175, 246, 74, 3, 54, 96, 122, 4,
    65, 195, 239, 96, 223, 85, 223, 103, 168, 239, 142, 110, 49, 121, 190, 105,
    70, 140, 179, 97, 203, 26, 131, 102, 188, 160, 210, 111, 37, 54, 226, 104,
    82, 149, 119, 12, 204, 3, 71, 11, 187, 185, 22, 2, 34, 47, 38, 5, 85, 190,
    59, 186, 197, 40, 11, 189, 178, 146, 90, 180, 43, 4, 106, 179, 92, 167, 255,
    215, 194, 49, 207, 208, 181, 139, 158, 217, 44, 29, 174, 222, 91, 176, 194,
    100, 155, 38, 242, 99, 236, 156, 163, 106, 117, 10, 147, 109, 2, 169, 6, 9,
    156, 63, 54, 14, 235, 133, 103, 7, 114, 19, 87, 0, 5, 130, 74, 191, 149, 20,
    122, 184, 226, 174, 43, 177, 123, 56, 27, 182, 12, 155, 142, 210, 146, 13,
    190, 213, 229, 183, 239, 220, 124, 33, 223, 219, 11, 212, 210, 211, 134, 66,
    226, 212, 241, 248, 179, 221, 104, 110, 131, 218, 31, 205, 22, 190, 129, 91,
    38, 185, 246, 225, 119, 176, 111, 119, 71, 183, 24, 230, 90, 8, 136, 112,
    106, 15, 255, 202, 59, 6, 102, 92, 11, 1, 17, 255, 158, 101, 143, 105, 174,
    98, 248, 211, 255, 107, 97, 69, 207, 108, 22, 120, 226, 10, 160, 238, 210,
    13, 215, 84, 131, 4, 78, 194, 179, 3, 57, 97, 38, 103, 167, 247, 22, 96,
    208, 77, 71, 105, 73, 219, 119, 110, 62, 74, 106, 209, 174, 220, 90, 214,
    217, 102, 11, 223, 64, 240, 59, 216, 55, 83, 174, 188, 169, 197, 158, 187,
    222, 127, 207, 178, 71, 233, 255, 181, 48, 28, 242, 189, 189, 138, 194, 186,
    202, 48, 147, 179, 83, 166, 163, 180, 36, 5, 54, 208, 186, 147, 6, 215, 205,
    41, 87, 222, 84, 191, 103, 217, 35, 46, 122, 102, 179, 184, 74, 97, 196, 2,
    27, 104, 93, 148, 43, 111, 42, 55, 190, 11, 180, 161, 142, 12, 195, 27, 223,
    5, 90, 141, 239, 2, 45, 0, 0, 0, 0, 65, 49, 27, 25, 130, 98, 54, 50, 195,
    83, 45, 43, 4, 197, 108, 100, 69, 244, 119, 125, 134, 167, 90, 86, 199, 150,
    65, 79, 8, 138, 217, 200, 73, 187, 194, 209, 138, 232, 239, 250, 203, 217,
    244, 227, 12, 79, 181, 172, 77, 126, 174, 181, 142, 45, 131, 158, 207, 28,
    152, 135, 81, 18, 194, 74, 16, 35, 217, 83, 211, 112, 244, 120, 146, 65,
    239, 97, 85, 215, 174, 46, 20, 230, 181, 55, 215, 181, 152, 28, 150, 132,
    131, 5, 89, 152, 27, 130, 24, 169, 0, 155, 219, 250, 45, 176, 154, 203, 54,
    169, 93, 93, 119, 230, 28, 108, 108, 255, 223, 63, 65, 212, 158, 14, 90,
    205, 162, 36, 132, 149, 227, 21, 159, 140, 32, 70, 178, 167, 97, 119, 169,
    190, 166, 225, 232, 241, 231, 208, 243, 232, 36, 131, 222, 195, 101, 178,
    197, 218, 170, 174, 93, 93, 235, 159, 70, 68, 40, 204, 107, 111, 105, 253,
    112, 118, 174, 107, 49, 57, 239, 90, 42, 32, 44, 9, 7, 11, 109, 56, 28, 18,
    243, 54, 70, 223, 178, 7, 93, 198, 113, 84, 112, 237, 48, 101, 107, 244,
    247, 243, 42, 187, 182, 194, 49, 162, 117, 145, 28, 137, 52, 160, 7, 144,
    251, 188, 159, 23, 186, 141, 132, 14, 121, 222, 169, 37, 56, 239, 178, 60,
    255, 121, 243, 115, 190, 72, 232, 106, 125, 27, 197, 65, 60, 42, 222, 88, 5,
    79, 121, 240, 68, 126, 98, 233, 135, 45, 79, 194, 198, 28, 84, 219, 1, 138,
    21, 148, 64, 187, 14, 141, 131, 232, 35, 166, 194, 217, 56, 191, 13, 197,
    160, 56, 76, 244, 187, 33, 143, 167, 150, 10, 206, 150, 141, 19, 9, 0, 204,
    92, 72, 49, 215, 69, 139, 98, 250, 110, 202, 83, 225, 119, 84, 93, 187, 186,
    21, 108, 160, 163, 214, 63, 141, 136, 151, 14, 150, 145, 80, 152, 215, 222,
    17, 169, 204, 199, 210, 250, 225, 236, 147, 203, 250, 245, 92, 215, 98, 114,
    29, 230, 121, 107, 222, 181, 84, 64, 159, 132, 79, 89, 88, 18, 14, 22, 25,
    35, 21, 15, 218, 112, 56, 36, 155, 65, 35, 61, 167, 107, 253, 101, 230, 90,
    230, 124, 37, 9, 203, 87, 100, 56, 208, 78, 163, 174, 145, 1, 226, 159, 138,
    24, 33, 204, 167, 51, 96, 253, 188, 42, 175, 225, 36, 173, 238, 208, 63,
    180, 45, 131, 18, 159, 108, 178, 9, 134, 171, 36, 72, 201, 234, 21, 83, 208,
    41, 70, 126, 251, 104, 119, 101, 226, 246, 121, 63, 47, 183, 72, 36, 54,
    116, 27, 9, 29, 53, 42, 18, 4, 242, 188, 83, 75, 179, 141, 72, 82, 112, 222,
    101, 121, 49, 239, 126, 96, 254, 243, 230, 231, 191, 194, 253, 254, 124,
    145, 208, 213, 61, 160, 203, 204, 250, 54, 138, 131, 187, 7, 145, 154, 120,
    84, 188, 177, 57, 101, 167, 168, 75, 152, 131, 59, 10, 169, 152, 34, 201,
    250, 181, 9, 136, 203, 174, 16, 79, 93, 239, 95, 14, 108, 244, 70, 205, 63,
    217, 109, 140, 14, 194, 116, 67, 18, 90, 243, 2, 35, 65, 234, 193, 112, 108,
    193, 128, 65, 119, 216, 71, 215, 54, 151, 6, 230, 45, 142, 197, 181, 0, 165,
    132, 132, 27, 188, 26, 138, 65, 113, 91, 187, 90, 104, 152, 232, 119, 67,
    217, 217, 108, 90, 30, 79, 45, 21, 95, 126, 54, 12, 156, 45, 27, 39, 221,
    28, 0, 62, 18, 0, 152, 185, 83, 49, 131, 160, 144, 98, 174, 139, 209, 83,
    181, 146, 22, 197, 244, 221, 87, 244, 239, 196, 148, 167, 194, 239, 213,
    150, 217, 246, 233, 188, 7, 174, 168, 141, 28, 183, 107, 222, 49, 156, 42,
    239, 42, 133, 237, 121, 107, 202, 172, 72, 112, 211, 111, 27, 93, 248, 46,
    42, 70, 225, 225, 54, 222, 102, 160, 7, 197, 127, 99, 84, 232, 84, 34, 101,
    243, 77, 229, 243, 178, 2, 164, 194, 169, 27, 103, 145, 132, 48, 38, 160,
    159, 41, 184, 174, 197, 228, 249, 159, 222, 253, 58, 204, 243, 214, 123,
    253, 232, 207, 188, 107, 169, 128, 253, 90, 178, 153, 62, 9, 159, 178, 127,
    56, 132, 171, 176, 36, 28, 44, 241, 21, 7, 53, 50, 70, 42, 30, 115, 119, 49,
    7, 180, 225, 112, 72, 245, 208, 107, 81, 54, 131, 70, 122, 119, 178, 93, 99,
    78, 215, 250, 203, 15, 230, 225, 210, 204, 181, 204, 249, 141, 132, 215,
    224, 74, 18, 150, 175, 11, 35, 141, 182, 200, 112, 160, 157, 137, 65, 187,
    132, 70, 93, 35, 3, 7, 108, 56, 26, 196, 63, 21, 49, 133, 14, 14, 40, 66,
    152, 79, 103, 3, 169, 84, 126, 192, 250, 121, 85, 129, 203, 98, 76, 31, 197,
    56, 129, 94, 244, 35, 152, 157, 167, 14, 179, 220, 150, 21, 170, 27, 0, 84,
    229, 90, 49, 79, 252, 153, 98, 98, 215, 216, 83, 121, 206, 23, 79, 225, 73,
    86, 126, 250, 80, 149, 45, 215, 123, 212, 28, 204, 98, 19, 138, 141, 45, 82,
    187, 150, 52, 145, 232, 187, 31, 208, 217, 160, 6, 236, 243, 126, 94, 173,
    194, 101, 71, 110, 145, 72, 108, 47, 160, 83, 117, 232, 54, 18, 58, 169, 7,
    9, 35, 106, 84, 36, 8, 43, 101, 63, 17, 228, 121, 167, 150, 165, 72, 188,
    143, 102, 27, 145, 164, 39, 42, 138, 189, 224, 188, 203, 242, 161, 141, 208,
    235, 98, 222, 253, 192, 35, 239, 230, 217, 189, 225, 188, 20, 252, 208, 167,
    13, 63, 131, 138, 38, 126, 178, 145, 63, 185, 36, 208, 112, 248, 21, 203,
    105, 59, 70, 230, 66, 122, 119, 253, 91, 181, 107, 101, 220, 244, 90, 126,
    197, 55, 9, 83, 238, 118, 56, 72, 247, 177, 174, 9, 184, 240, 159, 18, 161,
    51, 204, 63, 138, 114, 253, 36, 147, 0, 0, 0, 0, 55, 106, 194, 1, 110, 212,
    132, 3, 89, 190, 70, 2, 220, 168, 9, 7, 235, 194, 203, 6, 178, 124, 141, 4,
    133, 22, 79, 5, 184, 81, 19, 14, 143, 59, 209, 15, 214, 133, 151, 13, 225,
    239, 85, 12, 100, 249, 26, 9, 83, 147, 216, 8, 10, 45, 158, 10, 61, 71, 92,
    11, 112, 163, 38, 28, 71, 201, 228, 29, 30, 119, 162, 31, 41, 29, 96, 30,
    172, 11, 47, 27, 155, 97, 237, 26, 194, 223, 171, 24, 245, 181, 105, 25,
    200, 242, 53, 18, 255, 152, 247, 19, 166, 38, 177, 17, 145, 76, 115, 16, 20,
    90, 60, 21, 35, 48, 254, 20, 122, 142, 184, 22, 77, 228, 122, 23, 224, 70,
    77, 56, 215, 44, 143, 57, 142, 146, 201, 59, 185, 248, 11, 58, 60, 238, 68,
    63, 11, 132, 134, 62, 82, 58, 192, 60, 101, 80, 2, 61, 88, 23, 94, 54, 111,
    125, 156, 55, 54, 195, 218, 53, 1, 169, 24, 52, 132, 191, 87, 49, 179, 213,
    149, 48, 234, 107, 211, 50, 221, 1, 17, 51, 144, 229, 107, 36, 167, 143,
    169, 37, 254, 49, 239, 39, 201, 91, 45, 38, 76, 77, 98, 35, 123, 39, 160,
    34, 34, 153, 230, 32, 21, 243, 36, 33, 40, 180, 120, 42, 31, 222, 186, 43,
    70, 96, 252, 41, 113, 10, 62, 40, 244, 28, 113, 45, 195, 118, 179, 44, 154,
    200, 245, 46, 173, 162, 55, 47, 192, 141, 154, 112, 247, 231, 88, 113, 174,
    89, 30, 115, 153, 51, 220, 114, 28, 37, 147, 119, 43, 79, 81, 118, 114, 241,
    23, 116, 69, 155, 213, 117, 120, 220, 137, 126, 79, 182, 75, 127, 22, 8, 13,
    125, 33, 98, 207, 124, 164, 116, 128, 121, 147, 30, 66, 120, 202, 160, 4,
    122, 253, 202, 198, 123, 176, 46, 188, 108, 135, 68, 126, 109, 222, 250, 56,
    111, 233, 144, 250, 110, 108, 134, 181, 107, 91, 236, 119, 106, 2, 82, 49,
    104, 53, 56, 243, 105, 8, 127, 175, 98, 63, 21, 109, 99, 102, 171, 43, 97,
    81, 193, 233, 96, 212, 215, 166, 101, 227, 189, 100, 100, 186, 3, 34, 102,
    141, 105, 224, 103, 32, 203, 215, 72, 23, 161, 21, 73, 78, 31, 83, 75, 121,
    117, 145, 74, 252, 99, 222, 79, 203, 9, 28, 78, 146, 183, 90, 76, 165, 221,
    152, 77, 152, 154, 196, 70, 175, 240, 6, 71, 246, 78, 64, 69, 193, 36, 130,
    68, 68, 50, 205, 65, 115, 88, 15, 64, 42, 230, 73, 66, 29, 140, 139, 67, 80,
    104, 241, 84, 103, 2, 51, 85, 62, 188, 117, 87, 9, 214, 183, 86, 140, 192,
    248, 83, 187, 170, 58, 82, 226, 20, 124, 80, 213, 126, 190, 81, 232, 57,
    226, 90, 223, 83, 32, 91, 134, 237, 102, 89, 177, 135, 164, 88, 52, 145,
    235, 93, 3, 251, 41, 92, 90, 69, 111, 94, 109, 47, 173, 95, 128, 27, 53,
    225, 183, 113, 247, 224, 238, 207, 177, 226, 217, 165, 115, 227, 92, 179,
    60, 230, 107, 217, 254, 231, 50, 103, 184, 229, 5, 13, 122, 228, 56, 74, 38,
    239, 15, 32, 228, 238, 86, 158, 162, 236, 97, 244, 96, 237, 228, 226, 47,
    232, 211, 136, 237, 233, 138, 54, 171, 235, 189, 92, 105, 234, 240, 184, 19,
    253, 199, 210, 209, 252, 158, 108, 151, 254, 169, 6, 85, 255, 44, 16, 26,
    250, 27, 122, 216, 251, 66, 196, 158, 249, 117, 174, 92, 248, 72, 233, 0,
    243, 127, 131, 194, 242, 38, 61, 132, 240, 17, 87, 70, 241, 148, 65, 9, 244,
    163, 43, 203, 245, 250, 149, 141, 247, 205, 255, 79, 246, 96, 93, 120, 217,
    87, 55, 186, 216, 14, 137, 252, 218, 57, 227, 62, 219, 188, 245, 113, 222,
    139, 159, 179, 223, 210, 33, 245, 221, 229, 75, 55, 220, 216, 12, 107, 215,
    239, 102, 169, 214, 182, 216, 239, 212, 129, 178, 45, 213, 4, 164, 98, 208,
    51, 206, 160, 209, 106, 112, 230, 211, 93, 26, 36, 210, 16, 254, 94, 197,
    39, 148, 156, 196, 126, 42, 218, 198, 73, 64, 24, 199, 204, 86, 87, 194,
    251, 60, 149, 195, 162, 130, 211, 193, 149, 232, 17, 192, 168, 175, 77, 203,
    159, 197, 143, 202, 198, 123, 201, 200, 241, 17, 11, 201, 116, 7, 68, 204,
    67, 109, 134, 205, 26, 211, 192, 207, 45, 185, 2, 206, 64, 150, 175, 145,
    119, 252, 109, 144, 46, 66, 43, 146, 25, 40, 233, 147, 156, 62, 166, 150,
    171, 84, 100, 151, 242, 234, 34, 149, 197, 128, 224, 148, 248, 199, 188,
    159, 207, 173, 126, 158, 150, 19, 56, 156, 161, 121, 250, 157, 36, 111, 181,
    152, 19, 5, 119, 153, 74, 187, 49, 155, 125, 209, 243, 154, 48, 53, 137,
    141, 7, 95, 75, 140, 94, 225, 13, 142, 105, 139, 207, 143, 236, 157, 128,
    138, 219, 247, 66, 139, 130, 73, 4, 137, 181, 35, 198, 136, 136, 100, 154,
    131, 191, 14, 88, 130, 230, 176, 30, 128, 209, 218, 220, 129, 84, 204, 147,
    132, 99, 166, 81, 133, 58, 24, 23, 135, 13, 114, 213, 134, 160, 208, 226,
    169, 151, 186, 32, 168, 206, 4, 102, 170, 249, 110, 164, 171, 124, 120, 235,
    174, 75, 18, 41, 175, 18, 172, 111, 173, 37, 198, 173, 172, 24, 129, 241,
    167, 47, 235, 51, 166, 118, 85, 117, 164, 65, 63, 183, 165, 196, 41, 248,
    160, 243, 67, 58, 161, 170, 253, 124, 163, 157, 151, 190, 162, 208, 115,
    196, 181, 231, 25, 6, 180, 190, 167, 64, 182, 137, 205, 130, 183, 12, 219,
    205, 178, 59, 177, 15, 179, 98, 15, 73, 177, 85, 101, 139, 176, 104, 34,
    215, 187, 95, 72, 21, 186, 6, 246, 83, 184, 49, 156, 145, 185, 180, 138,
    222, 188, 131, 224, 28, 189, 218, 94, 90, 191, 237, 52, 152, 190, 0, 0, 0,
    0, 101, 103, 188, 184, 139, 200, 9, 170, 238, 175, 181, 18, 87, 151, 98,
    143, 50, 240, 222, 55, 220, 95, 107, 37, 185, 56, 215, 157, 239, 40, 180,
    197, 138, 79, 8, 125, 100, 224, 189, 111, 1, 135, 1, 215, 184, 191, 214, 74,
    221, 216, 106, 242, 51, 119, 223, 224, 86, 16, 99, 88, 159, 87, 25, 80, 250,
    48, 165, 232, 20, 159, 16, 250, 113, 248, 172, 66, 200, 192, 123, 223, 173,
    167, 199, 103, 67, 8, 114, 117, 38, 111, 206, 205, 112, 127, 173, 149, 21,
    24, 17, 45, 251, 183, 164, 63, 158, 208, 24, 135, 39, 232, 207, 26, 66, 143,
    115, 162, 172, 32, 198, 176, 201, 71, 122, 8, 62, 175, 50, 160, 91, 200,
    142, 24, 181, 103, 59, 10, 208, 0, 135, 178, 105, 56, 80, 47, 12, 95, 236,
    151, 226, 240, 89, 133, 135, 151, 229, 61, 209, 135, 134, 101, 180, 224, 58,
    221, 90, 79, 143, 207, 63, 40, 51, 119, 134, 16, 228, 234, 227, 119, 88, 82,
    13, 216, 237, 64, 104, 191, 81, 248, 161, 248, 43, 240, 196, 159, 151, 72,
    42, 48, 34, 90, 79, 87, 158, 226, 246, 111, 73, 127, 147, 8, 245, 199, 125,
    167, 64, 213, 24, 192, 252, 109, 78, 208, 159, 53, 43, 183, 35, 141, 197,
    24, 150, 159, 160, 127, 42, 39, 25, 71, 253, 186, 124, 32, 65, 2, 146, 143,
    244, 16, 247, 232, 72, 168, 61, 88, 20, 155, 88, 63, 168, 35, 182, 144, 29,
    49, 211, 247, 161, 137, 106, 207, 118, 20, 15, 168, 202, 172, 225, 7, 127,
    190, 132, 96, 195, 6, 210, 112, 160, 94, 183, 23, 28, 230, 89, 184, 169,
    244, 60, 223, 21, 76, 133, 231, 194, 209, 224, 128, 126, 105, 14, 47, 203,
    123, 107, 72, 119, 195, 162, 15, 13, 203, 199, 104, 177, 115, 41, 199, 4,
    97, 76, 160, 184, 217, 245, 152, 111, 68, 144, 255, 211, 252, 126, 80, 102,
    238, 27, 55, 218, 86, 77, 39, 185, 14, 40, 64, 5, 182, 198, 239, 176, 164,
    163, 136, 12, 28, 26, 176, 219, 129, 127, 215, 103, 57, 145, 120, 210, 43,
    244, 31, 110, 147, 3, 247, 38, 59, 102, 144, 154, 131, 136, 63, 47, 145,
    237, 88, 147, 41, 84, 96, 68, 180, 49, 7, 248, 12, 223, 168, 77, 30, 186,
    207, 241, 166, 236, 223, 146, 254, 137, 184, 46, 70, 103, 23, 155, 84, 2,
    112, 39, 236, 187, 72, 240, 113, 222, 47, 76, 201, 48, 128, 249, 219, 85,
    231, 69, 99, 156, 160, 63, 107, 249, 199, 131, 211, 23, 104, 54, 193, 114,
    15, 138, 121, 203, 55, 93, 228, 174, 80, 225, 92, 64, 255, 84, 78, 37, 152,
    232, 246, 115, 136, 139, 174, 22, 239, 55, 22, 248, 64, 130, 4, 157, 39, 62,
    188, 36, 31, 233, 33, 65, 120, 85, 153, 175, 215, 224, 139, 202, 176, 92,
    51, 59, 182, 89, 237, 94, 209, 229, 85, 176, 126, 80, 71, 213, 25, 236, 255,
    108, 33, 59, 98, 9, 70, 135, 218, 231, 233, 50, 200, 130, 142, 142, 112,
    212, 158, 237, 40, 177, 249, 81, 144, 95, 86, 228, 130, 58, 49, 88, 58, 131,
    9, 143, 167, 230, 110, 51, 31, 8, 193, 134, 13, 109, 166, 58, 181, 164, 225,
    64, 189, 193, 134, 252, 5, 47, 41, 73, 23, 74, 78, 245, 175, 243, 118, 34,
    50, 150, 17, 158, 138, 120, 190, 43, 152, 29, 217, 151, 32, 75, 201, 244,
    120, 46, 174, 72, 192, 192, 1, 253, 210, 165, 102, 65, 106, 28, 94, 150,
    247, 121, 57, 42, 79, 151, 150, 159, 93, 242, 241, 35, 229, 5, 25, 107, 77,
    96, 126, 215, 245, 142, 209, 98, 231, 235, 182, 222, 95, 82, 142, 9, 194,
    55, 233, 181, 122, 217, 70, 0, 104, 188, 33, 188, 208, 234, 49, 223, 136,
    143, 86, 99, 48, 97, 249, 214, 34, 4, 158, 106, 154, 189, 166, 189, 7, 216,
    193, 1, 191, 54, 110, 180, 173, 83, 9, 8, 21, 154, 78, 114, 29, 255, 41,
    206, 165, 17, 134, 123, 183, 116, 225, 199, 15, 205, 217, 16, 146, 168, 190,
    172, 42, 70, 17, 25, 56, 35, 118, 165, 128, 117, 102, 198, 216, 16, 1, 122,
    96, 254, 174, 207, 114, 155, 201, 115, 202, 34, 241, 164, 87, 71, 150, 24,
    239, 169, 57, 173, 253, 204, 94, 17, 69, 6, 238, 77, 118, 99, 137, 241, 206,
    141, 38, 68, 220, 232, 65, 248, 100, 81, 121, 47, 249, 52, 30, 147, 65, 218,
    177, 38, 83, 191, 214, 154, 235, 233, 198, 249, 179, 140, 161, 69, 11, 98,
    14, 240, 25, 7, 105, 76, 161, 190, 81, 155, 60, 219, 54, 39, 132, 53, 153,
    146, 150, 80, 254, 46, 46, 153, 185, 84, 38, 252, 222, 232, 158, 18, 113,
    93, 140, 119, 22, 225, 52, 206, 46, 54, 169, 171, 73, 138, 17, 69, 230, 63,
    3, 32, 129, 131, 187, 118, 145, 224, 227, 19, 246, 92, 91, 253, 89, 233, 73,
    152, 62, 85, 241, 33, 6, 130, 108, 68, 97, 62, 212, 170, 206, 139, 198, 207,
    169, 55, 126, 56, 65, 127, 214, 93, 38, 195, 110, 179, 137, 118, 124, 214,
    238, 202, 196, 111, 214, 29, 89, 10, 177, 161, 225, 228, 30, 20, 243, 129,
    121, 168, 75, 215, 105, 203, 19, 178, 14, 119, 171, 92, 161, 194, 185, 57,
    198, 126, 1, 128, 254, 169, 156, 229, 153, 21, 36, 11, 54, 160, 54, 110, 81,
    28, 142, 167, 22, 102, 134, 194, 113, 218, 62, 44, 222, 111, 44, 73, 185,
    211, 148, 240, 129, 4, 9, 149, 230, 184, 177, 123, 73, 13, 163, 30, 46, 177,
    27, 72, 62, 210, 67, 45, 89, 110, 251, 195, 246, 219, 233, 166, 145, 103,
    81, 31, 169, 176, 204, 122, 206, 12, 116, 148, 97, 185, 102, 241, 6, 5, 222,
    0, 0, 0, 0, 119, 7, 48, 150, 238, 14, 97, 44, 153, 9, 81, 186, 7, 109, 196,
    25, 112, 106, 244, 143, 233, 99, 165, 53, 158, 100, 149, 163, 14, 219, 136,
    50, 121, 220, 184, 164, 224, 213, 233, 30, 151, 210, 217, 136, 9, 182, 76,
    43, 126, 177, 124, 189, 231, 184, 45, 7, 144, 191, 29, 145, 29, 183, 16,
    100, 106, 176, 32, 242, 243, 185, 113, 72, 132, 190, 65, 222, 26, 218, 212,
    125, 109, 221, 228, 235, 244, 212, 181, 81, 131, 211, 133, 199, 19, 108,
    152, 86, 100, 107, 168, 192, 253, 98, 249, 122, 138, 101, 201, 236, 20, 1,
    92, 79, 99, 6, 108, 217, 250, 15, 61, 99, 141, 8, 13, 245, 59, 110, 32, 200,
    76, 105, 16, 94, 213, 96, 65, 228, 162, 103, 113, 114, 60, 3, 228, 209, 75,
    4, 212, 71, 210, 13, 133, 253, 165, 10, 181, 107, 53, 181, 168, 250, 66,
    178, 152, 108, 219, 187, 201, 214, 172, 188, 249, 64, 50, 216, 108, 227, 69,
    223, 92, 117, 220, 214, 13, 207, 171, 209, 61, 89, 38, 217, 48, 172, 81,
    222, 0, 58, 200, 215, 81, 128, 191, 208, 97, 22, 33, 180, 244, 181, 86, 179,
    196, 35, 207, 186, 149, 153, 184, 189, 165, 15, 40, 2, 184, 158, 95, 5, 136,
    8, 198, 12, 217, 178, 177, 11, 233, 36, 47, 111, 124, 135, 88, 104, 76, 17,
    193, 97, 29, 171, 182, 102, 45, 61, 118, 220, 65, 144, 1, 219, 113, 6, 152,
    210, 32, 188, 239, 213, 16, 42, 113, 177, 133, 137, 6, 182, 181, 31, 159,
    191, 228, 165, 232, 184, 212, 51, 120, 7, 201, 162, 15, 0, 249, 52, 150, 9,
    168, 142, 225, 14, 152, 24, 127, 106, 13, 187, 8, 109, 61, 45, 145, 100,
    108, 151, 230, 99, 92, 1, 107, 107, 81, 244, 28, 108, 97, 98, 133, 101, 48,
    216, 242, 98, 0, 78, 108, 6, 149, 237, 27, 1, 165, 123, 130, 8, 244, 193,
    245, 15, 196, 87, 101, 176, 217, 198, 18, 183, 233, 80, 139, 190, 184, 234,
    252, 185, 136, 124, 98, 221, 29, 223, 21, 218, 45, 73, 140, 211, 124, 243,
    251, 212, 76, 101, 77, 178, 97, 88, 58, 181, 81, 206, 163, 188, 0, 116, 212,
    187, 48, 226, 74, 223, 165, 65, 61, 216, 149, 215, 164, 209, 196, 109, 211,
    214, 244, 251, 67, 105, 233, 106, 52, 110, 217, 252, 173, 103, 136, 70, 218,
    96, 184, 208, 68, 4, 45, 115, 51, 3, 29, 229, 170, 10, 76, 95, 221, 13, 124,
    201, 80, 5, 113, 60, 39, 2, 65, 170, 190, 11, 16, 16, 201, 12, 32, 134, 87,
    104, 181, 37, 32, 111, 133, 179, 185, 102, 212, 9, 206, 97, 228, 159, 94,
    222, 249, 14, 41, 217, 201, 152, 176, 208, 152, 34, 199, 215, 168, 180, 89,
    179, 61, 23, 46, 180, 13, 129, 183, 189, 92, 59, 192, 186, 108, 173, 237,
    184, 131, 32, 154, 191, 179, 182, 3, 182, 226, 12, 116, 177, 210, 154, 234,
    213, 71, 57, 157, 210, 119, 175, 4, 219, 38, 21, 115, 220, 22, 131, 227, 99,
    11, 18, 148, 100, 59, 132, 13, 109, 106, 62, 122, 106, 90, 168, 228, 14,
    207, 11, 147, 9, 255, 157, 10, 0, 174, 39, 125, 7, 158, 177, 240, 15, 147,
    68, 135, 8, 163, 210, 30, 1, 242, 104, 105, 6, 194, 254, 247, 98, 87, 93,
    128, 101, 103, 203, 25, 108, 54, 113, 110, 107, 6, 231, 254, 212, 27, 118,
    137, 211, 43, 224, 16, 218, 122, 90, 103, 221, 74, 204, 249, 185, 223, 111,
    142, 190, 239, 249, 23, 183, 190, 67, 96, 176, 142, 213, 214, 214, 163, 232,
    161, 209, 147, 126, 56, 216, 194, 196, 79, 223, 242, 82, 209, 187, 103, 241,
    166, 188, 87, 103, 63, 181, 6, 221, 72, 178, 54, 75, 216, 13, 43, 218, 175,
    10, 27, 76, 54, 3, 74, 246, 65, 4, 122, 96, 223, 96, 239, 195, 168, 103,
    223, 85, 49, 110, 142, 239, 70, 105, 190, 121, 203, 97, 179, 140, 188, 102,
    131, 26, 37, 111, 210, 160, 82, 104, 226, 54, 204, 12, 119, 149, 187, 11,
    71, 3, 34, 2, 22, 185, 85, 5, 38, 47, 197, 186, 59, 190, 178, 189, 11, 40,
    43, 180, 90, 146, 92, 179, 106, 4, 194, 215, 255, 167, 181, 208, 207, 49,
    44, 217, 158, 139, 91, 222, 174, 29, 155, 100, 194, 176, 236, 99, 242, 38,
    117, 106, 163, 156, 2, 109, 147, 10, 156, 9, 6, 169, 235, 14, 54, 63, 114,
    7, 103, 133, 5, 0, 87, 19, 149, 191, 74, 130, 226, 184, 122, 20, 123, 177,
    43, 174, 12, 182, 27, 56, 146, 210, 142, 155, 229, 213, 190, 13, 124, 220,
    239, 183, 11, 219, 223, 33, 134, 211, 210, 212, 241, 212, 226, 66, 104, 221,
    179, 248, 31, 218, 131, 110, 129, 190, 22, 205, 246, 185, 38, 91, 111, 176,
    119, 225, 24, 183, 71, 119, 136, 8, 90, 230, 255, 15, 106, 112, 102, 6, 59,
    202, 17, 1, 11, 92, 143, 101, 158, 255, 248, 98, 174, 105, 97, 107, 255,
    211, 22, 108, 207, 69, 160, 10, 226, 120, 215, 13, 210, 238, 78, 4, 131, 84,
    57, 3, 179, 194, 167, 103, 38, 97, 208, 96, 22, 247, 73, 105, 71, 77, 62,
    110, 119, 219, 174, 209, 106, 74, 217, 214, 90, 220, 64, 223, 11, 102, 55,
    216, 59, 240, 169, 188, 174, 83, 222, 187, 158, 197, 71, 178, 207, 127, 48,
    181, 255, 233, 189, 189, 242, 28, 202, 186, 194, 138, 83, 179, 147, 48, 36,
    180, 163, 166, 186, 208, 54, 5, 205, 215, 6, 147, 84, 222, 87, 41, 35, 217,
    103, 191, 179, 102, 122, 46, 196, 97, 74, 184, 93, 104, 27, 2, 42, 111, 43,
    148, 180, 11, 190, 55, 195, 12, 142, 161, 90, 5, 223, 27, 45, 2, 239, 141,
    0, 0, 0, 0, 25, 27, 49, 65, 50, 54, 98, 130, 43, 45, 83, 195, 100, 108, 197,
    4, 125, 119, 244, 69, 86, 90, 167, 134, 79, 65, 150, 199, 200, 217, 138, 8,
    209, 194, 187, 73, 250, 239, 232, 138, 227, 244, 217, 203, 172, 181, 79, 12,
    181, 174, 126, 77, 158, 131, 45, 142, 135, 152, 28, 207, 74, 194, 18, 81,
    83, 217, 35, 16, 120, 244, 112, 211, 97, 239, 65, 146, 46, 174, 215, 85, 55,
    181, 230, 20, 28, 152, 181, 215, 5, 131, 132, 150, 130, 27, 152, 89, 155, 0,
    169, 24, 176, 45, 250, 219, 169, 54, 203, 154, 230, 119, 93, 93, 255, 108,
    108, 28, 212, 65, 63, 223, 205, 90, 14, 158, 149, 132, 36, 162, 140, 159,
    21, 227, 167, 178, 70, 32, 190, 169, 119, 97, 241, 232, 225, 166, 232, 243,
    208, 231, 195, 222, 131, 36, 218, 197, 178, 101, 93, 93, 174, 170, 68, 70,
    159, 235, 111, 107, 204, 40, 118, 112, 253, 105, 57, 49, 107, 174, 32, 42,
    90, 239, 11, 7, 9, 44, 18, 28, 56, 109, 223, 70, 54, 243, 198, 93, 7, 178,
    237, 112, 84, 113, 244, 107, 101, 48, 187, 42, 243, 247, 162, 49, 194, 182,
    137, 28, 145, 117, 144, 7, 160, 52, 23, 159, 188, 251, 14, 132, 141, 186,
    37, 169, 222, 121, 60, 178, 239, 56, 115, 243, 121, 255, 106, 232, 72, 190,
    65, 197, 27, 125, 88, 222, 42, 60, 240, 121, 79, 5, 233, 98, 126, 68, 194,
    79, 45, 135, 219, 84, 28, 198, 148, 21, 138, 1, 141, 14, 187, 64, 166, 35,
    232, 131, 191, 56, 217, 194, 56, 160, 197, 13, 33, 187, 244, 76, 10, 150,
    167, 143, 19, 141, 150, 206, 92, 204, 0, 9, 69, 215, 49, 72, 110, 250, 98,
    139, 119, 225, 83, 202, 186, 187, 93, 84, 163, 160, 108, 21, 136, 141, 63,
    214, 145, 150, 14, 151, 222, 215, 152, 80, 199, 204, 169, 17, 236, 225, 250,
    210, 245, 250, 203, 147, 114, 98, 215, 92, 107, 121, 230, 29, 64, 84, 181,
    222, 89, 79, 132, 159, 22, 14, 18, 88, 15, 21, 35, 25, 36, 56, 112, 218, 61,
    35, 65, 155, 101, 253, 107, 167, 124, 230, 90, 230, 87, 203, 9, 37, 78, 208,
    56, 100, 1, 145, 174, 163, 24, 138, 159, 226, 51, 167, 204, 33, 42, 188,
    253, 96, 173, 36, 225, 175, 180, 63, 208, 238, 159, 18, 131, 45, 134, 9,
    178, 108, 201, 72, 36, 171, 208, 83, 21, 234, 251, 126, 70, 41, 226, 101,
    119, 104, 47, 63, 121, 246, 54, 36, 72, 183, 29, 9, 27, 116, 4, 18, 42, 53,
    75, 83, 188, 242, 82, 72, 141, 179, 121, 101, 222, 112, 96, 126, 239, 49,
    231, 230, 243, 254, 254, 253, 194, 191, 213, 208, 145, 124, 204, 203, 160,
    61, 131, 138, 54, 250, 154, 145, 7, 187, 177, 188, 84, 120, 168, 167, 101,
    57, 59, 131, 152, 75, 34, 152, 169, 10, 9, 181, 250, 201, 16, 174, 203, 136,
    95, 239, 93, 79, 70, 244, 108, 14, 109, 217, 63, 205, 116, 194, 14, 140,
    243, 90, 18, 67, 234, 65, 35, 2, 193, 108, 112, 193, 216, 119, 65, 128, 151,
    54, 215, 71, 142, 45, 230, 6, 165, 0, 181, 197, 188, 27, 132, 132, 113, 65,
    138, 26, 104, 90, 187, 91, 67, 119, 232, 152, 90, 108, 217, 217, 21, 45, 79,
    30, 12, 54, 126, 95, 39, 27, 45, 156, 62, 0, 28, 221, 185, 152, 0, 18, 160,
    131, 49, 83, 139, 174, 98, 144, 146, 181, 83, 209, 221, 244, 197, 22, 196,
    239, 244, 87, 239, 194, 167, 148, 246, 217, 150, 213, 174, 7, 188, 233, 183,
    28, 141, 168, 156, 49, 222, 107, 133, 42, 239, 42, 202, 107, 121, 237, 211,
    112, 72, 172, 248, 93, 27, 111, 225, 70, 42, 46, 102, 222, 54, 225, 127,
    197, 7, 160, 84, 232, 84, 99, 77, 243, 101, 34, 2, 178, 243, 229, 27, 169,
    194, 164, 48, 132, 145, 103, 41, 159, 160, 38, 228, 197, 174, 184, 253, 222,
    159, 249, 214, 243, 204, 58, 207, 232, 253, 123, 128, 169, 107, 188, 153,
    178, 90, 253, 178, 159, 9, 62, 171, 132, 56, 127, 44, 28, 36, 176, 53, 7,
    21, 241, 30, 42, 70, 50, 7, 49, 119, 115, 72, 112, 225, 180, 81, 107, 208,
    245, 122, 70, 131, 54, 99, 93, 178, 119, 203, 250, 215, 78, 210, 225, 230,
    15, 249, 204, 181, 204, 224, 215, 132, 141, 175, 150, 18, 74, 182, 141, 35,
    11, 157, 160, 112, 200, 132, 187, 65, 137, 3, 35, 93, 70, 26, 56, 108, 7,
    49, 21, 63, 196, 40, 14, 14, 133, 103, 79, 152, 66, 126, 84, 169, 3, 85,
    121, 250, 192, 76, 98, 203, 129, 129, 56, 197, 31, 152, 35, 244, 94, 179,
    14, 167, 157, 170, 21, 150, 220, 229, 84, 0, 27, 252, 79, 49, 90, 215, 98,
    98, 153, 206, 121, 83, 216, 73, 225, 79, 23, 80, 250, 126, 86, 123, 215, 45,
    149, 98, 204, 28, 212, 45, 141, 138, 19, 52, 150, 187, 82, 31, 187, 232,
    145, 6, 160, 217, 208, 94, 126, 243, 236, 71, 101, 194, 173, 108, 72, 145,
    110, 117, 83, 160, 47, 58, 18, 54, 232, 35, 9, 7, 169, 8, 36, 84, 106, 17,
    63, 101, 43, 150, 167, 121, 228, 143, 188, 72, 165, 164, 145, 27, 102, 189,
    138, 42, 39, 242, 203, 188, 224, 235, 208, 141, 161, 192, 253, 222, 98, 217,
    230, 239, 35, 20, 188, 225, 189, 13, 167, 208, 252, 38, 138, 131, 63, 63,
    145, 178, 126, 112, 208, 36, 185, 105, 203, 21, 248, 66, 230, 70, 59, 91,
    253, 119, 122, 220, 101, 107, 181, 197, 126, 90, 244, 238, 83, 9, 55, 247,
    72, 56, 118, 184, 9, 174, 177, 161, 18, 159, 240, 138, 63, 204, 51, 147, 36,
    253, 114, 0, 0, 0, 0, 1, 194, 106, 55, 3, 132, 212, 110, 2, 70, 190, 89, 7,
    9, 168, 220, 6, 203, 194, 235, 4, 141, 124, 178, 5, 79, 22, 133, 14, 19, 81,
    184, 15, 209, 59, 143, 13, 151, 133, 214, 12, 85, 239, 225, 9, 26, 249, 100,
    8, 216, 147, 83, 10, 158, 45, 10, 11, 92, 71, 61, 28, 38, 163, 112, 29, 228,
    201, 71, 31, 162, 119, 30, 30, 96, 29, 41, 27, 47, 11, 172, 26, 237, 97,
    155, 24, 171, 223, 194, 25, 105, 181, 245, 18, 53, 242, 200, 19, 247, 152,
    255, 17, 177, 38, 166, 16, 115, 76, 145, 21, 60, 90, 20, 20, 254, 48, 35,
    22, 184, 142, 122, 23, 122, 228, 77, 56, 77, 70, 224, 57, 143, 44, 215, 59,
    201, 146, 142, 58, 11, 248, 185, 63, 68, 238, 60, 62, 134, 132, 11, 60, 192,
    58, 82, 61, 2, 80, 101, 54, 94, 23, 88, 55, 156, 125, 111, 53, 218, 195, 54,
    52, 24, 169, 1, 49, 87, 191, 132, 48, 149, 213, 179, 50, 211, 107, 234, 51,
    17, 1, 221, 36, 107, 229, 144, 37, 169, 143, 167, 39, 239, 49, 254, 38, 45,
    91, 201, 35, 98, 77, 76, 34, 160, 39, 123, 32, 230, 153, 34, 33, 36, 243,
    21, 42, 120, 180, 40, 43, 186, 222, 31, 41, 252, 96, 70, 40, 62, 10, 113,
    45, 113, 28, 244, 44, 179, 118, 195, 46, 245, 200, 154, 47, 55, 162, 173,
    112, 154, 141, 192, 113, 88, 231, 247, 115, 30, 89, 174, 114, 220, 51, 153,
    119, 147, 37, 28, 118, 81, 79, 43, 116, 23, 241, 114, 117, 213, 155, 69,
    126, 137, 220, 120, 127, 75, 182, 79, 125, 13, 8, 22, 124, 207, 98, 33, 121,
    128, 116, 164, 120, 66, 30, 147, 122, 4, 160, 202, 123, 198, 202, 253, 108,
    188, 46, 176, 109, 126, 68, 135, 111, 56, 250, 222, 110, 250, 144, 233, 107,
    181, 134, 108, 106, 119, 236, 91, 104, 49, 82, 2, 105, 243, 56, 53, 98, 175,
    127, 8, 99, 109, 21, 63, 97, 43, 171, 102, 96, 233, 193, 81, 101, 166, 215,
    212, 100, 100, 189, 227, 102, 34, 3, 186, 103, 224, 105, 141, 72, 215, 203,
    32, 73, 21, 161, 23, 75, 83, 31, 78, 74, 145, 117, 121, 79, 222, 99, 252,
    78, 28, 9, 203, 76, 90, 183, 146, 77, 152, 221, 165, 70, 196, 154, 152, 71,
    6, 240, 175, 69, 64, 78, 246, 68, 130, 36, 193, 65, 205, 50, 68, 64, 15, 88,
    115, 66, 73, 230, 42, 67, 139, 140, 29, 84, 241, 104, 80, 85, 51, 2, 103,
    87, 117, 188, 62, 86, 183, 214, 9, 83, 248, 192, 140, 82, 58, 170, 187, 80,
    124, 20, 226, 81, 190, 126, 213, 90, 226, 57, 232, 91, 32, 83, 223, 89, 102,
    237, 134, 88, 164, 135, 177, 93, 235, 145, 52, 92, 41, 251, 3, 94, 111, 69,
    90, 95, 173, 47, 109, 225, 53, 27, 128, 224, 247, 113, 183, 226, 177, 207,
    238, 227, 115, 165, 217, 230, 60, 179, 92, 231, 254, 217, 107, 229, 184,
    103, 50, 228, 122, 13, 5, 239, 38, 74, 56, 238, 228, 32, 15, 236, 162, 158,
    86, 237, 96, 244, 97, 232, 47, 226, 228, 233, 237, 136, 211, 235, 171, 54,
    138, 234, 105, 92, 189, 253, 19, 184, 240, 252, 209, 210, 199, 254, 151,
    108, 158, 255, 85, 6, 169, 250, 26, 16, 44, 251, 216, 122, 27, 249, 158,
    196, 66, 248, 92, 174, 117, 243, 0, 233, 72, 242, 194, 131, 127, 240, 132,
    61, 38, 241, 70, 87, 17, 244, 9, 65, 148, 245, 203, 43, 163, 247, 141, 149,
    250, 246, 79, 255, 205, 217, 120, 93, 96, 216, 186, 55, 87, 218, 252, 137,
    14, 219, 62, 227, 57, 222, 113, 245, 188, 223, 179, 159, 139, 221, 245, 33,
    210, 220, 55, 75, 229, 215, 107, 12, 216, 214, 169, 102, 239, 212, 239, 216,
    182, 213, 45, 178, 129, 208, 98, 164, 4, 209, 160, 206, 51, 211, 230, 112,
    106, 210, 36, 26, 93, 197, 94, 254, 16, 196, 156, 148, 39, 198, 218, 42,
    126, 199, 24, 64, 73, 194, 87, 86, 204, 195, 149, 60, 251, 193, 211, 130,
    162, 192, 17, 232, 149, 203, 77, 175, 168, 202, 143, 197, 159, 200, 201,
    123, 198, 201, 11, 17, 241, 204, 68, 7, 116, 205, 134, 109, 67, 207, 192,
    211, 26, 206, 2, 185, 45, 145, 175, 150, 64, 144, 109, 252, 119, 146, 43,
    66, 46, 147, 233, 40, 25, 150, 166, 62, 156, 151, 100, 84, 171, 149, 34,
    234, 242, 148, 224, 128, 197, 159, 188, 199, 248, 158, 126, 173, 207, 156,
    56, 19, 150, 157, 250, 121, 161, 152, 181, 111, 36, 153, 119, 5, 19, 155,
    49, 187, 74, 154, 243, 209, 125, 141, 137, 53, 48, 140, 75, 95, 7, 142, 13,
    225, 94, 143, 207, 139, 105, 138, 128, 157, 236, 139, 66, 247, 219, 137, 4,
    73, 130, 136, 198, 35, 181, 131, 154, 100, 136, 130, 88, 14, 191, 128, 30,
    176, 230, 129, 220, 218, 209, 132, 147, 204, 84, 133, 81, 166, 99, 135, 23,
    24, 58, 134, 213, 114, 13, 169, 226, 208, 160, 168, 32, 186, 151, 170, 102,
    4, 206, 171, 164, 110, 249, 174, 235, 120, 124, 175, 41, 18, 75, 173, 111,
    172, 18, 172, 173, 198, 37, 167, 241, 129, 24, 166, 51, 235, 47, 164, 117,
    85, 118, 165, 183, 63, 65, 160, 248, 41, 196, 161, 58, 67, 243, 163, 124,
    253, 170, 162, 190, 151, 157, 181, 196, 115, 208, 180, 6, 25, 231, 182, 64,
    167, 190, 183, 130, 205, 137, 178, 205, 219, 12, 179, 15, 177, 59, 177, 73,
    15, 98, 176, 139, 101, 85, 187, 215, 34, 104, 186, 21, 72, 95, 184, 83, 246,
    6, 185, 145, 156, 49, 188, 222, 138, 180, 189, 28, 224, 131, 191, 90, 94,
    218, 190, 152, 52, 237, 0, 0, 0, 0, 184, 188, 103, 101, 170, 9, 200, 139,
    18, 181, 175, 238, 143, 98, 151, 87, 55, 222, 240, 50, 37, 107, 95, 220,
    157, 215, 56, 185, 197, 180, 40, 239, 125, 8, 79, 138, 111, 189, 224, 100,
    215, 1, 135, 1, 74, 214, 191, 184, 242, 106, 216, 221, 224, 223, 119, 51,
    88, 99, 16, 86, 80, 25, 87, 159, 232, 165, 48, 250, 250, 16, 159, 20, 66,
    172, 248, 113, 223, 123, 192, 200, 103, 199, 167, 173, 117, 114, 8, 67, 205,
    206, 111, 38, 149, 173, 127, 112, 45, 17, 24, 21, 63, 164, 183, 251, 135,
    24, 208, 158, 26, 207, 232, 39, 162, 115, 143, 66, 176, 198, 32, 172, 8,
    122, 71, 201, 160, 50, 175, 62, 24, 142, 200, 91, 10, 59, 103, 181, 178,
    135, 0, 208, 47, 80, 56, 105, 151, 236, 95, 12, 133, 89, 240, 226, 61, 229,
    151, 135, 101, 134, 135, 209, 221, 58, 224, 180, 207, 143, 79, 90, 119, 51,
    40, 63, 234, 228, 16, 134, 82, 88, 119, 227, 64, 237, 216, 13, 248, 81, 191,
    104, 240, 43, 248, 161, 72, 151, 159, 196, 90, 34, 48, 42, 226, 158, 87, 79,
    127, 73, 111, 246, 199, 245, 8, 147, 213, 64, 167, 125, 109, 252, 192, 24,
    53, 159, 208, 78, 141, 35, 183, 43, 159, 150, 24, 197, 39, 42, 127, 160,
    186, 253, 71, 25, 2, 65, 32, 124, 16, 244, 143, 146, 168, 72, 232, 247, 155,
    20, 88, 61, 35, 168, 63, 88, 49, 29, 144, 182, 137, 161, 247, 211, 20, 118,
    207, 106, 172, 202, 168, 15, 190, 127, 7, 225, 6, 195, 96, 132, 94, 160,
    112, 210, 230, 28, 23, 183, 244, 169, 184, 89, 76, 21, 223, 60, 209, 194,
    231, 133, 105, 126, 128, 224, 123, 203, 47, 14, 195, 119, 72, 107, 203, 13,
    15, 162, 115, 177, 104, 199, 97, 4, 199, 41, 217, 184, 160, 76, 68, 111,
    152, 245, 252, 211, 255, 144, 238, 102, 80, 126, 86, 218, 55, 27, 14, 185,
    39, 77, 182, 5, 64, 40, 164, 176, 239, 198, 28, 12, 136, 163, 129, 219, 176,
    26, 57, 103, 215, 127, 43, 210, 120, 145, 147, 110, 31, 244, 59, 38, 247, 3,
    131, 154, 144, 102, 145, 47, 63, 136, 41, 147, 88, 237, 180, 68, 96, 84, 12,
    248, 7, 49, 30, 77, 168, 223, 166, 241, 207, 186, 254, 146, 223, 236, 70,
    46, 184, 137, 84, 155, 23, 103, 236, 39, 112, 2, 113, 240, 72, 187, 201, 76,
    47, 222, 219, 249, 128, 48, 99, 69, 231, 85, 107, 63, 160, 156, 211, 131,
    199, 249, 193, 54, 104, 23, 121, 138, 15, 114, 228, 93, 55, 203, 92, 225,
    80, 174, 78, 84, 255, 64, 246, 232, 152, 37, 174, 139, 136, 115, 22, 55,
    239, 22, 4, 130, 64, 248, 188, 62, 39, 157, 33, 233, 31, 36, 153, 85, 120,
    65, 139, 224, 215, 175, 51, 92, 176, 202, 237, 89, 182, 59, 85, 229, 209,
    94, 71, 80, 126, 176, 255, 236, 25, 213, 98, 59, 33, 108, 218, 135, 70, 9,
    200, 50, 233, 231, 112, 142, 142, 130, 40, 237, 158, 212, 144, 81, 249, 177,
    130, 228, 86, 95, 58, 88, 49, 58, 167, 143, 9, 131, 31, 51, 110, 230, 13,
    134, 193, 8, 181, 58, 166, 109, 189, 64, 225, 164, 5, 252, 134, 193, 23, 73,
    41, 47, 175, 245, 78, 74, 50, 34, 118, 243, 138, 158, 17, 150, 152, 43, 190,
    120, 32, 151, 217, 29, 120, 244, 201, 75, 192, 72, 174, 46, 210, 253, 1,
    192, 106, 65, 102, 165, 247, 150, 94, 28, 79, 42, 57, 121, 93, 159, 150,
    151, 229, 35, 241, 242, 77, 107, 25, 5, 245, 215, 126, 96, 231, 98, 209,
    142, 95, 222, 182, 235, 194, 9, 142, 82, 122, 181, 233, 55, 104, 0, 70, 217,
    208, 188, 33, 188, 136, 223, 49, 234, 48, 99, 86, 143, 34, 214, 249, 97,
    154, 106, 158, 4, 7, 189, 166, 189, 191, 1, 193, 216, 173, 180, 110, 54, 21,
    8, 9, 83, 29, 114, 78, 154, 165, 206, 41, 255, 183, 123, 134, 17, 15, 199,
    225, 116, 146, 16, 217, 205, 42, 172, 190, 168, 56, 25, 17, 70, 128, 165,
    118, 35, 216, 198, 102, 117, 96, 122, 1, 16, 114, 207, 174, 254, 202, 115,
    201, 155, 87, 164, 241, 34, 239, 24, 150, 71, 253, 173, 57, 169, 69, 17, 94,
    204, 118, 77, 238, 6, 206, 241, 137, 99, 220, 68, 38, 141, 100, 248, 65,
    232, 249, 47, 121, 81, 65, 147, 30, 52, 83, 38, 177, 218, 235, 154, 214,
    191, 179, 249, 198, 233, 11, 69, 161, 140, 25, 240, 14, 98, 161, 76, 105, 7,
    60, 155, 81, 190, 132, 39, 54, 219, 150, 146, 153, 53, 46, 46, 254, 80, 38,
    84, 185, 153, 158, 232, 222, 252, 140, 93, 113, 18, 52, 225, 22, 119, 169,
    54, 46, 206, 17, 138, 73, 171, 3, 63, 230, 69, 187, 131, 129, 32, 227, 224,
    145, 118, 91, 92, 246, 19, 73, 233, 89, 253, 241, 85, 62, 152, 108, 130, 6,
    33, 212, 62, 97, 68, 198, 139, 206, 170, 126, 55, 169, 207, 214, 127, 65,
    56, 110, 195, 38, 93, 124, 118, 137, 179, 196, 202, 238, 214, 89, 29, 214,
    111, 225, 161, 177, 10, 243, 20, 30, 228, 75, 168, 121, 129, 19, 203, 105,
    215, 171, 119, 14, 178, 185, 194, 161, 92, 1, 126, 198, 57, 156, 169, 254,
    128, 36, 21, 153, 229, 54, 160, 54, 11, 142, 28, 81, 110, 134, 102, 22, 167,
    62, 218, 113, 194, 44, 111, 222, 44, 148, 211, 185, 73, 9, 4, 129, 240, 177,
    184, 230, 149, 163, 13, 73, 123, 27, 177, 46, 30, 67, 210, 62, 72, 251, 110,
    89, 45, 233, 219, 246, 195, 81, 103, 145, 166, 204, 176, 169, 31, 116, 12,
    206, 122, 102, 185, 97, 148, 222, 5, 6, 241, 0, 0, 0, 0, 183, 29, 193, 4,
    110, 59, 130, 9, 217, 38, 67, 13, 220, 118, 4, 19, 107, 107, 197, 23, 178,
    77, 134, 26, 5, 80, 71, 30, 184, 237, 8, 38, 15, 240, 201, 34, 214, 214,
    138, 47, 97, 203, 75, 43, 100, 155, 12, 53, 211, 134, 205, 49, 10, 160, 142,
    60, 189, 189, 79, 56, 112, 219, 17, 76, 199, 198, 208, 72, 30, 224, 147, 69,
    169, 253, 82, 65, 172, 173, 21, 95, 27, 176, 212, 91, 194, 150, 151, 86,
    117, 139, 86, 82, 200, 54, 25, 106, 127, 43, 216, 110, 166, 13, 155, 99, 17,
    16, 90, 103, 20, 64, 29, 121, 163, 93, 220, 125, 122, 123, 159, 112, 205,
    102, 94, 116, 224, 182, 35, 152, 87, 171, 226, 156, 142, 141, 161, 145, 57,
    144, 96, 149, 60, 192, 39, 139, 139, 221, 230, 143, 82, 251, 165, 130, 229,
    230, 100, 134, 88, 91, 43, 190, 239, 70, 234, 186, 54, 96, 169, 183, 129,
    125, 104, 179, 132, 45, 47, 173, 51, 48, 238, 169, 234, 22, 173, 164, 93,
    11, 108, 160, 144, 109, 50, 212, 39, 112, 243, 208, 254, 86, 176, 221, 73,
    75, 113, 217, 76, 27, 54, 199, 251, 6, 247, 195, 34, 32, 180, 206, 149, 61,
    117, 202, 40, 128, 58, 242, 159, 157, 251, 246, 70, 187, 184, 251, 241, 166,
    121, 255, 244, 246, 62, 225, 67, 235, 255, 229, 154, 205, 188, 232, 45, 208,
    125, 236, 119, 112, 134, 52, 192, 109, 71, 48, 25, 75, 4, 61, 174, 86, 197,
    57, 171, 6, 130, 39, 28, 27, 67, 35, 197, 61, 0, 46, 114, 32, 193, 42, 207,
    157, 142, 18, 120, 128, 79, 22, 161, 166, 12, 27, 22, 187, 205, 31, 19, 235,
    138, 1, 164, 246, 75, 5, 125, 208, 8, 8, 202, 205, 201, 12, 7, 171, 151,
    120, 176, 182, 86, 124, 105, 144, 21, 113, 222, 141, 212, 117, 219, 221,
    147, 107, 108, 192, 82, 111, 181, 230, 17, 98, 2, 251, 208, 102, 191, 70,
    159, 94, 8, 91, 94, 90, 209, 125, 29, 87, 102, 96, 220, 83, 99, 48, 155, 77,
    212, 45, 90, 73, 13, 11, 25, 68, 186, 22, 216, 64, 151, 198, 165, 172, 32,
    219, 100, 168, 249, 253, 39, 165, 78, 224, 230, 161, 75, 176, 161, 191, 252,
    173, 96, 187, 37, 139, 35, 182, 146, 150, 226, 178, 47, 43, 173, 138, 152,
    54, 108, 142, 65, 16, 47, 131, 246, 13, 238, 135, 243, 93, 169, 153, 68, 64,
    104, 157, 157, 102, 43, 144, 42, 123, 234, 148, 231, 29, 180, 224, 80, 0,
    117, 228, 137, 38, 54, 233, 62, 59, 247, 237, 59, 107, 176, 243, 140, 118,
    113, 247, 85, 80, 50, 250, 226, 77, 243, 254, 95, 240, 188, 198, 232, 237,
    125, 194, 49, 203, 62, 207, 134, 214, 255, 203, 131, 134, 184, 213, 52, 155,
    121, 209, 237, 189, 58, 220, 90, 160, 251, 216, 238, 224, 12, 105, 89, 253,
    205, 109, 128, 219, 142, 96, 55, 198, 79, 100, 50, 150, 8, 122, 133, 139,
    201, 126, 92, 173, 138, 115, 235, 176, 75, 119, 86, 13, 4, 79, 225, 16, 197,
    75, 56, 54, 134, 70, 143, 43, 71, 66, 138, 123, 0, 92, 61, 102, 193, 88,
    228, 64, 130, 85, 83, 93, 67, 81, 158, 59, 29, 37, 41, 38, 220, 33, 240, 0,
    159, 44, 71, 29, 94, 40, 66, 77, 25, 54, 245, 80, 216, 50, 44, 118, 155, 63,
    155, 107, 90, 59, 38, 214, 21, 3, 145, 203, 212, 7, 72, 237, 151, 10, 255,
    240, 86, 14, 250, 160, 17, 16, 77, 189, 208, 20, 148, 155, 147, 25, 35, 134,
    82, 29, 14, 86, 47, 241, 185, 75, 238, 245, 96, 109, 173, 248, 215, 112,
    108, 252, 210, 32, 43, 226, 101, 61, 234, 230, 188, 27, 169, 235, 11, 6,
    104, 239, 182, 187, 39, 215, 1, 166, 230, 211, 216, 128, 165, 222, 111, 157,
    100, 218, 106, 205, 35, 196, 221, 208, 226, 192, 4, 246, 161, 205, 179, 235,
    96, 201, 126, 141, 62, 189, 201, 144, 255, 185, 16, 182, 188, 180, 167, 171,
    125, 176, 162, 251, 58, 174, 21, 230, 251, 170, 204, 192, 184, 167, 123,
    221, 121, 163, 198, 96, 54, 155, 113, 125, 247, 159, 168, 91, 180, 146, 31,
    70, 117, 150, 26, 22, 50, 136, 173, 11, 243, 140, 116, 45, 176, 129, 195,
    48, 113, 133, 153, 144, 138, 93, 46, 141, 75, 89, 247, 171, 8, 84, 64, 182,
    201, 80, 69, 230, 142, 78, 242, 251, 79, 74, 43, 221, 12, 71, 156, 192, 205,
    67, 33, 125, 130, 123, 150, 96, 67, 127, 79, 70, 0, 114, 248, 91, 193, 118,
    253, 11, 134, 104, 74, 22, 71, 108, 147, 48, 4, 97, 36, 45, 197, 101, 233,
    75, 155, 17, 94, 86, 90, 21, 135, 112, 25, 24,
  ],
  "i8",
  ALLOC_NONE,
  Runtime.GLOBAL_BASE + 30724
);
/* memory initializer */ allocate(
  [
    48, 109, 216, 28, 53, 61, 159, 2, 130, 32, 94, 6, 91, 6, 29, 11, 236, 27,
    220, 15, 81, 166, 147, 55, 230, 187, 82, 51, 63, 157, 17, 62, 136, 128, 208,
    58, 141, 208, 151, 36, 58, 205, 86, 32, 227, 235, 21, 45, 84, 246, 212, 41,
    121, 38, 169, 197, 206, 59, 104, 193, 23, 29, 43, 204, 160, 0, 234, 200,
    165, 80, 173, 214, 18, 77, 108, 210, 203, 107, 47, 223, 124, 118, 238, 219,
    193, 203, 161, 227, 118, 214, 96, 231, 175, 240, 35, 234, 24, 237, 226, 238,
    29, 189, 165, 240, 170, 160, 100, 244, 115, 134, 39, 249, 196, 155, 230,
    253, 9, 253, 184, 137, 190, 224, 121, 141, 103, 198, 58, 128, 208, 219, 251,
    132, 213, 139, 188, 154, 98, 150, 125, 158, 187, 176, 62, 147, 12, 173, 255,
    151, 177, 16, 176, 175, 6, 13, 113, 171, 223, 43, 50, 166, 104, 54, 243,
    162, 109, 102, 180, 188, 218, 123, 117, 184, 3, 93, 54, 181, 180, 64, 247,
    177, 0, 64, 202, 69, 27, 76, 255, 82, 130, 90, 179, 98, 162, 107, 96, 117,
    0, 0, 157, 62, 0, 64, 94, 62, 0, 192, 4, 62, 0, 128, 237, 62, 0, 64, 137,
    62, 0, 0, 0, 0, 0, 192, 76, 63, 0, 0, 205, 61, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 128, 63, 0, 0, 0, 0, 49, 0, 0, 0, 0, 33, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 19, 0, 0, 0, 0, 33, 0, 0, 0, 0, 0, 0, 19, 0, 0, 0, 19, 0,
    0, 0, 0, 33, 0, 0, 19, 0, 0, 0, 49, 0, 0, 0, 19, 0, 0, 0, 0, 33, 0, 0, 19,
    0, 0, 0, 19, 0, 0, 0, 49, 0, 0, 0, 0, 33, 0, 0, 19, 0, 0, 0, 49, 0, 0, 0,
    49, 0, 0, 0, 0, 33, 0, 0, 19, 0, 0, 0, 0, 0, 0, 0, 34, 0, 0, 0, 4, 1, 0, 0,
    0, 0, 0, 0, 34, 0, 0, 0, 34, 0, 0, 0, 4, 1, 0, 0, 34, 0, 0, 0, 255, 255,
    255, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 2, 0, 2, 0, 2, 0, 2, 0, 3, 0, 3,
    0, 3, 0, 3, 0, 4, 0, 4, 0, 4, 0, 4, 0, 5, 0, 5, 0, 5, 0, 5, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 3, 0, 4, 0, 5, 0, 6, 0, 7, 0, 8, 0, 9, 0, 10, 0, 11, 0, 13, 0,
    15, 0, 17, 0, 19, 0, 23, 0, 27, 0, 31, 0, 35, 0, 43, 0, 51, 0, 59, 0, 67, 0,
    83, 0, 99, 0, 115, 0, 131, 0, 163, 0, 195, 0, 227, 0, 2, 1, 0, 0, 0, 0, 0,
    0, 1, 0, 2, 0, 3, 0, 4, 0, 5, 0, 7, 0, 9, 0, 13, 0, 17, 0, 25, 0, 33, 0, 49,
    0, 65, 0, 97, 0, 129, 0, 193, 0, 1, 1, 129, 1, 1, 2, 1, 3, 1, 4, 1, 6, 1, 8,
    1, 12, 1, 16, 1, 24, 1, 32, 1, 48, 1, 64, 1, 96, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 1, 0, 1, 0, 2, 0, 2, 0, 3, 0, 3, 0, 4, 0, 4, 0, 5, 0, 5, 0, 6, 0,
    6, 0, 7, 0, 7, 0, 8, 0, 8, 0, 9, 0, 9, 0, 10, 0, 10, 0, 11, 0, 11, 0, 12, 0,
    12, 0, 13, 0, 13, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255,
    255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 0, 0, 41, 0, 41,
    0, 41, 0, 82, 0, 82, 0, 123, 0, 164, 0, 200, 0, 222, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 41, 0, 41, 0, 41, 0, 41, 0, 123, 0, 123, 0, 123,
    0, 164, 0, 164, 0, 240, 0, 10, 1, 27, 1, 39, 1, 41, 0, 41, 0, 41, 0, 41, 0,
    41, 0, 41, 0, 41, 0, 41, 0, 123, 0, 123, 0, 123, 0, 123, 0, 240, 0, 240, 0,
    240, 0, 10, 1, 10, 1, 49, 1, 62, 1, 72, 1, 80, 1, 123, 0, 123, 0, 123, 0,
    123, 0, 123, 0, 123, 0, 123, 0, 123, 0, 240, 0, 240, 0, 240, 0, 240, 0, 49,
    1, 49, 1, 49, 1, 62, 1, 62, 1, 87, 1, 95, 1, 102, 1, 108, 1, 240, 0, 240, 0,
    240, 0, 240, 0, 240, 0, 240, 0, 240, 0, 240, 0, 49, 1, 49, 1, 49, 1, 49, 1,
    87, 1, 87, 1, 87, 1, 95, 1, 95, 1, 114, 1, 120, 1, 126, 1, 131, 1, 0, 0, 0,
    0, 0, 0, 224, 224, 224, 224, 224, 224, 224, 224, 160, 160, 160, 160, 185,
    185, 185, 178, 178, 168, 134, 61, 37, 224, 224, 224, 224, 224, 224, 224,
    224, 240, 240, 240, 240, 207, 207, 207, 198, 198, 183, 144, 66, 40, 160,
    160, 160, 160, 160, 160, 160, 160, 185, 185, 185, 185, 193, 193, 193, 183,
    183, 172, 138, 64, 38, 240, 240, 240, 240, 240, 240, 240, 240, 207, 207,
    207, 207, 204, 204, 204, 193, 193, 180, 143, 66, 40, 185, 185, 185, 185,
    185, 185, 185, 185, 193, 193, 193, 193, 193, 193, 193, 183, 183, 172, 138,
    65, 39, 207, 207, 207, 207, 207, 207, 207, 207, 204, 204, 204, 204, 201,
    201, 201, 188, 188, 176, 141, 66, 40, 193, 193, 193, 193, 193, 193, 193,
    193, 193, 193, 193, 193, 194, 194, 194, 184, 184, 173, 139, 65, 39, 204,
    204, 204, 204, 204, 204, 204, 204, 201, 201, 201, 201, 198, 198, 198, 187,
    187, 175, 140, 66, 40, 40, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
    7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 40,
    15, 23, 28, 31, 34, 36, 38, 39, 41, 42, 43, 44, 45, 46, 47, 47, 49, 50, 51,
    52, 53, 54, 55, 55, 57, 58, 59, 60, 61, 62, 63, 63, 65, 66, 67, 68, 69, 70,
    71, 71, 40, 20, 33, 41, 48, 53, 57, 61, 64, 66, 69, 71, 73, 75, 76, 78, 80,
    82, 85, 87, 89, 91, 92, 94, 96, 98, 101, 103, 105, 107, 108, 110, 112, 114,
    117, 119, 121, 123, 124, 126, 128, 40, 23, 39, 51, 60, 67, 73, 79, 83, 87,
    91, 94, 97, 100, 102, 105, 107, 111, 115, 118, 121, 124, 126, 129, 131, 135,
    139, 142, 145, 148, 150, 153, 155, 159, 163, 166, 169, 172, 174, 177, 179,
    35, 28, 49, 65, 78, 89, 99, 107, 114, 120, 126, 132, 136, 141, 145, 149,
    153, 159, 165, 171, 176, 180, 185, 189, 192, 199, 205, 211, 216, 220, 225,
    229, 232, 239, 245, 251, 21, 33, 58, 79, 97, 112, 125, 137, 148, 157, 166,
    174, 182, 189, 195, 201, 207, 217, 227, 235, 243, 251, 17, 35, 63, 86, 106,
    123, 139, 152, 165, 177, 187, 197, 206, 214, 222, 230, 237, 250, 25, 31, 55,
    75, 91, 105, 117, 128, 138, 146, 154, 161, 168, 174, 180, 185, 190, 200,
    208, 215, 222, 229, 235, 240, 245, 255, 16, 36, 65, 89, 110, 128, 144, 159,
    173, 185, 196, 207, 217, 226, 234, 242, 250, 11, 41, 74, 103, 128, 151, 172,
    191, 209, 225, 241, 255, 9, 43, 79, 110, 138, 163, 186, 207, 227, 246, 12,
    39, 71, 99, 123, 144, 164, 182, 198, 214, 228, 241, 253, 9, 44, 81, 113,
    142, 168, 192, 214, 235, 255, 7, 49, 90, 127, 160, 191, 220, 247, 6, 51, 95,
    134, 170, 203, 234, 7, 47, 87, 123, 155, 184, 212, 237, 6, 52, 97, 137, 174,
    208, 240, 5, 57, 106, 151, 192, 231, 5, 59, 111, 158, 202, 243, 5, 55, 103,
    147, 187, 224, 5, 60, 113, 161, 206, 248, 4, 65, 122, 175, 224, 4, 67, 127,
    182, 234, 0, 0, 0, 0, 1, 0, 0, 0, 3, 0, 0, 0, 7, 0, 0, 0, 15, 0, 0, 0, 31,
    0, 0, 0, 63, 0, 0, 0, 127, 0, 0, 0, 255, 0, 0, 0, 255, 1, 0, 0, 255, 3, 0,
    0, 255, 7, 0, 0, 255, 15, 0, 0, 255, 31, 0, 0, 255, 63, 0, 0, 255, 127, 0,
    0, 0, 134, 107, 63, 0, 20, 46, 63, 0, 112, 189, 62, 0, 208, 76, 62, 0, 192,
    48, 240, 12, 204, 60, 252, 3, 195, 51, 243, 15, 207, 63, 255, 128, 64, 176,
    112, 140, 76, 188, 124, 131, 67, 179, 115, 143, 79, 191, 127, 32, 224, 16,
    208, 44, 236, 28, 220, 35, 227, 19, 211, 47, 239, 31, 223, 160, 96, 144, 80,
    172, 108, 156, 92, 163, 99, 147, 83, 175, 111, 159, 95, 8, 200, 56, 248, 4,
    196, 52, 244, 11, 203, 59, 251, 7, 199, 55, 247, 136, 72, 184, 120, 132, 68,
    180, 116, 139, 75, 187, 123, 135, 71, 183, 119, 40, 232, 24, 216, 36, 228,
    20, 212, 43, 235, 27, 219, 39, 231, 23, 215, 168, 104, 152, 88, 164, 100,
    148, 84, 171, 107, 155, 91, 167, 103, 151, 87, 2, 194, 50, 242, 14, 206, 62,
    254, 1, 193, 49, 241, 13, 205, 61, 253, 130, 66, 178, 114, 142, 78, 190,
    126, 129, 65, 177, 113, 141, 77, 189, 125, 34, 226, 18, 210, 46, 238, 30,
    222, 33, 225, 17, 209, 45, 237, 29, 221, 162, 98, 146, 82, 174, 110, 158,
    94, 161, 97, 145, 81, 173, 109, 157, 93, 10, 202, 58, 250, 6, 198, 54, 246,
    9, 201, 57, 249, 5, 197, 53, 245, 138, 74, 186, 122, 134, 70, 182, 118, 137,
    73, 185, 121, 133, 69, 181, 117, 42, 234, 26, 218, 38, 230, 22, 214, 41,
    233, 25, 217, 37, 229, 21, 213, 170, 106, 154, 90, 166, 102, 150, 86, 169,
    105, 153, 89, 165, 101, 149, 85, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 90, 80, 75, 69, 63, 56, 49, 40, 34, 29, 20, 18, 10, 0,
    0, 0, 0, 0, 0, 0, 0, 110, 100, 90, 84, 78, 71, 65, 58, 51, 45, 39, 32, 26,
    20, 12, 0, 0, 0, 0, 0, 0, 118, 110, 103, 93, 86, 80, 75, 70, 65, 59, 53, 47,
    40, 31, 23, 15, 4, 0, 0, 0, 0, 126, 119, 112, 104, 95, 89, 83, 78, 72, 66,
    60, 54, 47, 39, 32, 25, 17, 12, 1, 0, 0, 134, 127, 120, 114, 103, 97, 91,
    85, 78, 72, 66, 60, 54, 47, 41, 35, 29, 23, 16, 10, 1, 144, 137, 130, 124,
    113, 107, 101, 95, 88, 82, 76, 70, 64, 57, 51, 45, 39, 33, 26, 15, 1, 152,
    145, 138, 132, 123, 117, 111, 105, 98, 92, 86, 80, 74, 67, 61, 55, 49, 43,
    36, 20, 1, 162, 155, 148, 142, 133, 127, 121, 115, 108, 102, 96, 90, 84, 77,
    71, 65, 59, 53, 46, 30, 1, 172, 165, 158, 152, 143, 137, 131, 125, 118, 112,
    106, 100, 94, 87, 81, 75, 69, 63, 56, 45, 20, 200, 200, 200, 200, 200, 200,
    200, 200, 198, 193, 188, 183, 178, 173, 168, 163, 158, 153, 148, 129, 104,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 103, 108, 71, 101, 116,
    73, 110, 102, 111, 76, 111, 103, 0, 0, 0, 0, 65, 116, 32, 109, 97, 114, 107,
    101, 114, 32, 48, 120, 37, 48, 50, 120, 44, 32, 114, 101, 99, 111, 118, 101,
    114, 121, 32, 97, 99, 116, 105, 111, 110, 32, 37, 100, 0, 0, 0, 0, 113, 51,
    109, 97, 112, 0, 0, 0, 114, 95, 110, 111, 114, 109, 97, 108, 77, 97, 112,
    112, 105, 110, 103, 0, 97, 116, 116, 114, 95, 76, 105, 103, 104, 116, 68,
    105, 114, 101, 99, 116, 105, 111, 110, 0, 0, 0, 0, 0, 102, 111, 117, 110,
    100, 32, 35, 32, 119, 105, 116, 104, 111, 117, 116, 32, 110, 97, 109, 101,
    0, 0, 0, 0, 67, 76, 32, 112, 97, 99, 107, 101, 116, 32, 37, 115, 58, 32, 37,
    115, 10, 0, 0, 0, 0, 0, 0, 0, 109, 97, 116, 99, 104, 102, 105, 108, 101, 0,
    0, 0, 0, 0, 0, 0, 83, 101, 114, 118, 101, 114, 32, 100, 105, 115, 99, 111,
    110, 110, 101, 99, 116, 101, 100, 0, 0, 0, 0, 0, 119, 97, 115, 32, 107, 105,
    99, 107, 101, 100, 0, 0, 0, 0, 0, 0, 118, 105, 101, 119, 97, 110, 103, 108,
    101, 115, 91, 50, 93, 0, 0, 0, 67, 111, 110, 110, 101, 99, 116, 101, 100,
    32, 116, 111, 32, 97, 32, 112, 117, 114, 101, 32, 115, 101, 114, 118, 101,
    114, 46, 10, 0, 0, 0, 0, 37, 115, 61, 37, 115, 10, 0, 0, 75, 80, 95, 69, 78,
    84, 69, 82, 0, 0, 0, 0, 0, 0, 0, 0, 103, 108, 71, 101, 116, 79, 98, 106,
    101, 99, 116, 80, 97, 114, 97, 109, 101, 116, 101, 114, 105, 118, 0, 0, 32,
    119, 105, 116, 104, 111, 117, 116, 32, 110, 111, 116, 105, 102, 105, 99, 97,
    116, 105, 111, 110, 0, 0, 0, 83, 101, 108, 101, 99, 116, 101, 100, 32, 37,
    100, 32, 99, 111, 108, 111, 114, 115, 32, 102, 111, 114, 32, 113, 117, 97,
    110, 116, 105, 122, 97, 116, 105, 111, 110, 0, 0, 0, 0, 0, 99, 108, 97, 109,
    112, 84, 105, 109, 101, 0, 0, 0, 0, 0, 0, 0, 114, 95, 115, 115, 97, 111, 0,
    0, 97, 116, 116, 114, 95, 80, 97, 105, 110, 116, 67, 111, 108, 111, 114, 0,
    101, 118, 97, 108, 102, 108, 111, 97, 116, 0, 0, 0, 0, 0, 0, 0, 37, 100, 32,
    115, 101, 114, 118, 101, 114, 115, 32, 112, 97, 114, 115, 101, 100, 32, 40,
    116, 111, 116, 97, 108, 32, 37, 100, 41, 10, 0, 0, 0, 114, 110, 100, 46, 99,
    0, 0, 0, 67, 97, 110, 110, 111, 116, 32, 107, 105, 99, 107, 32, 104, 111,
    115, 116, 32, 112, 108, 97, 121, 101, 114, 10, 0, 0, 0, 0, 0, 0, 0, 0, 101,
    118, 101, 110, 116, 80, 97, 114, 109, 115, 91, 49, 93, 0, 0, 0, 32, 0, 0, 0,
    0, 0, 0, 0, 67, 111, 109, 95, 69, 118, 101, 110, 116, 76, 111, 111, 112, 58,
    32, 98, 97, 100, 32, 101, 118, 101, 110, 116, 32, 116, 121, 112, 101, 32,
    37, 105, 0, 0, 0, 0, 0, 0, 0, 0, 114, 95, 100, 101, 98, 117, 103, 83, 117,
    114, 102, 97, 99, 101, 0, 0, 75, 80, 95, 80, 71, 68, 78, 0, 53, 0, 0, 0, 0,
    0, 0, 0, 103, 108, 68, 101, 108, 101, 116, 101, 79, 98, 106, 101, 99, 116,
    0, 0, 77, 97, 112, 32, 119, 105, 116, 104, 32, 110, 111, 32, 112, 108, 97,
    110, 101, 115, 0, 0, 0, 0, 0, 0, 81, 117, 97, 110, 116, 105, 122, 105, 110,
    103, 32, 116, 111, 32, 37, 100, 32, 99, 111, 108, 111, 114, 115, 0, 116,
    101, 115, 115, 115, 105, 122, 101, 0, 0, 0, 0, 0, 0, 0, 0, 114, 95, 100,
    101, 112, 116, 104, 80, 114, 101, 112, 97, 115, 115, 0, 0, 97, 116, 116,
    114, 95, 67, 111, 108, 111, 114, 0, 0, 0, 0, 0, 0, 71, 76, 95, 65, 82, 66,
    95, 118, 101, 114, 116, 101, 120, 95, 116, 121, 112, 101, 95, 50, 95, 49,
    48, 95, 49, 48, 95, 49, 48, 95, 114, 101, 118, 0, 0, 0, 0, 0, 0, 0, 101,
    118, 97, 108, 0, 0, 0, 0, 67, 76, 95, 83, 101, 114, 118, 101, 114, 115, 82,
    101, 115, 112, 111, 110, 115, 101, 80, 97, 99, 107, 101, 116, 10, 0, 0, 0,
    0, 0, 0, 0, 114, 110, 100, 102, 105, 108, 101, 0, 85, 115, 97, 103, 101, 58,
    32, 37, 115, 32, 60, 99, 108, 105, 101, 110, 116, 32, 110, 117, 109, 98,
    101, 114, 62, 10, 0, 0, 0, 0, 0, 0, 101, 118, 101, 110, 116, 80, 97, 114,
    109, 115, 91, 48, 93, 0, 0, 0, 37, 105, 32, 0, 0, 0, 0, 0, 117, 105, 0, 0,
    0, 0, 0, 0, 83, 86, 95, 80, 97, 99, 107, 101, 116, 69, 118, 101, 110, 116,
    32, 116, 105, 109, 101, 58, 32, 37, 105, 10, 0, 0, 0, 0, 0, 0, 0, 0, 75, 80,
    95, 68, 79, 87, 78, 65, 82, 82, 79, 87, 0, 0, 0, 0, 83, 67, 82, 95, 68, 114,
    97, 119, 83, 99, 114, 101, 101, 110, 70, 105, 101, 108, 100, 58, 32, 98, 97,
    100, 32, 99, 108, 99, 46, 115, 116, 97, 116, 101, 0, 0, 0, 0, 0, 0, 103,
    108, 65, 116, 116, 97, 99, 104, 83, 104, 97, 100, 101, 114, 0, 0, 103, 108,
    73, 115, 70, 114, 97, 109, 101, 98, 117, 102, 102, 101, 114, 0, 81, 117, 97,
    110, 116, 105, 122, 105, 110, 103, 32, 116, 111, 32, 37, 100, 32, 61, 32,
    37, 100, 42, 37, 100, 42, 37, 100, 32, 99, 111, 108, 111, 114, 115, 0, 0, 0,
    0, 0, 0, 100, 101, 102, 111, 114, 109, 86, 101, 114, 116, 101, 120, 101,
    115, 0, 0, 114, 95, 115, 114, 103, 98, 0, 0, 97, 116, 116, 114, 95, 78, 111,
    114, 109, 97, 108, 0, 0, 0, 0, 0, 71, 76, 95, 65, 82, 66, 95, 115, 101, 97,
    109, 108, 101, 115, 115, 95, 99, 117, 98, 101, 95, 109, 97, 112, 0, 0, 0, 0,
    0, 0, 0, 0, 66, 111, 103, 117, 115, 32, 72, 117, 102, 102, 109, 97, 110, 32,
    116, 97, 98, 108, 101, 32, 100, 101, 102, 105, 110, 105, 116, 105, 111, 110,
    0, 0, 112, 114, 97, 103, 109, 97, 0, 0, 67, 76, 95, 67, 104, 101, 99, 107,
    70, 111, 114, 82, 101, 115, 101, 110, 100, 58, 32, 98, 97, 100, 32, 99, 108,
    99, 46, 115, 116, 97, 116, 101, 0, 0, 0, 0, 0, 0, 0, 0, 115, 121, 110, 46,
    99, 0, 0, 0, 85, 115, 105, 110, 103, 32, 37, 100, 47, 37, 100, 47, 37, 100,
    32, 67, 111, 108, 111, 114, 32, 98, 105, 116, 115, 44, 32, 37, 100, 32, 100,
    101, 112, 116, 104, 44, 32, 37, 100, 32, 115, 116, 101, 110, 99, 105, 108,
    32, 100, 105, 115, 112, 108, 97, 121, 46, 10, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0,
    0, 0, 0, 0, 0, 82, 95, 67, 114, 101, 97, 116, 101, 73, 66, 79, 50, 58, 32,
    77, 65, 88, 95, 73, 66, 79, 83, 32, 104, 105, 116, 0, 0, 0, 0, 0, 0, 116,
    111, 114, 115, 111, 84, 105, 109, 101, 114, 0, 0, 0, 0, 0, 0, 119, 104, 105,
    99, 104, 0, 0, 0, 115, 118, 99, 95, 118, 111, 105, 112, 0, 0, 0, 0, 0, 0, 0,
    0, 87, 65, 82, 78, 73, 78, 71, 58, 32, 67, 111, 109, 95, 80, 117, 115, 104,
    69, 118, 101, 110, 116, 32, 111, 118, 101, 114, 102, 108, 111, 119, 10, 0,
    0, 0, 0, 0, 0, 0, 0, 75, 80, 95, 69, 78, 68, 0, 0, 97, 100, 100, 105, 116,
    105, 118, 101, 0, 0, 0, 0, 0, 0, 0, 0, 37, 56, 105, 32, 58, 32, 40, 37, 105,
    41, 32, 37, 115, 10, 0, 0, 103, 108, 71, 101, 116, 70, 114, 97, 109, 101,
    98, 117, 102, 102, 101, 114, 65, 116, 116, 97, 99, 104, 109, 101, 110, 116,
    80, 97, 114, 97, 109, 101, 116, 101, 114, 105, 118, 0, 0, 0, 32, 32, 32, 32,
    32, 32, 32, 32, 37, 52, 117, 32, 37, 52, 117, 32, 37, 52, 117, 32, 37, 52,
    117, 32, 37, 52, 117, 32, 37, 52, 117, 32, 37, 52, 117, 32, 37, 52, 117, 0,
    113, 51, 103, 108, 50, 95, 116, 111, 110, 101, 109, 97, 112, 0, 0, 0, 114,
    95, 99, 97, 109, 101, 114, 97, 69, 120, 112, 111, 115, 117, 114, 101, 0, 0,
    0, 0, 0, 0, 0, 0, 97, 116, 116, 114, 95, 84, 97, 110, 103, 101, 110, 116, 0,
    0, 0, 0, 71, 76, 95, 65, 82, 66, 95, 100, 101, 112, 116, 104, 95, 99, 108,
    97, 109, 112, 0, 0, 0, 0, 0, 0, 101, 114, 114, 111, 114, 0, 0, 0, 115, 121,
    110, 102, 105, 108, 101, 0, 115, 99, 114, 95, 99, 111, 110, 115, 112, 101,
    101, 100, 0, 0, 0, 0, 77, 111, 100, 101, 32, 32, 49, 58, 32, 52, 48, 48,
    120, 51, 48, 48, 0, 0, 0, 0, 0, 0, 0, 0, 32, 37, 53, 105, 0, 0, 0, 0, 100,
    101, 108, 116, 97, 95, 97, 110, 103, 108, 101, 115, 91, 50, 93, 0, 116, 111,
    117, 99, 104, 70, 105, 108, 101, 0, 0, 0, 0, 0, 0, 0, 63, 63, 63, 63, 32, 0,
    0, 0, 69, 114, 114, 111, 114, 32, 119, 114, 105, 116, 105, 110, 103, 32,
    116, 111, 32, 106, 111, 117, 114, 110, 97, 108, 32, 102, 105, 108, 101, 0,
    0, 0, 75, 80, 95, 82, 73, 71, 72, 84, 65, 82, 82, 79, 87, 0, 0, 0, 40, 117,
    115, 105, 110, 103, 32, 99, 97, 99, 104, 101, 41, 10, 0, 0, 70, 66, 79, 95,
    67, 114, 101, 97, 116, 101, 58, 32, 98, 97, 100, 32, 119, 105, 100, 116,
    104, 32, 37, 105, 0, 0, 0, 0, 0, 0, 0, 0, 103, 108, 86, 101, 114, 116, 101,
    120, 65, 116, 116, 114, 105, 98, 80, 111, 105, 110, 116, 101, 114, 65, 82,
    66, 0, 0, 0, 0, 0, 0, 0, 0, 82, 95, 71, 101, 116, 67, 111, 109, 109, 97,
    110, 100, 66, 117, 102, 102, 101, 114, 58, 32, 98, 97, 100, 32, 115, 105,
    122, 101, 32, 37, 105, 0, 103, 108, 70, 114, 97, 109, 101, 98, 117, 102,
    102, 101, 114, 84, 101, 120, 116, 117, 114, 101, 50, 68, 0, 0, 103, 114,
    105, 100, 115, 105, 122, 101, 0, 0, 0, 0, 0, 0, 0, 0, 85, 110, 101, 120,
    112, 101, 99, 116, 101, 100, 32, 109, 97, 114, 107, 101, 114, 32, 48, 120,
    37, 48, 50, 120, 0, 0, 0, 0, 0, 0, 0, 0, 105, 110, 118, 97, 108, 105, 100,
    32, 108, 105, 116, 101, 114, 97, 108, 47, 108, 101, 110, 103, 116, 104, 115,
    32, 115, 101, 116, 0, 0, 0, 0, 0, 113, 51, 103, 108, 50, 95, 115, 117, 110,
    0, 0, 0, 0, 0, 0, 0, 50, 46, 48, 0, 0, 0, 0, 0, 97, 116, 116, 114, 95, 84,
    101, 120, 67, 111, 111, 114, 100, 49, 0, 0, 103, 108, 68, 114, 97, 119, 66,
    117, 102, 102, 101, 114, 115, 65, 82, 66, 0, 0, 0, 0, 0, 0, 0, 0, 108, 105,
    110, 101, 0, 0, 0, 0, 99, 104, 97, 108, 108, 101, 110, 103, 101, 0, 0, 0, 0,
    0, 0, 0, 115, 97, 121, 32, 37, 115, 0, 0, 37, 53, 105, 0, 0, 0, 0, 0, 100,
    101, 108, 116, 97, 95, 97, 110, 103, 108, 101, 115, 91, 48, 93, 0, 102, 100,
    105, 114, 0, 0, 0, 0, 69, 114, 114, 111, 114, 32, 114, 101, 97, 100, 105,
    110, 103, 32, 102, 114, 111, 109, 32, 106, 111, 117, 114, 110, 97, 108, 32,
    102, 105, 108, 101, 0, 27, 91, 37, 100, 109, 0, 0, 0, 70, 65, 73, 76, 69,
    68, 32, 40, 37, 115, 41, 10, 0, 0, 0, 0, 75, 80, 95, 53, 0, 0, 0, 0, 105,
    110, 95, 106, 111, 121, 115, 116, 105, 99, 107, 0, 0, 0, 0, 0, 125, 0, 0, 0,
    0, 0, 0, 0, 33, 61, 0, 0, 0, 0, 0, 0, 103, 108, 70, 114, 97, 109, 101, 98,
    117, 102, 102, 101, 114, 82, 101, 110, 100, 101, 114, 98, 117, 102, 102,
    101, 114, 0, 0, 0, 0, 0, 0, 0, 100, 101, 102, 105, 110, 101, 32, 37, 115,
    32, 105, 110, 99, 111, 109, 112, 108, 101, 116, 101, 0, 0, 0, 0, 77, 105,
    115, 99, 101, 108, 108, 97, 110, 101, 111, 117, 115, 32, 109, 97, 114, 107,
    101, 114, 32, 48, 120, 37, 48, 50, 120, 44, 32, 108, 101, 110, 103, 116,
    104, 32, 37, 117, 0, 0, 98, 111, 116, 108, 105, 98, 46, 108, 111, 103, 0, 0,
    0, 0, 0, 0, 113, 51, 109, 97, 112, 95, 115, 117, 110, 69, 120, 116, 0, 0, 0,
    0, 114, 95, 102, 111, 114, 99, 101, 65, 117, 116, 111, 69, 120, 112, 111,
    115, 117, 114, 101, 77, 97, 120, 0, 0, 98, 111, 116, 95, 114, 101, 108, 111,
    97, 100, 99, 104, 97, 114, 97, 99, 116, 101, 114, 115, 0, 0, 0, 0, 97, 116,
    116, 114, 95, 84, 101, 120, 67, 111, 111, 114, 100, 48, 0, 0, 71, 76, 95,
    65, 82, 66, 95, 100, 114, 97, 119, 95, 98, 117, 102, 102, 101, 114, 115, 0,
    0, 0, 0, 0, 99, 111, 117, 110, 108, 100, 110, 39, 116, 32, 108, 111, 97,
    100, 32, 37, 115, 10, 0, 0, 0, 0, 0, 0, 102, 117, 110, 99, 95, 115, 116, 97,
    116, 105, 99, 0, 0, 0, 0, 0, 117, 110, 100, 101, 102, 0, 0, 0, 105, 110,
    118, 97, 108, 105, 100, 32, 103, 111, 97, 108, 32, 115, 116, 97, 116, 101,
    32, 37, 100, 10, 0, 0, 113, 112, 111, 114, 116, 0, 0, 0, 116, 101, 108, 108,
    32, 37, 100, 32, 37, 115, 0, 0, 0, 0, 0, 0, 98, 111, 116, 102, 105, 108,
    101, 115, 0, 0, 0, 0, 0, 0, 0, 0, 37, 55, 105, 32, 0, 0, 0, 0, 98, 111, 116,
    95, 114, 101, 108, 111, 97, 100, 99, 104, 97, 114, 97, 99, 116, 101, 114,
    115, 0, 0, 0, 0, 65, 65, 83, 95, 76, 105, 110, 107, 69, 110, 116, 105, 116,
    121, 58, 32, 97, 97, 115, 32, 110, 111, 116, 32, 108, 111, 97, 100, 101,
    100, 10, 0, 112, 109, 95, 116, 121, 112, 101, 0, 119, 114, 105, 116, 116,
    101, 110, 32, 37, 100, 32, 98, 121, 116, 101, 115, 32, 111, 102, 32, 114,
    111, 117, 116, 105, 110, 103, 32, 99, 97, 99, 104, 101, 10, 0, 0, 0, 0, 0,
    0, 100, 105, 114, 0, 0, 0, 0, 0, 67, 111, 109, 95, 81, 117, 101, 117, 101,
    69, 118, 101, 110, 116, 58, 32, 111, 118, 101, 114, 102, 108, 111, 119, 10,
    0, 0, 0, 0, 0, 0, 0, 48, 0, 0, 0, 0, 0, 0, 0, 52, 48, 48, 0, 0, 0, 0, 0, 75,
    80, 95, 76, 69, 70, 84, 65, 82, 82, 79, 87, 0, 0, 0, 0, 109, 101, 109, 111,
    114, 121, 100, 117, 109, 112, 0, 0, 0, 0, 0, 0, 101, 114, 114, 111, 114, 32,
    111, 112, 101, 110, 105, 110, 103, 32, 37, 115, 10, 0, 0, 0, 0, 0, 0, 0, 13,
    37, 54, 100, 32, 112, 111, 115, 115, 105, 98, 108, 101, 32, 112, 111, 114,
    116, 97, 108, 32, 97, 114, 101, 97, 115, 10, 0, 0, 0, 0, 0, 67, 111, 117,
    108, 100, 110, 39, 116, 32, 108, 111, 97, 100, 32, 115, 121, 109, 98, 111,
    108, 32, 102, 105, 108, 101, 58, 32, 37, 115, 10, 0, 0, 81, 95, 115, 116,
    114, 110, 99, 112, 121, 122, 58, 32, 100, 101, 115, 116, 115, 105, 122, 101,
    32, 60, 32, 49, 0, 0, 0, 0, 0, 0, 0, 0, 103, 108, 68, 101, 108, 101, 116,
    101, 70, 114, 97, 109, 101, 98, 117, 102, 102, 101, 114, 115, 0, 0, 0, 0,
    32, 32, 32, 32, 119, 105, 116, 104, 32, 37, 100, 32, 120, 32, 37, 100, 32,
    116, 104, 117, 109, 98, 110, 97, 105, 108, 32, 105, 109, 97, 103, 101, 0, 0,
    0, 0, 0, 0, 0, 0, 100, 101, 109, 111, 115, 47, 37, 115, 46, 37, 115, 37,
    100, 0, 0, 0, 113, 51, 109, 97, 112, 95, 115, 117, 110, 0, 0, 0, 0, 0, 0, 0,
    114, 95, 102, 111, 114, 99, 101, 65, 117, 116, 111, 69, 120, 112, 111, 115,
    117, 114, 101, 77, 105, 110, 0, 0, 97, 116, 116, 114, 95, 80, 111, 115, 105,
    116, 105, 111, 110, 0, 0, 0, 37, 115, 32, 114, 101, 115, 111, 108, 118, 101,
    100, 32, 116, 111, 32, 37, 115, 10, 0, 0, 0, 0, 0, 0, 71, 76, 95, 65, 82,
    66, 95, 116, 101, 120, 116, 117, 114, 101, 95, 99, 111, 109, 112, 114, 101,
    115, 115, 105, 111, 110, 95, 98, 112, 116, 99, 0, 67, 76, 95, 80, 108, 97,
    121, 67, 105, 110, 101, 109, 97, 116, 105, 99, 95, 102, 10, 0, 0, 0, 0, 0,
    83, 101, 114, 118, 101, 114, 58, 32, 37, 115, 10, 0, 0, 0, 0, 0, 100, 101,
    102, 105, 110, 101, 0, 0, 49, 0, 0, 0, 0, 0, 0, 0, 37, 105, 0, 0, 0, 0, 0,
    0, 115, 97, 121, 95, 116, 101, 97, 109, 32, 37, 115, 0, 0, 0, 0, 0, 112,
    114, 105, 110, 116, 10, 83, 101, 114, 118, 101, 114, 32, 117, 115, 101, 115,
    32, 112, 114, 111, 116, 111, 99, 111, 108, 32, 118, 101, 114, 115, 105, 111,
    110, 32, 37, 105, 32, 40, 121, 111, 117, 114, 115, 32, 105, 115, 32, 37,
    105, 41, 46, 10, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 113, 99, 111, 110, 115,
    111, 108, 101, 46, 108, 111, 103, 0, 0, 0, 0, 100, 97, 109, 97, 103, 101,
    67, 111, 117, 110, 116, 0, 0, 0, 0, 0, 100, 117, 109, 112, 117, 115, 101,
    114, 0, 0, 0, 0, 0, 0, 0, 0, 112, 97, 116, 104, 0, 0, 0, 0, 98, 111, 116,
    95, 101, 110, 97, 98, 108, 101, 0, 0, 0, 0, 0, 0, 67, 111, 117, 108, 100,
    110, 39, 116, 32, 111, 112, 101, 110, 32, 106, 111, 117, 114, 110, 97, 108,
    32, 102, 105, 108, 101, 115, 10, 0, 0, 0, 0, 115, 95, 97, 108, 77, 105, 110,
    68, 105, 115, 116, 97, 110, 99, 101, 0, 75, 80, 95, 80, 71, 85, 80, 0, 115,
    95, 100, 111, 112, 112, 108, 101, 114, 0, 0, 0, 0, 0, 0, 0, 78, 111, 32, 98,
    97, 99, 107, 103, 114, 111, 117, 110, 100, 32, 102, 105, 108, 101, 46, 10,
    0, 0, 0, 0, 73, 80, 58, 32, 37, 115, 10, 0, 103, 108, 71, 101, 110, 70, 114,
    97, 109, 101, 98, 117, 102, 102, 101, 114, 115, 0, 0, 0, 0, 0, 0, 0, 37,
    115, 32, 114, 101, 99, 118, 32, 37, 52, 105, 32, 58, 32, 115, 61, 37, 105,
    10, 0, 0, 0, 0, 0, 74, 70, 73, 70, 32, 101, 120, 116, 101, 110, 115, 105,
    111, 110, 32, 109, 97, 114, 107, 101, 114, 58, 32, 116, 121, 112, 101, 32,
    48, 120, 37, 48, 50, 120, 44, 32, 108, 101, 110, 103, 116, 104, 32, 37, 117,
    0, 0, 0, 113, 101, 114, 0, 0, 0, 0, 0, 114, 95, 102, 111, 114, 99, 101, 65,
    117, 116, 111, 69, 120, 112, 111, 115, 117, 114, 101, 0, 0, 0, 0, 0, 112,
    111, 115, 46, 116, 114, 66, 97, 115, 101, 91, 48, 93, 0, 0, 0, 71, 76, 95,
    69, 88, 84, 95, 116, 101, 120, 116, 117, 114, 101, 95, 99, 111, 109, 112,
    114, 101, 115, 115, 105, 111, 110, 95, 108, 97, 116, 99, 0, 105, 110, 99,
    108, 117, 100, 101, 0, 112, 114, 111, 116, 111, 99, 111, 108, 0, 0, 0, 0, 0,
    0, 0, 0, 98, 111, 116, 95, 116, 101, 115, 116, 114, 99, 104, 97, 116, 0, 0,
    0, 114, 98, 0, 0, 0, 0, 0, 0, 94, 55, 0, 0, 0, 0, 0, 0, 65, 76, 84, 0, 0, 0,
    0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 100, 97, 109, 97, 103, 101, 80, 105, 116, 99,
    104, 0, 0, 0, 0, 0, 99, 111, 109, 95, 106, 111, 117, 114, 110, 97, 108, 0,
    0, 0, 0, 0, 75, 80, 95, 85, 80, 65, 82, 82, 79, 87, 0, 0, 0, 0, 0, 0, 103,
    108, 66, 105, 110, 100, 70, 114, 97, 109, 101, 98, 117, 102, 102, 101, 114,
    0, 0, 0, 0, 0, 0, 0, 87, 97, 114, 110, 105, 110, 103, 58, 32, 116, 104, 117,
    109, 98, 110, 97, 105, 108, 32, 105, 109, 97, 103, 101, 32, 115, 105, 122,
    101, 32, 100, 111, 101, 115, 32, 110, 111, 116, 32, 109, 97, 116, 99, 104,
    32, 100, 97, 116, 97, 32, 108, 101, 110, 103, 116, 104, 32, 37, 117, 0, 0,
    0, 0, 0, 87, 65, 82, 78, 73, 78, 71, 58, 32, 116, 111, 111, 32, 109, 97,
    110, 121, 32, 115, 116, 97, 103, 101, 115, 32, 105, 110, 32, 115, 104, 97,
    100, 101, 114, 32, 37, 115, 10, 0, 0, 114, 95, 97, 117, 116, 111, 69, 120,
    112, 111, 115, 117, 114, 101, 0, 0, 71, 76, 95, 69, 88, 84, 95, 116, 101,
    120, 116, 117, 114, 101, 95, 115, 82, 71, 66, 95, 100, 101, 99, 111, 100,
    101, 0, 0, 0, 0, 0, 0, 37, 115, 0, 0, 0, 0, 0, 0, 101, 110, 100, 105, 102,
    0, 0, 0, 110, 101, 116, 95, 113, 112, 111, 114, 116, 0, 0, 0, 0, 0, 0, 0,
    45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45,
    10, 0, 0, 0, 0, 37, 115, 0, 0, 0, 0, 0, 0, 100, 97, 109, 97, 103, 101, 89,
    97, 119, 0, 0, 0, 0, 0, 0, 0, 82, 101, 112, 108, 97, 121, 105, 110, 103, 32,
    106, 111, 117, 114, 110, 97, 108, 101, 100, 32, 101, 118, 101, 110, 116,
    115, 10, 0, 0, 0, 0, 0, 75, 80, 95, 72, 79, 77, 69, 0, 100, 105, 115, 99,
    111, 110, 110, 101, 99, 116, 0, 0, 0, 0, 0, 0, 103, 108, 66, 105, 110, 100,
    65, 116, 116, 114, 105, 98, 76, 111, 99, 97, 116, 105, 111, 110, 0, 0, 0, 0,
    74, 70, 73, 70, 32, 65, 80, 80, 48, 32, 109, 97, 114, 107, 101, 114, 58, 32,
    118, 101, 114, 115, 105, 111, 110, 32, 37, 100, 46, 37, 48, 50, 100, 44, 32,
    100, 101, 110, 115, 105, 116, 121, 32, 37, 100, 120, 37, 100, 32, 32, 37,
    100, 0, 0, 0, 0, 87, 65, 82, 78, 73, 78, 71, 58, 32, 110, 111, 32, 99, 111,
    110, 99, 108, 117, 100, 105, 110, 103, 32, 39, 125, 39, 32, 105, 110, 32,
    115, 104, 97, 100, 101, 114, 32, 37, 115, 10, 0, 0, 0, 0, 0, 0, 0, 0, 48,
    46, 48, 0, 0, 0, 0, 0, 71, 76, 83, 76, 95, 73, 110, 105, 116, 71, 80, 85,
    83, 104, 97, 100, 101, 114, 50, 58, 32, 34, 37, 115, 34, 32, 105, 115, 32,
    116, 111, 111, 32, 108, 111, 110, 103, 0, 0, 0, 71, 76, 95, 69, 88, 84, 95,
    102, 114, 97, 109, 101, 98, 117, 102, 102, 101, 114, 95, 115, 82, 71, 66, 0,
    37, 115, 47, 37, 115, 0, 0, 0, 101, 108, 115, 101, 0, 0, 0, 0, 103, 101,
    116, 99, 104, 97, 108, 108, 101, 110, 103, 101, 32, 37, 100, 32, 37, 115, 0,
    0, 0, 0, 0, 0, 37, 115, 32, 104, 97, 115, 32, 37, 100, 32, 99, 104, 97, 116,
    32, 108, 105, 110, 101, 115, 10, 0, 0, 0, 99, 111, 109, 95, 101, 114, 114,
    111, 114, 77, 101, 115, 115, 97, 103, 101, 0, 0, 0, 0, 0, 0, 0, 0, 100, 105,
    115, 99, 111, 110, 110, 101, 99, 116, 101, 100, 0, 0, 0, 0, 37, 52, 105, 32,
    0, 0, 0, 0, 100, 97, 109, 97, 103, 101, 69, 118, 101, 110, 116, 0, 0, 0, 0,
    0, 106, 111, 117, 114, 110, 97, 108, 100, 97, 116, 97, 46, 100, 97, 116, 0,
    65, 85, 88, 49, 54, 0, 0, 0, 103, 108, 73, 115, 80, 114, 111, 103, 114, 97,
    109, 0, 0, 0, 0, 0, 32, 32, 32, 32, 32, 32, 32, 32, 37, 51, 100, 32, 37, 51,
    100, 32, 37, 51, 100, 32, 37, 51, 100, 32, 37, 51, 100, 32, 37, 51, 100, 32,
    37, 51, 100, 32, 37, 51, 100, 0, 87, 65, 82, 78, 73, 78, 71, 58, 32, 101,
    120, 112, 101, 99, 116, 105, 110, 103, 32, 39, 123, 39, 44, 32, 102, 111,
    117, 110, 100, 32, 39, 37, 115, 39, 32, 105, 110, 115, 116, 101, 97, 100,
    32, 105, 110, 32, 115, 104, 97, 100, 101, 114, 32, 39, 37, 115, 39, 10, 0,
    0, 0, 0, 0, 0, 114, 95, 102, 111, 114, 99, 101, 84, 111, 110, 101, 77, 97,
    112, 77, 97, 120, 0, 0, 0, 0, 0, 0, 0, 45, 45, 45, 45, 45, 45, 45, 32, 71,
    80, 85, 32, 115, 104, 97, 100, 101, 114, 32, 45, 45, 45, 45, 45, 45, 45, 10,
    0, 0, 0, 0, 0, 71, 76, 95, 69, 88, 84, 95, 116, 101, 120, 116, 117, 114,
    101, 95, 115, 82, 71, 66, 0, 0, 0, 0, 0, 101, 108, 105, 102, 0, 0, 0, 0, 85,
    68, 80, 32, 68, 111, 119, 110, 108, 111, 97, 100, 115, 32, 97, 114, 101, 32,
    100, 105, 115, 97, 98, 108, 101, 100, 32, 111, 110, 32, 121, 111, 117, 114,
    32, 99, 108, 105, 101, 110, 116, 46, 32, 40, 99, 108, 95, 97, 108, 108, 111,
    119, 68, 111, 119, 110, 108, 111, 97, 100, 32, 105, 115, 32, 37, 100, 41, 0,
    0, 0, 0, 0, 98, 111, 116, 95, 116, 101, 115, 116, 105, 99, 104, 97, 116, 0,
    0, 0, 85, 110, 112, 117, 114, 101, 32, 99, 108, 105, 101, 110, 116, 32, 100,
    101, 116, 101, 99, 116, 101, 100, 46, 32, 73, 110, 118, 97, 108, 105, 100,
    32, 46, 80, 75, 51, 32, 102, 105, 108, 101, 115, 32, 114, 101, 102, 101,
    114, 101, 110, 99, 101, 100, 33, 0, 0, 90, 77, 66, 73, 32, 0, 0, 0, 118,
    105, 101, 119, 104, 101, 105, 103, 104, 116, 0, 0, 0, 0, 0, 0, 106, 111,
    117, 114, 110, 97, 108, 46, 100, 97, 116, 0, 0, 0, 0, 0, 49, 0, 0, 0, 0, 0,
    0, 0, 65, 85, 88, 49, 53, 0, 0, 0, 48, 0, 0, 0, 0, 0, 0, 0, 103, 108, 86,
    97, 108, 105, 100, 97, 116, 101, 80, 114, 111, 103, 114, 97, 109, 0, 0, 0,
    0, 0, 0, 0, 77, 97, 112, 32, 119, 105, 116, 104, 32, 110, 111, 32, 108, 101,
    97, 102, 115, 0, 0, 0, 0, 0, 0, 0, 69, 110, 100, 32, 79, 102, 32, 73, 109,
    97, 103, 101, 0, 0, 0, 0, 95, 110, 0, 0, 0, 0, 0, 0, 45, 50, 46, 48, 0, 0,
    0, 0, 113, 103, 108, 86, 101, 114, 116, 101, 120, 65, 116, 116, 114, 105,
    98, 80, 111, 105, 110, 116, 101, 114, 65, 82, 66, 40, 32, 65, 84, 84, 82,
    95, 73, 78, 68, 69, 88, 95, 84, 65, 78, 71, 69, 78, 84, 50, 32, 41, 10, 0,
    0, 0, 0, 0, 0, 0, 103, 108, 82, 101, 110, 100, 101, 114, 98, 117, 102, 102,
    101, 114, 83, 116, 111, 114, 97, 103, 101, 77, 117, 108, 116, 105, 115, 97,
    109, 112, 108, 101, 69, 88, 84, 0, 0, 0, 0, 0, 105, 102, 110, 100, 101, 102,
    0, 0, 73, 110, 99, 111, 114, 114, 101, 99, 116, 32, 99, 104, 101, 99, 107,
    115, 117, 109, 32, 102, 111, 114, 32, 102, 105, 108, 101, 58, 32, 37, 115,
    0, 37, 115, 10, 0, 0, 0, 0, 0, 105, 103, 110, 111, 114, 105, 110, 103, 32,
    111, 117, 116, 100, 97, 116, 101, 100, 32, 99, 112, 32, 99, 111, 109, 109,
    97, 110, 100, 32, 102, 114, 111, 109, 32, 99, 108, 105, 101, 110, 116, 32,
    37, 115, 10, 0, 0, 0, 0, 67, 78, 67, 84, 32, 0, 0, 0, 101, 120, 116, 101,
    114, 110, 97, 108, 69, 118, 101, 110, 116, 80, 97, 114, 109, 0, 0, 0, 0, 0,
    0, 0, 118, 109, 95, 117, 105, 0, 0, 0, 74, 111, 117, 114, 110, 97, 108, 105,
    110, 103, 32, 101, 118, 101, 110, 116, 115, 10, 0, 0, 0, 0, 0, 0, 65, 85,
    88, 49, 52, 0, 0, 0, 103, 108, 65, 116, 116, 97, 99, 104, 79, 98, 106, 101,
    99, 116, 0, 0, 103, 114, 97, 112, 104, 115, 104, 105, 102, 116, 0, 0, 0, 0,
    0, 0, 103, 108, 71, 101, 116, 80, 114, 111, 103, 114, 97, 109, 73, 110, 102,
    111, 76, 111, 103, 0, 0, 0, 0, 0, 79, 98, 116, 97, 105, 110, 101, 100, 32,
    69, 77, 83, 32, 104, 97, 110, 100, 108, 101, 32, 37, 117, 0, 0, 87, 65, 82,
    78, 73, 78, 71, 58, 32, 71, 101, 110, 101, 114, 97, 116, 101, 80, 101, 114,
    109, 97, 110, 101, 110, 116, 83, 104, 97, 100, 101, 114, 32, 45, 32, 77, 65,
    88, 95, 83, 72, 65, 68, 69, 82, 83, 32, 104, 105, 116, 10, 0, 0, 0, 0, 0,
    114, 95, 102, 111, 114, 99, 101, 84, 111, 110, 101, 77, 97, 112, 65, 118,
    103, 0, 0, 0, 0, 0, 0, 0, 82, 101, 115, 97, 109, 112, 108, 101, 84, 101,
    120, 116, 117, 114, 101, 58, 32, 109, 97, 120, 32, 119, 105, 100, 116, 104,
    0, 0, 0, 0, 0, 0, 113, 103, 108, 86, 101, 114, 116, 101, 120, 65, 116, 116,
    114, 105, 98, 80, 111, 105, 110, 116, 101, 114, 65, 82, 66, 40, 32, 65, 84,
    84, 82, 95, 73, 78, 68, 69, 88, 95, 78, 79, 82, 77, 65, 76, 50, 32, 41, 10,
    0, 0, 0, 0, 0, 0, 0, 0, 71, 76, 95, 69, 88, 84, 95, 102, 114, 97, 109, 101,
    98, 117, 102, 102, 101, 114, 95, 109, 117, 108, 116, 105, 115, 97, 109, 112,
    108, 101, 0, 0, 67, 111, 109, 112, 111, 110, 101, 110, 116, 32, 105, 110,
    100, 101, 120, 32, 37, 100, 58, 32, 109, 105, 115, 109, 97, 116, 99, 104,
    105, 110, 103, 32, 115, 97, 109, 112, 108, 105, 110, 103, 32, 114, 97, 116,
    105, 111, 32, 37, 100, 58, 37, 100, 44, 32, 37, 100, 58, 37, 100, 44, 32,
    37, 99, 0, 105, 102, 100, 101, 102, 0, 0, 0, 102, 115, 95, 104, 111, 109,
    101, 112, 97, 116, 104, 0, 0, 0, 0, 0, 116, 111, 111, 32, 109, 97, 110, 121,
    32, 101, 120, 112, 97, 110, 115, 105, 111, 110, 115, 32, 105, 110, 32, 99,
    104, 97, 116, 32, 109, 101, 115, 115, 97, 103, 101, 10, 0, 0, 0, 0, 118,
    109, 47, 117, 105, 46, 113, 118, 109, 0, 0, 0, 0, 0, 0, 0, 83, 68, 76, 95,
    83, 101, 116, 86, 105, 100, 101, 111, 77, 111, 100, 101, 32, 102, 97, 105,
    108, 101, 100, 58, 32, 37, 115, 10, 0, 0, 0, 0, 37, 53, 105, 32, 0, 0, 0, 0,
    82, 95, 67, 114, 101, 97, 116, 101, 73, 66, 79, 50, 58, 32, 34, 37, 115, 34,
    32, 105, 115, 32, 116, 111, 111, 32, 108, 111, 110, 103, 0, 0, 100, 101,
    108, 116, 97, 95, 97, 110, 103, 108, 101, 115, 91, 49, 93, 0, 46, 46, 92, 0,
    0, 0, 0, 0, 115, 118, 99, 95, 69, 79, 70, 0, 48, 0, 0, 0, 0, 0, 0, 0, 65,
    85, 88, 49, 51, 0, 0, 0, 67, 98, 117, 102, 95, 65, 100, 100, 84, 101, 120,
    116, 58, 32, 111, 118, 101, 114, 102, 108, 111, 119, 10, 0, 98, 97, 110,
    110, 101, 114, 0, 0, 87, 65, 82, 78, 73, 78, 71, 58, 32, 37, 115, 32, 110,
    111, 116, 32, 112, 114, 101, 115, 101, 110, 116, 44, 32, 117, 115, 105, 110,
    103, 32, 37, 115, 32, 105, 110, 115, 116, 101, 97, 100, 10, 0, 0, 0, 0, 0,
    0, 103, 108, 76, 105, 110, 107, 80, 114, 111, 103, 114, 97, 109, 0, 0, 0,
    70, 114, 101, 101, 100, 32, 69, 77, 83, 32, 104, 97, 110, 100, 108, 101, 32,
    37, 117, 0, 0, 0, 0, 0, 87, 65, 82, 78, 73, 78, 71, 58, 32, 115, 104, 97,
    100, 101, 114, 32, 39, 37, 115, 39, 32, 104, 97, 115, 32, 108, 105, 103,
    104, 116, 109, 97, 112, 32, 98, 117, 116, 32, 110, 111, 32, 108, 105, 103,
    104, 116, 109, 97, 112, 32, 115, 116, 97, 103, 101, 33, 10, 0, 0, 0, 0, 0,
    0, 0, 45, 56, 46, 48, 0, 0, 0, 0, 98, 109, 112, 0, 0, 0, 0, 0, 113, 103,
    108, 86, 101, 114, 116, 101, 120, 65, 116, 116, 114, 105, 98, 80, 111, 105,
    110, 116, 101, 114, 65, 82, 66, 40, 32, 65, 84, 84, 82, 95, 73, 78, 68, 69,
    88, 95, 80, 79, 83, 73, 84, 73, 79, 78, 50, 32, 41, 10, 0, 0, 0, 0, 0, 0,
    103, 108, 66, 108, 105, 116, 70, 114, 97, 109, 101, 98, 117, 102, 102, 101,
    114, 69, 88, 84, 0, 0, 0, 0, 105, 102, 0, 0, 0, 0, 0, 0, 100, 111, 119, 110,
    108, 111, 97, 100, 32, 37, 115, 0, 0, 0, 0, 0, 66, 111, 116, 67, 111, 110,
    115, 116, 114, 117, 99, 116, 67, 104, 97, 116, 58, 32, 109, 101, 115, 115,
    97, 103, 101, 32, 34, 37, 115, 34, 32, 105, 110, 118, 97, 108, 105, 100, 32,
    101, 115, 99, 97, 112, 101, 32, 99, 104, 97, 114, 10, 0, 0, 0, 0, 0, 77,
    111, 100, 101, 32, 32, 48, 58, 32, 51, 50, 48, 120, 50, 52, 48, 0, 0, 0, 0,
    0, 0, 0, 0, 118, 109, 47, 99, 103, 97, 109, 101, 46, 113, 118, 109, 0, 0, 0,
    0, 37, 51, 105, 32, 0, 0, 0, 0, 76, 111, 97, 100, 66, 77, 80, 58, 32, 102,
    105, 108, 101, 32, 116, 114, 117, 110, 99, 97, 116, 101, 100, 32, 40, 37,
    115, 41, 0, 0, 0, 0, 51, 0, 0, 0, 0, 0, 0, 0, 115, 112, 101, 101, 100, 0, 0,
    0, 46, 46, 47, 0, 0, 0, 0, 0, 10, 32, 32, 32, 32, 32, 32, 45, 119, 45, 45,
    32, 45, 104, 45, 45, 32, 116, 121, 112, 101, 32, 32, 45, 115, 105, 122, 101,
    45, 32, 45, 45, 110, 97, 109, 101, 45, 45, 45, 45, 45, 45, 45, 10, 0, 0, 0,
    0, 106, 111, 117, 114, 110, 97, 108, 0, 65, 85, 88, 49, 50, 0, 0, 0, 45, 45,
    45, 45, 45, 45, 45, 32, 71, 76, 83, 76, 95, 73, 110, 105, 116, 71, 80, 85,
    83, 104, 97, 100, 101, 114, 115, 32, 45, 45, 45, 45, 45, 45, 45, 10, 0, 0,
    0, 0, 70, 66, 79, 95, 67, 114, 101, 97, 116, 101, 58, 32, 34, 37, 115, 34,
    32, 105, 115, 32, 116, 111, 111, 32, 108, 111, 110, 103, 0, 0, 0, 0, 103,
    108, 86, 101, 114, 116, 101, 120, 65, 116, 116, 114, 105, 98, 52, 102, 118,
    65, 82, 66, 0, 0, 0, 0, 71, 76, 83, 76, 32, 98, 105, 110, 100, 115, 58, 32,
    37, 105, 32, 32, 100, 114, 97, 119, 115, 58, 32, 103, 101, 110, 32, 37, 105,
    32, 108, 105, 103, 104, 116, 32, 37, 105, 32, 102, 111, 103, 32, 37, 105,
    32, 100, 108, 105, 103, 104, 116, 32, 37, 105, 10, 0, 0, 0, 0, 0, 0, 0, 0,
    103, 108, 71, 101, 116, 83, 104, 97, 100, 101, 114, 80, 114, 101, 99, 105,
    115, 105, 111, 110, 70, 111, 114, 109, 97, 116, 0, 0, 0, 0, 0, 0, 87, 65,
    82, 78, 73, 78, 71, 58, 32, 110, 111, 32, 115, 101, 109, 105, 32, 99, 111,
    108, 111, 110, 32, 105, 110, 32, 115, 104, 97, 100, 101, 114, 114, 101, 109,
    97, 112, 32, 39, 37, 115, 39, 10, 0, 0, 0, 0, 0, 68, 101, 102, 105, 110,
    101, 32, 82, 101, 115, 116, 97, 114, 116, 32, 73, 110, 116, 101, 114, 118,
    97, 108, 32, 37, 117, 0, 0, 0, 0, 0, 0, 42, 42, 42, 42, 42, 42, 42, 42, 42,
    42, 42, 42, 42, 42, 42, 42, 42, 32, 82, 66, 95, 83, 119, 97, 112, 66, 117,
    102, 102, 101, 114, 115, 32, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42,
    42, 42, 42, 42, 42, 10, 10, 10, 0, 0, 0, 105, 110, 118, 97, 108, 105, 100,
    32, 98, 105, 116, 32, 108, 101, 110, 103, 116, 104, 32, 114, 101, 112, 101,
    97, 116, 0, 0, 0, 0, 0, 0, 0, 114, 95, 102, 111, 114, 99, 101, 84, 111, 110,
    101, 77, 97, 112, 77, 105, 110, 0, 0, 0, 0, 0, 0, 0, 112, 99, 120, 0, 0, 0,
    0, 0, 113, 103, 108, 86, 101, 114, 116, 101, 120, 65, 116, 116, 114, 105,
    98, 80, 111, 105, 110, 116, 101, 114, 65, 82, 66, 40, 32, 65, 84, 84, 82,
    95, 73, 78, 68, 69, 88, 95, 76, 73, 71, 72, 84, 68, 73, 82, 69, 67, 84, 73,
    79, 78, 32, 41, 10, 0, 71, 76, 95, 69, 88, 84, 95, 102, 114, 97, 109, 101,
    98, 117, 102, 102, 101, 114, 95, 98, 108, 105, 116, 0, 66, 85, 71, 58, 32,
    119, 114, 111, 110, 103, 32, 112, 117, 110, 99, 116, 117, 97, 116, 105, 111,
    110, 32, 115, 117, 98, 116, 121, 112, 101, 0, 0, 37, 49, 46, 50, 102, 0, 0,
    0, 99, 108, 95, 100, 111, 119, 110, 108, 111, 97, 100, 84, 105, 109, 101, 0,
    66, 111, 116, 67, 111, 110, 115, 116, 114, 117, 99, 116, 67, 104, 97, 116,
    58, 32, 109, 101, 115, 115, 97, 103, 101, 32, 34, 37, 115, 34, 32, 116, 111,
    111, 32, 108, 111, 110, 103, 10, 0, 0, 0, 0, 0, 0, 0, 0, 98, 114, 111, 107,
    101, 110, 32, 100, 111, 119, 110, 108, 111, 97, 100, 0, 45, 45, 45, 32, 45,
    45, 45, 45, 45, 32, 45, 45, 45, 45, 32, 45, 45, 45, 45, 45, 45, 45, 45, 45,
    45, 45, 45, 45, 45, 45, 32, 45, 45, 45, 45, 45, 45, 45, 32, 45, 45, 45, 45,
    45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 32, 45,
    45, 45, 45, 45, 32, 45, 45, 45, 45, 45, 10, 0, 0, 0, 0, 0, 0, 0, 103, 114,
    97, 118, 105, 116, 121, 0, 37, 115, 47, 112, 97, 107, 37, 100, 0, 0, 0, 0,
    0, 0, 0, 0, 72, 117, 110, 107, 95, 70, 114, 101, 101, 84, 101, 109, 112, 77,
    101, 109, 111, 114, 121, 58, 32, 110, 111, 116, 32, 116, 104, 101, 32, 102,
    105, 110, 97, 108, 32, 98, 108, 111, 99, 107, 10, 0, 0, 0, 0, 0, 0, 0, 70,
    108, 111, 111, 100, 65, 114, 101, 97, 95, 114, 58, 32, 114, 101, 102, 108,
    111, 111, 100, 101, 100, 0, 0, 27, 91, 48, 109, 10, 0, 0, 0, 83, 68, 76, 95,
    73, 110, 105, 116, 40, 32, 83, 68, 76, 95, 73, 78, 73, 84, 95, 65, 85, 68,
    73, 79, 32, 41, 46, 46, 46, 32, 0, 0, 65, 85, 88, 49, 49, 0, 0, 0, 105, 110,
    95, 110, 111, 103, 114, 97, 98, 0, 0, 0, 0, 0, 0, 0, 123, 0, 0, 0, 0, 0, 0,
    0, 61, 61, 0, 0, 0, 0, 0, 0, 103, 108, 68, 101, 108, 101, 116, 101, 80, 114,
    111, 103, 114, 97, 109, 0, 100, 101, 102, 105, 110, 101, 32, 37, 115, 32,
    104, 97, 115, 32, 116, 111, 111, 32, 109, 97, 110, 121, 32, 112, 97, 114,
    109, 115, 0, 0, 0, 0, 68, 101, 102, 105, 110, 101, 32, 81, 117, 97, 110,
    116, 105, 122, 97, 116, 105, 111, 110, 32, 84, 97, 98, 108, 101, 32, 37,
    100, 32, 32, 112, 114, 101, 99, 105, 115, 105, 111, 110, 32, 37, 100, 0, 0,
    0, 0, 0, 0, 67, 108, 111, 115, 101, 100, 32, 108, 111, 103, 32, 37, 115, 10,
    0, 0, 37, 115, 37, 99, 98, 97, 115, 101, 113, 51, 37, 99, 98, 111, 116, 108,
    105, 98, 46, 108, 111, 103, 0, 0, 83, 104, 97, 100, 101, 114, 32, 37, 115,
    32, 104, 97, 115, 32, 97, 32, 115, 116, 97, 103, 101, 32, 119, 105, 116,
    104, 32, 110, 111, 32, 105, 109, 97, 103, 101, 10, 0, 0, 0, 0, 114, 95, 102,
    111, 114, 99, 101, 84, 111, 110, 101, 77, 97, 112, 0, 0, 112, 110, 103, 0,
    0, 0, 0, 0, 59, 0, 0, 0, 0, 0, 0, 0, 113, 103, 108, 86, 101, 114, 116, 101,
    120, 65, 116, 116, 114, 105, 98, 80, 111, 105, 110, 116, 101, 114, 65, 82,
    66, 40, 32, 65, 84, 84, 82, 95, 73, 78, 68, 69, 88, 95, 67, 79, 76, 79, 82,
    32, 41, 10, 0, 0, 103, 108, 71, 101, 116, 81, 117, 101, 114, 121, 79, 98,
    106, 101, 99, 116, 117, 105, 118, 65, 82, 66, 0, 0, 98, 111, 116, 102, 105,
    108, 101, 115, 0, 0, 0, 0, 0, 0, 0, 0, 102, 117, 110, 99, 95, 100, 111, 111,
    114, 0, 0, 0, 0, 0, 0, 0, 32, 105, 110, 116, 101, 103, 101, 114, 0, 0, 0, 0,
    0, 0, 0, 0, 103, 111, 97, 108, 32, 115, 116, 97, 116, 101, 32, 104, 97, 110,
    100, 108, 101, 32, 37, 100, 32, 111, 117, 116, 32, 111, 102, 32, 114, 97,
    110, 103, 101, 10, 0, 0, 0, 0, 0, 0, 99, 108, 95, 100, 111, 119, 110, 108,
    111, 97, 100, 67, 111, 117, 110, 116, 0, 0, 0, 0, 0, 0, 0, 0, 66, 111, 116,
    67, 111, 110, 115, 116, 114, 117, 99, 116, 67, 104, 97, 116, 58, 32, 117,
    110, 107, 110, 111, 119, 110, 32, 114, 97, 110, 100, 111, 109, 32, 115, 116,
    114, 105, 110, 103, 32, 37, 115, 10, 0, 0, 0, 0, 0, 99, 108, 105, 101, 110,
    116, 68, 111, 119, 110, 108, 111, 97, 100, 58, 32, 37, 100, 32, 58, 32, 102,
    105, 108, 101, 32, 34, 37, 115, 34, 32, 99, 111, 109, 112, 108, 101, 116,
    101, 100, 10, 0, 0, 0, 0, 0, 0, 0, 110, 117, 109, 32, 115, 99, 111, 114,
    101, 32, 112, 105, 110, 103, 32, 110, 97, 109, 101, 32, 32, 32, 32, 32, 32,
    32, 32, 32, 32, 32, 32, 108, 97, 115, 116, 109, 115, 103, 32, 97, 100, 100,
    114, 101, 115, 115, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
    32, 113, 112, 111, 114, 116, 32, 114, 97, 116, 101, 10, 0, 0, 0, 0, 0, 0, 0,
    0, 125, 10, 0, 0, 0, 0, 0, 0, 65, 65, 83, 95, 84, 114, 97, 99, 101, 65, 114,
    101, 97, 115, 58, 32, 115, 116, 97, 99, 107, 32, 111, 118, 101, 114, 102,
    108, 111, 119, 10, 0, 101, 120, 116, 101, 114, 110, 97, 108, 69, 118, 101,
    110, 116, 0, 0, 0, 10, 114, 111, 117, 116, 101, 32, 99, 97, 99, 104, 101,
    32, 119, 114, 105, 116, 116, 101, 110, 32, 116, 111, 32, 37, 115, 10, 0, 0,
    0, 0, 0, 46, 112, 107, 51, 100, 105, 114, 0, 72, 117, 110, 107, 95, 70, 114,
    101, 101, 84, 101, 109, 112, 77, 101, 109, 111, 114, 121, 58, 32, 98, 97,
    100, 32, 109, 97, 103, 105, 99, 0, 0, 98, 111, 116, 95, 118, 105, 115, 117,
    97, 108, 105, 122, 101, 106, 117, 109, 112, 112, 97, 100, 115, 0, 0, 0, 112,
    104, 121, 115, 95, 119, 97, 116, 101, 114, 103, 114, 97, 118, 105, 116, 121,
    0, 0, 0, 0, 0, 0, 0, 65, 85, 88, 49, 48, 0, 0, 0, 115, 104, 111, 119, 109,
    101, 109, 111, 114, 121, 117, 115, 97, 103, 101, 0, 119, 114, 105, 116, 105,
    110, 103, 32, 37, 115, 10, 0, 0, 0, 0, 0, 112, 111, 115, 115, 105, 98, 108,
    101, 32, 112, 111, 114, 116, 97, 108, 58, 32, 37, 100, 13, 10, 0, 0, 0, 118,
    109, 47, 37, 115, 46, 109, 97, 112, 0, 0, 0, 0, 0, 0, 0, 81, 95, 115, 116,
    114, 110, 99, 112, 121, 122, 58, 32, 78, 85, 76, 76, 32, 115, 114, 99, 0, 0,
    0, 0, 103, 108, 73, 115, 83, 104, 97, 100, 101, 114, 0, 0, 0, 0, 0, 0, 68,
    101, 102, 105, 110, 101, 32, 72, 117, 102, 102, 109, 97, 110, 32, 84, 97,
    98, 108, 101, 32, 48, 120, 37, 48, 50, 120, 0, 0, 0, 0, 0, 94, 51, 87, 65,
    82, 78, 73, 78, 71, 58, 32, 89, 111, 117, 32, 115, 104, 111, 117, 108, 100,
    32, 115, 101, 116, 32, 39, 103, 95, 115, 121, 110, 99, 104, 114, 111, 110,
    111, 117, 115, 67, 108, 105, 101, 110, 116, 115, 32, 49, 39, 32, 102, 111,
    114, 32, 115, 109, 111, 111, 116, 104, 101, 114, 32, 100, 101, 109, 111, 32,
    114, 101, 99, 111, 114, 100, 105, 110, 103, 10, 0, 60, 115, 116, 101, 110,
    99, 105, 108, 32, 115, 104, 97, 100, 111, 119, 62, 0, 0, 0, 0, 0, 0, 0, 0,
    114, 95, 116, 111, 110, 101, 77, 97, 112, 0, 0, 0, 0, 0, 0, 0, 106, 112,
    101, 103, 0, 0, 0, 0, 113, 103, 108, 86, 101, 114, 116, 101, 120, 65, 116,
    116, 114, 105, 98, 80, 111, 105, 110, 116, 101, 114, 65, 82, 66, 40, 32, 65,
    84, 84, 82, 95, 73, 78, 68, 69, 88, 95, 84, 65, 78, 71, 69, 78, 84, 32, 41,
    10, 0, 0, 0, 0, 0, 0, 0, 0, 82, 101, 115, 111, 108, 118, 105, 110, 103, 32,
    37, 115, 32, 40, 73, 80, 118, 52, 41, 10, 0, 0, 0, 0, 103, 108, 71, 101,
    116, 81, 117, 101, 114, 121, 79, 98, 106, 101, 99, 116, 105, 118, 65, 82,
    66, 0, 0, 0, 32, 102, 108, 111, 97, 116, 0, 0, 45, 45, 45, 45, 45, 45, 32,
    83, 101, 114, 118, 101, 114, 32, 73, 110, 105, 116, 105, 97, 108, 105, 122,
    97, 116, 105, 111, 110, 32, 45, 45, 45, 45, 45, 45, 10, 0, 0, 0, 0, 35, 112,
    114, 97, 103, 109, 97, 32, 100, 105, 114, 101, 99, 116, 105, 118, 101, 32,
    110, 111, 116, 32, 115, 117, 112, 112, 111, 114, 116, 101, 100, 0, 98, 111,
    116, 95, 101, 110, 97, 98, 108, 101, 0, 0, 0, 0, 0, 0, 99, 108, 95, 100,
    111, 119, 110, 108, 111, 97, 100, 83, 105, 122, 101, 0, 66, 111, 116, 67,
    111, 110, 115, 116, 114, 117, 99, 116, 67, 104, 97, 116, 58, 32, 109, 101,
  ],
  "i8",
  ALLOC_NONE,
  Runtime.GLOBAL_BASE + 40964
);
/* memory initializer */ allocate(
  [
    115, 115, 97, 103, 101, 32, 37, 115, 32, 116, 111, 111, 32, 108, 111, 110,
    103, 10, 0, 0, 116, 114, 70, 77, 86, 58, 58, 112, 108, 97, 121, 40, 41, 44,
    32, 105, 110, 118, 97, 108, 105, 100, 32, 82, 111, 81, 32, 73, 68, 10, 0, 0,
    112, 114, 111, 116, 111, 99, 111, 108, 0, 0, 0, 0, 0, 0, 0, 0, 99, 108, 105,
    101, 110, 116, 68, 111, 119, 110, 108, 111, 97, 100, 58, 32, 37, 100, 32,
    58, 32, 99, 108, 105, 101, 110, 116, 32, 97, 99, 107, 110, 111, 119, 108,
    101, 100, 103, 101, 32, 111, 102, 32, 98, 108, 111, 99, 107, 32, 37, 100,
    10, 0, 0, 0, 0, 109, 97, 112, 58, 32, 37, 115, 10, 0, 0, 0, 0, 0, 0, 0, 0,
    119, 101, 97, 112, 111, 110, 115, 116, 97, 116, 101, 0, 0, 0, 0, 0, 115,
    121, 115, 116, 101, 109, 105, 110, 102, 111, 0, 0, 0, 0, 0, 0, 47, 0, 0, 0,
    0, 0, 0, 0, 98, 97, 115, 101, 103, 97, 109, 101, 0, 0, 0, 0, 0, 0, 0, 0, 72,
    117, 110, 107, 95, 65, 108, 108, 111, 99, 97, 116, 101, 84, 101, 109, 112,
    77, 101, 109, 111, 114, 121, 58, 32, 102, 97, 105, 108, 101, 100, 32, 111,
    110, 32, 37, 105, 0, 0, 0, 50, 50, 48, 48, 0, 0, 0, 0, 94, 51, 87, 65, 82,
    78, 73, 78, 71, 58, 32, 78, 101, 103, 97, 116, 105, 118, 101, 32, 99, 104,
    117, 110, 107, 32, 108, 101, 110, 103, 116, 104, 10, 0, 0, 0, 0, 0, 0, 0,
    65, 85, 88, 57, 0, 0, 0, 0, 48, 0, 0, 0, 0, 0, 0, 0, 66, 97, 99, 107, 103,
    114, 111, 117, 110, 100, 32, 102, 105, 108, 101, 58, 32, 37, 115, 10, 0, 0,
    0, 0, 83, 121, 115, 95, 83, 101, 110, 100, 80, 97, 99, 107, 101, 116, 58,
    32, 37, 115, 10, 0, 0, 0, 0, 0, 103, 108, 71, 101, 116, 80, 114, 111, 103,
    114, 97, 109, 105, 118, 0, 0, 37, 115, 32, 114, 101, 99, 118, 32, 37, 52,
    105, 32, 58, 32, 115, 61, 37, 105, 32, 102, 114, 97, 103, 109, 101, 110,
    116, 61, 37, 105, 44, 37, 105, 10, 0, 0, 0, 0, 0, 0, 68, 101, 102, 105, 110,
    101, 32, 65, 114, 105, 116, 104, 109, 101, 116, 105, 99, 32, 84, 97, 98,
    108, 101, 32, 48, 120, 37, 48, 50, 120, 58, 32, 48, 120, 37, 48, 50, 120, 0,
    0, 60, 100, 101, 102, 97, 117, 108, 116, 62, 0, 0, 0, 0, 0, 0, 0, 114, 95,
    102, 108, 111, 97, 116, 76, 105, 103, 104, 116, 109, 97, 112, 0, 112, 111,
    115, 46, 116, 114, 84, 105, 109, 101, 0, 0, 0, 0, 0, 0, 106, 112, 103, 0, 0,
    0, 0, 0, 113, 103, 108, 86, 101, 114, 116, 101, 120, 65, 116, 116, 114, 105,
    98, 80, 111, 105, 110, 116, 101, 114, 65, 82, 66, 40, 32, 65, 84, 84, 82,
    95, 73, 78, 68, 69, 88, 95, 78, 79, 82, 77, 65, 76, 32, 41, 10, 0, 103, 108,
    71, 101, 116, 81, 117, 101, 114, 121, 105, 118, 65, 82, 66, 0, 32, 117, 110,
    115, 105, 103, 110, 101, 100, 0, 0, 0, 0, 0, 0, 0, 35, 101, 114, 114, 111,
    114, 32, 100, 105, 114, 101, 99, 116, 105, 118, 101, 58, 32, 37, 115, 0, 0,
    0, 0, 37, 115, 46, 116, 109, 112, 0, 0, 66, 111, 116, 67, 111, 110, 115,
    116, 114, 117, 99, 116, 67, 104, 97, 116, 58, 32, 109, 101, 115, 115, 97,
    103, 101, 32, 37, 115, 32, 118, 97, 114, 105, 97, 98, 108, 101, 32, 37, 100,
    32, 111, 117, 116, 32, 111, 102, 32, 114, 97, 110, 103, 101, 10, 0, 0, 70,
    83, 95, 67, 114, 101, 97, 116, 101, 80, 97, 116, 104, 58, 32, 102, 97, 105,
    108, 101, 100, 32, 116, 111, 32, 99, 114, 101, 97, 116, 101, 32, 112, 97,
    116, 104, 32, 34, 37, 115, 34, 0, 0, 0, 0, 0, 0, 0, 99, 115, 32, 37, 105,
    32, 34, 37, 115, 34, 10, 0, 0, 0, 0, 0, 99, 108, 105, 101, 110, 116, 68,
    111, 119, 110, 108, 111, 97, 100, 58, 32, 37, 100, 32, 58, 32, 102, 105,
    108, 101, 32, 34, 37, 115, 34, 32, 97, 98, 111, 114, 116, 101, 100, 10, 0,
    83, 101, 114, 118, 101, 114, 32, 105, 110, 102, 111, 32, 115, 101, 116, 116,
    105, 110, 103, 115, 58, 10, 0, 0, 32, 100, 101, 102, 97, 117, 108, 116, 58,
    34, 37, 115, 94, 55, 34, 0, 82, 73, 71, 72, 84, 65, 82, 82, 79, 87, 0, 0, 0,
    0, 0, 0, 112, 109, 95, 102, 108, 97, 103, 115, 0, 0, 0, 0, 0, 0, 0, 0, 70,
    105, 108, 101, 32, 110, 111, 116, 32, 102, 111, 117, 110, 100, 58, 32, 34,
    37, 115, 34, 10, 0, 0, 0, 72, 117, 110, 107, 95, 65, 108, 108, 111, 99, 32,
    102, 97, 105, 108, 101, 100, 32, 111, 110, 32, 37, 105, 0, 65, 85, 88, 56,
    0, 0, 0, 0, 103, 108, 71, 101, 116, 83, 104, 97, 100, 101, 114, 105, 118, 0,
    0, 0, 85, 110, 107, 110, 111, 119, 110, 32, 65, 80, 80, 49, 52, 32, 109, 97,
    114, 107, 101, 114, 32, 40, 110, 111, 116, 32, 65, 100, 111, 98, 101, 41,
    44, 32, 108, 101, 110, 103, 116, 104, 32, 37, 117, 0, 0, 0, 0, 0, 114, 95,
    112, 111, 115, 116, 80, 114, 111, 99, 101, 115, 115, 0, 0, 0, 116, 103, 97,
    0, 0, 0, 0, 0, 113, 103, 108, 86, 101, 114, 116, 101, 120, 65, 116, 116,
    114, 105, 98, 80, 111, 105, 110, 116, 101, 114, 65, 82, 66, 40, 32, 65, 84,
    84, 82, 95, 73, 78, 68, 69, 88, 95, 76, 73, 71, 72, 84, 67, 79, 79, 82, 68,
    32, 41, 10, 0, 0, 0, 0, 0, 103, 108, 69, 110, 100, 81, 117, 101, 114, 121,
    65, 82, 66, 0, 0, 0, 32, 108, 111, 110, 103, 0, 0, 0, 42, 42, 42, 42, 42,
    32, 67, 76, 95, 66, 101, 103, 105, 110, 68, 111, 119, 110, 108, 111, 97,
    100, 32, 42, 42, 42, 42, 42, 10, 76, 111, 99, 97, 108, 110, 97, 109, 101,
    58, 32, 37, 115, 10, 82, 101, 109, 111, 116, 101, 110, 97, 109, 101, 58, 32,
    37, 115, 10, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42,
    42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 10, 0, 99, 111, 117, 108,
    100, 110, 39, 116, 32, 108, 111, 97, 100, 32, 99, 104, 97, 116, 32, 37, 115,
    32, 102, 114, 111, 109, 32, 37, 115, 10, 0, 0, 37, 115, 32, 37, 105, 32, 34,
    37, 115, 34, 10, 0, 0, 0, 0, 0, 99, 108, 105, 101, 110, 116, 68, 111, 119,
    110, 108, 111, 97, 100, 58, 32, 37, 115, 32, 68, 111, 110, 101, 10, 0, 0, 0,
    0, 0, 0, 0, 0, 83, 121, 115, 116, 101, 109, 32, 105, 110, 102, 111, 32, 115,
    101, 116, 116, 105, 110, 103, 115, 58, 10, 0, 0, 101, 118, 101, 110, 116,
    115, 91, 49, 93, 0, 0, 0, 0, 0, 0, 0, 85, 115, 97, 103, 101, 58, 32, 119,
    104, 105, 99, 104, 32, 60, 102, 105, 108, 101, 62, 10, 0, 0, 0, 0, 72, 117,
    110, 107, 95, 65, 108, 108, 111, 99, 58, 32, 72, 117, 110, 107, 32, 109,
    101, 109, 111, 114, 121, 32, 115, 121, 115, 116, 101, 109, 32, 110, 111,
    116, 32, 105, 110, 105, 116, 105, 97, 108, 105, 122, 101, 100, 0, 0, 65, 85,
    88, 55, 0, 0, 0, 0, 115, 101, 114, 118, 101, 114, 67, 111, 109, 109, 97,
    110, 100, 58, 32, 37, 105, 32, 58, 32, 37, 115, 10, 0, 103, 108, 71, 101,
    116, 83, 104, 97, 100, 101, 114, 73, 110, 102, 111, 76, 111, 103, 0, 0, 0,
    0, 0, 0, 85, 110, 107, 110, 111, 119, 110, 32, 65, 80, 80, 48, 32, 109, 97,
    114, 107, 101, 114, 32, 40, 110, 111, 116, 32, 74, 70, 73, 70, 41, 44, 32,
    108, 101, 110, 103, 116, 104, 32, 37, 117, 0, 0, 0, 0, 0, 0, 0, 87, 65, 82,
    78, 73, 78, 71, 58, 32, 73, 103, 110, 111, 114, 105, 110, 103, 32, 115, 104,
    97, 100, 101, 114, 32, 102, 105, 108, 101, 32, 37, 115, 46, 32, 83, 104, 97,
    100, 101, 114, 32, 34, 37, 115, 34, 32, 111, 110, 32, 108, 105, 110, 101,
    32, 37, 100, 32, 109, 105, 115, 115, 105, 110, 103, 32, 99, 108, 111, 115,
    105, 110, 103, 32, 98, 114, 97, 99, 101, 46, 10, 0, 0, 0, 0, 0, 0, 0, 0,
    114, 95, 104, 100, 114, 0, 0, 0, 42, 100, 101, 102, 97, 117, 108, 116, 0, 0,
    0, 0, 0, 0, 0, 0, 77, 65, 88, 95, 80, 65, 84, 67, 72, 95, 80, 76, 65, 78,
    69, 83, 0, 0, 0, 0, 0, 0, 0, 0, 113, 103, 108, 86, 101, 114, 116, 101, 120,
    65, 116, 116, 114, 105, 98, 80, 111, 105, 110, 116, 101, 114, 65, 82, 66,
    40, 32, 65, 84, 84, 82, 95, 73, 78, 68, 69, 88, 95, 84, 69, 88, 67, 79, 79,
    82, 68, 32, 41, 10, 0, 0, 0, 0, 0, 0, 0, 103, 108, 66, 101, 103, 105, 110,
    81, 117, 101, 114, 121, 65, 82, 66, 0, 98, 105, 110, 97, 114, 121, 0, 0, 35,
    108, 105, 110, 101, 32, 100, 105, 114, 101, 99, 116, 105, 118, 101, 32, 110,
    111, 116, 32, 115, 117, 112, 112, 111, 114, 116, 101, 100, 0, 0, 0, 100,
    111, 110, 101, 100, 108, 0, 0, 105, 99, 104, 97, 116, 100, 97, 116, 97, 32,
    116, 97, 98, 108, 101, 32, 102, 117, 108, 108, 59, 32, 99, 111, 117, 108,
    100, 110, 39, 116, 32, 108, 111, 97, 100, 32, 99, 104, 97, 116, 32, 37, 115,
    32, 102, 114, 111, 109, 32, 37, 115, 10, 0, 0, 0, 0, 37, 105, 0, 0, 0, 0, 0,
    0, 98, 99, 115, 49, 0, 0, 0, 0, 100, 111, 110, 101, 100, 108, 0, 0, 80, 108,
    97, 121, 101, 114, 32, 37, 115, 32, 105, 115, 32, 110, 111, 116, 32, 111,
    110, 32, 116, 104, 101, 32, 115, 101, 114, 118, 101, 114, 10, 0, 101, 118,
    101, 110, 116, 115, 91, 48, 93, 0, 0, 0, 0, 0, 0, 0, 70, 105, 108, 101, 32,
    34, 37, 115, 34, 32, 102, 111, 117, 110, 100, 32, 97, 116, 32, 34, 37, 115,
    34, 10, 0, 0, 0, 0, 0, 0, 0, 0, 72, 117, 110, 107, 95, 67, 108, 101, 97,
    114, 58, 32, 114, 101, 115, 101, 116, 32, 116, 104, 101, 32, 104, 117, 110,
    107, 32, 111, 107, 10, 0, 0, 65, 85, 88, 54, 0, 0, 0, 0, 103, 108, 67, 111,
    109, 112, 105, 108, 101, 83, 104, 97, 100, 101, 114, 0, 113, 0, 0, 0, 0, 0,
    0, 0, 65, 100, 111, 98, 101, 32, 65, 80, 80, 49, 52, 32, 109, 97, 114, 107,
    101, 114, 58, 32, 118, 101, 114, 115, 105, 111, 110, 32, 37, 100, 44, 32,
    102, 108, 97, 103, 115, 32, 48, 120, 37, 48, 52, 120, 32, 48, 120, 37, 48,
    52, 120, 44, 32, 116, 114, 97, 110, 115, 102, 111, 114, 109, 32, 37, 100, 0,
    0, 0, 0, 0, 0, 0, 46, 10, 0, 0, 0, 0, 0, 0, 114, 95, 115, 111, 102, 116, 79,
    118, 101, 114, 98, 114, 105, 103, 104, 116, 0, 0, 0, 0, 0, 0, 0, 0, 42, 100,
    108, 105, 103, 104, 116, 0, 113, 103, 108, 86, 101, 114, 116, 101, 120, 65,
    116, 116, 114, 105, 98, 80, 111, 105, 110, 116, 101, 114, 65, 82, 66, 40,
    32, 65, 84, 84, 82, 95, 73, 78, 68, 69, 88, 95, 80, 79, 83, 73, 84, 73, 79,
    78, 32, 41, 10, 0, 0, 0, 0, 0, 0, 0, 103, 108, 73, 115, 81, 117, 101, 114,
    121, 65, 82, 66, 0, 0, 0, 0, 111, 99, 116, 97, 108, 0, 0, 0, 109, 105, 115,
    112, 108, 97, 99, 101, 100, 32, 35, 101, 108, 105, 102, 0, 45, 45, 45, 45,
    45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45,
    45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 10, 0, 98, 111,
    116, 95, 114, 101, 108, 111, 97, 100, 99, 104, 97, 114, 97, 99, 116, 101,
    114, 115, 0, 0, 0, 0, 98, 99, 115, 50, 0, 0, 0, 0, 115, 116, 111, 112, 100,
    108, 0, 0, 45, 45, 45, 45, 45, 45, 45, 45, 10, 0, 0, 0, 0, 0, 0, 0, 109,
    111, 118, 101, 109, 101, 110, 116, 68, 105, 114, 0, 0, 0, 0, 0, 70, 105,
    108, 101, 32, 34, 37, 115, 34, 32, 102, 111, 117, 110, 100, 32, 105, 110,
    32, 34, 37, 115, 34, 10, 0, 0, 0, 0, 0, 0, 0, 0, 109, 101, 109, 105, 110,
    102, 111, 0, 114, 95, 100, 101, 98, 117, 103, 83, 117, 114, 102, 97, 99,
    101, 85, 112, 100, 97, 116, 101, 0, 0, 0, 0, 65, 85, 88, 53, 0, 0, 0, 0, 99,
    108, 95, 112, 97, 99, 107, 101, 116, 100, 117, 112, 0, 0, 0, 0, 103, 108,
    71, 101, 116, 83, 104, 97, 100, 101, 114, 83, 111, 117, 114, 99, 101, 0, 0,
    0, 0, 0, 0, 0, 67, 77, 111, 100, 95, 76, 111, 97, 100, 66, 114, 117, 115,
    104, 101, 115, 58, 32, 98, 97, 100, 32, 115, 104, 97, 100, 101, 114, 78,
    117, 109, 58, 32, 37, 105, 0, 0, 0, 0, 0, 67, 97, 117, 116, 105, 111, 110,
    58, 32, 113, 117, 97, 110, 116, 105, 122, 97, 116, 105, 111, 110, 32, 116,
    97, 98, 108, 101, 115, 32, 97, 114, 101, 32, 116, 111, 111, 32, 99, 111, 97,
    114, 115, 101, 32, 102, 111, 114, 32, 98, 97, 115, 101, 108, 105, 110, 101,
    32, 74, 80, 69, 71, 0, 0, 0, 32, 40, 102, 111, 117, 110, 100, 32, 34, 37,
    115, 34, 32, 111, 110, 32, 108, 105, 110, 101, 32, 37, 100, 41, 0, 0, 0, 0,
    0, 0, 0, 0, 114, 95, 103, 114, 101, 121, 115, 99, 97, 108, 101, 0, 0, 0, 0,
    0, 42, 102, 111, 103, 0, 0, 0, 0, 45, 45, 45, 32, 71, 76, 95, 86, 101, 114,
    116, 101, 120, 65, 116, 116, 114, 105, 98, 80, 111, 105, 110, 116, 101, 114,
    115, 40, 32, 37, 115, 32, 41, 32, 45, 45, 45, 10, 0, 0, 103, 108, 68, 101,
    108, 101, 116, 101, 81, 117, 101, 114, 105, 101, 115, 65, 82, 66, 0, 0, 0,
    0, 0, 0, 110, 111, 116, 104, 105, 110, 103, 32, 116, 111, 32, 101, 118, 97,
    108, 117, 97, 116, 101, 0, 0, 0, 0, 0, 85, 115, 101, 114, 32, 105, 110, 102,
    111, 32, 115, 101, 116, 116, 105, 110, 103, 115, 58, 10, 0, 0, 0, 0, 108,
    111, 97, 100, 101, 100, 32, 37, 115, 32, 102, 114, 111, 109, 32, 37, 115,
    10, 0, 0, 0, 0, 0, 0, 115, 116, 97, 116, 117, 115, 82, 101, 115, 112, 111,
    110, 115, 101, 10, 37, 115, 10, 37, 115, 0, 0, 0, 0, 98, 99, 115, 48, 0, 0,
    0, 0, 100, 111, 119, 110, 108, 111, 97, 100, 0, 0, 0, 0, 0, 0, 0, 0, 117,
    115, 101, 114, 105, 110, 102, 111, 10, 0, 0, 0, 0, 0, 0, 0, 101, 118, 101,
    110, 116, 83, 101, 113, 117, 101, 110, 99, 101, 0, 0, 0, 85, 115, 97, 103,
    101, 58, 32, 116, 111, 117, 99, 104, 70, 105, 108, 101, 32, 60, 102, 105,
    108, 101, 62, 10, 0, 0, 0, 0, 0, 0, 0, 0, 72, 117, 110, 107, 32, 100, 97,
    116, 97, 32, 102, 97, 105, 108, 101, 100, 32, 116, 111, 32, 97, 108, 108,
    111, 99, 97, 116, 101, 32, 37, 105, 32, 109, 101, 103, 115, 0, 0, 0, 0, 66,
    97, 100, 32, 85, 73, 32, 115, 121, 115, 116, 101, 109, 32, 116, 114, 97,
    112, 58, 32, 37, 108, 100, 0, 65, 85, 88, 52, 0, 0, 0, 0, 103, 108, 67, 114,
    101, 97, 116, 101, 83, 104, 97, 100, 101, 114, 0, 0, 49, 0, 0, 0, 0, 0, 0,
    0, 103, 108, 83, 104, 97, 100, 101, 114, 83, 111, 117, 114, 99, 101, 0, 0,
    56, 99, 32, 32, 49, 54, 45, 74, 97, 110, 45, 50, 48, 49, 49, 0, 87, 65, 82,
    78, 73, 78, 71, 58, 32, 73, 103, 110, 111, 114, 105, 110, 103, 32, 115, 104,
    97, 100, 101, 114, 32, 102, 105, 108, 101, 32, 37, 115, 46, 32, 83, 104, 97,
    100, 101, 114, 32, 34, 37, 115, 34, 32, 111, 110, 32, 108, 105, 110, 101,
    32, 37, 100, 32, 109, 105, 115, 115, 105, 110, 103, 32, 111, 112, 101, 110,
    105, 110, 103, 32, 98, 114, 97, 99, 101, 0, 0, 114, 95, 115, 116, 101, 114,
    101, 111, 69, 110, 97, 98, 108, 101, 100, 0, 71, 76, 95, 86, 101, 114, 116,
    101, 120, 65, 116, 116, 114, 105, 98, 80, 111, 105, 110, 116, 101, 114, 115,
    58, 32, 110, 111, 32, 86, 66, 79, 32, 98, 111, 117, 110, 100, 0, 0, 0, 103,
    108, 71, 101, 110, 81, 117, 101, 114, 105, 101, 115, 65, 82, 66, 0, 68, 67,
    84, 32, 115, 99, 97, 108, 101, 100, 32, 98, 108, 111, 99, 107, 32, 115, 105,
    122, 101, 32, 37, 100, 120, 37, 100, 32, 110, 111, 116, 32, 115, 117, 112,
    112, 111, 114, 116, 101, 100, 0, 0, 0, 0, 0, 0, 0, 110, 111, 32, 108, 101,
    97, 100, 105, 110, 103, 32, 40, 32, 97, 102, 116, 101, 114, 32, 36, 101,
    118, 97, 108, 105, 110, 116, 47, 36, 101, 118, 97, 108, 102, 108, 111, 97,
    116, 0, 0, 83, 101, 114, 118, 101, 114, 58, 32, 37, 115, 10, 0, 0, 0, 0, 0,
    99, 111, 117, 108, 100, 110, 39, 116, 32, 102, 105, 110, 100, 32, 99, 104,
    97, 116, 32, 37, 115, 32, 105, 110, 32, 37, 115, 10, 0, 0, 0, 0, 37, 105,
    32, 37, 105, 32, 34, 37, 115, 34, 10, 0, 0, 0, 0, 0, 83, 86, 95, 83, 116,
    97, 114, 116, 117, 112, 58, 32, 115, 118, 115, 46, 105, 110, 105, 116, 105,
    97, 108, 105, 122, 101, 100, 0, 0, 0, 0, 0, 118, 100, 114, 0, 0, 0, 0, 0,
    113, 117, 97, 107, 101, 106, 115, 0, 85, 115, 97, 103, 101, 58, 32, 100,
    117, 109, 112, 117, 115, 101, 114, 32, 60, 117, 115, 101, 114, 105, 100, 62,
    10, 0, 0, 0, 0, 0, 0, 0, 82, 95, 67, 114, 101, 97, 116, 101, 73, 66, 79, 58,
    32, 77, 65, 88, 95, 73, 66, 79, 83, 32, 104, 105, 116, 0, 0, 0, 0, 0, 0, 0,
    112, 109, 95, 116, 105, 109, 101, 0, 104, 97, 110, 100, 108, 101, 32, 37,
    105, 58, 32, 37, 115, 10, 0, 0, 115, 118, 99, 95, 115, 110, 97, 112, 115,
    104, 111, 116, 0, 0, 0, 0, 77, 105, 110, 105, 109, 117, 109, 32, 99, 111,
    109, 95, 104, 117, 110, 107, 77, 101, 103, 115, 32, 105, 115, 32, 37, 105,
    44, 32, 97, 108, 108, 111, 99, 97, 116, 105, 110, 103, 32, 37, 105, 32, 109,
    101, 103, 115, 46, 10, 0, 0, 0, 0, 0, 0, 0, 0, 65, 85, 88, 51, 0, 0, 0, 0,
    67, 77, 111, 100, 95, 76, 111, 97, 100, 83, 104, 97, 100, 101, 114, 115, 58,
    32, 102, 117, 110, 110, 121, 32, 108, 117, 109, 112, 32, 115, 105, 122, 101,
    0, 0, 0, 0, 0, 0, 0, 115, 101, 101, 84, 104, 114, 111, 117, 103, 104, 0, 0,
    0, 0, 0, 0, 82, 95, 65, 100, 100, 73, 81, 77, 83, 117, 114, 102, 97, 99,
    101, 115, 58, 32, 110, 111, 32, 115, 117, 99, 104, 32, 102, 114, 97, 109,
    101, 32, 37, 100, 32, 116, 111, 32, 37, 100, 32, 102, 111, 114, 32, 39, 37,
    115, 39, 10, 0, 0, 0, 0, 0, 0, 82, 69, 95, 82, 101, 103, 105, 115, 116, 101,
    114, 77, 111, 100, 101, 108, 58, 32, 82, 95, 65, 108, 108, 111, 99, 77, 111,
    100, 101, 108, 40, 41, 32, 102, 97, 105, 108, 101, 100, 32, 102, 111, 114,
    32, 39, 37, 115, 39, 10, 0, 0, 0, 0, 0, 0, 0, 103, 108, 71, 101, 116, 65,
    116, 116, 97, 99, 104, 101, 100, 83, 104, 97, 100, 101, 114, 115, 0, 0, 0,
    0, 67, 111, 112, 121, 114, 105, 103, 104, 116, 32, 40, 67, 41, 32, 50, 48,
    49, 49, 44, 32, 84, 104, 111, 109, 97, 115, 32, 71, 46, 32, 76, 97, 110,
    101, 44, 32, 71, 117, 105, 100, 111, 32, 86, 111, 108, 108, 98, 101, 100,
    105, 110, 103, 0, 0, 0, 0, 67, 111, 117, 108, 100, 110, 39, 116, 32, 108,
    111, 97, 100, 32, 37, 115, 0, 0, 0, 0, 0, 0, 0, 0, 52, 0, 0, 0, 0, 0, 0, 0,
    32, 32, 32, 32, 32, 32, 32, 37, 115, 32, 61, 32, 37, 115, 10, 0, 113, 103,
    108, 68, 105, 115, 97, 98, 108, 101, 86, 101, 114, 116, 101, 120, 65, 116,
    116, 114, 105, 98, 65, 114, 114, 97, 121, 65, 82, 66, 40, 32, 65, 84, 84,
    82, 95, 73, 78, 68, 69, 88, 95, 84, 65, 78, 71, 69, 78, 84, 50, 32, 41, 10,
    0, 0, 71, 76, 95, 65, 82, 66, 95, 111, 99, 99, 108, 117, 115, 105, 111, 110,
    95, 113, 117, 101, 114, 121, 0, 0, 101, 120, 112, 101, 99, 116, 101, 100,
    32, 97, 32, 37, 115, 44, 32, 102, 111, 117, 110, 100, 32, 37, 115, 0, 99,
    97, 110, 39, 116, 32, 101, 118, 97, 108, 117, 97, 116, 101, 32, 37, 115, 0,
    0, 0, 0, 0, 0, 0, 115, 116, 97, 116, 101, 58, 32, 37, 105, 10, 0, 0, 0, 0,
    0, 0, 117, 110, 107, 110, 111, 119, 110, 32, 100, 101, 102, 105, 110, 105,
    116, 105, 111, 110, 32, 37, 115, 0, 0, 0, 83, 86, 67, 95, 83, 116, 97, 116,
    117, 115, 58, 32, 114, 97, 116, 101, 32, 108, 105, 109, 105, 116, 32, 101,
    120, 99, 101, 101, 100, 101, 100, 44, 32, 100, 114, 111, 112, 112, 105, 110,
    103, 32, 114, 101, 113, 117, 101, 115, 116, 10, 0, 0, 0, 0, 0, 0, 71, 76,
    95, 67, 104, 101, 99, 107, 69, 114, 114, 111, 114, 115, 58, 32, 37, 115, 32,
    105, 110, 32, 37, 115, 32, 97, 116, 32, 108, 105, 110, 101, 32, 37, 100, 0,
    0, 0, 0, 0, 99, 103, 97, 109, 101, 0, 0, 0, 99, 112, 0, 0, 0, 0, 0, 0, 87,
    65, 82, 78, 73, 78, 71, 58, 32, 39, 37, 115, 39, 32, 84, 71, 65, 32, 102,
    105, 108, 101, 32, 104, 101, 97, 100, 101, 114, 32, 100, 101, 99, 108, 97,
    114, 101, 115, 32, 116, 111, 112, 45, 100, 111, 119, 110, 32, 105, 109, 97,
    103, 101, 44, 32, 105, 103, 110, 111, 114, 105, 110, 103, 10, 0, 0, 0, 0, 0,
    0, 0, 0, 83, 86, 95, 77, 97, 112, 82, 101, 115, 116, 97, 114, 116, 95, 102,
    40, 37, 100, 41, 58, 32, 100, 114, 111, 112, 112, 101, 100, 32, 99, 108,
    105, 101, 110, 116, 32, 37, 105, 32, 45, 32, 100, 101, 110, 105, 101, 100,
    33, 10, 0, 0, 0, 0, 0, 0, 0, 76, 111, 97, 100, 66, 77, 80, 58, 32, 37, 115,
    32, 104, 97, 115, 32, 97, 110, 32, 105, 110, 118, 97, 108, 105, 100, 32,
    105, 109, 97, 103, 101, 32, 115, 105, 122, 101, 0, 0, 0, 108, 101, 103, 115,
    84, 105, 109, 101, 114, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 98,
    97, 100, 32, 102, 105, 108, 116, 101, 114, 32, 110, 97, 109, 101, 10, 0, 0,
    0, 0, 0, 0, 0, 0, 77, 105, 110, 105, 109, 117, 109, 32, 99, 111, 109, 95,
    104, 117, 110, 107, 77, 101, 103, 115, 32, 102, 111, 114, 32, 97, 32, 100,
    101, 100, 105, 99, 97, 116, 101, 100, 32, 115, 101, 114, 118, 101, 114, 32,
    105, 115, 32, 37, 105, 44, 32, 97, 108, 108, 111, 99, 97, 116, 105, 110,
    103, 32, 37, 105, 32, 109, 101, 103, 115, 46, 10, 0, 99, 111, 110, 95, 110,
    111, 116, 105, 102, 121, 116, 105, 109, 101, 0, 0, 65, 85, 88, 50, 0, 0, 0,
    0, 49, 50, 56, 0, 0, 0, 0, 0, 71, 76, 83, 76, 95, 83, 101, 116, 85, 110,
    105, 102, 111, 114, 109, 77, 97, 116, 52, 58, 32, 119, 114, 111, 110, 103,
    32, 116, 121, 112, 101, 32, 102, 111, 114, 32, 117, 110, 105, 102, 111, 114,
    109, 32, 37, 105, 32, 105, 110, 32, 112, 114, 111, 103, 114, 97, 109, 32,
    37, 115, 10, 0, 0, 0, 82, 95, 67, 104, 101, 99, 107, 70, 66, 79, 58, 32, 40,
    37, 115, 41, 32, 117, 110, 107, 110, 111, 119, 110, 32, 101, 114, 114, 111,
    114, 32, 48, 120, 37, 88, 10, 0, 0, 0, 0, 103, 108, 86, 101, 114, 116, 101,
    120, 65, 116, 116, 114, 105, 98, 52, 102, 65, 82, 66, 0, 0, 0, 0, 0, 86, 66,
    79, 32, 100, 114, 97, 119, 115, 58, 32, 115, 116, 97, 116, 105, 99, 32, 37,
    105, 32, 100, 121, 110, 97, 109, 105, 99, 32, 37, 105, 10, 77, 117, 108,
    116, 105, 100, 114, 97, 119, 115, 58, 32, 37, 105, 32, 109, 101, 114, 103,
    101, 100, 32, 37, 105, 10, 0, 0, 0, 0, 0, 0, 0, 103, 108, 68, 101, 108, 101,
    116, 101, 83, 104, 97, 100, 101, 114, 0, 0, 114, 101, 109, 97, 112, 115,
    104, 97, 100, 101, 114, 0, 0, 0, 0, 0, 87, 114, 105, 116, 101, 32, 116, 111,
    32, 88, 77, 83, 32, 102, 97, 105, 108, 101, 100, 0, 0, 0, 0, 0, 37, 105, 32,
    109, 115, 101, 99, 32, 116, 111, 32, 100, 114, 97, 119, 32, 97, 108, 108,
    32, 105, 109, 97, 103, 101, 115, 10, 0, 0, 0, 0, 0, 65, 118, 97, 105, 108,
    97, 98, 108, 101, 32, 109, 111, 100, 101, 115, 58, 32, 39, 37, 115, 39, 10,
    0, 0, 105, 110, 118, 97, 108, 105, 100, 32, 99, 111, 100, 101, 32, 108, 101,
    110, 103, 116, 104, 115, 32, 115, 101, 116, 0, 0, 0, 0, 0, 0, 0, 0, 46, 46,
    46, 108, 111, 97, 100, 105, 110, 103, 32, 39, 37, 115, 39, 10, 0, 0, 0, 0,
    0, 0, 0, 0, 114, 95, 115, 117, 98, 100, 105, 118, 105, 115, 105, 111, 110,
    115, 0, 0, 37, 51, 105, 58, 37, 115, 10, 0, 113, 103, 108, 69, 110, 97, 98,
    108, 101, 86, 101, 114, 116, 101, 120, 65, 116, 116, 114, 105, 98, 65, 114,
    114, 97, 121, 65, 82, 66, 40, 32, 65, 84, 84, 82, 95, 73, 78, 68, 69, 88,
    95, 84, 65, 78, 71, 69, 78, 84, 50, 32, 41, 10, 0, 0, 0, 71, 76, 95, 69, 88,
    84, 95, 112, 97, 99, 107, 101, 100, 95, 100, 101, 112, 116, 104, 95, 115,
    116, 101, 110, 99, 105, 108, 0, 0, 0, 0, 0, 112, 117, 110, 99, 116, 117, 97,
    116, 105, 111, 110, 0, 0, 0, 0, 0, 99, 97, 110, 39, 116, 32, 101, 118, 97,
    108, 117, 97, 116, 101, 32, 37, 115, 44, 32, 110, 111, 116, 32, 100, 101,
    102, 105, 110, 101, 100, 0, 0, 45, 45, 45, 45, 45, 45, 45, 45, 45, 32, 67,
    108, 105, 101, 110, 116, 32, 73, 110, 102, 111, 114, 109, 97, 116, 105, 111,
    110, 32, 45, 45, 45, 45, 45, 45, 45, 45, 45, 10, 0, 101, 120, 112, 101, 99,
    116, 101, 100, 32, 116, 121, 112, 101, 32, 102, 111, 117, 110, 100, 32, 37,
    115, 0, 0, 83, 86, 67, 95, 83, 116, 97, 116, 117, 115, 58, 32, 114, 97, 116,
    101, 32, 108, 105, 109, 105, 116, 32, 102, 114, 111, 109, 32, 37, 115, 32,
    101, 120, 99, 101, 101, 100, 101, 100, 44, 32, 100, 114, 111, 112, 112, 105,
    110, 103, 32, 114, 101, 113, 117, 101, 115, 116, 10, 0, 0, 0, 0, 0, 0, 118,
    109, 47, 37, 115, 46, 113, 118, 109, 0, 0, 0, 0, 0, 0, 0, 100, 105, 115, 99,
    111, 110, 110, 101, 99, 116, 0, 0, 0, 0, 0, 0, 109, 97, 112, 95, 114, 101,
    115, 116, 97, 114, 116, 10, 0, 0, 0, 0, 115, 111, 117, 110, 100, 47, 109,
    105, 115, 99, 47, 115, 105, 108, 101, 110, 99, 101, 46, 119, 97, 118, 0, 0,
    65, 85, 88, 49, 0, 0, 0, 0, 118, 101, 108, 111, 99, 105, 116, 121, 91, 50,
    93, 0, 0, 0, 0, 0, 37, 115, 37, 99, 37, 115, 10, 0, 117, 115, 101, 114, 110,
    97, 109, 101, 0, 0, 0, 0, 0, 0, 0, 0, 115, 95, 115, 100, 108, 77, 105, 120,
    83, 97, 109, 112, 115, 0, 0, 0, 99, 108, 95, 100, 101, 98, 117, 103, 77,
    111, 118, 101, 0, 0, 0, 0, 99, 111, 109, 95, 104, 117, 110, 107, 77, 101,
    103, 115, 0, 0, 0, 0, 49, 0, 0, 0, 0, 0, 0, 0, 118, 97, 108, 117, 101, 32,
    37, 108, 100, 32, 111, 117, 116, 32, 111, 102, 32, 114, 97, 110, 103, 101,
    32, 91, 37, 102, 44, 32, 37, 102, 93, 0, 60, 61, 0, 0, 0, 0, 0, 0, 103, 108,
    71, 101, 116, 65, 99, 116, 105, 118, 101, 65, 116, 116, 114, 105, 98, 0, 0,
    0, 0, 0, 0, 0, 100, 101, 102, 105, 110, 101, 32, 37, 115, 32, 119, 105, 116,
    104, 32, 116, 111, 111, 32, 109, 97, 110, 121, 32, 112, 97, 114, 109, 115,
    0, 0, 0, 82, 101, 97, 100, 32, 102, 114, 111, 109, 32, 88, 77, 83, 32, 102,
    97, 105, 108, 101, 100, 0, 0, 0, 0, 99, 97, 110, 39, 116, 32, 99, 108, 111,
    115, 101, 32, 108, 111, 103, 32, 102, 105, 108, 101, 32, 37, 115, 10, 0, 0,
    0, 0, 0, 0, 0, 0, 83, 107, 105, 112, 112, 105, 110, 103, 32, 109, 111, 100,
    101, 32, 37, 117, 120, 37, 120, 44, 32, 98, 117, 102, 102, 101, 114, 32,
    116, 111, 111, 32, 115, 109, 97, 108, 108, 10, 0, 0, 37, 115, 37, 99, 37,
    115, 37, 99, 98, 111, 116, 108, 105, 98, 46, 108, 111, 103, 0, 0, 0, 0, 0,
    0, 46, 109, 116, 114, 0, 0, 0, 0, 114, 95, 117, 105, 102, 117, 108, 108,
    115, 99, 114, 101, 101, 110, 0, 0, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45,
    45, 45, 45, 45, 45, 45, 45, 45, 10, 0, 0, 0, 0, 0, 41, 0, 0, 0, 0, 0, 0, 0,
    113, 103, 108, 68, 105, 115, 97, 98, 108, 101, 86, 101, 114, 116, 101, 120,
    65, 116, 116, 114, 105, 98, 65, 114, 114, 97, 121, 65, 82, 66, 40, 32, 65,
    84, 84, 82, 95, 73, 78, 68, 69, 88, 95, 78, 79, 82, 77, 65, 76, 50, 32, 41,
    10, 0, 0, 0, 109, 97, 120, 95, 112, 114, 111, 106, 101, 99, 116, 105, 108,
    101, 105, 110, 102, 111, 32, 61, 32, 37, 100, 10, 0, 0, 0, 0, 0, 0, 0, 0,
    102, 117, 110, 99, 95, 112, 108, 97, 116, 0, 0, 0, 0, 0, 0, 0, 110, 97, 109,
    101, 0, 0, 0, 0, 110, 111, 32, 118, 97, 108, 117, 101, 32, 97, 102, 116,
    101, 114, 32, 35, 105, 102, 47, 35, 101, 108, 105, 102, 0, 0, 0, 0, 0, 0, 0,
    0, 109, 97, 120, 115, 0, 0, 0, 0, 37, 52, 105, 58, 32, 37, 115, 10, 0, 0, 0,
    0, 0, 0, 0, 0, 116, 121, 112, 101, 0, 0, 0, 0, 112, 114, 105, 110, 116, 10,
    37, 115, 0, 0, 0, 0, 0, 0, 0, 0, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45,
    45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45,
    45, 45, 45, 45, 45, 10, 0, 0, 0, 0, 117, 115, 101, 114, 105, 110, 102, 111,
    0, 0, 0, 0, 0, 0, 0, 0, 115, 118, 95, 115, 101, 114, 118, 101, 114, 105,
    100, 0, 0, 0, 0, 0, 32, 37, 52, 100, 32, 37, 115, 10, 0, 0, 0, 0, 0, 0, 0,
    0, 65, 108, 108, 111, 99, 97, 116, 101, 100, 32, 37, 100, 32, 115, 111, 117,
    114, 99, 101, 115, 46, 10, 0, 0, 74, 79, 89, 51, 50, 0, 0, 0, 65, 65, 83,
    95, 84, 114, 97, 99, 101, 66, 111, 117, 110, 100, 105, 110, 103, 66, 111,
    120, 58, 32, 115, 116, 97, 99, 107, 32, 111, 118, 101, 114, 102, 108, 111,
    119, 10, 0, 0, 0, 119, 101, 97, 112, 111, 110, 84, 105, 109, 101, 0, 0, 0,
    0, 0, 0, 85, 110, 97, 98, 108, 101, 32, 116, 111, 32, 111, 112, 101, 110,
    32, 102, 105, 108, 101, 58, 32, 37, 115, 10, 0, 0, 0, 0, 0, 0, 0, 0, 32, 32,
    32, 32, 110, 111, 116, 32, 105, 110, 32, 116, 104, 101, 32, 109, 97, 110,
    105, 102, 101, 115, 116, 10, 0, 0, 0, 0, 0, 0, 0, 0, 116, 114, 105, 103,
    103, 101, 114, 95, 112, 117, 115, 104, 32, 119, 105, 116, 104, 111, 117,
    116, 32, 116, 105, 109, 101, 10, 0, 0, 0, 0, 0, 0, 49, 0, 0, 0, 0, 0, 0, 0,
    99, 108, 95, 110, 111, 100, 101, 108, 116, 97, 0, 0, 0, 0, 0, 0, 72, 117,
    110, 107, 32, 105, 110, 105, 116, 105, 97, 108, 105, 122, 97, 116, 105, 111,
    110, 32, 102, 97, 105, 108, 101, 100, 46, 32, 70, 105, 108, 101, 32, 115,
    121, 115, 116, 101, 109, 32, 108, 111, 97, 100, 32, 115, 116, 97, 99, 107,
    32, 110, 111, 116, 32, 122, 101, 114, 111, 0, 0, 0, 0, 0, 115, 104, 111,
    119, 99, 97, 99, 104, 101, 117, 112, 100, 97, 116, 101, 115, 0, 0, 0, 0, 0,
    0, 0, 0, 97, 97, 115, 32, 102, 105, 108, 101, 32, 37, 115, 32, 105, 115, 32,
    111, 117, 116, 32, 111, 102, 32, 100, 97, 116, 101, 10, 0, 0, 0, 0, 0, 77,
    65, 88, 95, 80, 79, 82, 84, 65, 76, 65, 82, 69, 65, 83, 10, 0, 0, 0, 0, 0,
    0, 0, 0, 109, 105, 115, 115, 105, 110, 103, 32, 125, 0, 0, 0, 0, 0, 0, 0,
    73, 110, 116, 101, 114, 112, 114, 101, 116, 101, 114, 32, 101, 114, 114,
    111, 114, 58, 32, 111, 112, 83, 116, 97, 99, 107, 91, 48, 93, 32, 61, 32,
    37, 88, 44, 32, 111, 112, 83, 116, 97, 99, 107, 79, 102, 115, 32, 61, 32,
    37, 100, 0, 0, 0, 0, 0, 81, 95, 115, 116, 114, 110, 99, 112, 121, 122, 58,
    32, 78, 85, 76, 76, 32, 100, 101, 115, 116, 0, 0, 0, 103, 108, 71, 101, 116,
    65, 116, 116, 114, 105, 98, 76, 111, 99, 97, 116, 105, 111, 110, 0, 0, 0, 0,
    0, 83, 86, 70, 95, 67, 76, 73, 69, 78, 84, 77, 65, 83, 75, 58, 32, 99, 108,
    105, 101, 110, 116, 78, 117, 109, 32, 62, 61, 32, 51, 50, 0, 73, 109, 97,
    103, 101, 32, 116, 111, 111, 32, 119, 105, 100, 101, 32, 102, 111, 114, 32,
    116, 104, 105, 115, 32, 105, 109, 112, 108, 101, 109, 101, 110, 116, 97,
    116, 105, 111, 110, 0, 0, 37, 117, 120, 37, 117, 32, 0, 0, 103, 95, 115,
    121, 110, 99, 104, 114, 111, 110, 111, 117, 115, 67, 108, 105, 101, 110,
    116, 115, 0, 0, 0, 0, 115, 99, 114, 105, 112, 116, 115, 47, 37, 115, 0, 0,
    0, 0, 0, 0, 114, 95, 118, 101, 114, 116, 101, 120, 76, 105, 103, 104, 116,
    0, 0, 0, 60, 100, 101, 102, 97, 117, 108, 116, 32, 115, 107, 105, 110, 62,
    0, 0, 113, 103, 108, 69, 110, 97, 98, 108, 101, 86, 101, 114, 116, 101, 120,
    65, 116, 116, 114, 105, 98, 65, 114, 114, 97, 121, 65, 82, 66, 40, 32, 65,
    84, 84, 82, 95, 73, 78, 68, 69, 88, 95, 78, 79, 82, 77, 65, 76, 50, 32, 41,
    10, 0, 0, 0, 0, 81, 117, 97, 107, 101, 65, 114, 101, 110, 97, 45, 49, 0, 0,
    0, 0, 71, 76, 95, 65, 82, 66, 95, 104, 97, 108, 102, 95, 102, 108, 111, 97,
    116, 95, 112, 105, 120, 101, 108, 0, 110, 117, 109, 98, 101, 114, 0, 0, 83,
    86, 95, 71, 101, 116, 85, 115, 101, 114, 105, 110, 102, 111, 58, 32, 98, 97,
    100, 32, 105, 110, 100, 101, 120, 32, 37, 105, 0, 0, 0, 0, 63, 32, 97, 102,
    116, 101, 114, 32, 63, 32, 105, 110, 32, 35, 105, 102, 47, 35, 101, 108,
    105, 102, 0, 0, 86, 77, 95, 82, 101, 115, 116, 97, 114, 116, 32, 111, 110,
    32, 103, 97, 109, 101, 32, 102, 97, 105, 108, 101, 100, 0, 0, 0, 0, 0, 0, 0,
    99, 104, 97, 116, 0, 0, 0, 0, 82, 101, 102, 101, 114, 101, 110, 99, 101,
    100, 32, 80, 75, 51, 32, 78, 97, 109, 101, 115, 58, 32, 37, 115, 10, 0, 0,
    0, 0, 0, 0, 0, 66, 97, 100, 32, 114, 99, 111, 110, 112, 97, 115, 115, 119,
    111, 114, 100, 46, 10, 0, 0, 0, 0, 0, 0, 112, 114, 105, 110, 116, 10, 89,
    111, 117, 32, 97, 114, 101, 32, 98, 97, 110, 110, 101, 100, 32, 102, 114,
    111, 109, 32, 116, 104, 105, 115, 32, 115, 101, 114, 118, 101, 114, 46, 10,
    0, 87, 65, 82, 78, 73, 78, 71, 58, 32, 115, 118, 95, 112, 117, 114, 101, 32,
    115, 101, 116, 32, 98, 117, 116, 32, 110, 111, 32, 80, 75, 51, 32, 102, 105,
    108, 101, 115, 32, 108, 111, 97, 100, 101, 100, 10, 0, 0, 0, 71, 111, 105,
    110, 103, 32, 102, 114, 111, 109, 32, 67, 83, 95, 67, 79, 78, 78, 69, 67,
    84, 69, 68, 32, 116, 111, 32, 67, 83, 95, 80, 82, 73, 77, 69, 68, 32, 102,
    111, 114, 32, 37, 115, 10, 0, 0, 0, 0, 109, 97, 112, 110, 97, 109, 101, 0,
    94, 51, 87, 65, 82, 78, 73, 78, 71, 58, 32, 83, 111, 117, 114, 99, 101, 32,
    37, 100, 32, 105, 115, 32, 108, 111, 99, 107, 101, 100, 10, 0, 116, 114, 70,
    77, 86, 58, 58, 112, 108, 97, 121, 40, 41, 44, 32, 112, 108, 97, 121, 105,
    110, 103, 32, 37, 115, 10, 0, 0, 0, 0, 0, 0, 74, 79, 89, 51, 49, 0, 0, 0,
    118, 105, 101, 119, 97, 110, 103, 108, 101, 115, 91, 48, 93, 0, 0, 0, 115,
    101, 114, 118, 101, 114, 105, 110, 102, 111, 0, 0, 0, 0, 0, 0, 32, 32, 32,
    32, 105, 110, 32, 116, 104, 101, 32, 109, 97, 110, 105, 102, 101, 115, 116,
    10, 0, 0, 0, 0, 94, 49, 69, 114, 114, 111, 114, 58, 32, 83, 86, 95, 66, 111,
    116, 76, 105, 98, 83, 101, 116, 117, 112, 32, 119, 105, 116, 104, 111, 117,
    116, 32, 83, 86, 95, 66, 111, 116, 73, 110, 105, 116, 66, 111, 116, 76, 105,
    98, 10, 0, 0, 0, 0, 0, 0, 0, 115, 95, 97, 108, 68, 111, 112, 112, 108, 101,
    114, 83, 112, 101, 101, 100, 0, 0, 0, 0, 0, 0, 0, 0, 94, 49, 69, 82, 82, 79,
    82, 58, 32, 67, 111, 117, 108, 100, 110, 39, 116, 32, 102, 105, 110, 100,
    32, 34, 100, 97, 116, 97, 34, 32, 99, 104, 117, 110, 107, 10, 0, 0, 0, 0,
    45, 109, 108, 111, 111, 107, 0, 0, 115, 95, 109, 117, 116, 101, 100, 0, 37,
    112, 32, 100, 109, 97, 32, 98, 117, 102, 102, 101, 114, 10, 0, 0, 83, 121,
    115, 95, 83, 101, 110, 100, 80, 97, 99, 107, 101, 116, 58, 32, 98, 97, 100,
    32, 97, 100, 100, 114, 101, 115, 115, 32, 116, 121, 112, 101, 0, 0, 0, 0, 0,
    0, 0, 0, 103, 108, 86, 101, 114, 116, 101, 120, 65, 116, 116, 114, 105, 98,
    52, 102, 118, 0, 0, 0, 0, 0, 0, 0, 37, 115, 32, 115, 101, 110, 100, 32, 37,
    52, 105, 32, 58, 32, 115, 61, 37, 105, 32, 97, 99, 107, 61, 37, 105, 10, 0,
    0, 0, 0, 0, 0, 86, 105, 114, 116, 117, 97, 108, 32, 97, 114, 114, 97, 121,
    32, 99, 111, 110, 116, 114, 111, 108, 108, 101, 114, 32, 109, 101, 115, 115,
    101, 100, 32, 117, 112, 0, 0, 0, 0, 0, 0, 68, 105, 115, 112, 108, 97, 121,
    32, 115, 117, 112, 112, 111, 114, 116, 115, 32, 97, 110, 121, 32, 114, 101,
    115, 111, 108, 117, 116, 105, 111, 110, 10, 0, 0, 0, 0, 0, 0, 0, 0, 87, 65,
    82, 78, 73, 78, 71, 58, 32, 110, 111, 32, 115, 104, 97, 100, 101, 114, 32,
    102, 105, 108, 101, 115, 32, 102, 111, 117, 110, 100, 10, 0, 114, 95, 115,
    105, 109, 112, 108, 101, 77, 105, 112, 77, 97, 112, 115, 0, 37, 100, 32,
    117, 115, 101, 100, 32, 37, 100, 10, 0, 0, 0, 0, 0, 87, 65, 82, 78, 73, 78,
    71, 58, 32, 73, 103, 110, 111, 114, 105, 110, 103, 32, 115, 117, 114, 102,
    97, 99, 101, 115, 32, 105, 110, 32, 39, 37, 115, 39, 44, 32, 116, 104, 101,
    32, 109, 97, 120, 32, 105, 115, 32, 37, 100, 32, 115, 117, 114, 102, 97, 99,
    101, 115, 33, 10, 0, 0, 0, 0, 113, 103, 108, 68, 105, 115, 97, 98, 108, 101,
    86, 101, 114, 116, 101, 120, 65, 116, 116, 114, 105, 98, 65, 114, 114, 97,
    121, 65, 82, 66, 40, 32, 65, 84, 84, 82, 95, 73, 78, 68, 69, 88, 95, 80, 79,
    83, 73, 84, 73, 79, 78, 50, 32, 41, 10, 0, 71, 76, 95, 65, 82, 66, 95, 116,
    101, 120, 116, 117, 114, 101, 95, 102, 108, 111, 97, 116, 0, 0, 0, 0, 58,
    32, 119, 105, 116, 104, 111, 117, 116, 32, 63, 32, 105, 110, 32, 35, 105,
    102, 47, 35, 101, 108, 105, 102, 0, 0, 0, 0, 0, 0, 0, 0, 79, 112, 101, 110,
    101, 100, 32, 80, 75, 51, 32, 78, 97, 109, 101, 115, 58, 32, 37, 115, 10, 0,
    0, 0, 87, 65, 82, 78, 73, 78, 71, 58, 32, 114, 101, 102, 117, 115, 105, 110,
    103, 32, 116, 111, 32, 99, 114, 101, 97, 116, 101, 32, 114, 101, 108, 97,
    116, 105, 118, 101, 32, 112, 97, 116, 104, 32, 34, 37, 115, 34, 10, 0, 78,
    111, 32, 114, 99, 111, 110, 112, 97, 115, 115, 119, 111, 114, 100, 32, 115,
    101, 116, 32, 111, 110, 32, 116, 104, 101, 32, 115, 101, 114, 118, 101, 114,
    46, 10, 0, 0, 0, 0, 0, 37, 105, 0, 0, 0, 0, 0, 0, 83, 86, 95, 83, 101, 110,
    100, 67, 108, 105, 101, 110, 116, 71, 97, 109, 101, 83, 116, 97, 116, 101,
    40, 41, 32, 102, 111, 114, 32, 37, 115, 10, 0, 0, 0, 0, 0, 0, 0, 0, 118, 97,
    114, 105, 97, 98, 108, 101, 32, 99, 104, 97, 110, 103, 101, 32, 45, 45, 32,
    114, 101, 115, 116, 97, 114, 116, 105, 110, 103, 46, 10, 0, 109, 117, 115,
    105, 99, 0, 0, 0, 44, 32, 116, 104, 101, 32, 100, 101, 102, 97, 117, 108,
    116, 0, 0, 0, 74, 79, 89, 51, 48, 0, 0, 0, 76, 69, 70, 84, 65, 82, 82, 79,
    87, 0, 0, 0, 0, 0, 0, 0, 118, 105, 101, 119, 97, 110, 103, 108, 101, 115,
    91, 49, 93, 0, 0, 0, 32, 32, 32, 32, 111, 110, 32, 116, 104, 101, 32, 112,
    117, 114, 101, 32, 108, 105, 115, 116, 10, 0, 0, 0, 43, 109, 108, 111, 111,
    107, 0, 0, 103, 108, 86, 101, 114, 116, 101, 120, 65, 116, 116, 114, 105,
    98, 51, 102, 118, 0, 0, 0, 0, 0, 0, 0, 85, 110, 115, 117, 112, 112, 111,
    114, 116, 101, 100, 32, 109, 97, 114, 107, 101, 114, 32, 116, 121, 112, 101,
    32, 48, 120, 37, 48, 50, 120, 0, 0, 67, 97, 110, 39, 116, 32, 103, 101, 116,
    32, 108, 105, 115, 116, 32, 111, 102, 32, 97, 118, 97, 105, 108, 97, 98,
    108, 101, 32, 109, 111, 100, 101, 115, 10, 0, 0, 0, 0, 0, 0, 46, 115, 104,
    97, 100, 101, 114, 0, 114, 95, 99, 117, 115, 116, 111, 109, 80, 105, 120,
    101, 108, 65, 115, 112, 101, 99, 116, 0, 0, 0, 0, 0, 116, 97, 103, 95, 0, 0,
    0, 0, 113, 103, 108, 69, 110, 97, 98, 108, 101, 86, 101, 114, 116, 101, 120,
    65, 116, 116, 114, 105, 98, 65, 114, 114, 97, 121, 65, 82, 66, 40, 32, 65,
    84, 84, 82, 95, 73, 78, 68, 69, 88, 95, 80, 79, 83, 73, 84, 73, 79, 78, 50,
    32, 41, 10, 0, 0, 71, 76, 95, 65, 82, 66, 95, 116, 101, 120, 116, 117, 114,
    101, 95, 110, 111, 110, 95, 112, 111, 119, 101, 114, 95, 111, 102, 95, 116,
    119, 111, 0, 115, 116, 114, 105, 110, 103, 0, 0, 100, 105, 118, 105, 100,
    101, 32, 98, 121, 32, 122, 101, 114, 111, 32, 105, 110, 32, 35, 105, 102,
    47, 35, 101, 108, 105, 102, 0, 0, 0, 0, 0, 94, 49, 69, 82, 82, 79, 82, 58,
    32, 70, 97, 105, 108, 101, 100, 32, 116, 111, 32, 112, 97, 116, 99, 104, 32,
    99, 103, 97, 109, 101, 32, 114, 101, 115, 111, 108, 117, 116, 105, 111, 110,
    10, 0, 0, 0, 0, 0, 0, 82, 99, 111, 110, 32, 102, 114, 111, 109, 32, 37, 115,
    58, 32, 37, 115, 10, 0, 0, 0, 0, 0, 0, 0, 109, 97, 112, 115, 47, 37, 115,
    46, 98, 115, 112, 0, 0, 0, 0, 0, 76, 111, 115, 116, 32, 114, 101, 108, 105,
    97, 98, 108, 101, 32, 99, 111, 109, 109, 97, 110, 100, 115, 0, 0, 37, 105,
    0, 0, 0, 0, 0, 0, 115, 116, 114, 101, 97, 109, 0, 0, 115, 101, 114, 118,
    101, 114, 99, 97, 99, 104, 101, 46, 100, 97, 116, 0, 74, 79, 89, 50, 57, 0,
    0, 0, 118, 101, 108, 111, 99, 105, 116, 121, 91, 49, 93, 0, 0, 0, 0, 0, 32,
    32, 32, 32, 110, 111, 116, 32, 111, 110, 32, 116, 104, 101, 32, 112, 117,
    114, 101, 32, 108, 105, 115, 116, 10, 0, 0, 0, 0, 0, 0, 0, 45, 98, 117, 116,
    116, 111, 110, 49, 52, 0, 0, 0, 0, 0, 0, 0, 84, 104, 114, 101, 101, 32, 107,
    101, 121, 115, 32, 100, 111, 119, 110, 32, 102, 111, 114, 32, 97, 32, 98,
    117, 116, 116, 111, 110, 33, 10, 0, 0, 67, 76, 95, 71, 101, 116, 83, 101,
    114, 118, 101, 114, 67, 111, 109, 109, 97, 110, 100, 58, 32, 114, 101, 113,
    117, 101, 115, 116, 101, 100, 32, 97, 32, 99, 111, 109, 109, 97, 110, 100,
    32, 110, 111, 116, 32, 114, 101, 99, 101, 105, 118, 101, 100, 0, 0, 0, 103,
    108, 86, 101, 114, 116, 101, 120, 65, 116, 116, 114, 105, 98, 50, 102, 118,
    0, 0, 0, 0, 0, 0, 0, 65, 112, 112, 108, 105, 99, 97, 116, 105, 111, 110, 32,
    116, 114, 97, 110, 115, 102, 101, 114, 114, 101, 100, 32, 116, 111, 111, 32,
    102, 101, 119, 32, 115, 99, 97, 110, 108, 105, 110, 101, 115, 0, 0, 0, 0, 0,
    0, 0, 46, 46, 46, 87, 65, 82, 78, 73, 78, 71, 58, 32, 99, 111, 117, 108,
    100, 32, 110, 111, 116, 32, 115, 101, 116, 32, 116, 104, 101, 32, 103, 105,
    118, 101, 110, 32, 109, 111, 100, 101, 32, 40, 37, 100, 41, 10, 0, 0, 115,
    99, 114, 105, 112, 116, 115, 0, 49, 48, 50, 52, 0, 0, 0, 0, 46, 115, 107,
    105, 110, 0, 0, 0, 113, 103, 108, 68, 105, 115, 97, 98, 108, 101, 86, 101,
    114, 116, 101, 120, 65, 116, 116, 114, 105, 98, 65, 114, 114, 97, 121, 65,
    82, 66, 40, 32, 65, 84, 84, 82, 95, 73, 78, 68, 69, 88, 95, 76, 73, 71, 72,
    84, 68, 73, 82, 69, 67, 84, 73, 79, 78, 32, 41, 10, 0, 0, 0, 0, 71, 76, 95,
    65, 84, 73, 95, 109, 101, 109, 105, 110, 102, 111, 0, 0, 99, 111, 117, 108,
    100, 110, 39, 116, 32, 114, 101, 97, 100, 32, 101, 120, 112, 101, 99, 116,
    101, 100, 32, 116, 111, 107, 101, 110, 0, 0, 0, 0, 109, 105, 115, 105, 110,
    103, 32, 118, 97, 108, 117, 101, 115, 32, 105, 110, 32, 35, 105, 102, 47,
    35, 101, 108, 105, 102, 0, 0, 0, 0, 0, 0, 98, 97, 100, 32, 99, 103, 97, 109,
    101, 32, 112, 97, 116, 99, 104, 32, 116, 121, 112, 101, 0, 0, 0, 0, 99, 111,
    109, 95, 101, 114, 114, 111, 114, 67, 111, 100, 101, 0, 0, 0, 66, 97, 100,
    32, 114, 99, 111, 110, 32, 102, 114, 111, 109, 32, 37, 115, 58, 32, 37, 115,
    10, 0, 0, 0, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45,
    45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 10, 0, 0, 0, 0, 67, 108, 105,
    101, 110, 116, 32, 37, 115, 32, 108, 111, 115, 116, 32, 37, 105, 32, 99,
    108, 105, 101, 110, 116, 67, 111, 109, 109, 97, 110, 100, 115, 10, 0, 0, 0,
    0, 0, 0, 0, 49, 0, 0, 0, 0, 0, 0, 0, 94, 49, 87, 65, 82, 78, 73, 78, 71, 58,
    32, 83, 116, 101, 97, 109, 32, 100, 114, 111, 112, 112, 105, 110, 103, 32,
    114, 97, 119, 32, 115, 97, 109, 112, 108, 101, 115, 44, 32, 114, 101, 97,
    99, 104, 101, 100, 32, 77, 65, 88, 95, 83, 84, 82, 69, 65, 77, 95, 66, 85,
    70, 70, 69, 82, 83, 10, 0, 0, 0, 0, 0, 0, 74, 79, 89, 50, 56, 0, 0, 0, 118,
    101, 108, 111, 99, 105, 116, 121, 91, 48, 93, 0, 0, 0, 0, 0, 37, 115, 32,
    40, 37, 105, 32, 102, 105, 108, 101, 115, 41, 10, 0, 0, 43, 98, 117, 116,
    116, 111, 110, 49, 52, 0, 0, 0, 0, 0, 0, 0, 103, 108, 86, 101, 114, 116,
    101, 120, 65, 116, 116, 114, 105, 98, 49, 102, 118, 0, 0, 0, 0, 0, 0, 0, 87,
    114, 105, 116, 101, 32, 102, 97, 105, 108, 101, 100, 32, 111, 110, 32, 116,
    101, 109, 112, 111, 114, 97, 114, 121, 32, 102, 105, 108, 101, 32, 45, 45,
    45, 32, 111, 117, 116, 32, 111, 102, 32, 100, 105, 115, 107, 32, 115, 112,
    97, 99, 101, 63, 0, 0, 0, 101, 120, 101, 99, 37, 115, 32, 60, 102, 105, 108,
    101, 110, 97, 109, 101, 62, 32, 58, 32, 101, 120, 101, 99, 117, 116, 101,
    32, 97, 32, 115, 99, 114, 105, 112, 116, 32, 102, 105, 108, 101, 37, 115,
    10, 0, 0, 0, 0, 46, 46, 46, 87, 65, 82, 78, 73, 78, 71, 58, 32, 102, 117,
    108, 108, 115, 99, 114, 101, 101, 110, 32, 117, 110, 97, 118, 97, 105, 108,
    97, 98, 108, 101, 32, 105, 110, 32, 116, 104, 105, 115, 32, 109, 111, 100,
    101, 10, 0, 0, 0, 0, 0, 0, 0, 0, 103, 102, 120, 47, 50, 100, 47, 115, 117,
    110, 102, 108, 97, 114, 101, 0, 114, 95, 99, 117, 115, 116, 111, 109, 104,
    101, 105, 103, 104, 116, 0, 0, 87, 65, 82, 78, 73, 78, 71, 58, 32, 82, 69,
    95, 82, 101, 103, 105, 115, 116, 101, 114, 83, 107, 105, 110, 40, 32, 39,
    37, 115, 39, 32, 41, 32, 77, 65, 88, 95, 83, 75, 73, 78, 83, 32, 104, 105,
    116, 10, 0, 113, 103, 108, 69, 110, 97, 98, 108, 101, 86, 101, 114, 116,
    101, 120, 65, 116, 116, 114, 105, 98, 65, 114, 114, 97, 121, 65, 82, 66, 40,
    32, 65, 84, 84, 82, 95, 73, 78, 68, 69, 88, 95, 76, 73, 71, 72, 84, 68, 73,
    82, 69, 67, 84, 73, 79, 78, 32, 41, 10, 0, 0, 0, 0, 0, 71, 76, 95, 78, 86,
    88, 95, 103, 112, 117, 95, 109, 101, 109, 111, 114, 121, 95, 105, 110, 102,
    111, 0, 0, 101, 120, 112, 101, 99, 116, 101, 100, 32, 37, 115, 44, 32, 102,
    111, 117, 110, 100, 32, 37, 115, 0, 0, 0, 116, 111, 111, 32, 109, 97, 110,
    121, 32, 40, 32, 105, 110, 32, 35, 105, 102, 47, 35, 101, 108, 105, 102, 0,
    70, 111, 117, 110, 100, 32, 99, 103, 97, 109, 101, 32, 121, 115, 99, 97,
    108, 101, 32, 111, 102, 102, 115, 101, 116, 32, 97, 116, 32, 48, 120, 37,
    48, 56, 120, 10, 0, 0, 0, 0, 83, 86, 67, 95, 82, 101, 109, 111, 116, 101,
    67, 111, 109, 109, 97, 110, 100, 58, 32, 114, 97, 116, 101, 32, 108, 105,
    109, 105, 116, 32, 101, 120, 99, 101, 101, 100, 101, 100, 44, 32, 100, 114,
    111, 112, 112, 105, 110, 103, 32, 114, 101, 113, 117, 101, 115, 116, 10, 0,
    0, 0, 0, 0, 0, 0, 117, 105, 95, 115, 105, 110, 103, 108, 101, 80, 108, 97,
    121, 101, 114, 65, 99, 116, 105, 118, 101, 0, 0, 0, 99, 108, 105, 101, 110,
    116, 67, 111, 109, 109, 97, 110, 100, 58, 32, 37, 115, 32, 58, 32, 37, 105,
    32, 58, 32, 37, 115, 10, 0, 0, 0, 0, 115, 118, 95, 99, 104, 101, 97, 116,
    115, 0, 0, 0, 0, 0, 0, 0, 94, 49, 69, 82, 82, 79, 82, 58, 32, 67, 97, 110,
    39, 116, 32, 97, 108, 108, 111, 99, 97, 116, 101, 32, 115, 116, 114, 101,
    97, 109, 105, 110, 103, 32, 115, 116, 114, 101, 97, 109, 83, 111, 117, 114,
    99, 101, 10, 0, 74, 79, 89, 50, 55, 0, 0, 0, 98, 111, 98, 67, 121, 99, 108,
    101, 0, 0, 0, 0, 0, 0, 0, 0, 67, 117, 114, 114, 101, 110, 116, 32, 115, 101,
    97, 114, 99, 104, 32, 112, 97, 116, 104, 58, 10, 0, 0, 0, 44, 32, 115, 101,
    116, 116, 105, 110, 103, 32, 116, 111, 32, 37, 102, 10, 0, 0, 0, 0, 0, 0, 0,
    0, 67, 77, 95, 71, 101, 110, 101, 114, 97, 116, 101, 80, 97, 116, 99, 104,
    70, 97, 99, 101, 116, 115, 58, 32, 115, 111, 117, 114, 99, 101, 32, 105,
    115, 32, 62, 32, 77, 65, 88, 95, 71, 82, 73, 68, 95, 83, 73, 90, 69, 0, 0,
    0, 0, 0, 0, 0, 45, 98, 117, 116, 116, 111, 110, 49, 51, 0, 0, 0, 0, 0, 0, 0,
    90, 111, 110, 101, 32, 100, 97, 116, 97, 32, 102, 97, 105, 108, 101, 100,
    32, 116, 111, 32, 97, 108, 108, 111, 99, 97, 116, 101, 32, 37, 105, 32, 109,
    101, 103, 115, 0, 0, 0, 0, 69, 88, 84, 0, 0, 0, 0, 0, 103, 108, 66, 105,
    110, 100, 66, 117, 102, 102, 101, 114, 0, 0, 0, 0, 83, 101, 101, 107, 32,
    102, 97, 105, 108, 101, 100, 32, 111, 110, 32, 116, 101, 109, 112, 111, 114,
    97, 114, 121, 32, 102, 105, 108, 101, 0, 0, 0, 77, 97, 112, 32, 104, 97,
    115, 32, 110, 111, 32, 110, 111, 100, 101, 115, 0, 0, 0, 0, 0, 0, 0, 0, 83,
    68, 76, 32, 117, 115, 105, 110, 103, 32, 100, 114, 105, 118, 101, 114, 32,
    34, 37, 115, 34, 10, 0, 0, 49, 50, 53, 0, 0, 0, 0, 0, 115, 117, 110, 0, 0,
    0, 0, 0, 49, 54, 48, 48, 0, 0, 0, 0, 83, 107, 105, 110, 32, 110, 97, 109,
    101, 32, 101, 120, 99, 101, 101, 100, 115, 32, 77, 65, 88, 95, 81, 80, 65,
    84, 72, 10, 0, 0, 0, 0, 113, 103, 108, 68, 105, 115, 97, 98, 108, 101, 86,
    101, 114, 116, 101, 120, 65, 116, 116, 114, 105, 98, 65, 114, 114, 97, 121,
    65, 82, 66, 40, 32, 65, 84, 84, 82, 95, 73, 78, 68, 69, 88, 95, 67, 79, 76,
    79, 82, 32, 41, 10, 0, 0, 0, 0, 0, 46, 46, 46, 117, 115, 105, 110, 103, 32,
    71, 76, 83, 76, 32, 118, 101, 114, 115, 105, 111, 110, 32, 37, 115, 10, 0,
    0, 0, 0, 0, 0, 0, 116, 114, 97, 105, 108, 105, 110, 103, 32, 111, 112, 101,
    114, 97, 116, 111, 114, 32, 105, 110, 32, 35, 105, 102, 47, 35, 101, 108,
    105, 102, 0, 0, 70, 111, 117, 110, 100, 32, 99, 103, 97, 109, 101, 32, 120,
    115, 99, 97, 108, 101, 32, 111, 102, 102, 115, 101, 116, 32, 97, 116, 32,
    48, 120, 37, 48, 56, 120, 10, 0, 0, 0, 0, 83, 86, 67, 95, 82, 101, 109, 111,
    116, 101, 67, 111, 109, 109, 97, 110, 100, 58, 32, 114, 97, 116, 101, 32,
    108, 105, 109, 105, 116, 32, 102, 114, 111, 109, 32, 37, 115, 32, 101, 120,
    99, 101, 101, 100, 101, 100, 44, 32, 100, 114, 111, 112, 112, 105, 110, 103,
    32, 114, 101, 113, 117, 101, 115, 116, 10, 0, 0, 0, 0, 0, 0, 0, 45, 45, 45,
    45, 45, 32, 83, 101, 114, 118, 101, 114, 32, 83, 104, 117, 116, 100, 111,
    119, 110, 32, 40, 37, 115, 41, 32, 45, 45, 45, 45, 45, 10, 0, 0, 0, 0, 0, 0,
    0, 67, 97, 110, 110, 111, 116, 32, 118, 97, 108, 105, 100, 97, 116, 101, 32,
    112, 117, 114, 101, 32, 99, 108, 105, 101, 110, 116, 33, 0, 0, 0, 0, 56, 0,
    0, 0, 0, 0, 0, 0, 94, 49, 69, 82, 82, 79, 82, 58, 32, 83, 95, 65, 76, 95,
    67, 104, 101, 99, 107, 73, 110, 112, 117, 116, 58, 32, 104, 97, 110, 100,
    108, 101, 32, 37, 105, 32, 111, 117, 116, 32, 111, 102, 32, 114, 97, 110,
    103, 101, 10, 0, 0, 0, 0, 0, 0, 0, 74, 79, 89, 50, 54, 0, 0, 0, 99, 111,
    109, 109, 97, 110, 100, 84, 105, 109, 101, 0, 0, 0, 0, 0, 37, 100, 32, 102,
    105, 108, 101, 115, 32, 108, 105, 115, 116, 101, 100, 10, 0, 0, 0, 0, 0, 0,
    0, 0, 44, 32, 115, 101, 116, 116, 105, 110, 103, 32, 116, 111, 32, 37, 100,
    10, 0, 0, 0, 0, 0, 0, 0, 0, 85, 73, 95, 67,
  ],
  "i8",
  ALLOC_NONE,
  Runtime.GLOBAL_BASE + 51204
);
/* memory initializer */ allocate(
  [
    73, 78, 95, 80, 108, 97, 121, 67, 105, 110, 101, 109, 97, 116, 105, 99, 10,
    0, 0, 0, 74, 80, 69, 71, 77, 69, 77, 0, 82, 69, 67, 79, 82, 68, 73, 78, 71,
    32, 37, 115, 58, 32, 37, 105, 107, 0, 0, 0, 0, 0, 0, 0, 43, 98, 117, 116,
    116, 111, 110, 49, 51, 0, 0, 0, 0, 0, 0, 0, 50, 52, 0, 0, 0, 0, 0, 0, 105,
    110, 102, 105, 110, 105, 116, 121, 0, 0, 0, 0, 0, 0, 0, 0, 103, 108, 67,
    114, 101, 97, 116, 101, 83, 104, 97, 100, 101, 114, 79, 98, 106, 101, 99,
    116, 0, 0, 0, 0, 103, 114, 97, 112, 104, 115, 99, 97, 108, 101, 0, 0, 0, 0,
    0, 0, 103, 108, 85, 110, 105, 102, 111, 114, 109, 77, 97, 116, 114, 105,
    120, 52, 102, 118, 0, 0, 0, 0, 0, 0, 82, 101, 97, 100, 32, 102, 97, 105,
    108, 101, 100, 32, 111, 110, 32, 116, 101, 109, 112, 111, 114, 97, 114, 121,
    32, 102, 105, 108, 101, 0, 0, 0, 83, 68, 76, 95, 73, 110, 105, 116, 40, 32,
    83, 68, 76, 95, 73, 78, 73, 84, 95, 86, 73, 68, 69, 79, 32, 41, 32, 70, 65,
    73, 76, 69, 68, 32, 40, 37, 115, 41, 10, 0, 102, 108, 97, 114, 101, 83, 104,
    97, 100, 101, 114, 0, 0, 0, 0, 0, 114, 95, 99, 117, 115, 116, 111, 109, 119,
    105, 100, 116, 104, 0, 0, 0, 69, 109, 112, 116, 121, 32, 110, 97, 109, 101,
    32, 112, 97, 115, 115, 101, 100, 32, 116, 111, 32, 82, 69, 95, 82, 101, 103,
    105, 115, 116, 101, 114, 83, 107, 105, 110, 10, 0, 0, 0, 113, 103, 108, 69,
    110, 97, 98, 108, 101, 86, 101, 114, 116, 101, 120, 65, 116, 116, 114, 105,
    98, 65, 114, 114, 97, 121, 65, 82, 66, 40, 32, 65, 84, 84, 82, 95, 73, 78,
    68, 69, 88, 95, 67, 79, 76, 79, 82, 32, 41, 10, 0, 0, 0, 0, 0, 0, 37, 100,
    46, 37, 100, 0, 0, 0, 68, 67, 84, 32, 99, 111, 101, 102, 102, 105, 99, 105,
    101, 110, 116, 32, 111, 117, 116, 32, 111, 102, 32, 114, 97, 110, 103, 101,
    0, 0, 0, 0, 99, 97, 110, 39, 116, 32, 114, 101, 97, 100, 32, 116, 111, 107,
    101, 110, 0, 0, 0, 0, 0, 0, 0, 0, 117, 110, 107, 110, 111, 119, 110, 32, 37,
    115, 32, 105, 110, 32, 35, 105, 102, 47, 35, 101, 108, 105, 102, 0, 110,
    111, 32, 114, 99, 104, 97, 116, 115, 10, 0, 0, 0, 0, 0, 0, 94, 49, 69, 82,
    82, 79, 82, 58, 32, 70, 97, 105, 108, 101, 100, 32, 116, 111, 32, 112, 97,
    116, 99, 104, 32, 117, 105, 32, 114, 101, 115, 111, 108, 117, 116, 105, 111,
    110, 10, 0, 98, 97, 100, 32, 99, 111, 110, 110, 101, 99, 116, 105, 111, 110,
    108, 101, 115, 115, 32, 112, 97, 99, 107, 101, 116, 32, 102, 114, 111, 109,
    32, 37, 115, 58, 10, 37, 115, 10, 0, 0, 100, 105, 115, 99, 111, 110, 110,
    101, 99, 116, 32, 34, 37, 115, 34, 0, 37, 115, 58, 32, 100, 105, 100, 110,
    39, 116, 32, 103, 101, 116, 32, 99, 112, 32, 99, 111, 109, 109, 97, 110,
    100, 44, 32, 114, 101, 115, 101, 110, 100, 105, 110, 103, 32, 103, 97, 109,
    101, 115, 116, 97, 116, 101, 10, 0, 32, 37, 100, 32, 37, 100, 10, 0, 115,
    118, 95, 109, 97, 120, 99, 108, 105, 101, 110, 116, 115, 0, 0, 0, 69, 82,
    82, 79, 82, 58, 32, 83, 95, 65, 76, 95, 67, 104, 101, 99, 107, 73, 110, 112,
    117, 116, 58, 32, 98, 97, 100, 32, 101, 110, 116, 105, 116, 121, 110, 117,
    109, 32, 37, 105, 0, 0, 0, 0, 0, 0, 0, 0, 83, 121, 115, 95, 83, 116, 114,
    105, 110, 103, 84, 111, 83, 111, 99, 107, 97, 100, 100, 114, 58, 32, 69,
    114, 114, 111, 114, 32, 114, 101, 115, 111, 108, 118, 105, 110, 103, 32, 37,
    115, 58, 32, 37, 115, 10, 0, 0, 0, 74, 79, 89, 50, 53, 0, 0, 0, 82, 95, 67,
    114, 101, 97, 116, 101, 73, 66, 79, 58, 32, 34, 37, 115, 34, 32, 105, 115,
    32, 116, 111, 111, 32, 108, 111, 110, 103, 0, 0, 0, 32, 40, 37, 105, 32, 98,
    105, 116, 115, 41, 10, 0, 0, 0, 0, 0, 101, 120, 97, 109, 112, 108, 101, 58,
    32, 102, 100, 105, 114, 32, 42, 113, 51, 100, 109, 42, 46, 98, 115, 112, 10,
    0, 0, 0, 0, 0, 0, 0, 32, 111, 117, 116, 32, 111, 102, 32, 114, 97, 110, 103,
    101, 32, 40, 109, 97, 120, 32, 37, 102, 41, 0, 0, 115, 118, 99, 95, 100,
    111, 119, 110, 108, 111, 97, 100, 0, 0, 0, 0, 45, 98, 117, 116, 116, 111,
    110, 49, 50, 0, 0, 0, 0, 0, 0, 0, 99, 111, 109, 95, 122, 111, 110, 101, 77,
    101, 103, 115, 0, 0, 0, 0, 100, 101, 99, 97, 108, 0, 0, 0, 82, 95, 76, 111,
    97, 100, 73, 81, 77, 58, 32, 37, 115, 32, 104, 97, 115, 32, 37, 100, 32,
    112, 111, 115, 101, 115, 32, 97, 110, 100, 32, 37, 100, 32, 106, 111, 105,
    110, 116, 115, 44, 32, 109, 117, 115, 116, 32, 104, 97, 118, 101, 32, 116,
    104, 101, 32, 115, 97, 109, 101, 32, 110, 117, 109, 98, 101, 114, 32, 111,
    114, 32, 48, 32, 112, 111, 115, 101, 115, 10, 0, 77, 111, 100, 101, 108, 32,
    110, 97, 109, 101, 32, 101, 120, 99, 101, 101, 100, 115, 32, 77, 65, 88, 95,
    81, 80, 65, 84, 72, 10, 0, 0, 0, 103, 108, 85, 110, 105, 102, 111, 114, 109,
    77, 97, 116, 114, 105, 120, 51, 102, 118, 0, 0, 0, 0, 0, 0, 70, 97, 105,
    108, 101, 100, 32, 116, 111, 32, 99, 114, 101, 97, 116, 101, 32, 116, 101,
    109, 112, 111, 114, 97, 114, 121, 32, 102, 105, 108, 101, 32, 37, 115, 0, 0,
    0, 0, 0, 0, 46, 46, 46, 71, 76, 95, 69, 88, 84, 95, 116, 101, 120, 116, 117,
    114, 101, 95, 102, 105, 108, 116, 101, 114, 95, 97, 110, 105, 115, 111, 116,
    114, 111, 112, 105, 99, 32, 110, 111, 116, 32, 102, 111, 117, 110, 100, 10,
    0, 112, 114, 111, 106, 101, 99, 116, 105, 111, 110, 83, 104, 97, 100, 111,
    119, 0, 0, 0, 0, 0, 0, 0, 0, 114, 95, 110, 111, 98, 111, 114, 100, 101, 114,
    0, 0, 0, 0, 0, 0, 51, 46, 48, 0, 0, 0, 0, 0, 113, 103, 108, 68, 105, 115,
    97, 98, 108, 101, 86, 101, 114, 116, 101, 120, 65, 116, 116, 114, 105, 98,
    65, 114, 114, 97, 121, 65, 82, 66, 40, 32, 65, 84, 84, 82, 95, 73, 78, 68,
    69, 88, 95, 84, 65, 78, 71, 69, 78, 84, 32, 41, 10, 0, 0, 0, 71, 76, 95, 65,
    82, 66, 95, 115, 104, 97, 100, 105, 110, 103, 95, 108, 97, 110, 103, 117,
    97, 103, 101, 95, 49, 48, 48, 0, 0, 0, 0, 0, 112, 114, 105, 109, 105, 116,
    105, 118, 101, 32, 116, 111, 107, 101, 110, 32, 108, 111, 110, 103, 101,
    114, 32, 116, 104, 97, 110, 32, 77, 65, 88, 95, 84, 79, 75, 69, 78, 32, 61,
    32, 37, 100, 0, 0, 0, 0, 0, 0, 111, 117, 116, 32, 111, 102, 32, 111, 112,
    101, 114, 97, 116, 111, 114, 32, 115, 112, 97, 99, 101, 0, 0, 0, 62, 0, 0,
    0, 0, 0, 0, 0, 98, 97, 100, 32, 117, 105, 32, 112, 97, 116, 99, 104, 32,
    116, 121, 112, 101, 0, 0, 0, 0, 0, 0, 0, 100, 105, 115, 99, 111, 110, 110,
    101, 99, 116, 0, 0, 0, 0, 0, 0, 37, 105, 0, 0, 0, 0, 0, 0, 112, 114, 105,
    110, 116, 32, 34, 37, 115, 10, 34, 10, 0, 0, 0, 0, 99, 109, 100, 67, 111,
    117, 110, 116, 32, 62, 32, 77, 65, 88, 95, 80, 65, 67, 75, 69, 84, 95, 85,
    83, 69, 82, 67, 77, 68, 83, 10, 0, 76, 111, 97, 100, 84, 71, 65, 58, 32,
    105, 108, 108, 101, 103, 97, 108, 32, 112, 105, 120, 101, 108, 95, 115, 105,
    122, 101, 32, 39, 37, 100, 39, 32, 105, 110, 32, 102, 105, 108, 101, 32, 39,
    37, 115, 39, 0, 0, 0, 103, 95, 100, 111, 87, 97, 114, 109, 117, 112, 0, 0,
    0, 0, 0, 0, 76, 111, 97, 100, 66, 77, 80, 58, 32, 105, 108, 108, 101, 103,
    97, 108, 32, 112, 105, 120, 101, 108, 95, 115, 105, 122, 101, 32, 39, 37,
    104, 117, 39, 32, 105, 110, 32, 102, 105, 108, 101, 32, 39, 37, 115, 39, 0,
    0, 94, 51, 87, 65, 82, 78, 73, 78, 71, 58, 32, 70, 97, 105, 108, 101, 100,
    32, 116, 111, 32, 97, 108, 108, 111, 99, 97, 116, 101, 32, 115, 111, 117,
    114, 99, 101, 32, 102, 111, 114, 32, 108, 111, 111, 112, 32, 115, 102, 120,
    32, 37, 100, 32, 111, 110, 32, 101, 110, 116, 105, 116, 121, 32, 37, 100,
    10, 0, 0, 0, 0, 0, 0, 83, 121, 115, 95, 83, 116, 114, 105, 110, 103, 84,
    111, 83, 111, 99, 107, 97, 100, 100, 114, 58, 32, 69, 114, 114, 111, 114,
    32, 114, 101, 115, 111, 108, 118, 105, 110, 103, 32, 37, 115, 58, 32, 78,
    111, 32, 97, 100, 100, 114, 101, 115, 115, 32, 111, 102, 32, 114, 101, 113,
    117, 105, 114, 101, 100, 32, 116, 121, 112, 101, 32, 102, 111, 117, 110,
    100, 46, 10, 0, 0, 0, 74, 79, 89, 50, 52, 0, 0, 0, 37, 115, 58, 37, 102, 32,
    0, 0, 117, 115, 97, 103, 101, 58, 32, 102, 100, 105, 114, 32, 60, 102, 105,
    108, 116, 101, 114, 62, 10, 0, 0, 0, 32, 111, 117, 116, 32, 111, 102, 32,
    114, 97, 110, 103, 101, 32, 40, 109, 97, 120, 32, 37, 100, 41, 0, 0, 82,
    101, 102, 117, 115, 105, 110, 103, 32, 116, 111, 32, 115, 101, 116, 32, 116,
    114, 105, 108, 105, 110, 101, 97, 114, 32, 111, 110, 32, 97, 32, 118, 111,
    111, 100, 111, 111, 46, 10, 0, 116, 120, 116, 0, 0, 0, 0, 0, 43, 98, 117,
    116, 116, 111, 110, 49, 50, 0, 0, 0, 0, 0, 0, 0, 83, 109, 97, 108, 108, 32,
    122, 111, 110, 101, 32, 100, 97, 116, 97, 32, 102, 97, 105, 108, 101, 100,
    32, 116, 111, 32, 97, 108, 108, 111, 99, 97, 116, 101, 32, 37, 49, 46, 49,
    102, 32, 109, 101, 103, 115, 0, 0, 0, 71, 76, 83, 76, 95, 83, 101, 116, 85,
    110, 105, 102, 111, 114, 109, 70, 108, 111, 97, 116, 53, 58, 32, 119, 114,
    111, 110, 103, 32, 116, 121, 112, 101, 32, 102, 111, 114, 32, 117, 110, 105,
    102, 111, 114, 109, 32, 37, 105, 32, 105, 110, 32, 112, 114, 111, 103, 114,
    97, 109, 32, 37, 115, 10, 0, 82, 95, 67, 104, 101, 99, 107, 70, 66, 79, 58,
    32, 40, 37, 115, 41, 32, 70, 114, 97, 109, 101, 98, 117, 102, 102, 101, 114,
    32, 105, 110, 99, 111, 109, 112, 108, 101, 116, 101, 44, 32, 109, 105, 115,
    115, 105, 110, 103, 32, 114, 101, 97, 100, 32, 98, 117, 102, 102, 101, 114,
    10, 0, 0, 0, 71, 76, 95, 65, 82, 66, 95, 118, 101, 114, 116, 101, 120, 95,
    112, 114, 111, 103, 114, 97, 109, 0, 0, 0, 102, 108, 97, 114, 101, 32, 97,
    100, 100, 115, 58, 37, 105, 32, 116, 101, 115, 116, 115, 58, 37, 105, 32,
    114, 101, 110, 100, 101, 114, 115, 58, 37, 105, 10, 0, 0, 0, 0, 0, 0, 103,
    108, 85, 110, 105, 102, 111, 114, 109, 77, 97, 116, 114, 105, 120, 50, 102,
    118, 0, 0, 0, 0, 0, 0, 48, 0, 0, 0, 0, 0, 0, 0, 73, 110, 118, 97, 108, 105,
    100, 32, 74, 80, 69, 71, 32, 102, 105, 108, 101, 32, 115, 116, 114, 117, 99,
    116, 117, 114, 101, 58, 32, 83, 79, 83, 32, 98, 101, 102, 111, 114, 101, 32,
    83, 79, 70, 0, 0, 0, 0, 0, 113, 103, 108, 84, 101, 120, 83, 117, 98, 73,
    109, 97, 103, 101, 50, 68, 32, 37, 105, 44, 32, 37, 105, 58, 32, 37, 105,
    32, 109, 115, 101, 99, 10, 0, 0, 0, 0, 0, 0, 0, 46, 46, 46, 105, 103, 110,
    111, 114, 105, 110, 103, 32, 71, 76, 95, 69, 88, 84, 95, 116, 101, 120, 116,
    117, 114, 101, 95, 102, 105, 108, 116, 101, 114, 95, 97, 110, 105, 115, 111,
    116, 114, 111, 112, 105, 99, 10, 0, 0, 116, 111, 111, 32, 109, 97, 110, 121,
    32, 108, 101, 110, 103, 116, 104, 32, 111, 114, 32, 100, 105, 115, 116, 97,
    110, 99, 101, 32, 115, 121, 109, 98, 111, 108, 115, 0, 0, 0, 0, 0, 73, 110,
    105, 116, 105, 97, 108, 105, 122, 105, 110, 103, 32, 83, 104, 97, 100, 101,
    114, 115, 10, 0, 0, 0, 114, 95, 102, 117, 108, 108, 115, 99, 114, 101, 101,
    110, 0, 0, 0, 0, 48, 46, 53, 0, 0, 0, 0, 0, 113, 103, 108, 69, 110, 97, 98,
    108, 101, 86, 101, 114, 116, 101, 120, 65, 116, 116, 114, 105, 98, 65, 114,
    114, 97, 121, 65, 82, 66, 40, 32, 65, 84, 84, 82, 95, 73, 78, 68, 69, 88,
    95, 84, 65, 78, 71, 69, 78, 84, 32, 41, 10, 0, 0, 0, 0, 103, 108, 71, 101,
    116, 65, 116, 116, 114, 105, 98, 76, 111, 99, 97, 116, 105, 111, 110, 65,
    82, 66, 0, 0, 66, 111, 103, 117, 115, 32, 109, 101, 115, 115, 97, 103, 101,
    32, 99, 111, 100, 101, 32, 37, 100, 0, 0, 0, 105, 110, 118, 97, 108, 105,
    100, 32, 111, 112, 101, 114, 97, 116, 111, 114, 32, 37, 115, 32, 105, 110,
    32, 35, 105, 102, 47, 35, 101, 108, 105, 102, 0, 0, 0, 0, 0, 0, 0, 0, 70,
    111, 117, 110, 100, 32, 117, 105, 32, 98, 105, 97, 115, 32, 111, 102, 102,
    115, 101, 116, 32, 97, 116, 32, 48, 120, 37, 48, 56, 120, 10, 0, 114, 99,
    111, 110, 0, 0, 0, 0, 114, 101, 104, 97, 115, 104, 98, 97, 110, 115, 10, 0,
    0, 0, 0, 0, 99, 109, 100, 67, 111, 117, 110, 116, 32, 60, 32, 49, 10, 0, 0,
    0, 115, 112, 0, 0, 0, 0, 0, 0, 99, 111, 100, 101, 47, 99, 108, 105, 101,
    110, 116, 47, 115, 110, 100, 95, 111, 112, 101, 110, 97, 108, 46, 99, 0, 0,
    0, 0, 0, 0, 0, 0, 72, 111, 115, 116, 110, 97, 109, 101, 58, 32, 37, 115, 10,
    0, 0, 0, 74, 79, 89, 50, 51, 0, 0, 0, 37, 115, 58, 37, 105, 32, 0, 0, 37,
    115, 10, 0, 0, 0, 0, 0, 32, 111, 117, 116, 32, 111, 102, 32, 114, 97, 110,
    103, 101, 32, 40, 109, 105, 110, 32, 37, 102, 41, 0, 0, 101, 109, 115, 99,
    114, 105, 112, 116, 101, 110, 32, 0, 0, 0, 0, 0, 115, 95, 115, 100, 108, 68,
    101, 118, 83, 97, 109, 112, 115, 0, 0, 0, 45, 98, 117, 116, 116, 111, 110,
    49, 49, 0, 0, 0, 0, 0, 0, 0, 67, 111, 109, 95, 84, 111, 117, 99, 104, 77,
    101, 109, 111, 114, 121, 58, 32, 37, 105, 32, 109, 115, 101, 99, 10, 0, 0,
    0, 0, 0, 0, 0, 105, 110, 95, 109, 111, 117, 115, 101, 0, 0, 0, 0, 0, 0, 0,
    0, 118, 97, 108, 117, 101, 32, 37, 108, 100, 32, 111, 117, 116, 32, 111,
    102, 32, 114, 97, 110, 103, 101, 32, 91, 37, 108, 100, 44, 32, 37, 108, 100,
    93, 0, 0, 0, 0, 0, 0, 0, 62, 61, 0, 0, 0, 0, 0, 0, 103, 108, 85, 110, 105,
    102, 111, 114, 109, 52, 102, 118, 0, 0, 0, 0, 40, 0, 0, 0, 0, 0, 0, 0, 73,
    110, 118, 97, 108, 105, 100, 32, 74, 80, 69, 71, 32, 102, 105, 108, 101, 32,
    115, 116, 114, 117, 99, 116, 117, 114, 101, 58, 32, 116, 119, 111, 32, 83,
    79, 73, 32, 109, 97, 114, 107, 101, 114, 115, 0, 0, 0, 0, 79, 112, 101, 110,
    101, 100, 32, 108, 111, 103, 32, 37, 115, 10, 0, 0, 46, 46, 46, 117, 115,
    105, 110, 103, 32, 71, 76, 95, 69, 88, 84, 95, 116, 101, 120, 116, 117, 114,
    101, 95, 102, 105, 108, 116, 101, 114, 95, 97, 110, 105, 115, 111, 116, 114,
    111, 112, 105, 99, 32, 40, 109, 97, 120, 58, 32, 37, 105, 41, 10, 0, 0, 0,
    98, 97, 115, 101, 103, 97, 109, 101, 0, 0, 0, 0, 0, 0, 0, 0, 45, 45, 45, 45,
    45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 10, 0, 0, 0, 0, 0,
    45, 50, 0, 0, 0, 0, 0, 0, 97, 116, 116, 114, 105, 98, 117, 116, 101, 32,
    118, 101, 99, 51, 32, 97, 116, 116, 114, 95, 80, 111, 115, 105, 116, 105,
    111, 110, 59, 10, 97, 116, 116, 114, 105, 98, 117, 116, 101, 32, 118, 101,
    99, 52, 32, 97, 116, 116, 114, 95, 84, 101, 120, 67, 111, 111, 114, 100, 48,
    59, 10, 10, 117, 110, 105, 102, 111, 114, 109, 32, 109, 97, 116, 52, 32, 32,
    32, 117, 95, 77, 111, 100, 101, 108, 86, 105, 101, 119, 80, 114, 111, 106,
    101, 99, 116, 105, 111, 110, 77, 97, 116, 114, 105, 120, 59, 10, 10, 118,
    97, 114, 121, 105, 110, 103, 32, 118, 101, 99, 50, 32, 32, 32, 118, 97, 114,
    95, 84, 101, 120, 49, 59, 10, 10, 10, 118, 111, 105, 100, 32, 109, 97, 105,
    110, 40, 41, 10, 123, 10, 9, 103, 108, 95, 80, 111, 115, 105, 116, 105, 111,
    110, 32, 61, 32, 117, 95, 77, 111, 100, 101, 108, 86, 105, 101, 119, 80,
    114, 111, 106, 101, 99, 116, 105, 111, 110, 77, 97, 116, 114, 105, 120, 32,
    42, 32, 118, 101, 99, 52, 40, 97, 116, 116, 114, 95, 80, 111, 115, 105, 116,
    105, 111, 110, 44, 32, 49, 46, 48, 41, 59, 10, 9, 118, 97, 114, 95, 84, 101,
    120, 49, 32, 61, 32, 97, 116, 116, 114, 95, 84, 101, 120, 67, 111, 111, 114,
    100, 48, 46, 115, 116, 59, 10, 125, 10, 0, 0, 0, 0, 114, 95, 103, 97, 109,
    109, 97, 0, 44, 0, 0, 0, 0, 0, 0, 0, 117, 110, 105, 102, 111, 114, 109, 32,
    115, 97, 109, 112, 108, 101, 114, 50, 68, 32, 117, 95, 68, 105, 102, 102,
    117, 115, 101, 77, 97, 112, 59, 10, 117, 110, 105, 102, 111, 114, 109, 32,
    118, 101, 99, 52, 32, 32, 32, 32, 32, 32, 117, 95, 67, 111, 108, 111, 114,
    59, 10, 10, 118, 97, 114, 121, 105, 110, 103, 32, 118, 101, 99, 50, 32, 32,
    32, 32, 32, 32, 118, 97, 114, 95, 84, 101, 120, 49, 59, 10, 10, 10, 118,
    111, 105, 100, 32, 109, 97, 105, 110, 40, 41, 10, 123, 10, 9, 103, 108, 95,
    70, 114, 97, 103, 67, 111, 108, 111, 114, 32, 61, 32, 116, 101, 120, 116,
    117, 114, 101, 50, 68, 40, 117, 95, 68, 105, 102, 102, 117, 115, 101, 77,
    97, 112, 44, 32, 118, 97, 114, 95, 84, 101, 120, 49, 41, 32, 42, 32, 117,
    95, 67, 111, 108, 111, 114, 59, 10, 125, 10, 0, 113, 103, 108, 68, 105, 115,
    97, 98, 108, 101, 86, 101, 114, 116, 101, 120, 65, 116, 116, 114, 105, 98,
    65, 114, 114, 97, 121, 65, 82, 66, 40, 32, 65, 84, 84, 82, 95, 73, 78, 68,
    69, 88, 95, 78, 79, 82, 77, 65, 76, 32, 41, 10, 0, 0, 0, 0, 103, 108, 71,
    101, 116, 65, 99, 116, 105, 118, 101, 65, 116, 116, 114, 105, 98, 65, 82,
    66, 0, 0, 0, 0, 109, 97, 120, 95, 112, 114, 111, 106, 101, 99, 116, 105,
    108, 101, 105, 110, 102, 111, 0, 0, 0, 0, 0, 0, 102, 117, 110, 99, 95, 98,
    111, 98, 98, 105, 110, 103, 0, 0, 0, 0, 97, 116, 116, 114, 105, 98, 117,
    116, 101, 32, 118, 101, 99, 52, 32, 97, 116, 116, 114, 95, 84, 101, 120, 67,
    111, 111, 114, 100, 48, 59, 10, 35, 105, 102, 32, 100, 101, 102, 105, 110,
    101, 100, 40, 85, 83, 69, 95, 76, 73, 71, 72, 84, 77, 65, 80, 41, 32, 124,
    124, 32, 100, 101, 102, 105, 110, 101, 100, 40, 85, 83, 69, 95, 84, 67, 71,
    69, 78, 41, 10, 97, 116, 116, 114, 105, 98, 117, 116, 101, 32, 118, 101, 99,
    52, 32, 97, 116, 116, 114, 95, 84, 101, 120, 67, 111, 111, 114, 100, 49, 59,
    10, 35, 101, 110, 100, 105, 102, 10, 97, 116, 116, 114, 105, 98, 117, 116,
    101, 32, 118, 101, 99, 52, 32, 97, 116, 116, 114, 95, 67, 111, 108, 111,
    114, 59, 10, 10, 97, 116, 116, 114, 105, 98, 117, 116, 101, 32, 118, 101,
    99, 51, 32, 97, 116, 116, 114, 95, 80, 111, 115, 105, 116, 105, 111, 110,
    59, 10, 97, 116, 116, 114, 105, 98, 117, 116, 101, 32, 118, 101, 99, 51, 32,
    97, 116, 116, 114, 95, 78, 111, 114, 109, 97, 108, 59, 10, 35, 105, 102, 32,
    100, 101, 102, 105, 110, 101, 100, 40, 85, 83, 69, 95, 86, 69, 82, 84, 95,
    84, 65, 78, 71, 69, 78, 84, 95, 83, 80, 65, 67, 69, 41, 10, 97, 116, 116,
    114, 105, 98, 117, 116, 101, 32, 118, 101, 99, 52, 32, 97, 116, 116, 114,
    95, 84, 97, 110, 103, 101, 110, 116, 59, 10, 35, 101, 110, 100, 105, 102,
    10, 10, 35, 105, 102, 32, 100, 101, 102, 105, 110, 101, 100, 40, 85, 83, 69,
    95, 86, 69, 82, 84, 69, 88, 95, 65, 78, 73, 77, 65, 84, 73, 79, 78, 41, 10,
    97, 116, 116, 114, 105, 98, 117, 116, 101, 32, 118, 101, 99, 51, 32, 97,
    116, 116, 114, 95, 80, 111, 115, 105, 116, 105, 111, 110, 50, 59, 10, 97,
    116, 116, 114, 105, 98, 117, 116, 101, 32, 118, 101, 99, 51, 32, 97, 116,
    116, 114, 95, 78, 111, 114, 109, 97, 108, 50, 59, 10, 32, 32, 35, 105, 102,
    32, 100, 101, 102, 105, 110, 101, 100, 40, 85, 83, 69, 95, 86, 69, 82, 84,
    95, 84, 65, 78, 71, 69, 78, 84, 95, 83, 80, 65, 67, 69, 41, 10, 97, 116,
    116, 114, 105, 98, 117, 116, 101, 32, 118, 101, 99, 52, 32, 97, 116, 116,
    114, 95, 84, 97, 110, 103, 101, 110, 116, 50, 59, 10, 32, 32, 35, 101, 110,
    100, 105, 102, 10, 35, 101, 110, 100, 105, 102, 10, 10, 35, 105, 102, 32,
    100, 101, 102, 105, 110, 101, 100, 40, 85, 83, 69, 95, 76, 73, 71, 72, 84,
    41, 32, 38, 38, 32, 33, 100, 101, 102, 105, 110, 101, 100, 40, 85, 83, 69,
    95, 76, 73, 71, 72, 84, 95, 86, 69, 67, 84, 79, 82, 41, 10, 97, 116, 116,
    114, 105, 98, 117, 116, 101, 32, 118, 101, 99, 51, 32, 97, 116, 116, 114,
    95, 76, 105, 103, 104, 116, 68, 105, 114, 101, 99, 116, 105, 111, 110, 59,
    10, 35, 101, 110, 100, 105, 102, 10, 10, 35, 105, 102, 32, 100, 101, 102,
    105, 110, 101, 100, 40, 85, 83, 69, 95, 68, 69, 76, 85, 88, 69, 77, 65, 80,
    41, 10, 117, 110, 105, 102, 111, 114, 109, 32, 118, 101, 99, 52, 32, 32, 32,
    117, 95, 69, 110, 97, 98, 108, 101, 84, 101, 120, 116, 117, 114, 101, 115,
    59, 32, 47, 47, 32, 120, 32, 61, 32, 110, 111, 114, 109, 97, 108, 44, 32,
    121, 32, 61, 32, 100, 101, 108, 117, 120, 101, 44, 32, 122, 32, 61, 32, 115,
    112, 101, 99, 117, 108, 97, 114, 44, 32, 119, 32, 61, 32, 99, 117, 98, 101,
    10, 35, 101, 110, 100, 105, 102, 10, 10, 35, 105, 102, 32, 100, 101, 102,
    105, 110, 101, 100, 40, 85, 83, 69, 95, 76, 73, 71, 72, 84, 41, 32, 38, 38,
    32, 33, 100, 101, 102, 105, 110, 101, 100, 40, 85, 83, 69, 95, 70, 65, 83,
    84, 95, 76, 73, 71, 72, 84, 41, 10, 117, 110, 105, 102, 111, 114, 109, 32,
    118, 101, 99, 51, 32, 32, 32, 117, 95, 86, 105, 101, 119, 79, 114, 105, 103,
    105, 110, 59, 10, 35, 101, 110, 100, 105, 102, 10, 10, 35, 105, 102, 32,
    100, 101, 102, 105, 110, 101, 100, 40, 85, 83, 69, 95, 84, 67, 71, 69, 78,
    41, 10, 117, 110, 105, 102, 111, 114, 109, 32, 105, 110, 116, 32, 32, 32,
    32, 117, 95, 84, 67, 71, 101, 110, 48, 59, 10, 117, 110, 105, 102, 111, 114,
    109, 32, 118, 101, 99, 51, 32, 32, 32, 117, 95, 84, 67, 71, 101, 110, 48,
    86, 101, 99, 116, 111, 114, 48, 59, 10, 117, 110, 105, 102, 111, 114, 109,
    32, 118, 101, 99, 51, 32, 32, 32, 117, 95, 84, 67, 71, 101, 110, 48, 86,
    101, 99, 116, 111, 114, 49, 59, 10, 117, 110, 105, 102, 111, 114, 109, 32,
    118, 101, 99, 51, 32, 32, 32, 117, 95, 76, 111, 99, 97, 108, 86, 105, 101,
    119, 79, 114, 105, 103, 105, 110, 59, 10, 35, 101, 110, 100, 105, 102, 10,
    10, 35, 105, 102, 32, 100, 101, 102, 105, 110, 101, 100, 40, 85, 83, 69, 95,
    84, 67, 77, 79, 68, 41, 10, 117, 110, 105, 102, 111, 114, 109, 32, 118, 101,
    99, 52, 32, 32, 32, 117, 95, 68, 105, 102, 102, 117, 115, 101, 84, 101, 120,
    77, 97, 116, 114, 105, 120, 59, 10, 117, 110, 105, 102, 111, 114, 109, 32,
    118, 101, 99, 52, 32, 32, 32, 117, 95, 68, 105, 102, 102, 117, 115, 101, 84,
    101, 120, 79, 102, 102, 84, 117, 114, 98, 59, 10, 35, 101, 110, 100, 105,
    102, 10, 10, 117, 110, 105, 102, 111, 114, 109, 32, 109, 97, 116, 52, 32,
    32, 32, 117, 95, 77, 111, 100, 101, 108, 86, 105, 101, 119, 80, 114, 111,
    106, 101, 99, 116, 105, 111, 110, 77, 97, 116, 114, 105, 120, 59, 10, 117,
    110, 105, 102, 111, 114, 109, 32, 118, 101, 99, 52, 32, 32, 32, 117, 95, 66,
    97, 115, 101, 67, 111, 108, 111, 114, 59, 10, 117, 110, 105, 102, 111, 114,
    109, 32, 118, 101, 99, 52, 32, 32, 32, 117, 95, 86, 101, 114, 116, 67, 111,
    108, 111, 114, 59, 10, 10, 35, 105, 102, 32, 100, 101, 102, 105, 110, 101,
    100, 40, 85, 83, 69, 95, 77, 79, 68, 69, 76, 77, 65, 84, 82, 73, 88, 41, 10,
    117, 110, 105, 102, 111, 114, 109, 32, 109, 97, 116, 52, 32, 32, 32, 117,
    95, 77, 111, 100, 101, 108, 77, 97, 116, 114, 105, 120, 59, 10, 35, 101,
    110, 100, 105, 102, 10, 10, 35, 105, 102, 32, 100, 101, 102, 105, 110, 101,
    100, 40, 85, 83, 69, 95, 86, 69, 82, 84, 69, 88, 95, 65, 78, 73, 77, 65, 84,
    73, 79, 78, 41, 10, 117, 110, 105, 102, 111, 114, 109, 32, 102, 108, 111,
    97, 116, 32, 32, 117, 95, 86, 101, 114, 116, 101, 120, 76, 101, 114, 112,
    59, 10, 35, 101, 110, 100, 105, 102, 10, 10, 35, 105, 102, 32, 100, 101,
    102, 105, 110, 101, 100, 40, 85, 83, 69, 95, 76, 73, 71, 72, 84, 95, 86, 69,
    67, 84, 79, 82, 41, 10, 117, 110, 105, 102, 111, 114, 109, 32, 118, 101, 99,
    52, 32, 32, 32, 117, 95, 76, 105, 103, 104, 116, 79, 114, 105, 103, 105,
    110, 59, 10, 117, 110, 105, 102, 111, 114, 109, 32, 102, 108, 111, 97, 116,
    32, 32, 117, 95, 76, 105, 103, 104, 116, 82, 97, 100, 105, 117, 115, 59, 10,
    32, 32, 35, 105, 102, 32, 100, 101, 102, 105, 110, 101, 100, 40, 85, 83, 69,
    95, 70, 65, 83, 84, 95, 76, 73, 71, 72, 84, 41, 10, 117, 110, 105, 102, 111,
    114, 109, 32, 118, 101, 99, 51, 32, 32, 32, 117, 95, 68, 105, 114, 101, 99,
    116, 101, 100, 76, 105, 103, 104, 116, 59, 10, 117, 110, 105, 102, 111, 114,
    109, 32, 118, 101, 99, 51, 32, 32, 32, 117, 95, 65, 109, 98, 105, 101, 110,
    116, 76, 105, 103, 104, 116, 59, 10, 32, 32, 35, 101, 110, 100, 105, 102,
    10, 35, 101, 110, 100, 105, 102, 10, 10, 35, 105, 102, 32, 100, 101, 102,
    105, 110, 101, 100, 40, 85, 83, 69, 95, 80, 82, 73, 77, 65, 82, 89, 95, 76,
    73, 71, 72, 84, 41, 32, 124, 124, 32, 100, 101, 102, 105, 110, 101, 100, 40,
    85, 83, 69, 95, 83, 72, 65, 68, 79, 87, 77, 65, 80, 41, 10, 117, 110, 105,
    102, 111, 114, 109, 32, 118, 101, 99, 52, 32, 32, 117, 95, 80, 114, 105,
    109, 97, 114, 121, 76, 105, 103, 104, 116, 79, 114, 105, 103, 105, 110, 59,
    10, 117, 110, 105, 102, 111, 114, 109, 32, 102, 108, 111, 97, 116, 32, 117,
    95, 80, 114, 105, 109, 97, 114, 121, 76, 105, 103, 104, 116, 82, 97, 100,
    105, 117, 115, 59, 10, 35, 101, 110, 100, 105, 102, 10, 10, 118, 97, 114,
    121, 105, 110, 103, 32, 118, 101, 99, 52, 32, 32, 32, 118, 97, 114, 95, 84,
    101, 120, 67, 111, 111, 114, 100, 115, 59, 10, 10, 118, 97, 114, 121, 105,
    110, 103, 32, 118, 101, 99, 52, 32, 32, 32, 118, 97, 114, 95, 67, 111, 108,
    111, 114, 59, 10, 10, 35, 105, 102, 32, 100, 101, 102, 105, 110, 101, 100,
    40, 85, 83, 69, 95, 76, 73, 71, 72, 84, 41, 32, 38, 38, 32, 33, 100, 101,
    102, 105, 110, 101, 100, 40, 85, 83, 69, 95, 70, 65, 83, 84, 95, 76, 73, 71,
    72, 84, 41, 10, 32, 32, 35, 105, 102, 32, 100, 101, 102, 105, 110, 101, 100,
    40, 85, 83, 69, 95, 86, 69, 82, 84, 95, 84, 65, 78, 71, 69, 78, 84, 95, 83,
    80, 65, 67, 69, 41, 10, 118, 97, 114, 121, 105, 110, 103, 32, 118, 101, 99,
    52, 32, 32, 32, 118, 97, 114, 95, 78, 111, 114, 109, 97, 108, 59, 10, 118,
    97, 114, 121, 105, 110, 103, 32, 118, 101, 99, 52, 32, 32, 32, 118, 97, 114,
    95, 84, 97, 110, 103, 101, 110, 116, 59, 10, 118, 97, 114, 121, 105, 110,
    103, 32, 118, 101, 99, 52, 32, 32, 32, 118, 97, 114, 95, 66, 105, 116, 97,
    110, 103, 101, 110, 116, 59, 10, 32, 32, 35, 101, 108, 115, 101, 10, 118,
    97, 114, 121, 105, 110, 103, 32, 118, 101, 99, 51, 32, 32, 32, 118, 97, 114,
    95, 78, 111, 114, 109, 97, 108, 59, 10, 118, 97, 114, 121, 105, 110, 103,
    32, 118, 101, 99, 51, 32, 32, 32, 118, 97, 114, 95, 86, 105, 101, 119, 68,
    105, 114, 59, 10, 32, 32, 35, 101, 110, 100, 105, 102, 10, 35, 101, 110,
    100, 105, 102, 10, 10, 35, 105, 102, 32, 100, 101, 102, 105, 110, 101, 100,
    40, 85, 83, 69, 95, 76, 73, 71, 72, 84, 95, 86, 69, 82, 84, 69, 88, 41, 32,
    38, 38, 32, 33, 100, 101, 102, 105, 110, 101, 100, 40, 85, 83, 69, 95, 70,
    65, 83, 84, 95, 76, 73, 71, 72, 84, 41, 10, 118, 97, 114, 121, 105, 110,
    103, 32, 118, 101, 99, 51, 32, 32, 32, 118, 97, 114, 95, 76, 105, 103, 104,
    116, 67, 111, 108, 111, 114, 59, 10, 35, 101, 110, 100, 105, 102, 10, 10,
    35, 105, 102, 32, 100, 101, 102, 105, 110, 101, 100, 40, 85, 83, 69, 95, 76,
    73, 71, 72, 84, 41, 32, 38, 38, 32, 33, 100, 101, 102, 105, 110, 101, 100,
    40, 85, 83, 69, 95, 70, 65, 83, 84, 95, 76, 73, 71, 72, 84, 41, 10, 118, 97,
    114, 121, 105, 110, 103, 32, 118, 101, 99, 52, 32, 32, 32, 118, 97, 114, 95,
    76, 105, 103, 104, 116, 68, 105, 114, 59, 10, 35, 101, 110, 100, 105, 102,
    10, 10, 35, 105, 102, 32, 100, 101, 102, 105, 110, 101, 100, 40, 85, 83, 69,
    95, 80, 82, 73, 77, 65, 82, 89, 95, 76, 73, 71, 72, 84, 41, 32, 124, 124,
    32, 100, 101, 102, 105, 110, 101, 100, 40, 85, 83, 69, 95, 83, 72, 65, 68,
    79, 87, 77, 65, 80, 41, 10, 118, 97, 114, 121, 105, 110, 103, 32, 118, 101,
    99, 52, 32, 32, 32, 118, 97, 114, 95, 80, 114, 105, 109, 97, 114, 121, 76,
    105, 103, 104, 116, 68, 105, 114, 59, 10, 35, 101, 110, 100, 105, 102, 10,
    10, 35, 105, 102, 32, 100, 101, 102, 105, 110, 101, 100, 40, 85, 83, 69, 95,
    84, 67, 71, 69, 78, 41, 10, 118, 101, 99, 50, 32, 71, 101, 110, 84, 101,
    120, 67, 111, 111, 114, 100, 115, 40, 105, 110, 116, 32, 84, 67, 71, 101,
    110, 44, 32, 118, 101, 99, 51, 32, 112, 111, 115, 105, 116, 105, 111, 110,
    44, 32, 118, 101, 99, 51, 32, 110, 111, 114, 109, 97, 108, 44, 32, 118, 101,
    99, 51, 32, 84, 67, 71, 101, 110, 86, 101, 99, 116, 111, 114, 48, 44, 32,
    118, 101, 99, 51, 32, 84, 67, 71, 101, 110, 86, 101, 99, 116, 111, 114, 49,
    41, 10, 123, 10, 9, 118, 101, 99, 50, 32, 116, 101, 120, 32, 61, 32, 97,
    116, 116, 114, 95, 84, 101, 120, 67, 111, 111, 114, 100, 48, 46, 115, 116,
    59, 10, 10, 9, 105, 102, 32, 40, 84, 67, 71, 101, 110, 32, 61, 61, 32, 84,
    67, 71, 69, 78, 95, 76, 73, 71, 72, 84, 77, 65, 80, 41, 10, 9, 123, 10, 9,
    9, 116, 101, 120, 32, 61, 32, 97, 116, 116, 114, 95, 84, 101, 120, 67, 111,
    111, 114, 100, 49, 46, 115, 116, 59, 10, 9, 125, 10, 9, 101, 108, 115, 101,
    32, 105, 102, 32, 40, 84, 67, 71, 101, 110, 32, 61, 61, 32, 84, 67, 71, 69,
    78, 95, 69, 78, 86, 73, 82, 79, 78, 77, 69, 78, 84, 95, 77, 65, 80, 80, 69,
    68, 41, 10, 9, 123, 10, 9, 9, 118, 101, 99, 51, 32, 118, 105, 101, 119, 101,
    114, 32, 61, 32, 110, 111, 114, 109, 97, 108, 105, 122, 101, 40, 117, 95,
    76, 111, 99, 97, 108, 86, 105, 101, 119, 79, 114, 105, 103, 105, 110, 32,
    45, 32, 112, 111, 115, 105, 116, 105, 111, 110, 41, 59, 10, 9, 9, 118, 101,
    99, 50, 32, 114, 101, 102, 32, 61, 32, 114, 101, 102, 108, 101, 99, 116, 40,
    118, 105, 101, 119, 101, 114, 44, 32, 110, 111, 114, 109, 97, 108, 41, 46,
    121, 122, 59, 10, 9, 9, 116, 101, 120, 46, 115, 32, 61, 32, 114, 101, 102,
    46, 120, 32, 42, 32, 45, 48, 46, 53, 32, 43, 32, 48, 46, 53, 59, 10, 9, 9,
    116, 101, 120, 46, 116, 32, 61, 32, 114, 101, 102, 46, 121, 32, 42, 32, 32,
    48, 46, 53, 32, 43, 32, 48, 46, 53, 59, 10, 9, 125, 10, 9, 101, 108, 115,
    101, 32, 105, 102, 32, 40, 84, 67, 71, 101, 110, 32, 61, 61, 32, 84, 67, 71,
    69, 78, 95, 86, 69, 67, 84, 79, 82, 41, 10, 9, 123, 10, 9, 9, 116, 101, 120,
    32, 61, 32, 118, 101, 99, 50, 40, 100, 111, 116, 40, 112, 111, 115, 105,
    116, 105, 111, 110, 44, 32, 84, 67, 71, 101, 110, 86, 101, 99, 116, 111,
    114, 48, 41, 44, 32, 100, 111, 116, 40, 112, 111, 115, 105, 116, 105, 111,
    110, 44, 32, 84, 67, 71, 101, 110, 86, 101, 99, 116, 111, 114, 49, 41, 41,
    59, 10, 9, 125, 10, 10, 9, 114, 101, 116, 117, 114, 110, 32, 116, 101, 120,
    59, 10, 125, 10, 35, 101, 110, 100, 105, 102, 10, 10, 35, 105, 102, 32, 100,
    101, 102, 105, 110, 101, 100, 40, 85, 83, 69, 95, 84, 67, 77, 79, 68, 41,
    10, 118, 101, 99, 50, 32, 77, 111, 100, 84, 101, 120, 67, 111, 111, 114,
    100, 115, 40, 118, 101, 99, 50, 32, 115, 116, 44, 32, 118, 101, 99, 51, 32,
    112, 111, 115, 105, 116, 105, 111, 110, 44, 32, 118, 101, 99, 52, 32, 116,
    101, 120, 77, 97, 116, 114, 105, 120, 44, 32, 118, 101, 99, 52, 32, 111,
    102, 102, 84, 117, 114, 98, 41, 10, 123, 10, 9, 102, 108, 111, 97, 116, 32,
    97, 109, 112, 108, 105, 116, 117, 100, 101, 32, 61, 32, 111, 102, 102, 84,
    117, 114, 98, 46, 122, 59, 10, 9, 102, 108, 111, 97, 116, 32, 112, 104, 97,
    115, 101, 32, 61, 32, 111, 102, 102, 84, 117, 114, 98, 46, 119, 32, 42, 32,
    50, 46, 48, 32, 42, 32, 77, 95, 80, 73, 59, 10, 9, 118, 101, 99, 50, 32,
    115, 116, 50, 59, 10, 9, 115, 116, 50, 46, 120, 32, 61, 32, 115, 116, 46,
    120, 32, 42, 32, 116, 101, 120, 77, 97, 116, 114, 105, 120, 46, 120, 32, 43,
    32, 40, 115, 116, 46, 121, 32, 42, 32, 116, 101, 120, 77, 97, 116, 114, 105,
    120, 46, 122, 32, 43, 32, 111, 102, 102, 84, 117, 114, 98, 46, 120, 41, 59,
    10, 9, 115, 116, 50, 46, 121, 32, 61, 32, 115, 116, 46, 120, 32, 42, 32,
    116, 101, 120, 77, 97, 116, 114, 105, 120, 46, 121, 32, 43, 32, 40, 115,
    116, 46, 121, 32, 42, 32, 116, 101, 120, 77, 97, 116, 114, 105, 120, 46,
    119, 32, 43, 32, 111, 102, 102, 84, 117, 114, 98, 46, 121, 41, 59, 10, 10,
    9, 118, 101, 99, 50, 32, 111, 102, 102, 115, 101, 116, 80, 111, 115, 32, 61,
    32, 118, 101, 99, 50, 40, 112, 111, 115, 105, 116, 105, 111, 110, 46, 120,
    32, 43, 32, 112, 111, 115, 105, 116, 105, 111, 110, 46, 122, 44, 32, 112,
    111, 115, 105, 116, 105, 111, 110, 46, 121, 41, 59, 10, 10, 9, 118, 101, 99,
    50, 32, 116, 101, 120, 79, 102, 102, 115, 101, 116, 32, 61, 32, 115, 105,
    110, 40, 111, 102, 102, 115, 101, 116, 80, 111, 115, 32, 42, 32, 40, 50, 46,
    48, 32, 42, 32, 77, 95, 80, 73, 32, 47, 32, 49, 48, 50, 52, 46, 48, 41, 32,
    43, 32, 118, 101, 99, 50, 40, 112, 104, 97, 115, 101, 41, 41, 59, 10, 10, 9,
    114, 101, 116, 117, 114, 110, 32, 115, 116, 50, 32, 43, 32, 116, 101, 120,
    79, 102, 102, 115, 101, 116, 32, 42, 32, 97, 109, 112, 108, 105, 116, 117,
    100, 101, 59, 9, 10, 125, 10, 35, 101, 110, 100, 105, 102, 10, 10, 10, 102,
    108, 111, 97, 116, 32, 67, 97, 108, 99, 76, 105, 103, 104, 116, 65, 116,
    116, 101, 110, 117, 97, 116, 105, 111, 110, 40, 102, 108, 111, 97, 116, 32,
    112, 111, 105, 110, 116, 44, 32, 102, 108, 111, 97, 116, 32, 110, 111, 114,
    109, 68, 105, 115, 116, 41, 10, 123, 10, 9, 47, 47, 32, 122, 101, 114, 111,
    32, 108, 105, 103, 104, 116, 32, 97, 116, 32, 49, 46, 48, 44, 32, 97, 112,
    112, 114, 111, 120, 105, 109, 97, 116, 105, 110, 103, 32, 113, 51, 32, 115,
    116, 121, 108, 101, 10, 9, 47, 47, 32, 97, 108, 115, 111, 32, 100, 111, 110,
    39, 116, 32, 97, 116, 116, 101, 110, 117, 97, 116, 101, 32, 100, 105, 114,
    101, 99, 116, 105, 111, 110, 97, 108, 32, 108, 105, 103, 104, 116, 10, 9,
    102, 108, 111, 97, 116, 32, 97, 116, 116, 101, 110, 117, 97, 116, 105, 111,
    110, 32, 61, 32, 40, 48, 46, 53, 32, 42, 32, 110, 111, 114, 109, 68, 105,
    115, 116, 32, 45, 32, 49, 46, 53, 41, 32, 42, 32, 112, 111, 105, 110, 116,
    32, 43, 32, 49, 46, 48, 59, 10, 10, 9, 47, 47, 32, 99, 108, 97, 109, 112,
    32, 97, 116, 116, 101, 110, 117, 97, 116, 105, 111, 110, 10, 9, 35, 105,
    102, 32, 100, 101, 102, 105, 110, 101, 100, 40, 78, 79, 95, 76, 73, 71, 72,
    84, 95, 67, 76, 65, 77, 80, 41, 10, 9, 97, 116, 116, 101, 110, 117, 97, 116,
    105, 111, 110, 32, 61, 32, 109, 97, 120, 40, 97, 116, 116, 101, 110, 117,
    97, 116, 105, 111, 110, 44, 32, 48, 46, 48, 41, 59, 10, 9, 35, 101, 108,
    115, 101, 10, 9, 97, 116, 116, 101, 110, 117, 97, 116, 105, 111, 110, 32,
    61, 32, 99, 108, 97, 109, 112, 40, 97, 116, 116, 101, 110, 117, 97, 116,
    105, 111, 110, 44, 32, 48, 46, 48, 44, 32, 49, 46, 48, 41, 59, 10, 9, 35,
    101, 110, 100, 105, 102, 10, 10, 9, 114, 101, 116, 117, 114, 110, 32, 97,
    116, 116, 101, 110, 117, 97, 116, 105, 111, 110, 59, 10, 125, 10, 10, 10,
    118, 111, 105, 100, 32, 109, 97, 105, 110, 40, 41, 10, 123, 10, 35, 105,
    102, 32, 100, 101, 102, 105, 110, 101, 100, 40, 85, 83, 69, 95, 86, 69, 82,
    84, 69, 88, 95, 65, 78, 73, 77, 65, 84, 73, 79, 78, 41, 10, 9, 118, 101, 99,
    51, 32, 112, 111, 115, 105, 116, 105, 111, 110, 32, 32, 61, 32, 109, 105,
    120, 40, 97, 116, 116, 114, 95, 80, 111, 115, 105, 116, 105, 111, 110, 44,
    32, 32, 32, 32, 97, 116, 116, 114, 95, 80, 111, 115, 105, 116, 105, 111,
    110, 50, 44, 32, 32, 32, 32, 117, 95, 86, 101, 114, 116, 101, 120, 76, 101,
    114, 112, 41, 59, 10, 9, 118, 101, 99, 51, 32, 110, 111, 114, 109, 97, 108,
    32, 32, 32, 32, 61, 32, 109, 105, 120, 40, 97, 116, 116, 114, 95, 78, 111,
    114, 109, 97, 108, 44, 32, 32, 32, 32, 32, 32, 97, 116, 116, 114, 95, 78,
    111, 114, 109, 97, 108, 50, 44, 32, 32, 32, 32, 32, 32, 117, 95, 86, 101,
    114, 116, 101, 120, 76, 101, 114, 112, 41, 59, 10, 32, 32, 35, 105, 102, 32,
    100, 101, 102, 105, 110, 101, 100, 40, 85, 83, 69, 95, 86, 69, 82, 84, 95,
    84, 65, 78, 71, 69, 78, 84, 95, 83, 80, 65, 67, 69, 41, 32, 38, 38, 32, 100,
    101, 102, 105, 110, 101, 100, 40, 85, 83, 69, 95, 76, 73, 71, 72, 84, 41,
    32, 38, 38, 32, 33, 100, 101, 102, 105, 110, 101, 100, 40, 85, 83, 69, 95,
    70, 65, 83, 84, 95, 76, 73, 71, 72, 84, 41, 10, 9, 118, 101, 99, 51, 32,
    116, 97, 110, 103, 101, 110, 116, 32, 32, 32, 61, 32, 109, 105, 120, 40, 97,
    116, 116, 114, 95, 84, 97, 110, 103, 101, 110, 116, 46, 120, 121, 122, 44,
    32, 97, 116, 116, 114, 95, 84, 97, 110, 103, 101, 110, 116, 50, 46, 120,
    121, 122, 44, 32, 117, 95, 86, 101, 114, 116, 101, 120, 76, 101, 114, 112,
    41, 59, 10, 32, 32, 35, 101, 110, 100, 105, 102, 10, 35, 101, 108, 115, 101,
    10, 9, 118, 101, 99, 51, 32, 112, 111, 115, 105, 116, 105, 111, 110, 32, 32,
    61, 32, 97, 116, 116, 114, 95, 80, 111, 115, 105, 116, 105, 111, 110, 59,
    10, 9, 118, 101, 99, 51, 32, 110, 111, 114, 109, 97, 108, 32, 32, 32, 32,
    61, 32, 97, 116, 116, 114, 95, 78, 111, 114, 109, 97, 108, 59, 10, 32, 32,
    35, 105, 102, 32, 100, 101, 102, 105, 110, 101, 100, 40, 85, 83, 69, 95, 86,
    69, 82, 84, 95, 84, 65, 78, 71, 69, 78, 84, 95, 83, 80, 65, 67, 69, 41, 32,
    38, 38, 32, 100, 101, 102, 105, 110, 101, 100, 40, 85, 83, 69, 95, 76, 73,
    71, 72, 84, 41, 32, 38, 38, 32, 33, 100, 101, 102, 105, 110, 101, 100, 40,
    85, 83, 69, 95, 70, 65, 83, 84, 95, 76, 73, 71, 72, 84, 41, 10, 9, 118, 101,
    99, 51, 32, 116, 97, 110, 103, 101, 110, 116, 32, 32, 32, 61, 32, 97, 116,
    116, 114, 95, 84, 97, 110, 103, 101, 110, 116, 46, 120, 121, 122, 59, 10,
    32, 32, 35, 101, 110, 100, 105, 102, 10, 35, 101, 110, 100, 105, 102, 10,
    10, 9, 110, 111, 114, 109, 97, 108, 32, 32, 61, 32, 110, 111, 114, 109, 97,
    108, 32, 32, 42, 32, 50, 46, 48, 32, 45, 32, 118, 101, 99, 51, 40, 49, 46,
    48, 41, 59, 10, 35, 105, 102, 32, 100, 101, 102, 105, 110, 101, 100, 40, 85,
    83, 69, 95, 86, 69, 82, 84, 95, 84, 65, 78, 71, 69, 78, 84, 95, 83, 80, 65,
    67, 69, 41, 32, 38, 38, 32, 100, 101, 102, 105, 110, 101, 100, 40, 85, 83,
    69, 95, 76, 73, 71, 72, 84, 41, 32, 38, 38, 32, 33, 100, 101, 102, 105, 110,
    101, 100, 40, 85, 83, 69, 95, 70, 65, 83, 84, 95, 76, 73, 71, 72, 84, 41,
    10, 9, 116, 97, 110, 103, 101, 110, 116, 32, 61, 32, 116, 97, 110, 103, 101,
    110, 116, 32, 42, 32, 50, 46, 48, 32, 45, 32, 118, 101, 99, 51, 40, 49, 46,
    48, 41, 59, 10, 35, 101, 110, 100, 105, 102, 10, 10, 35, 105, 102, 32, 100,
    101, 102, 105, 110, 101, 100, 40, 85, 83, 69, 95, 84, 67, 71, 69, 78, 41,
    10, 9, 118, 101, 99, 50, 32, 116, 101, 120, 67, 111, 111, 114, 100, 115, 32,
    61, 32, 71, 101, 110, 84, 101, 120, 67, 111, 111, 114, 100, 115, 40, 117,
    95, 84, 67, 71, 101, 110, 48, 44, 32, 112, 111, 115, 105, 116, 105, 111,
    110, 44, 32, 110, 111, 114, 109, 97, 108, 44, 32, 117, 95, 84, 67, 71, 101,
    110, 48, 86, 101, 99, 116, 111, 114, 48, 44, 32, 117, 95, 84, 67, 71, 101,
    110, 48, 86, 101, 99, 116, 111, 114, 49, 41, 59, 10, 35, 101, 108, 115, 101,
    10, 9, 118, 101, 99, 50, 32, 116, 101, 120, 67, 111, 111, 114, 100, 115, 32,
    61, 32, 97, 116, 116, 114, 95, 84, 101, 120, 67, 111, 111, 114, 100, 48, 46,
    115, 116, 59, 10, 35, 101, 110, 100, 105, 102, 10, 10, 35, 105, 102, 32,
    100, 101, 102, 105, 110, 101, 100, 40, 85, 83, 69, 95, 84, 67, 77, 79, 68,
    41, 10, 9, 118, 97, 114, 95, 84, 101, 120, 67, 111, 111, 114, 100, 115, 46,
    120, 121, 32, 61, 32, 77, 111, 100, 84, 101, 120, 67, 111, 111, 114, 100,
    115, 40, 116, 101, 120, 67, 111, 111, 114, 100, 115, 44, 32, 112, 111, 115,
    105, 116, 105, 111, 110, 44, 32, 117, 95, 68, 105, 102, 102, 117, 115, 101,
    84, 101, 120, 77, 97, 116, 114, 105, 120, 44, 32, 117, 95, 68, 105, 102,
    102, 117, 115, 101, 84, 101, 120, 79, 102, 102, 84, 117, 114, 98, 41, 59,
    10, 35, 101, 108, 115, 101, 10, 9, 118, 97, 114, 95, 84, 101, 120, 67, 111,
    111, 114, 100, 115, 46, 120, 121, 32, 61, 32, 116, 101, 120, 67, 111, 111,
    114, 100, 115, 59, 10, 35, 101, 110, 100, 105, 102, 10, 10, 9, 103, 108, 95,
    80, 111, 115, 105, 116, 105, 111, 110, 32, 61, 32, 117, 95, 77, 111, 100,
    101, 108, 86, 105, 101, 119, 80, 114, 111, 106, 101, 99, 116, 105, 111, 110,
    77, 97, 116, 114, 105, 120, 32, 42, 32, 118, 101, 99, 52, 40, 112, 111, 115,
    105, 116, 105, 111, 110, 44, 32, 49, 46, 48, 41, 59, 10, 10, 35, 105, 102,
    32, 100, 101, 102, 105, 110, 101, 100, 40, 85, 83, 69, 95, 77, 79, 68, 69,
    76, 77, 65, 84, 82, 73, 88, 41, 10, 9, 112, 111, 115, 105, 116, 105, 111,
    110, 32, 32, 61, 32, 40, 117, 95, 77, 111, 100, 101, 108, 77, 97, 116, 114,
    105, 120, 32, 42, 32, 118, 101, 99, 52, 40, 112, 111, 115, 105, 116, 105,
    111, 110, 44, 32, 49, 46, 48, 41, 41, 46, 120, 121, 122, 59, 10, 9, 110,
    111, 114, 109, 97, 108, 32, 32, 32, 32, 61, 32, 40, 117, 95, 77, 111, 100,
    101, 108, 77, 97, 116, 114, 105, 120, 32, 42, 32, 118, 101, 99, 52, 40, 110,
    111, 114, 109, 97, 108, 44, 32, 32, 32, 48, 46, 48, 41, 41, 46, 120, 121,
    122, 59, 10, 32, 32, 35, 105, 102, 32, 100, 101, 102, 105, 110, 101, 100,
    40, 85, 83, 69, 95, 86, 69, 82, 84, 95, 84, 65, 78, 71, 69, 78, 84, 95, 83,
    80, 65, 67, 69, 41, 32, 38, 38, 32, 100, 101, 102, 105, 110, 101, 100, 40,
    85, 83, 69, 95, 76, 73, 71, 72, 84, 41, 32, 38, 38, 32, 33, 100, 101, 102,
    105, 110, 101, 100, 40, 85, 83, 69, 95, 70, 65, 83, 84, 95, 76, 73, 71, 72,
    84, 41, 10, 9, 116, 97, 110, 103, 101, 110, 116, 32, 32, 32, 61, 32, 40,
    117, 95, 77, 111, 100, 101, 108, 77, 97, 116, 114, 105, 120, 32, 42, 32,
    118, 101, 99, 52, 40, 116, 97, 110, 103, 101, 110, 116, 44, 32, 32, 48, 46,
    48, 41, 41, 46, 120, 121, 122, 59, 10, 32, 32, 35, 101, 110, 100, 105, 102,
    10, 35, 101, 110, 100, 105, 102, 10, 10, 35, 105, 102, 32, 100, 101, 102,
    105, 110, 101, 100, 40, 85, 83, 69, 95, 86, 69, 82, 84, 95, 84, 65, 78, 71,
    69, 78, 84, 95, 83, 80, 65, 67, 69, 41, 32, 38, 38, 32, 100, 101, 102, 105,
    110, 101, 100, 40, 85, 83, 69, 95, 76, 73, 71, 72, 84, 41, 32, 38, 38, 32,
    33, 100, 101, 102, 105, 110, 101, 100, 40, 85, 83, 69, 95, 70, 65, 83, 84,
    95, 76, 73, 71, 72, 84, 41, 10, 9, 118, 101, 99, 51, 32, 98, 105, 116, 97,
    110, 103, 101, 110, 116, 32, 61, 32, 99, 114, 111, 115, 115, 40, 110, 111,
    114, 109, 97, 108, 44, 32, 116, 97, 110, 103, 101, 110, 116, 41, 32, 42, 32,
    40, 97, 116, 116, 114, 95, 84, 97, 110, 103, 101, 110, 116, 46, 119, 32, 42,
    32, 50, 46, 48, 32, 45, 32, 49, 46, 48, 41, 59, 10, 35, 101, 110, 100, 105,
    102, 10, 10, 35, 105, 102, 32, 100, 101, 102, 105, 110, 101, 100, 40, 85,
    83, 69, 95, 76, 73, 71, 72, 84, 95, 86, 69, 67, 84, 79, 82, 41, 10, 9, 118,
    101, 99, 51, 32, 76, 32, 61, 32, 117, 95, 76, 105, 103, 104, 116, 79, 114,
    105, 103, 105, 110, 46, 120, 121, 122, 32, 45, 32, 40, 112, 111, 115, 105,
    116, 105, 111, 110, 32, 42, 32, 117, 95, 76, 105, 103, 104, 116, 79, 114,
    105, 103, 105, 110, 46, 119, 41, 59, 10, 35, 101, 108, 105, 102, 32, 100,
    101, 102, 105, 110, 101, 100, 40, 85, 83, 69, 95, 76, 73, 71, 72, 84, 41,
    32, 38, 38, 32, 33, 100, 101, 102, 105, 110, 101, 100, 40, 85, 83, 69, 95,
    70, 65, 83, 84, 95, 76, 73, 71, 72, 84, 41, 10, 9, 118, 101, 99, 51, 32, 76,
    32, 61, 32, 97, 116, 116, 114, 95, 76, 105, 103, 104, 116, 68, 105, 114,
    101, 99, 116, 105, 111, 110, 32, 42, 32, 50, 46, 48, 32, 45, 32, 118, 101,
    99, 51, 40, 49, 46, 48, 41, 59, 10, 32, 32, 35, 105, 102, 32, 100, 101, 102,
    105, 110, 101, 100, 40, 85, 83, 69, 95, 77, 79, 68, 69, 76, 77, 65, 84, 82,
    73, 88, 41, 10, 9, 76, 32, 61, 32, 40, 117, 95, 77, 111, 100, 101, 108, 77,
    97, 116, 114, 105, 120, 32, 42, 32, 118, 101, 99, 52, 40, 76, 44, 32, 48,
    46, 48, 41, 41, 46, 120, 121, 122, 59, 10, 32, 32, 35, 101, 110, 100, 105,
    102, 10, 35, 101, 110, 100, 105, 102, 10, 10, 35, 105, 102, 32, 100, 101,
    102, 105, 110, 101, 100, 40, 85, 83, 69, 95, 76, 73, 71, 72, 84, 77, 65, 80,
    41, 10, 9, 118, 97, 114, 95, 84, 101, 120, 67, 111, 111, 114, 100, 115, 46,
    122, 119, 32, 61, 32, 97, 116, 116, 114, 95, 84, 101, 120, 67, 111, 111,
    114, 100, 49, 46, 115, 116, 59, 10, 35, 101, 110, 100, 105, 102, 10, 10, 9,
    118, 97, 114, 95, 67, 111, 108, 111, 114, 32, 61, 32, 117, 95, 86, 101, 114,
    116, 67, 111, 108, 111, 114, 32, 42, 32, 97, 116, 116, 114, 95, 67, 111,
    108, 111, 114, 32, 43, 32, 117, 95, 66, 97, 115, 101, 67, 111, 108, 111,
    114, 59, 10, 35, 105, 102, 32, 100, 101, 102, 105, 110, 101, 100, 40, 85,
    83, 69, 95, 76, 73, 71, 72, 84, 95, 86, 69, 82, 84, 69, 88, 41, 32, 38, 38,
    32, 33, 100, 101, 102, 105, 110, 101, 100, 40, 85, 83, 69, 95, 70, 65, 83,
    84, 95, 76, 73, 71, 72, 84, 41, 10, 9, 118, 97, 114, 95, 76, 105, 103, 104,
    116, 67, 111, 108, 111, 114, 32, 61, 32, 118, 97, 114, 95, 67, 111, 108,
    111, 114, 46, 114, 103, 98, 59, 10, 9, 118, 97, 114, 95, 67, 111, 108, 111,
    114, 46, 114, 103, 98, 32, 61, 32, 118, 101, 99, 51, 40, 49, 46, 48, 41, 59,
    10, 35, 101, 110, 100, 105, 102, 10, 10, 35, 105, 102, 32, 100, 101, 102,
    105, 110, 101, 100, 40, 85, 83, 69, 95, 76, 73, 71, 72, 84, 95, 86, 69, 67,
    84, 79, 82, 41, 32, 38, 38, 32, 100, 101, 102, 105, 110, 101, 100, 40, 85,
    83, 69, 95, 70, 65, 83, 84, 95, 76, 73, 71, 72, 84, 41, 10, 9, 102, 108,
    111, 97, 116, 32, 115, 113, 114, 76, 105, 103, 104, 116, 68, 105, 115, 116,
    32, 61, 32, 100, 111, 116, 40, 76, 44, 32, 76, 41, 59, 10, 9, 102, 108, 111,
    97, 116, 32, 97, 116, 116, 101, 110, 117, 97, 116, 105, 111, 110, 32, 61,
    32, 67, 97, 108, 99, 76, 105, 103, 104, 116, 65, 116, 116, 101, 110, 117,
    97, 116, 105, 111, 110, 40, 117, 95, 76, 105, 103, 104, 116, 79, 114, 105,
    103, 105, 110, 46, 119, 44, 32, 117, 95, 76, 105, 103, 104, 116, 82, 97,
    100, 105, 117, 115, 32, 42, 32, 117, 95, 76, 105, 103, 104, 116, 82, 97,
    100, 105, 117, 115, 32, 47, 32, 115, 113, 114, 76, 105, 103, 104, 116, 68,
    105, 115, 116, 41, 59, 10, 9, 102, 108, 111, 97, 116, 32, 78, 76, 32, 61,
    32, 99, 108, 97, 109, 112, 40, 100, 111, 116, 40, 110, 111, 114, 109, 97,
    108, 105, 122, 101, 40, 110, 111, 114, 109, 97, 108, 41, 44, 32, 76, 41, 32,
    47, 32, 115, 113, 114, 116, 40, 115, 113, 114, 76, 105, 103, 104, 116, 68,
    105, 115, 116, 41, 44, 32, 48, 46, 48, 44, 32, 49, 46, 48, 41, 59, 10, 10,
    9, 118, 97, 114, 95, 67, 111, 108, 111, 114, 46, 114, 103, 98, 32, 42, 61,
    32, 117, 95, 68, 105, 114, 101, 99, 116, 101, 100, 76, 105, 103, 104, 116,
    32, 42, 32, 40, 97, 116, 116, 101, 110, 117, 97, 116, 105, 111, 110, 32, 42,
    32, 78, 76, 41, 32, 43, 32, 117, 95, 65, 109, 98, 105, 101, 110, 116, 76,
    105, 103, 104, 116, 59, 10, 35, 101, 110, 100, 105, 102, 10, 10, 35, 105,
    102, 32, 100, 101, 102, 105, 110, 101, 100, 40, 85, 83, 69, 95, 80, 82, 73,
    77, 65, 82, 89, 95, 76, 73, 71, 72, 84, 41, 32, 124, 124, 32, 100, 101, 102,
    105, 110, 101, 100, 40, 85, 83, 69, 95, 83, 72, 65, 68, 79, 87, 77, 65, 80,
    41, 10, 9, 118, 97, 114, 95, 80, 114, 105, 109, 97, 114, 121, 76, 105, 103,
    104, 116, 68, 105, 114, 46, 120, 121, 122, 32, 61, 32, 117, 95, 80, 114,
    105, 109, 97, 114, 121, 76, 105, 103, 104, 116, 79, 114, 105, 103, 105, 110,
    46, 120, 121, 122, 32, 45, 32, 40, 112, 111, 115, 105, 116, 105, 111, 110,
    32, 42, 32, 117, 95, 80, 114, 105, 109, 97, 114, 121, 76, 105, 103, 104,
    116, 79, 114, 105, 103, 105, 110, 46, 119, 41, 59, 10, 9, 118, 97, 114, 95,
    80, 114, 105, 109, 97, 114, 121, 76, 105, 103, 104, 116, 68, 105, 114, 46,
    119, 32, 61, 32, 117, 95, 80, 114, 105, 109, 97, 114, 121, 76, 105, 103,
    104, 116, 82, 97, 100, 105, 117, 115, 32, 42, 32, 117, 95, 80, 114, 105,
    109, 97, 114, 121, 76, 105, 103, 104, 116, 82, 97, 100, 105, 117, 115, 59,
    10, 35, 101, 110, 100, 105, 102, 10, 10, 35, 105, 102, 32, 100, 101, 102,
    105, 110, 101, 100, 40, 85, 83, 69, 95, 76, 73, 71, 72, 84, 41, 32, 38, 38,
    32, 33, 100, 101, 102, 105, 110, 101, 100, 40, 85, 83, 69, 95, 70, 65, 83,
    84, 95, 76, 73, 71, 72, 84, 41, 10, 32, 32, 35, 105, 102, 32, 100, 101, 102,
    105, 110, 101, 100, 40, 85, 83, 69, 95, 76, 73, 71, 72, 84, 95, 86, 69, 67,
    84, 79, 82, 41, 10, 9, 118, 97, 114, 95, 76, 105, 103, 104, 116, 68, 105,
    114, 32, 61, 32, 118, 101, 99, 52, 40, 76, 44, 32, 117, 95, 76, 105, 103,
    104, 116, 82, 97, 100, 105, 117, 115, 32, 42, 32, 117, 95, 76, 105, 103,
    104, 116, 82, 97, 100, 105, 117, 115, 41, 59, 10, 32, 32, 35, 101, 108, 115,
    101, 10, 9, 118, 97, 114, 95, 76, 105, 103, 104, 116, 68, 105, 114, 32, 61,
    32, 118, 101, 99, 52, 40, 76, 44, 32, 48, 46, 48, 41, 59, 10, 32, 32, 35,
    101, 110, 100, 105, 102, 10, 32, 32, 35, 105, 102, 32, 100, 101, 102, 105,
    110, 101, 100, 40, 85, 83, 69, 95, 68, 69, 76, 85, 88, 69, 77, 65, 80, 41,
    10, 9, 118, 97, 114, 95, 76, 105, 103, 104, 116, 68, 105, 114, 32, 45, 61,
    32, 117, 95, 69, 110, 97, 98, 108, 101, 84, 101, 120, 116, 117, 114, 101,
    115, 46, 121, 32, 42, 32, 118, 97, 114, 95, 76, 105, 103, 104, 116, 68, 105,
    114, 59, 10, 32, 32, 35, 101, 110, 100, 105, 102, 10, 35, 101, 110, 100,
    105, 102, 10, 10, 35, 105, 102, 32, 100, 101, 102, 105, 110, 101, 100, 40,
    85, 83, 69, 95, 76, 73, 71, 72, 84, 41, 32, 38, 38, 32, 33, 100, 101, 102,
    105, 110, 101, 100, 40, 85, 83, 69, 95, 70, 65, 83, 84, 95, 76, 73, 71, 72,
    84, 41, 10, 9, 118, 101, 99, 51, 32, 118, 105, 101, 119, 68, 105, 114, 32,
    61, 32, 117, 95, 86, 105, 101, 119, 79,
  ],
  "i8",
  ALLOC_NONE,
  Runtime.GLOBAL_BASE + 61444
);
/* memory initializer */ allocate(
  [
    114, 105, 103, 105, 110, 32, 45, 32, 112, 111, 115, 105, 116, 105, 111, 110,
    59, 10, 32, 32, 35, 105, 102, 32, 100, 101, 102, 105, 110, 101, 100, 40, 85,
    83, 69, 95, 86, 69, 82, 84, 95, 84, 65, 78, 71, 69, 78, 84, 95, 83, 80, 65,
    67, 69, 41, 10, 9, 47, 47, 32, 115, 116, 111, 114, 101, 32, 118, 105, 101,
    119, 32, 100, 105, 114, 101, 99, 116, 105, 111, 110, 32, 105, 110, 32, 116,
    97, 110, 103, 101, 110, 116, 32, 115, 112, 97, 99, 101, 32, 116, 111, 32,
    115, 97, 118, 101, 32, 111, 110, 32, 118, 97, 114, 121, 105, 110, 103, 115,
    10, 9, 118, 97, 114, 95, 78, 111, 114, 109, 97, 108, 32, 32, 32, 32, 61, 32,
    118, 101, 99, 52, 40, 110, 111, 114, 109, 97, 108, 44, 32, 32, 32, 32, 118,
    105, 101, 119, 68, 105, 114, 46, 120, 41, 59, 10, 9, 118, 97, 114, 95, 84,
    97, 110, 103, 101, 110, 116, 32, 32, 32, 61, 32, 118, 101, 99, 52, 40, 116,
    97, 110, 103, 101, 110, 116, 44, 32, 32, 32, 118, 105, 101, 119, 68, 105,
    114, 46, 121, 41, 59, 10, 9, 118, 97, 114, 95, 66, 105, 116, 97, 110, 103,
    101, 110, 116, 32, 61, 32, 118, 101, 99, 52, 40, 98, 105, 116, 97, 110, 103,
    101, 110, 116, 44, 32, 118, 105, 101, 119, 68, 105, 114, 46, 122, 41, 59,
    10, 32, 32, 35, 101, 108, 115, 101, 10, 9, 118, 97, 114, 95, 78, 111, 114,
    109, 97, 108, 32, 61, 32, 110, 111, 114, 109, 97, 108, 59, 10, 9, 118, 97,
    114, 95, 86, 105, 101, 119, 68, 105, 114, 32, 61, 32, 118, 105, 101, 119,
    68, 105, 114, 59, 10, 32, 32, 35, 101, 110, 100, 105, 102, 10, 35, 101, 110,
    100, 105, 102, 10, 125, 10, 0, 0, 0, 0, 0, 0, 0, 111, 112, 101, 114, 97,
    116, 111, 114, 32, 37, 115, 32, 97, 102, 116, 101, 114, 32, 111, 112, 101,
    114, 97, 116, 111, 114, 32, 105, 110, 32, 35, 105, 102, 47, 35, 101, 108,
    105, 102, 0, 109, 105, 110, 115, 0, 0, 0, 0, 117, 110, 105, 102, 111, 114,
    109, 32, 115, 97, 109, 112, 108, 101, 114, 50, 68, 32, 117, 95, 68, 105,
    102, 102, 117, 115, 101, 77, 97, 112, 59, 10, 10, 35, 105, 102, 32, 100,
    101, 102, 105, 110, 101, 100, 40, 85, 83, 69, 95, 76, 73, 71, 72, 84, 77,
    65, 80, 41, 10, 117, 110, 105, 102, 111, 114, 109, 32, 115, 97, 109, 112,
    108, 101, 114, 50, 68, 32, 117, 95, 76, 105, 103, 104, 116, 77, 97, 112, 59,
    10, 35, 101, 110, 100, 105, 102, 10, 10, 35, 105, 102, 32, 100, 101, 102,
    105, 110, 101, 100, 40, 85, 83, 69, 95, 78, 79, 82, 77, 65, 76, 77, 65, 80,
    41, 10, 117, 110, 105, 102, 111, 114, 109, 32, 115, 97, 109, 112, 108, 101,
    114, 50, 68, 32, 117, 95, 78, 111, 114, 109, 97, 108, 77, 97, 112, 59, 10,
    35, 101, 110, 100, 105, 102, 10, 10, 35, 105, 102, 32, 100, 101, 102, 105,
    110, 101, 100, 40, 85, 83, 69, 95, 68, 69, 76, 85, 88, 69, 77, 65, 80, 41,
    10, 117, 110, 105, 102, 111, 114, 109, 32, 115, 97, 109, 112, 108, 101, 114,
    50, 68, 32, 117, 95, 68, 101, 108, 117, 120, 101, 77, 97, 112, 59, 10, 35,
    101, 110, 100, 105, 102, 10, 10, 35, 105, 102, 32, 100, 101, 102, 105, 110,
    101, 100, 40, 85, 83, 69, 95, 83, 80, 69, 67, 85, 76, 65, 82, 77, 65, 80,
    41, 10, 117, 110, 105, 102, 111, 114, 109, 32, 115, 97, 109, 112, 108, 101,
    114, 50, 68, 32, 117, 95, 83, 112, 101, 99, 117, 108, 97, 114, 77, 97, 112,
    59, 10, 35, 101, 110, 100, 105, 102, 10, 10, 35, 105, 102, 32, 100, 101,
    102, 105, 110, 101, 100, 40, 85, 83, 69, 95, 83, 72, 65, 68, 79, 87, 77, 65,
    80, 41, 10, 117, 110, 105, 102, 111, 114, 109, 32, 115, 97, 109, 112, 108,
    101, 114, 50, 68, 32, 117, 95, 83, 104, 97, 100, 111, 119, 77, 97, 112, 59,
    10, 35, 101, 110, 100, 105, 102, 10, 10, 35, 105, 102, 32, 100, 101, 102,
    105, 110, 101, 100, 40, 85, 83, 69, 95, 67, 85, 66, 69, 77, 65, 80, 41, 10,
    117, 110, 105, 102, 111, 114, 109, 32, 115, 97, 109, 112, 108, 101, 114, 67,
    117, 98, 101, 32, 117, 95, 67, 117, 98, 101, 77, 97, 112, 59, 10, 35, 101,
    110, 100, 105, 102, 10, 10, 35, 105, 102, 32, 100, 101, 102, 105, 110, 101,
    100, 40, 85, 83, 69, 95, 78, 79, 82, 77, 65, 76, 77, 65, 80, 41, 32, 124,
    124, 32, 100, 101, 102, 105, 110, 101, 100, 40, 85, 83, 69, 95, 68, 69, 76,
    85, 88, 69, 77, 65, 80, 41, 32, 124, 124, 32, 100, 101, 102, 105, 110, 101,
    100, 40, 85, 83, 69, 95, 83, 80, 69, 67, 85, 76, 65, 82, 77, 65, 80, 41, 32,
    124, 124, 32, 100, 101, 102, 105, 110, 101, 100, 40, 85, 83, 69, 95, 67, 85,
    66, 69, 77, 65, 80, 41, 10, 117, 110, 105, 102, 111, 114, 109, 32, 118, 101,
    99, 52, 32, 32, 32, 32, 32, 32, 117, 95, 69, 110, 97, 98, 108, 101, 84, 101,
    120, 116, 117, 114, 101, 115, 59, 32, 47, 47, 32, 120, 32, 61, 32, 110, 111,
    114, 109, 97, 108, 44, 32, 121, 32, 61, 32, 100, 101, 108, 117, 120, 101,
    44, 32, 122, 32, 61, 32, 115, 112, 101, 99, 117, 108, 97, 114, 44, 32, 119,
    32, 61, 32, 99, 117, 98, 101, 10, 35, 101, 110, 100, 105, 102, 10, 10, 35,
    105, 102, 32, 100, 101, 102, 105, 110, 101, 100, 40, 85, 83, 69, 95, 76, 73,
    71, 72, 84, 95, 86, 69, 67, 84, 79, 82, 41, 32, 38, 38, 32, 33, 100, 101,
    102, 105, 110, 101, 100, 40, 85, 83, 69, 95, 70, 65, 83, 84, 95, 76, 73, 71,
    72, 84, 41, 10, 117, 110, 105, 102, 111, 114, 109, 32, 118, 101, 99, 51, 32,
    32, 32, 32, 32, 32, 117, 95, 68, 105, 114, 101, 99, 116, 101, 100, 76, 105,
    103, 104, 116, 59, 10, 117, 110, 105, 102, 111, 114, 109, 32, 118, 101, 99,
    51, 32, 32, 32, 32, 32, 32, 117, 95, 65, 109, 98, 105, 101, 110, 116, 76,
    105, 103, 104, 116, 59, 10, 35, 101, 110, 100, 105, 102, 10, 10, 35, 105,
    102, 32, 100, 101, 102, 105, 110, 101, 100, 40, 85, 83, 69, 95, 80, 82, 73,
    77, 65, 82, 89, 95, 76, 73, 71, 72, 84, 41, 32, 124, 124, 32, 100, 101, 102,
    105, 110, 101, 100, 40, 85, 83, 69, 95, 83, 72, 65, 68, 79, 87, 77, 65, 80,
    41, 10, 117, 110, 105, 102, 111, 114, 109, 32, 118, 101, 99, 51, 32, 32,
    117, 95, 80, 114, 105, 109, 97, 114, 121, 76, 105, 103, 104, 116, 67, 111,
    108, 111, 114, 59, 10, 117, 110, 105, 102, 111, 114, 109, 32, 118, 101, 99,
    51, 32, 32, 117, 95, 80, 114, 105, 109, 97, 114, 121, 76, 105, 103, 104,
    116, 65, 109, 98, 105, 101, 110, 116, 59, 10, 35, 101, 110, 100, 105, 102,
    10, 10, 35, 105, 102, 32, 100, 101, 102, 105, 110, 101, 100, 40, 85, 83, 69,
    95, 76, 73, 71, 72, 84, 41, 32, 38, 38, 32, 33, 100, 101, 102, 105, 110,
    101, 100, 40, 85, 83, 69, 95, 70, 65, 83, 84, 95, 76, 73, 71, 72, 84, 41,
    10, 117, 110, 105, 102, 111, 114, 109, 32, 118, 101, 99, 50, 32, 32, 32, 32,
    32, 32, 117, 95, 77, 97, 116, 101, 114, 105, 97, 108, 73, 110, 102, 111, 59,
    10, 35, 101, 110, 100, 105, 102, 10, 10, 118, 97, 114, 121, 105, 110, 103,
    32, 118, 101, 99, 52, 32, 32, 32, 32, 32, 32, 118, 97, 114, 95, 84, 101,
    120, 67, 111, 111, 114, 100, 115, 59, 10, 10, 118, 97, 114, 121, 105, 110,
    103, 32, 118, 101, 99, 52, 32, 32, 32, 32, 32, 32, 118, 97, 114, 95, 67,
    111, 108, 111, 114, 59, 10, 10, 35, 105, 102, 32, 40, 100, 101, 102, 105,
    110, 101, 100, 40, 85, 83, 69, 95, 76, 73, 71, 72, 84, 41, 32, 38, 38, 32,
    33, 100, 101, 102, 105, 110, 101, 100, 40, 85, 83, 69, 95, 70, 65, 83, 84,
    95, 76, 73, 71, 72, 84, 41, 41, 10, 32, 32, 35, 105, 102, 32, 100, 101, 102,
    105, 110, 101, 100, 40, 85, 83, 69, 95, 86, 69, 82, 84, 95, 84, 65, 78, 71,
    69, 78, 84, 95, 83, 80, 65, 67, 69, 41, 10, 118, 97, 114, 121, 105, 110,
    103, 32, 118, 101, 99, 52, 32, 32, 32, 118, 97, 114, 95, 78, 111, 114, 109,
    97, 108, 59, 10, 118, 97, 114, 121, 105, 110, 103, 32, 118, 101, 99, 52, 32,
    32, 32, 118, 97, 114, 95, 84, 97, 110, 103, 101, 110, 116, 59, 10, 118, 97,
    114, 121, 105, 110, 103, 32, 118, 101, 99, 52, 32, 32, 32, 118, 97, 114, 95,
    66, 105, 116, 97, 110, 103, 101, 110, 116, 59, 10, 32, 32, 35, 101, 108,
    115, 101, 10, 118, 97, 114, 121, 105, 110, 103, 32, 118, 101, 99, 51, 32,
    32, 32, 118, 97, 114, 95, 78, 111, 114, 109, 97, 108, 59, 10, 118, 97, 114,
    121, 105, 110, 103, 32, 118, 101, 99, 51, 32, 32, 32, 118, 97, 114, 95, 86,
    105, 101, 119, 68, 105, 114, 59, 10, 32, 32, 35, 101, 110, 100, 105, 102,
    10, 35, 101, 110, 100, 105, 102, 10, 10, 35, 105, 102, 32, 100, 101, 102,
    105, 110, 101, 100, 40, 85, 83, 69, 95, 76, 73, 71, 72, 84, 95, 86, 69, 82,
    84, 69, 88, 41, 32, 38, 38, 32, 33, 100, 101, 102, 105, 110, 101, 100, 40,
    85, 83, 69, 95, 70, 65, 83, 84, 95, 76, 73, 71, 72, 84, 41, 10, 118, 97,
    114, 121, 105, 110, 103, 32, 118, 101, 99, 51, 32, 32, 32, 32, 32, 32, 118,
    97, 114, 95, 76, 105, 103, 104, 116, 67, 111, 108, 111, 114, 59, 10, 35,
    101, 110, 100, 105, 102, 10, 10, 35, 105, 102, 32, 100, 101, 102, 105, 110,
    101, 100, 40, 85, 83, 69, 95, 76, 73, 71, 72, 84, 41, 32, 38, 38, 32, 33,
    100, 101, 102, 105, 110, 101, 100, 40, 85, 83, 69, 95, 70, 65, 83, 84, 95,
    76, 73, 71, 72, 84, 41, 10, 118, 97, 114, 121, 105, 110, 103, 32, 118, 101,
    99, 52, 32, 32, 32, 32, 32, 32, 118, 97, 114, 95, 76, 105, 103, 104, 116,
    68, 105, 114, 59, 10, 35, 101, 110, 100, 105, 102, 10, 10, 35, 105, 102, 32,
    100, 101, 102, 105, 110, 101, 100, 40, 85, 83, 69, 95, 80, 82, 73, 77, 65,
    82, 89, 95, 76, 73, 71, 72, 84, 41, 32, 124, 124, 32, 100, 101, 102, 105,
    110, 101, 100, 40, 85, 83, 69, 95, 83, 72, 65, 68, 79, 87, 77, 65, 80, 41,
    10, 118, 97, 114, 121, 105, 110, 103, 32, 118, 101, 99, 52, 32, 32, 32, 32,
    32, 32, 118, 97, 114, 95, 80, 114, 105, 109, 97, 114, 121, 76, 105, 103,
    104, 116, 68, 105, 114, 59, 10, 35, 101, 110, 100, 105, 102, 10, 10, 10, 35,
    100, 101, 102, 105, 110, 101, 32, 69, 80, 83, 73, 76, 79, 78, 32, 48, 46,
    48, 48, 48, 48, 48, 48, 48, 49, 10, 10, 35, 105, 102, 32, 100, 101, 102,
    105, 110, 101, 100, 40, 85, 83, 69, 95, 80, 65, 82, 65, 76, 76, 65, 88, 77,
    65, 80, 41, 10, 102, 108, 111, 97, 116, 32, 83, 97, 109, 112, 108, 101, 68,
    101, 112, 116, 104, 40, 115, 97, 109, 112, 108, 101, 114, 50, 68, 32, 110,
    111, 114, 109, 97, 108, 77, 97, 112, 44, 32, 118, 101, 99, 50, 32, 116, 41,
    10, 123, 10, 32, 32, 35, 105, 102, 32, 100, 101, 102, 105, 110, 101, 100,
    40, 83, 87, 73, 90, 90, 76, 69, 95, 78, 79, 82, 77, 65, 76, 77, 65, 80, 41,
    10, 9, 114, 101, 116, 117, 114, 110, 32, 49, 46, 48, 32, 45, 32, 116, 101,
    120, 116, 117, 114, 101, 50, 68, 40, 110, 111, 114, 109, 97, 108, 77, 97,
    112, 44, 32, 116, 41, 46, 114, 59, 10, 32, 32, 35, 101, 108, 115, 101, 10,
    9, 114, 101, 116, 117, 114, 110, 32, 49, 46, 48, 32, 45, 32, 116, 101, 120,
    116, 117, 114, 101, 50, 68, 40, 110, 111, 114, 109, 97, 108, 77, 97, 112,
    44, 32, 116, 41, 46, 97, 59, 10, 32, 32, 35, 101, 110, 100, 105, 102, 10,
    125, 10, 10, 102, 108, 111, 97, 116, 32, 82, 97, 121, 73, 110, 116, 101,
    114, 115, 101, 99, 116, 68, 105, 115, 112, 108, 97, 99, 101, 77, 97, 112,
    40, 118, 101, 99, 50, 32, 100, 112, 44, 32, 118, 101, 99, 50, 32, 100, 115,
    44, 32, 115, 97, 109, 112, 108, 101, 114, 50, 68, 32, 110, 111, 114, 109,
    97, 108, 77, 97, 112, 41, 10, 123, 10, 9, 99, 111, 110, 115, 116, 32, 105,
    110, 116, 32, 108, 105, 110, 101, 97, 114, 83, 101, 97, 114, 99, 104, 83,
    116, 101, 112, 115, 32, 61, 32, 49, 54, 59, 10, 9, 99, 111, 110, 115, 116,
    32, 105, 110, 116, 32, 98, 105, 110, 97, 114, 121, 83, 101, 97, 114, 99,
    104, 83, 116, 101, 112, 115, 32, 61, 32, 54, 59, 10, 10, 9, 47, 47, 32, 99,
    117, 114, 114, 101, 110, 116, 32, 115, 105, 122, 101, 32, 111, 102, 32, 115,
    101, 97, 114, 99, 104, 32, 119, 105, 110, 100, 111, 119, 10, 9, 102, 108,
    111, 97, 116, 32, 115, 105, 122, 101, 32, 61, 32, 49, 46, 48, 32, 47, 32,
    102, 108, 111, 97, 116, 40, 108, 105, 110, 101, 97, 114, 83, 101, 97, 114,
    99, 104, 83, 116, 101, 112, 115, 41, 59, 10, 10, 9, 47, 47, 32, 99, 117,
    114, 114, 101, 110, 116, 32, 100, 101, 112, 116, 104, 32, 112, 111, 115,
    105, 116, 105, 111, 110, 10, 9, 102, 108, 111, 97, 116, 32, 100, 101, 112,
    116, 104, 32, 61, 32, 48, 46, 48, 59, 10, 10, 9, 47, 47, 32, 98, 101, 115,
    116, 32, 109, 97, 116, 99, 104, 32, 102, 111, 117, 110, 100, 32, 40, 115,
    116, 97, 114, 116, 115, 32, 119, 105, 116, 104, 32, 108, 97, 115, 116, 32,
    112, 111, 115, 105, 116, 105, 111, 110, 32, 49, 46, 48, 41, 10, 9, 102, 108,
    111, 97, 116, 32, 98, 101, 115, 116, 68, 101, 112, 116, 104, 32, 61, 32, 49,
    46, 48, 59, 10, 10, 9, 47, 47, 32, 115, 101, 97, 114, 99, 104, 32, 102, 114,
    111, 110, 116, 32, 116, 111, 32, 98, 97, 99, 107, 32, 102, 111, 114, 32,
    102, 105, 114, 115, 116, 32, 112, 111, 105, 110, 116, 32, 105, 110, 115,
    105, 100, 101, 32, 111, 98, 106, 101, 99, 116, 10, 9, 102, 111, 114, 40,
    105, 110, 116, 32, 105, 32, 61, 32, 48, 59, 32, 105, 32, 60, 32, 108, 105,
    110, 101, 97, 114, 83, 101, 97, 114, 99, 104, 83, 116, 101, 112, 115, 32,
    45, 32, 49, 59, 32, 43, 43, 105, 41, 10, 9, 123, 10, 9, 9, 100, 101, 112,
    116, 104, 32, 43, 61, 32, 115, 105, 122, 101, 59, 10, 9, 9, 10, 9, 9, 102,
    108, 111, 97, 116, 32, 116, 32, 61, 32, 83, 97, 109, 112, 108, 101, 68, 101,
    112, 116, 104, 40, 110, 111, 114, 109, 97, 108, 77, 97, 112, 44, 32, 100,
    112, 32, 43, 32, 100, 115, 32, 42, 32, 100, 101, 112, 116, 104, 41, 59, 10,
    9, 9, 10, 9, 9, 105, 102, 40, 98, 101, 115, 116, 68, 101, 112, 116, 104, 32,
    62, 32, 48, 46, 57, 57, 54, 41, 9, 9, 47, 47, 32, 105, 102, 32, 110, 111,
    32, 100, 101, 112, 116, 104, 32, 102, 111, 117, 110, 100, 32, 121, 101, 116,
    10, 9, 9, 9, 105, 102, 40, 100, 101, 112, 116, 104, 32, 62, 61, 32, 116, 41,
    10, 9, 9, 9, 9, 98, 101, 115, 116, 68, 101, 112, 116, 104, 32, 61, 32, 100,
    101, 112, 116, 104, 59, 9, 47, 47, 32, 115, 116, 111, 114, 101, 32, 98, 101,
    115, 116, 32, 100, 101, 112, 116, 104, 10, 9, 125, 10, 10, 9, 100, 101, 112,
    116, 104, 32, 61, 32, 98, 101, 115, 116, 68, 101, 112, 116, 104, 59, 10, 9,
    10, 9, 47, 47, 32, 114, 101, 99, 117, 114, 115, 101, 32, 97, 114, 111, 117,
    110, 100, 32, 102, 105, 114, 115, 116, 32, 112, 111, 105, 110, 116, 32, 40,
    100, 101, 112, 116, 104, 41, 32, 102, 111, 114, 32, 99, 108, 111, 115, 101,
    115, 116, 32, 109, 97, 116, 99, 104, 10, 9, 102, 111, 114, 40, 105, 110,
    116, 32, 105, 32, 61, 32, 48, 59, 32, 105, 32, 60, 32, 98, 105, 110, 97,
    114, 121, 83, 101, 97, 114, 99, 104, 83, 116, 101, 112, 115, 59, 32, 43, 43,
    105, 41, 10, 9, 123, 10, 9, 9, 115, 105, 122, 101, 32, 42, 61, 32, 48, 46,
    53, 59, 10, 10, 9, 9, 102, 108, 111, 97, 116, 32, 116, 32, 61, 32, 83, 97,
    109, 112, 108, 101, 68, 101, 112, 116, 104, 40, 110, 111, 114, 109, 97, 108,
    77, 97, 112, 44, 32, 100, 112, 32, 43, 32, 100, 115, 32, 42, 32, 100, 101,
    112, 116, 104, 41, 59, 10, 9, 9, 10, 9, 9, 105, 102, 40, 100, 101, 112, 116,
    104, 32, 62, 61, 32, 116, 41, 10, 9, 9, 123, 10, 9, 9, 9, 98, 101, 115, 116,
    68, 101, 112, 116, 104, 32, 61, 32, 100, 101, 112, 116, 104, 59, 10, 9, 9,
    9, 100, 101, 112, 116, 104, 32, 45, 61, 32, 50, 46, 48, 32, 42, 32, 115,
    105, 122, 101, 59, 10, 9, 9, 125, 10, 10, 9, 9, 100, 101, 112, 116, 104, 32,
    43, 61, 32, 115, 105, 122, 101, 59, 10, 9, 125, 10, 10, 9, 114, 101, 116,
    117, 114, 110, 32, 98, 101, 115, 116, 68, 101, 112, 116, 104, 59, 10, 125,
    10, 35, 101, 110, 100, 105, 102, 10, 10, 118, 101, 99, 51, 32, 67, 97, 108,
    99, 68, 105, 102, 102, 117, 115, 101, 40, 118, 101, 99, 51, 32, 100, 105,
    102, 102, 117, 115, 101, 65, 108, 98, 101, 100, 111, 44, 32, 118, 101, 99,
    51, 32, 78, 44, 32, 118, 101, 99, 51, 32, 76, 44, 32, 118, 101, 99, 51, 32,
    69, 44, 32, 102, 108, 111, 97, 116, 32, 78, 69, 44, 32, 102, 108, 111, 97,
    116, 32, 78, 76, 44, 32, 102, 108, 111, 97, 116, 32, 115, 104, 105, 110,
    105, 110, 101, 115, 115, 41, 10, 123, 10, 32, 32, 35, 105, 102, 32, 100,
    101, 102, 105, 110, 101, 100, 40, 85, 83, 69, 95, 79, 82, 69, 78, 95, 78,
    65, 89, 65, 82, 41, 32, 124, 124, 32, 100, 101, 102, 105, 110, 101, 100, 40,
    85, 83, 69, 95, 84, 82, 73, 65, 67, 69, 95, 79, 82, 69, 78, 95, 78, 65, 89,
    65, 82, 41, 10, 9, 102, 108, 111, 97, 116, 32, 103, 97, 109, 109, 97, 32,
    61, 32, 100, 111, 116, 40, 69, 44, 32, 76, 41, 32, 45, 32, 78, 69, 32, 42,
    32, 78, 76, 59, 10, 9, 102, 108, 111, 97, 116, 32, 66, 32, 61, 32, 50, 46,
    50, 50, 50, 50, 50, 32, 43, 32, 48, 46, 49, 32, 42, 32, 115, 104, 105, 110,
    105, 110, 101, 115, 115, 59, 10, 9, 9, 10, 32, 32, 32, 32, 35, 105, 102, 32,
    100, 101, 102, 105, 110, 101, 100, 40, 85, 83, 69, 95, 79, 82, 69, 78, 95,
    78, 65, 89, 65, 82, 41, 10, 9, 102, 108, 111, 97, 116, 32, 65, 32, 61, 32,
    49, 46, 48, 32, 45, 32, 49, 46, 48, 32, 47, 32, 40, 50, 46, 48, 32, 43, 32,
    48, 46, 51, 51, 32, 42, 32, 115, 104, 105, 110, 105, 110, 101, 115, 115, 41,
    59, 10, 9, 103, 97, 109, 109, 97, 32, 61, 32, 99, 108, 97, 109, 112, 40,
    103, 97, 109, 109, 97, 44, 32, 48, 46, 48, 44, 32, 49, 46, 48, 41, 59, 10,
    32, 32, 32, 32, 35, 101, 110, 100, 105, 102, 10, 9, 10, 32, 32, 32, 32, 35,
    105, 102, 32, 100, 101, 102, 105, 110, 101, 100, 40, 85, 83, 69, 95, 84, 82,
    73, 65, 67, 69, 95, 79, 82, 69, 78, 95, 78, 65, 89, 65, 82, 41, 10, 9, 102,
    108, 111, 97, 116, 32, 65, 32, 61, 32, 49, 46, 48, 32, 45, 32, 49, 46, 48,
    32, 47, 32, 40, 50, 46, 48, 32, 43, 32, 48, 46, 54, 53, 32, 42, 32, 115,
    104, 105, 110, 105, 110, 101, 115, 115, 41, 59, 10, 10, 9, 105, 102, 32, 40,
    103, 97, 109, 109, 97, 32, 62, 61, 32, 48, 46, 48, 41, 10, 32, 32, 32, 32,
    35, 101, 110, 100, 105, 102, 10, 9, 123, 10, 9, 9, 66, 32, 61, 32, 109, 97,
    120, 40, 66, 32, 42, 32, 109, 97, 120, 40, 78, 76, 44, 32, 78, 69, 41, 44,
    32, 69, 80, 83, 73, 76, 79, 78, 41, 59, 10, 9, 125, 10, 10, 9, 114, 101,
    116, 117, 114, 110, 32, 100, 105, 102, 102, 117, 115, 101, 65, 108, 98, 101,
    100, 111, 32, 42, 32, 40, 65, 32, 43, 32, 103, 97, 109, 109, 97, 32, 47, 32,
    66, 41, 59, 10, 32, 32, 35, 101, 108, 115, 101, 10, 9, 114, 101, 116, 117,
    114, 110, 32, 100, 105, 102, 102, 117, 115, 101, 65, 108, 98, 101, 100, 111,
    59, 10, 32, 32, 35, 101, 110, 100, 105, 102, 10, 125, 10, 10, 118, 101, 99,
    51, 32, 69, 110, 118, 105, 114, 111, 110, 109, 101, 110, 116, 66, 82, 68,
    70, 40, 102, 108, 111, 97, 116, 32, 103, 108, 111, 115, 115, 44, 32, 102,
    108, 111, 97, 116, 32, 78, 69, 44, 32, 118, 101, 99, 51, 32, 115, 112, 101,
    99, 117, 108, 97, 114, 41, 10, 123, 10, 32, 32, 35, 105, 102, 32, 49, 10, 9,
    47, 47, 32, 102, 114, 111, 109, 32, 104, 116, 116, 112, 58, 47, 47, 98, 108,
    111, 103, 46, 115, 101, 108, 102, 115, 104, 97, 100, 111, 119, 46, 99, 111,
    109, 47, 112, 117, 98, 108, 105, 99, 97, 116, 105, 111, 110, 115, 47, 115,
    50, 48, 49, 51, 45, 115, 104, 97, 100, 105, 110, 103, 45, 99, 111, 117, 114,
    115, 101, 47, 108, 97, 122, 97, 114, 111, 118, 47, 115, 50, 48, 49, 51, 95,
    112, 98, 115, 95, 98, 108, 97, 99, 107, 95, 111, 112, 115, 95, 50, 95, 110,
    111, 116, 101, 115, 46, 112, 100, 102, 10, 9, 118, 101, 99, 52, 32, 116, 32,
    61, 32, 118, 101, 99, 52, 40, 32, 49, 46, 48, 47, 48, 46, 57, 54, 44, 32,
    48, 46, 52, 55, 53, 44, 32, 40, 48, 46, 48, 50, 55, 53, 32, 45, 32, 48, 46,
    50, 53, 32, 42, 32, 48, 46, 48, 52, 41, 47, 48, 46, 57, 54, 44, 48, 46, 50,
    53, 32, 41, 32, 42, 32, 103, 108, 111, 115, 115, 59, 10, 9, 116, 32, 43, 61,
    32, 118, 101, 99, 52, 40, 32, 48, 46, 48, 44, 32, 48, 46, 48, 44, 32, 40,
    48, 46, 48, 49, 53, 32, 45, 32, 48, 46, 55, 53, 32, 42, 32, 48, 46, 48, 52,
    41, 47, 48, 46, 57, 54, 44, 48, 46, 55, 53, 32, 41, 59, 10, 9, 102, 108,
    111, 97, 116, 32, 97, 48, 32, 61, 32, 116, 46, 120, 32, 42, 32, 109, 105,
    110, 40, 32, 116, 46, 121, 44, 32, 101, 120, 112, 50, 40, 32, 45, 57, 46,
    50, 56, 32, 42, 32, 78, 69, 32, 41, 32, 41, 32, 43, 32, 116, 46, 122, 59,
    10, 9, 102, 108, 111, 97, 116, 32, 97, 49, 32, 61, 32, 116, 46, 119, 59, 10,
    9, 114, 101, 116, 117, 114, 110, 32, 99, 108, 97, 109, 112, 40, 32, 97, 48,
    32, 43, 32, 115, 112, 101, 99, 117, 108, 97, 114, 32, 42, 32, 40, 32, 97,
    49, 32, 45, 32, 97, 48, 32, 41, 44, 32, 48, 46, 48, 44, 32, 49, 46, 48, 32,
    41, 59, 10, 32, 32, 35, 101, 108, 105, 102, 32, 48, 10, 9, 47, 47, 32, 102,
    114, 111, 109, 32, 104, 116, 116, 112, 58, 47, 47, 115, 101, 98, 108, 97,
    103, 97, 114, 100, 101, 46, 119, 111, 114, 100, 112, 114, 101, 115, 115, 46,
    99, 111, 109, 47, 50, 48, 49, 49, 47, 48, 56, 47, 49, 55, 47, 104, 101, 108,
    108, 111, 45, 119, 111, 114, 108, 100, 47, 10, 9, 114, 101, 116, 117, 114,
    110, 32, 109, 105, 120, 40, 115, 112, 101, 99, 117, 108, 97, 114, 46, 114,
    103, 98, 44, 32, 109, 97, 120, 40, 115, 112, 101, 99, 117, 108, 97, 114, 46,
    114, 103, 98, 44, 32, 118, 101, 99, 51, 40, 103, 108, 111, 115, 115, 41, 41,
    44, 32, 67, 97, 108, 99, 70, 114, 101, 115, 110, 101, 108, 40, 78, 69, 41,
    41, 59, 10, 32, 32, 35, 101, 108, 115, 101, 10, 9, 47, 47, 32, 102, 114,
    111, 109, 32, 104, 116, 116, 112, 58, 47, 47, 97, 100, 118, 97, 110, 99,
    101, 115, 46, 114, 101, 97, 108, 116, 105, 109, 101, 114, 101, 110, 100,
    101, 114, 105, 110, 103, 46, 99, 111, 109, 47, 115, 50, 48, 49, 49, 47, 76,
    97, 122, 97, 114, 111, 118, 45, 80, 104, 121, 115, 105, 99, 97, 108, 108,
    121, 45, 66, 97, 115, 101, 100, 45, 76, 105, 103, 104, 116, 105, 110, 103,
    45, 105, 110, 45, 66, 108, 97, 99, 107, 45, 79, 112, 115, 37, 50, 48, 37,
    50, 56, 83, 105, 103, 103, 114, 97, 112, 104, 37, 50, 48, 50, 48, 49, 49,
    37, 50, 48, 65, 100, 118, 97, 110, 99, 101, 115, 37, 50, 48, 105, 110, 37,
    50, 48, 82, 101, 97, 108, 45, 84, 105, 109, 101, 37, 50, 48, 82, 101, 110,
    100, 101, 114, 105, 110, 103, 37, 50, 48, 67, 111, 117, 114, 115, 101, 37,
    50, 57, 46, 112, 112, 116, 120, 10, 9, 114, 101, 116, 117, 114, 110, 32,
    109, 105, 120, 40, 115, 112, 101, 99, 117, 108, 97, 114, 46, 114, 103, 98,
    44, 32, 118, 101, 99, 51, 40, 49, 46, 48, 41, 44, 32, 67, 97, 108, 99, 70,
    114, 101, 115, 110, 101, 108, 40, 78, 69, 41, 32, 47, 32, 40, 52, 46, 48,
    32, 45, 32, 51, 46, 48, 32, 42, 32, 103, 108, 111, 115, 115, 41, 41, 59, 10,
    32, 32, 35, 101, 110, 100, 105, 102, 10, 125, 10, 10, 102, 108, 111, 97,
    116, 32, 67, 97, 108, 99, 66, 108, 105, 110, 110, 40, 102, 108, 111, 97,
    116, 32, 78, 72, 44, 32, 102, 108, 111, 97, 116, 32, 115, 104, 105, 110,
    105, 110, 101, 115, 115, 41, 10, 123, 10, 35, 105, 102, 32, 100, 101, 102,
    105, 110, 101, 100, 40, 85, 83, 69, 95, 66, 76, 73, 78, 78, 41, 32, 124,
    124, 32, 100, 101, 102, 105, 110, 101, 100, 40, 85, 83, 69, 95, 66, 76, 73,
    78, 78, 95, 70, 82, 69, 83, 78, 69, 76, 41, 10, 9, 47, 47, 32, 78, 111, 114,
    109, 97, 108, 105, 122, 101, 100, 32, 66, 108, 105, 110, 110, 45, 80, 104,
    111, 110, 103, 10, 9, 102, 108, 111, 97, 116, 32, 110, 111, 114, 109, 32,
    61, 32, 115, 104, 105, 110, 105, 110, 101, 115, 115, 32, 42, 32, 48, 46, 49,
    50, 53, 32, 32, 32, 32, 43, 32, 49, 46, 48, 59, 10, 35, 101, 108, 105, 102,
    32, 100, 101, 102, 105, 110, 101, 100, 40, 85, 83, 69, 95, 77, 67, 65, 85,
    76, 69, 89, 41, 10, 9, 47, 47, 32, 67, 111, 111, 107, 45, 84, 111, 114, 114,
    97, 110, 99, 101, 32, 97, 115, 32, 100, 111, 110, 101, 32, 98, 121, 32, 83,
    116, 101, 112, 104, 101, 110, 32, 77, 99, 65, 117, 108, 101, 121, 10, 9, 47,
    47, 32, 104, 116, 116, 112, 58, 47, 47, 98, 108, 111, 103, 46, 115, 101,
    108, 102, 115, 104, 97, 100, 111, 119, 46, 99, 111, 109, 47, 112, 117, 98,
    108, 105, 99, 97, 116, 105, 111, 110, 115, 47, 115, 50, 48, 49, 50, 45, 115,
    104, 97, 100, 105, 110, 103, 45, 99, 111, 117, 114, 115, 101, 47, 109, 99,
    97, 117, 108, 101, 121, 47, 115, 50, 48, 49, 50, 95, 112, 98, 115, 95, 102,
    97, 114, 99, 114, 121, 51, 95, 110, 111, 116, 101, 115, 95, 118, 50, 46,
    112, 100, 102, 10, 9, 102, 108, 111, 97, 116, 32, 110, 111, 114, 109, 32,
    61, 32, 115, 104, 105, 110, 105, 110, 101, 115, 115, 32, 42, 32, 48, 46, 50,
    53, 32, 32, 32, 32, 32, 43, 32, 48, 46, 49, 50, 53, 59, 10, 35, 101, 108,
    105, 102, 32, 100, 101, 102, 105, 110, 101, 100, 40, 85, 83, 69, 95, 71, 79,
    84, 65, 78, 68, 65, 41, 10, 9, 47, 47, 32, 78, 101, 117, 109, 97, 110, 110,
    45, 78, 101, 117, 109, 97, 110, 110, 32, 97, 115, 32, 100, 111, 110, 101,
    32, 98, 121, 32, 89, 111, 115, 104, 105, 104, 97, 114, 117, 32, 71, 111,
    116, 97, 110, 100, 97, 10, 9, 47, 47, 32, 104, 116, 116, 112, 58, 47, 47,
    114, 101, 115, 101, 97, 114, 99, 104, 46, 116, 114, 105, 45, 97, 99, 101,
    46, 99, 111, 109, 47, 68, 97, 116, 97, 47, 115, 50, 48, 49, 50, 95, 98, 101,
    121, 111, 110, 100, 95, 67, 111, 117, 114, 115, 101, 78, 111, 116, 101, 115,
    46, 112, 100, 102, 10, 9, 102, 108, 111, 97, 116, 32, 110, 111, 114, 109,
    32, 61, 32, 115, 104, 105, 110, 105, 110, 101, 115, 115, 32, 42, 32, 48, 46,
    49, 50, 52, 56, 53, 56, 32, 43, 32, 48, 46, 50, 54, 57, 49, 56, 50, 59, 10,
    35, 101, 108, 105, 102, 32, 100, 101, 102, 105, 110, 101, 100, 40, 85, 83,
    69, 95, 76, 65, 90, 65, 82, 79, 86, 41, 10, 9, 47, 47, 32, 67, 111, 111,
    107, 45, 84, 111, 114, 114, 97, 110, 99, 101, 32, 97, 115, 32, 100, 111,
    110, 101, 32, 98, 121, 32, 68, 105, 109, 105, 116, 97, 114, 32, 76, 97, 122,
    97, 114, 111, 118, 10, 9, 47, 47, 32, 104, 116, 116, 112, 58, 47, 47, 98,
    108, 111, 103, 46, 115, 101, 108, 102, 115, 104, 97, 100, 111, 119, 46, 99,
    111, 109, 47, 112, 117, 98, 108, 105, 99, 97, 116, 105, 111, 110, 115, 47,
    115, 50, 48, 49, 51, 45, 115, 104, 97, 100, 105, 110, 103, 45, 99, 111, 117,
    114, 115, 101, 47, 108, 97, 122, 97, 114, 111, 118, 47, 115, 50, 48, 49, 51,
    95, 112, 98, 115, 95, 98, 108, 97, 99, 107, 95, 111, 112, 115, 95, 50, 95,
    110, 111, 116, 101, 115, 46, 112, 100, 102, 10, 9, 102, 108, 111, 97, 116,
    32, 110, 111, 114, 109, 32, 61, 32, 115, 104, 105, 110, 105, 110, 101, 115,
    115, 32, 42, 32, 48, 46, 49, 50, 53, 32, 32, 32, 32, 43, 32, 48, 46, 50, 53,
    59, 10, 35, 101, 108, 115, 101, 10, 9, 102, 108, 111, 97, 116, 32, 110, 111,
    114, 109, 32, 61, 32, 49, 46, 48, 59, 10, 35, 101, 110, 100, 105, 102, 10,
    10, 35, 105, 102, 32, 48, 10, 9, 47, 47, 32, 102, 114, 111, 109, 32, 104,
    116, 116, 112, 58, 47, 47, 115, 101, 98, 108, 97, 103, 97, 114, 100, 101,
    46, 119, 111, 114, 100, 112, 114, 101, 115, 115, 46, 99, 111, 109, 47, 50,
    48, 49, 50, 47, 48, 54, 47, 48, 51, 47, 115, 112, 104, 101, 114, 105, 99,
    97, 108, 45, 103, 97, 117, 115, 115, 105, 101, 110, 45, 97, 112, 112, 114,
    111, 120, 105, 109, 97, 116, 105, 111, 110, 45, 102, 111, 114, 45, 98, 108,
    105, 110, 110, 45, 112, 104, 111, 110, 103, 45, 112, 104, 111, 110, 103, 45,
    97, 110, 100, 45, 102, 114, 101, 115, 110, 101, 108, 47, 10, 9, 102, 108,
    111, 97, 116, 32, 97, 32, 61, 32, 115, 104, 105, 110, 105, 110, 101, 115,
    115, 32, 43, 32, 48, 46, 55, 55, 53, 59, 10, 9, 114, 101, 116, 117, 114,
    110, 32, 110, 111, 114, 109, 32, 42, 32, 101, 120, 112, 40, 97, 32, 42, 32,
    78, 72, 32, 45, 32, 97, 41, 59, 10, 35, 101, 108, 115, 101, 10, 9, 114, 101,
    116, 117, 114, 110, 32, 110, 111, 114, 109, 32, 42, 32, 112, 111, 119, 40,
    78, 72, 44, 32, 115, 104, 105, 110, 105, 110, 101, 115, 115, 41, 59, 10, 35,
    101, 110, 100, 105, 102, 10, 125, 10, 10, 102, 108, 111, 97, 116, 32, 67,
    97, 108, 99, 71, 71, 88, 40, 102, 108, 111, 97, 116, 32, 78, 72, 44, 32,
    102, 108, 111, 97, 116, 32, 103, 108, 111, 115, 115, 41, 10, 123, 10, 9, 47,
    47, 32, 102, 114, 111, 109, 32, 104, 116, 116, 112, 58, 47, 47, 98, 108,
    111, 103, 46, 115, 101, 108, 102, 115, 104, 97, 100, 111, 119, 46, 99, 111,
    109, 47, 112, 117, 98, 108, 105, 99, 97, 116, 105, 111, 110, 115, 47, 115,
    50, 48, 49, 51, 45, 115, 104, 97, 100, 105, 110, 103, 45, 99, 111, 117, 114,
    115, 101, 47, 107, 97, 114, 105, 115, 47, 115, 50, 48, 49, 51, 95, 112, 98,
    115, 95, 101, 112, 105, 99, 95, 110, 111, 116, 101, 115, 95, 118, 50, 46,
    112, 100, 102, 10, 9, 102, 108, 111, 97, 116, 32, 97, 95, 115, 113, 32, 61,
    32, 101, 120, 112, 50, 40, 103, 108, 111, 115, 115, 32, 42, 32, 45, 49, 51,
    46, 48, 32, 43, 32, 49, 46, 48, 41, 59, 10, 9, 102, 108, 111, 97, 116, 32,
    100, 32, 61, 32, 40, 40, 78, 72, 32, 42, 32, 78, 72, 41, 32, 42, 32, 40, 97,
    95, 115, 113, 32, 45, 32, 49, 46, 48, 41, 32, 43, 32, 49, 46, 48, 41, 59,
    10, 9, 114, 101, 116, 117, 114, 110, 32, 97, 95, 115, 113, 32, 47, 32, 40,
    100, 32, 42, 32, 100, 41, 59, 10, 125, 10, 10, 102, 108, 111, 97, 116, 32,
    67, 97, 108, 99, 70, 114, 101, 115, 110, 101, 108, 40, 102, 108, 111, 97,
    116, 32, 69, 72, 41, 10, 123, 10, 35, 105, 102, 32, 49, 10, 9, 47, 47, 32,
    70, 114, 111, 109, 32, 104, 116, 116, 112, 58, 47, 47, 98, 108, 111, 103,
    46, 115, 101, 108, 102, 115, 104, 97, 100, 111, 119, 46, 99, 111, 109, 47,
    112, 117, 98, 108, 105, 99, 97, 116, 105, 111, 110, 115, 47, 115, 50, 48,
    49, 51, 45, 115, 104, 97, 100, 105, 110, 103, 45, 99, 111, 117, 114, 115,
    101, 47, 108, 97, 122, 97, 114, 111, 118, 47, 115, 50, 48, 49, 51, 95, 112,
    98, 115, 95, 98, 108, 97, 99, 107, 95, 111, 112, 115, 95, 50, 95, 110, 111,
    116, 101, 115, 46, 112, 100, 102, 10, 9, 47, 47, 32, 110, 111, 116, 32, 97,
    99, 99, 117, 114, 97, 116, 101, 44, 32, 98, 117, 116, 32, 102, 97, 115, 116,
    10, 9, 114, 101, 116, 117, 114, 110, 32, 101, 120, 112, 50, 40, 45, 49, 48,
    46, 48, 32, 42, 32, 69, 72, 41, 59, 10, 35, 101, 108, 105, 102, 32, 48, 10,
    9, 47, 47, 32, 70, 114, 111, 109, 32, 104, 116, 116, 112, 58, 47, 47, 115,
    101, 98, 108, 97, 103, 97, 114, 100, 101, 46, 119, 111, 114, 100, 112, 114,
    101, 115, 115, 46, 99, 111, 109, 47, 50, 48, 49, 50, 47, 48, 54, 47, 48, 51,
    47, 115, 112, 104, 101, 114, 105, 99, 97, 108, 45, 103, 97, 117, 115, 115,
    105, 101, 110, 45, 97, 112, 112, 114, 111, 120, 105, 109, 97, 116, 105, 111,
    110, 45, 102, 111, 114, 45, 98, 108, 105, 110, 110, 45, 112, 104, 111, 110,
    103, 45, 112, 104, 111, 110, 103, 45, 97, 110, 100, 45, 102, 114, 101, 115,
    110, 101, 108, 47, 10, 9, 114, 101, 116, 117, 114, 110, 32, 101, 120, 112,
    50, 40, 40, 45, 53, 46, 53, 53, 52, 55, 51, 32, 42, 32, 69, 72, 32, 45, 32,
    54, 46, 57, 56, 51, 49, 54, 41, 32, 42, 32, 69, 72, 41, 59, 10, 35, 101,
    108, 105, 102, 32, 48, 10, 9, 102, 108, 111, 97, 116, 32, 98, 108, 101, 110,
    100, 32, 61, 32, 49, 46, 48, 32, 45, 32, 69, 72, 59, 10, 9, 102, 108, 111,
    97, 116, 32, 98, 108, 101, 110, 100, 50, 32, 61, 32, 98, 108, 101, 110, 100,
    32, 42, 32, 98, 108, 101, 110, 100, 59, 10, 9, 98, 108, 101, 110, 100, 32,
    42, 61, 32, 98, 108, 101, 110, 100, 50, 32, 42, 32, 98, 108, 101, 110, 100,
    50, 59, 10, 9, 10, 9, 114, 101, 116, 117, 114, 110, 32, 98, 108, 101, 110,
    100, 59, 10, 35, 101, 108, 115, 101, 10, 9, 114, 101, 116, 117, 114, 110,
    32, 112, 111, 119, 40, 49, 46, 48, 32, 45, 32, 69, 72, 44, 32, 53, 46, 48,
    41, 59, 10, 35, 101, 110, 100, 105, 102, 10, 125, 10, 10, 102, 108, 111, 97,
    116, 32, 67, 97, 108, 99, 86, 105, 115, 105, 98, 105, 108, 105, 116, 121,
    40, 102, 108, 111, 97, 116, 32, 78, 72, 44, 32, 102, 108, 111, 97, 116, 32,
    78, 76, 44, 32, 102, 108, 111, 97, 116, 32, 78, 69, 44, 32, 102, 108, 111,
    97, 116, 32, 69, 72, 44, 32, 102, 108, 111, 97, 116, 32, 103, 108, 111, 115,
    115, 41, 10, 123, 10, 35, 105, 102, 32, 100, 101, 102, 105, 110, 101, 100,
    40, 85, 83, 69, 95, 71, 79, 84, 65, 78, 68, 65, 41, 10, 9, 47, 47, 32, 78,
    101, 117, 109, 97, 110, 110, 45, 78, 101, 117, 109, 97, 110, 110, 32, 97,
    115, 32, 100, 111, 110, 101, 32, 98, 121, 32, 89, 111, 115, 104, 105, 104,
    97, 114, 117, 32, 71, 111, 116, 97, 110, 100, 97, 10, 9, 47, 47, 32, 104,
    116, 116, 112, 58, 47, 47, 114, 101, 115, 101, 97, 114, 99, 104, 46, 116,
    114, 105, 45, 97, 99, 101, 46, 99, 111, 109, 47, 68, 97, 116, 97, 47, 115,
    50, 48, 49, 50, 95, 98, 101, 121, 111, 110, 100, 95, 67, 111, 117, 114, 115,
    101, 78, 111, 116, 101, 115, 46, 112, 100, 102, 10, 9, 114, 101, 116, 117,
    114, 110, 32, 49, 46, 48, 32, 47, 32, 109, 97, 120, 40, 109, 97, 120, 40,
    78, 76, 44, 32, 78, 69, 41, 44, 32, 69, 80, 83, 73, 76, 79, 78, 41, 59, 10,
    35, 101, 108, 105, 102, 32, 100, 101, 102, 105, 110, 101, 100, 40, 85, 83,
    69, 95, 76, 65, 90, 65, 82, 79, 86, 41, 10, 9, 47, 47, 32, 67, 111, 111,
    107, 45, 84, 111, 114, 114, 97, 110, 99, 101, 32, 97, 115, 32, 100, 111,
    110, 101, 32, 98, 121, 32, 68, 105, 109, 105, 116, 97, 114, 32, 76, 97, 122,
    97, 114, 111, 118, 10, 9, 47, 47, 32, 104, 116, 116, 112, 58, 47, 47, 98,
    108, 111, 103, 46, 115, 101, 108, 102, 115, 104, 97, 100, 111, 119, 46, 99,
    111, 109, 47, 112, 117, 98, 108, 105, 99, 97, 116, 105, 111, 110, 115, 47,
    115, 50, 48, 49, 51, 45, 115, 104, 97, 100, 105, 110, 103, 45, 99, 111, 117,
    114, 115, 101, 47, 108, 97, 122, 97, 114, 111, 118, 47, 115, 50, 48, 49, 51,
    95, 112, 98, 115, 95, 98, 108, 97, 99, 107, 95, 111, 112, 115, 95, 50, 95,
    110, 111, 116, 101, 115, 46, 112, 100, 102, 10, 9, 102, 108, 111, 97, 116,
    32, 107, 32, 61, 32, 109, 105, 110, 40, 49, 46, 48, 44, 32, 103, 108, 111,
    115, 115, 32, 43, 32, 48, 46, 53, 52, 53, 41, 59, 10, 9, 114, 101, 116, 117,
    114, 110, 32, 49, 46, 48, 32, 47, 32, 40, 107, 32, 42, 32, 40, 69, 72, 32,
    42, 32, 69, 72, 32, 45, 32, 49, 46, 48, 41, 32, 43, 32, 49, 46, 48, 41, 59,
    10, 35, 101, 108, 105, 102, 32, 100, 101, 102, 105, 110, 101, 100, 40, 85,
    83, 69, 95, 71, 71, 88, 41, 10, 9, 102, 108, 111, 97, 116, 32, 114, 111,
    117, 103, 104, 110, 101, 115, 115, 32, 61, 32, 101, 120, 112, 50, 40, 103,
    108, 111, 115, 115, 32, 42, 32, 45, 54, 46, 53, 41, 59, 10, 10, 9, 47, 47,
    32, 77, 111, 100, 105, 102, 105, 101, 100, 32, 102, 114, 111, 109, 32, 104,
    116, 116, 112, 58, 47, 47, 98, 108, 111, 103, 46, 115, 101, 108, 102, 115,
    104, 97, 100, 111, 119, 46, 99, 111, 109, 47, 112, 117, 98, 108, 105, 99,
    97, 116, 105, 111, 110, 115, 47, 115, 50, 48, 49, 51, 45, 115, 104, 97, 100,
    105, 110, 103, 45, 99, 111, 117, 114, 115, 101, 47, 107, 97, 114, 105, 115,
    47, 115, 50, 48, 49, 51, 95, 112, 98, 115, 95, 101, 112, 105, 99, 95, 110,
    111, 116, 101, 115, 95, 118, 50, 46, 112, 100, 102, 10, 9, 47, 47, 32, 78,
    76, 44, 32, 78, 69, 32, 105, 110, 32, 110, 117, 109, 101, 114, 97, 116, 111,
    114, 32, 102, 97, 99, 116, 111, 114, 101, 100, 32, 111, 117, 116, 32, 102,
    114, 111, 109, 32, 99, 111, 111, 107, 45, 116, 111, 114, 114, 97, 110, 99,
    101, 10, 9, 102, 108, 111, 97, 116, 32, 107, 32, 61, 32, 114, 111, 117, 103,
    104, 110, 101, 115, 115, 32, 43, 32, 49, 46, 48, 59, 10, 9, 107, 32, 42, 61,
    32, 107, 32, 42, 32, 48, 46, 49, 50, 53, 59, 10, 10, 9, 102, 108, 111, 97,
    116, 32, 107, 50, 32, 61, 32, 49, 46, 48, 32, 45, 32, 107, 59, 10, 9, 10, 9,
    102, 108, 111, 97, 116, 32, 105, 110, 118, 71, 101, 111, 49, 32, 61, 32, 78,
    76, 32, 42, 32, 107, 50, 32, 43, 32, 107, 59, 10, 9, 102, 108, 111, 97, 116,
    32, 105, 110, 118, 71, 101, 111, 50, 32, 61, 32, 78, 69, 32, 42, 32, 107,
    50, 32, 43, 32, 107, 59, 10, 10, 9, 114, 101, 116, 117, 114, 110, 32, 49,
    46, 48, 32, 47, 32, 40, 105, 110, 118, 71, 101, 111, 49, 32, 42, 32, 105,
    110, 118, 71, 101, 111, 50, 41, 59, 10, 35, 101, 108, 115, 101, 10, 9, 114,
    101, 116, 117, 114, 110, 32, 49, 46, 48, 59, 10, 35, 101, 110, 100, 105,
    102, 10, 125, 10, 10, 10, 118, 101, 99, 51, 32, 67, 97, 108, 99, 83, 112,
    101, 99, 117, 108, 97, 114, 40, 118, 101, 99, 51, 32, 115, 112, 101, 99,
    117, 108, 97, 114, 44, 32, 102, 108, 111, 97, 116, 32, 78, 72, 44, 32, 102,
    108, 111, 97, 116, 32, 78, 76, 44, 32, 102, 108, 111, 97, 116, 32, 78, 69,
    44, 32, 102, 108, 111, 97, 116, 32, 69, 72, 44, 32, 102, 108, 111, 97, 116,
    32, 103, 108, 111, 115, 115, 44, 32, 102, 108, 111, 97, 116, 32, 115, 104,
    105, 110, 105, 110, 101, 115, 115, 41, 10, 123, 10, 35, 105, 102, 32, 100,
    101, 102, 105, 110, 101, 100, 40, 85, 83, 69, 95, 71, 71, 88, 41, 10, 9,
    102, 108, 111, 97, 116, 32, 100, 105, 115, 116, 114, 105, 98, 32, 61, 32,
    67, 97, 108, 99, 71, 71, 88, 40, 78, 72, 44, 32, 103, 108, 111, 115, 115,
    41, 59, 10, 35, 101, 108, 115, 101, 10, 9, 102, 108, 111, 97, 116, 32, 100,
    105, 115, 116, 114, 105, 98, 32, 61, 32, 67, 97, 108, 99, 66, 108, 105, 110,
    110, 40, 78, 72, 44, 32, 115, 104, 105, 110, 105, 110, 101, 115, 115, 41,
    59, 10, 35, 101, 110, 100, 105, 102, 10, 10, 35, 105, 102, 32, 100, 101,
    102, 105, 110, 101, 100, 40, 85, 83, 69, 95, 66, 76, 73, 78, 78, 41, 10, 9,
    118, 101, 99, 51, 32, 102, 83, 112, 101, 99, 117, 108, 97, 114, 32, 61, 32,
    115, 112, 101, 99, 117, 108, 97, 114, 59, 10, 35, 101, 108, 115, 101, 10, 9,
    118, 101, 99, 51, 32, 102, 83, 112, 101, 99, 117, 108, 97, 114, 32, 61, 32,
    109, 105, 120, 40, 115, 112, 101, 99, 117, 108, 97, 114, 44, 32, 118, 101,
    99, 51, 40, 49, 46, 48, 41, 44, 32, 67, 97, 108, 99, 70, 114, 101, 115, 110,
    101, 108, 40, 69, 72, 41, 41, 59, 10, 35, 101, 110, 100, 105, 102, 10, 10,
    9, 102, 108, 111, 97, 116, 32, 118, 105, 115, 32, 61, 32, 67, 97, 108, 99,
    86, 105, 115, 105, 98, 105, 108, 105, 116, 121, 40, 78, 72, 44, 32, 78, 76,
    44, 32, 78, 69, 44, 32, 69, 72, 44, 32, 103, 108, 111, 115, 115, 41, 59, 10,
    10, 9, 114, 101, 116, 117, 114, 110, 32, 102, 83, 112, 101, 99, 117, 108,
    97, 114, 32, 42, 32, 40, 100, 105, 115, 116, 114, 105, 98, 32, 42, 32, 118,
    105, 115, 41, 59, 10, 125, 10, 10, 10, 102, 108, 111, 97, 116, 32, 67, 97,
    108, 99, 76, 105, 103, 104, 116, 65, 116, 116, 101, 110, 117, 97, 116, 105,
    111, 110, 40, 102, 108, 111, 97, 116, 32, 112, 111, 105, 110, 116, 44, 32,
    102, 108, 111, 97, 116, 32, 110, 111, 114, 109, 68, 105, 115, 116, 41, 10,
    123, 10, 9, 47, 47, 32, 122, 101, 114, 111, 32, 108, 105, 103, 104, 116, 32,
    97, 116, 32, 49, 46, 48, 44, 32, 97, 112, 112, 114, 111, 120, 105, 109, 97,
    116, 105, 110, 103, 32, 113, 51, 32, 115, 116, 121, 108, 101, 10, 9, 47, 47,
    32, 97, 108, 115, 111, 32, 100, 111, 110, 39, 116, 32, 97, 116, 116, 101,
    110, 117, 97, 116, 101, 32, 100, 105, 114, 101, 99, 116, 105, 111, 110, 97,
    108, 32, 108, 105, 103, 104, 116, 10, 9, 102, 108, 111, 97, 116, 32, 97,
    116, 116, 101, 110, 117, 97, 116, 105, 111, 110, 32, 61, 32, 40, 48, 46, 53,
    32, 42, 32, 110, 111, 114, 109, 68, 105, 115, 116, 32, 45, 32, 49, 46, 53,
    41, 32, 42, 32, 112, 111, 105, 110, 116, 32, 43, 32, 49, 46, 48, 59, 10, 10,
    9, 47, 47, 32, 99, 108, 97, 109, 112, 32, 97, 116, 116, 101, 110, 117, 97,
    116, 105, 111, 110, 10, 9, 35, 105, 102, 32, 100, 101, 102, 105, 110, 101,
    100, 40, 78, 79, 95, 76, 73, 71, 72, 84, 95, 67, 76, 65, 77, 80, 41, 10, 9,
    97, 116, 116, 101, 110, 117, 97, 116, 105, 111, 110, 32, 61, 32, 109, 97,
    120, 40, 97, 116, 116, 101, 110, 117, 97, 116, 105, 111, 110, 44, 32, 48,
    46, 48, 41, 59, 10, 9, 35, 101, 108, 115, 101, 10, 9, 97, 116, 116, 101,
    110, 117, 97, 116, 105, 111, 110, 32, 61, 32, 99, 108, 97, 109, 112, 40, 97,
    116, 116, 101, 110, 117, 97, 116, 105, 111, 110, 44, 32, 48, 46, 48, 44, 32,
    49, 46, 48, 41, 59, 10, 9, 35, 101, 110, 100, 105, 102, 10, 10, 9, 114, 101,
    116, 117, 114, 110, 32, 97, 116, 116, 101, 110, 117, 97, 116, 105, 111, 110,
    59, 10, 125, 10, 10, 35, 105, 102, 32, 100, 101, 102, 105, 110, 101, 100,
    40, 85, 83, 69, 95, 76, 73, 71, 72, 84, 41, 10, 47, 47, 32, 102, 114, 111,
    109, 32, 104, 116, 116, 112, 58, 47, 47, 119, 119, 119, 46, 116, 104, 101,
    116, 101, 110, 116, 104, 112, 108, 97, 110, 101, 116, 46, 100, 101, 47, 97,
    114, 99, 104, 105, 118, 101, 115, 47, 49, 49, 56, 48, 10, 109, 97, 116, 51,
    32, 99, 111, 116, 97, 110, 103, 101, 110, 116, 95, 102, 114, 97, 109, 101,
    40, 32, 118, 101, 99, 51, 32, 78, 44, 32, 118, 101, 99, 51, 32, 112, 44, 32,
    118, 101, 99, 50, 32, 117, 118, 32, 41, 10, 123, 10, 9, 47, 47, 32, 103,
    101, 116, 32, 101, 100, 103, 101, 32, 118, 101, 99, 116, 111, 114, 115, 32,
    111, 102, 32, 116, 104, 101, 32, 112, 105, 120, 101, 108, 32, 116, 114, 105,
    97, 110, 103, 108, 101, 10, 9, 118, 101, 99, 51, 32, 100, 112, 49, 32, 61,
    32, 100, 70, 100, 120, 40, 32, 112, 32, 41, 59, 10, 9, 118, 101, 99, 51, 32,
    100, 112, 50, 32, 61, 32, 100, 70, 100, 121, 40, 32, 112, 32, 41, 59, 10, 9,
    118, 101, 99, 50, 32, 100, 117, 118, 49, 32, 61, 32, 100, 70, 100, 120, 40,
    32, 117, 118, 32, 41, 59, 10, 9, 118, 101, 99, 50, 32, 100, 117, 118, 50,
    32, 61, 32, 100, 70, 100, 121, 40, 32, 117, 118, 32, 41, 59, 10, 10, 9, 47,
    47, 32, 115, 111, 108, 118, 101, 32, 116, 104, 101, 32, 108, 105, 110, 101,
    97, 114, 32, 115, 121, 115, 116, 101, 109, 10, 9, 118, 101, 99, 51, 32, 100,
    112, 50, 112, 101, 114, 112, 32, 61, 32, 99, 114, 111, 115, 115, 40, 32,
    100, 112, 50, 44, 32, 78, 32, 41, 59, 10, 9, 118, 101, 99, 51, 32, 100, 112,
    49, 112, 101, 114, 112, 32, 61, 32, 99, 114, 111, 115, 115, 40, 32, 78, 44,
    32, 100, 112, 49, 32, 41, 59, 10, 9, 118, 101, 99, 51, 32, 84, 32, 61, 32,
    100, 112, 50, 112, 101, 114, 112, 32, 42, 32, 100, 117, 118, 49, 46, 120,
    32, 43, 32, 100, 112, 49, 112, 101, 114, 112, 32, 42, 32, 100, 117, 118, 50,
    46, 120, 59, 10, 9, 118, 101, 99, 51, 32, 66, 32, 61, 32, 100, 112, 50, 112,
    101, 114, 112, 32, 42, 32, 100, 117, 118, 49, 46, 121, 32, 43, 32, 100, 112,
    49, 112, 101, 114, 112, 32, 42, 32, 100, 117, 118, 50, 46, 121, 59, 10, 10,
    9, 47, 47, 32, 99, 111, 110, 115, 116, 114, 117, 99, 116, 32, 97, 32, 115,
    99, 97, 108, 101, 45, 105, 110, 118, 97, 114, 105, 97, 110, 116, 32, 102,
    114, 97, 109, 101, 32, 10, 9, 102, 108, 111, 97, 116, 32, 105, 110, 118,
    109, 97, 120, 32, 61, 32, 105, 110, 118, 101, 114, 115, 101, 115, 113, 114,
    116, 40, 32, 109, 97, 120, 40, 32, 100, 111, 116, 40, 84, 44, 84, 41, 44,
    32, 100, 111, 116, 40, 66, 44, 66, 41, 32, 41, 32, 41, 59, 10, 9, 114, 101,
    116, 117, 114, 110, 32, 109, 97, 116, 51, 40, 32, 84, 32, 42, 32, 105, 110,
    118, 109, 97, 120, 44, 32, 66, 32, 42, 32, 105, 110, 118, 109, 97, 120, 44,
    32, 78, 32, 41, 59, 10, 125, 10, 35, 101, 110, 100, 105, 102, 10, 10, 118,
    111, 105, 100, 32, 109, 97, 105, 110, 40, 41, 10, 123, 10, 9, 118, 101, 99,
    51, 32, 76, 44, 32, 78, 44, 32, 69, 44, 32, 72, 59, 10, 9, 102, 108, 111,
    97, 116, 32, 78, 76, 44, 32, 78, 72, 44, 32, 78, 69, 44, 32, 69, 72, 59, 10,
    10, 35, 105, 102, 32, 100, 101, 102, 105, 110, 101, 100, 40, 85, 83, 69, 95,
    76, 73, 71, 72, 84, 41, 32, 38, 38, 32, 33, 100, 101, 102, 105, 110, 101,
    100, 40, 85, 83, 69, 95, 70, 65, 83, 84, 95, 76, 73, 71, 72, 84, 41, 10, 32,
    32, 35, 105, 102, 32, 100, 101, 102, 105, 110, 101, 100, 40, 85, 83, 69, 95,
    86, 69, 82, 84, 95, 84, 65, 78, 71, 69, 78, 84, 95, 83, 80, 65, 67, 69, 41,
    10, 9, 109, 97, 116, 51, 32, 116, 97, 110, 103, 101, 110, 116, 84, 111, 87,
    111, 114, 108, 100, 32, 61, 32, 109, 97, 116, 51, 40, 118, 97, 114, 95, 84,
    97, 110, 103, 101, 110, 116, 46, 120, 121, 122, 44, 32, 118, 97, 114, 95,
    66, 105, 116, 97, 110, 103, 101, 110, 116, 46, 120, 121, 122, 44, 32, 118,
    97, 114, 95, 78, 111, 114, 109, 97, 108, 46, 120, 121, 122, 41, 59, 10, 9,
    69, 32, 61, 32, 118, 101, 99, 51, 40, 118, 97, 114, 95, 78, 111, 114, 109,
    97, 108, 46, 119, 44, 32, 118, 97, 114, 95, 84, 97, 110, 103, 101, 110, 116,
    46, 119, 44, 32, 118, 97, 114, 95, 66, 105, 116, 97, 110, 103, 101, 110,
    116, 46, 119, 41, 59, 10, 32, 32, 35, 101, 108, 115, 101, 10, 9, 109, 97,
    116, 51, 32, 116, 97, 110, 103, 101, 110, 116, 84, 111, 87, 111, 114, 108,
    100, 32, 61, 32, 99, 111, 116, 97, 110, 103, 101, 110, 116, 95, 102, 114,
    97, 109, 101, 40, 118, 97, 114, 95, 78, 111, 114, 109, 97, 108, 44, 32, 45,
    118, 97, 114, 95, 86, 105, 101, 119, 68, 105, 114, 44, 32, 118, 97, 114, 95,
    84, 101, 120, 67, 111, 111, 114, 100, 115, 46, 120, 121, 41, 59, 10, 9, 69,
    32, 61, 32, 118, 97, 114, 95, 86, 105, 101, 119, 68, 105, 114, 59, 10, 32,
    32, 35, 101, 110, 100, 105, 102, 10, 10, 9, 69, 32, 61, 32, 110, 111, 114,
    109, 97, 108, 105, 122, 101, 40, 69, 41, 59, 10, 10, 9, 76, 32, 61, 32, 118,
    97, 114, 95, 76, 105, 103, 104, 116, 68, 105, 114, 46, 120, 121, 122, 59,
    10, 32, 32, 35, 105, 102, 32, 100, 101, 102, 105, 110, 101, 100, 40, 85, 83,
    69, 95, 68, 69, 76, 85, 88, 69, 77, 65, 80, 41, 10, 9, 76, 32, 43, 61, 32,
    40, 116, 101, 120, 116, 117, 114, 101, 50, 68, 40, 117, 95, 68, 101, 108,
    117, 120, 101, 77, 97, 112, 44, 32, 118, 97, 114, 95, 84, 101, 120, 67, 111,
    111, 114, 100, 115, 46, 122, 119, 41, 46, 120, 121, 122, 32, 45, 32, 118,
    101, 99, 51, 40, 48, 46, 53, 41, 41, 32, 42, 32, 117, 95, 69, 110, 97, 98,
    108, 101, 84, 101, 120, 116, 117, 114, 101, 115, 46, 121, 59, 10, 32, 32,
    35, 101, 110, 100, 105, 102, 10, 9, 102, 108, 111, 97, 116, 32, 115, 113,
    114, 76, 105, 103, 104, 116, 68, 105, 115, 116, 32, 61, 32, 100, 111, 116,
    40, 76, 44, 32, 76, 41, 59, 10, 35, 101, 110, 100, 105, 102, 10, 10, 35,
    105, 102, 32, 100, 101, 102, 105, 110, 101, 100, 40, 85, 83, 69, 95, 76, 73,
    71, 72, 84, 77, 65, 80, 41, 10, 9, 118, 101, 99, 52, 32, 108, 105, 103, 104,
    116, 83, 97, 109, 112, 108, 101, 32, 61, 32, 116, 101, 120, 116, 117, 114,
    101, 50, 68, 40, 117, 95, 76, 105, 103, 104, 116, 77, 97, 112, 44, 32, 118,
    97, 114, 95, 84, 101, 120, 67, 111, 111, 114, 100, 115, 46, 122, 119, 41,
    59, 10, 9, 118, 101, 99, 51, 32, 108, 105, 103, 104, 116, 67, 111, 108, 111,
    114, 32, 61, 32, 108, 105, 103, 104, 116, 83, 97, 109, 112, 108, 101, 46,
    114, 103, 98, 59, 10, 32, 32, 35, 105, 102, 32, 100, 101, 102, 105, 110,
    101, 100, 40, 82, 71, 66, 77, 95, 76, 73, 71, 72, 84, 77, 65, 80, 41, 10, 9,
    108, 105, 103, 104, 116, 67, 111, 108, 111, 114, 32, 42, 61, 32, 51, 50, 46,
    48, 32, 42, 32, 108, 105, 103, 104, 116, 83, 97, 109, 112, 108, 101, 46, 97,
    59, 10, 32, 32, 35, 101, 110, 100, 105, 102, 10, 35, 101, 108, 105, 102, 32,
    100, 101, 102, 105, 110, 101, 100, 40, 85, 83, 69, 95, 76, 73, 71, 72, 84,
    95, 86, 69, 67, 84, 79, 82, 41, 32, 38, 38, 32, 33, 100, 101, 102, 105, 110,
    101, 100, 40, 85, 83, 69, 95, 70, 65, 83, 84, 95, 76, 73, 71, 72, 84, 41,
    10, 9, 118, 101, 99, 51, 32, 108, 105, 103, 104, 116, 67, 111, 108, 111,
    114, 32, 32, 32, 61, 32, 117, 95, 68, 105, 114, 101, 99, 116, 101, 100, 76,
    105, 103, 104, 116, 32, 42, 32, 67, 97, 108, 99, 76, 105, 103, 104, 116, 65,
    116, 116, 101, 110, 117, 97, 116, 105, 111, 110, 40, 102, 108, 111, 97, 116,
    40, 118, 97, 114, 95, 76, 105, 103, 104, 116, 68, 105, 114, 46, 119, 32, 62,
    32, 48, 46, 48, 41, 44, 32, 118, 97, 114, 95, 76, 105, 103, 104, 116, 68,
    105, 114, 46, 119, 32, 47, 32, 115, 113, 114, 76, 105, 103, 104, 116, 68,
    105, 115, 116, 41, 59, 10, 9, 118, 101, 99, 51, 32, 97, 109, 98, 105, 101,
    110, 116, 67, 111, 108, 111, 114, 32, 61, 32, 117, 95, 65, 109, 98, 105,
    101, 110, 116, 76, 105, 103, 104, 116, 59, 10, 35, 101, 108, 105, 102, 32,
    100, 101, 102, 105, 110, 101, 100, 40, 85, 83, 69, 95, 76, 73, 71, 72, 84,
    95, 86, 69, 82, 84, 69, 88, 41, 32, 38, 38, 32, 33, 100, 101, 102, 105, 110,
    101, 100, 40, 85, 83, 69, 95, 70, 65, 83, 84, 95, 76, 73, 71, 72, 84, 41,
    10, 9, 118, 101, 99, 51, 32, 108, 105, 103, 104, 116, 67, 111, 108, 111,
    114, 32, 61, 32, 118, 97, 114, 95, 76, 105, 103, 104, 116, 67, 111, 108,
    111, 114, 59, 10, 35, 101, 110, 100, 105, 102, 10, 10, 9, 118, 101, 99, 50,
    32, 116, 101, 120, 67, 111, 111, 114, 100, 115, 32, 61, 32, 118, 97, 114,
    95, 84, 101, 120, 67, 111, 111, 114, 100, 115, 46, 120, 121, 59, 10, 10, 35,
    105, 102, 32, 100, 101, 102, 105, 110, 101, 100, 40, 85, 83, 69, 95, 80, 65,
    82, 65, 76, 76, 65, 88, 77, 65, 80, 41, 10, 9, 118, 101, 99, 51, 32, 111,
    102, 102, 115, 101, 116, 68, 105, 114, 32, 61, 32, 110, 111, 114, 109, 97,
    108, 105, 122, 101, 40, 69, 32, 42, 32, 116, 97, 110, 103, 101, 110, 116,
    84, 111, 87, 111, 114, 108, 100, 41, 59, 10, 10, 9, 111, 102, 102, 115, 101,
    116, 68, 105, 114, 46, 120, 121, 32, 42, 61, 32, 45, 48, 46, 48, 53, 32, 47,
    32, 111, 102, 102, 115, 101, 116, 68, 105, 114, 46, 122, 59, 10, 10, 9, 116,
    101, 120, 67, 111, 111, 114, 100, 115, 32, 43, 61, 32, 111, 102, 102, 115,
    101, 116, 68, 105, 114, 46, 120, 121, 32, 42, 32, 82, 97, 121, 73, 110, 116,
    101, 114, 115, 101, 99, 116, 68, 105, 115, 112, 108, 97, 99, 101, 77, 97,
    112, 40, 116, 101, 120, 67, 111, 111, 114, 100, 115, 44,
  ],
  "i8",
  ALLOC_NONE,
  Runtime.GLOBAL_BASE + 71684
);
/* memory initializer */ allocate(
  [
    32, 111, 102, 102, 115, 101, 116, 68, 105, 114, 46, 120, 121, 44, 32, 117,
    95, 78, 111, 114, 109, 97, 108, 77, 97, 112, 41, 59, 10, 35, 101, 110, 100,
    105, 102, 10, 10, 9, 118, 101, 99, 52, 32, 100, 105, 102, 102, 117, 115,
    101, 32, 61, 32, 116, 101, 120, 116, 117, 114, 101, 50, 68, 40, 117, 95, 68,
    105, 102, 102, 117, 115, 101, 77, 97, 112, 44, 32, 116, 101, 120, 67, 111,
    111, 114, 100, 115, 41, 59, 10, 35, 105, 102, 32, 100, 101, 102, 105, 110,
    101, 100, 40, 85, 83, 69, 95, 71, 65, 77, 77, 65, 50, 95, 84, 69, 88, 84,
    85, 82, 69, 83, 41, 10, 9, 100, 105, 102, 102, 117, 115, 101, 46, 114, 103,
    98, 32, 42, 61, 32, 100, 105, 102, 102, 117, 115, 101, 46, 114, 103, 98, 59,
    10, 35, 101, 110, 100, 105, 102, 10, 10, 10, 35, 105, 102, 32, 100, 101,
    102, 105, 110, 101, 100, 40, 85, 83, 69, 95, 76, 73, 71, 72, 84, 41, 32, 38,
    38, 32, 33, 100, 101, 102, 105, 110, 101, 100, 40, 85, 83, 69, 95, 70, 65,
    83, 84, 95, 76, 73, 71, 72, 84, 41, 10, 32, 32, 35, 105, 102, 32, 100, 101,
    102, 105, 110, 101, 100, 40, 85, 83, 69, 95, 78, 79, 82, 77, 65, 76, 77, 65,
    80, 41, 10, 32, 32, 32, 32, 35, 105, 102, 32, 100, 101, 102, 105, 110, 101,
    100, 40, 83, 87, 73, 90, 90, 76, 69, 95, 78, 79, 82, 77, 65, 76, 77, 65, 80,
    41, 10, 9, 78, 46, 120, 121, 32, 61, 32, 116, 101, 120, 116, 117, 114, 101,
    50, 68, 40, 117, 95, 78, 111, 114, 109, 97, 108, 77, 97, 112, 44, 32, 116,
    101, 120, 67, 111, 111, 114, 100, 115, 41, 46, 97, 103, 32, 45, 32, 118,
    101, 99, 50, 40, 48, 46, 53, 41, 59, 10, 32, 32, 32, 32, 35, 101, 108, 115,
    101, 10, 9, 78, 46, 120, 121, 32, 61, 32, 116, 101, 120, 116, 117, 114, 101,
    50, 68, 40, 117, 95, 78, 111, 114, 109, 97, 108, 77, 97, 112, 44, 32, 116,
    101, 120, 67, 111, 111, 114, 100, 115, 41, 46, 114, 103, 32, 45, 32, 118,
    101, 99, 50, 40, 48, 46, 53, 41, 59, 10, 32, 32, 32, 32, 35, 101, 110, 100,
    105, 102, 10, 9, 78, 46, 120, 121, 32, 42, 61, 32, 117, 95, 69, 110, 97, 98,
    108, 101, 84, 101, 120, 116, 117, 114, 101, 115, 46, 120, 59, 10, 9, 78, 46,
    122, 32, 61, 32, 115, 113, 114, 116, 40, 40, 48, 46, 50, 53, 32, 45, 32, 78,
    46, 120, 32, 42, 32, 78, 46, 120, 41, 32, 45, 32, 78, 46, 121, 32, 42, 32,
    78, 46, 121, 41, 59, 10, 9, 78, 32, 61, 32, 116, 97, 110, 103, 101, 110,
    116, 84, 111, 87, 111, 114, 108, 100, 32, 42, 32, 78, 59, 10, 32, 32, 35,
    101, 108, 115, 101, 10, 9, 78, 32, 61, 32, 118, 97, 114, 95, 78, 111, 114,
    109, 97, 108, 46, 120, 121, 122, 59, 10, 32, 32, 35, 101, 110, 100, 105,
    102, 10, 10, 9, 78, 32, 61, 32, 110, 111, 114, 109, 97, 108, 105, 122, 101,
    40, 78, 41, 59, 10, 9, 76, 32, 47, 61, 32, 115, 113, 114, 116, 40, 115, 113,
    114, 76, 105, 103, 104, 116, 68, 105, 115, 116, 41, 59, 10, 10, 32, 32, 35,
    105, 102, 32, 100, 101, 102, 105, 110, 101, 100, 40, 85, 83, 69, 95, 83, 72,
    65, 68, 79, 87, 77, 65, 80, 41, 32, 10, 9, 118, 101, 99, 50, 32, 115, 104,
    97, 100, 111, 119, 84, 101, 120, 32, 61, 32, 103, 108, 95, 70, 114, 97, 103,
    67, 111, 111, 114, 100, 46, 120, 121, 32, 42, 32, 114, 95, 70, 66, 117, 102,
    83, 99, 97, 108, 101, 59, 10, 9, 102, 108, 111, 97, 116, 32, 115, 104, 97,
    100, 111, 119, 86, 97, 108, 117, 101, 32, 61, 32, 116, 101, 120, 116, 117,
    114, 101, 50, 68, 40, 117, 95, 83, 104, 97, 100, 111, 119, 77, 97, 112, 44,
    32, 115, 104, 97, 100, 111, 119, 84, 101, 120, 41, 46, 114, 59, 10, 10, 9,
    47, 47, 32, 115, 117, 114, 102, 97, 99, 101, 115, 32, 110, 111, 116, 32,
    102, 97, 99, 105, 110, 103, 32, 116, 104, 101, 32, 108, 105, 103, 104, 116,
    32, 97, 114, 101, 32, 97, 108, 119, 97, 121, 115, 32, 115, 104, 97, 100,
    111, 119, 101, 100, 10, 9, 115, 104, 97, 100, 111, 119, 86, 97, 108, 117,
    101, 32, 42, 61, 32, 102, 108, 111, 97, 116, 40, 100, 111, 116, 40, 118, 97,
    114, 95, 78, 111, 114, 109, 97, 108, 46, 120, 121, 122, 44, 32, 118, 97,
    114, 95, 80, 114, 105, 109, 97, 114, 121, 76, 105, 103, 104, 116, 68, 105,
    114, 46, 120, 121, 122, 41, 32, 62, 32, 48, 46, 48, 41, 59, 10, 10, 32, 32,
    32, 32, 35, 105, 102, 32, 100, 101, 102, 105, 110, 101, 100, 40, 83, 72, 65,
    68, 79, 87, 77, 65, 80, 95, 77, 79, 68, 85, 76, 65, 84, 69, 41, 10, 9, 47,
    47, 118, 101, 99, 51, 32, 115, 104, 97, 100, 111, 119, 67, 111, 108, 111,
    114, 32, 61, 32, 109, 105, 110, 40, 117, 95, 80, 114, 105, 109, 97, 114,
    121, 76, 105, 103, 104, 116, 65, 109, 98, 105, 101, 110, 116, 44, 32, 108,
    105, 103, 104, 116, 67, 111, 108, 111, 114, 41, 59, 10, 9, 118, 101, 99, 51,
    32, 115, 104, 97, 100, 111, 119, 67, 111, 108, 111, 114, 32, 61, 32, 117,
    95, 80, 114, 105, 109, 97, 114, 121, 76, 105, 103, 104, 116, 65, 109, 98,
    105, 101, 110, 116, 32, 42, 32, 108, 105, 103, 104, 116, 67, 111, 108, 111,
    114, 59, 10, 10, 32, 32, 32, 32, 32, 32, 35, 105, 102, 32, 48, 10, 9, 47,
    47, 32, 79, 110, 108, 121, 32, 115, 104, 97, 100, 111, 119, 32, 119, 104,
    101, 110, 32, 116, 104, 101, 32, 119, 111, 114, 108, 100, 32, 108, 105, 103,
    104, 116, 32, 105, 115, 32, 112, 97, 114, 97, 108, 108, 101, 108, 32, 116,
    111, 32, 116, 104, 101, 32, 112, 114, 105, 109, 97, 114, 121, 32, 108, 105,
    103, 104, 116, 10, 9, 115, 104, 97, 100, 111, 119, 86, 97, 108, 117, 101,
    32, 61, 32, 49, 46, 48, 32, 43, 32, 40, 115, 104, 97, 100, 111, 119, 86, 97,
    108, 117, 101, 32, 45, 32, 49, 46, 48, 41, 32, 42, 32, 99, 108, 97, 109,
    112, 40, 100, 111, 116, 40, 76, 44, 32, 118, 97, 114, 95, 80, 114, 105, 109,
    97, 114, 121, 76, 105, 103, 104, 116, 68, 105, 114, 46, 120, 121, 122, 41,
    44, 32, 48, 46, 48, 44, 32, 49, 46, 48, 41, 59, 10, 32, 32, 32, 32, 32, 32,
    35, 101, 110, 100, 105, 102, 10, 9, 108, 105, 103, 104, 116, 67, 111, 108,
    111, 114, 32, 61, 32, 109, 105, 120, 40, 115, 104, 97, 100, 111, 119, 67,
    111, 108, 111, 114, 44, 32, 108, 105, 103, 104, 116, 67, 111, 108, 111, 114,
    44, 32, 115, 104, 97, 100, 111, 119, 86, 97, 108, 117, 101, 41, 59, 10, 32,
    32, 32, 32, 35, 101, 110, 100, 105, 102, 10, 32, 32, 35, 101, 110, 100, 105,
    102, 10, 10, 32, 32, 35, 105, 102, 32, 100, 101, 102, 105, 110, 101, 100,
    40, 85, 83, 69, 95, 76, 73, 71, 72, 84, 77, 65, 80, 41, 32, 124, 124, 32,
    100, 101, 102, 105, 110, 101, 100, 40, 85, 83, 69, 95, 76, 73, 71, 72, 84,
    95, 86, 69, 82, 84, 69, 88, 41, 10, 9, 118, 101, 99, 51, 32, 97, 109, 98,
    105, 101, 110, 116, 67, 111, 108, 111, 114, 32, 61, 32, 108, 105, 103, 104,
    116, 67, 111, 108, 111, 114, 59, 10, 9, 102, 108, 111, 97, 116, 32, 115,
    117, 114, 102, 78, 76, 32, 61, 32, 99, 108, 97, 109, 112, 40, 100, 111, 116,
    40, 118, 97, 114, 95, 78, 111, 114, 109, 97, 108, 46, 120, 121, 122, 44, 32,
    76, 41, 44, 32, 48, 46, 48, 44, 32, 49, 46, 48, 41, 59, 10, 10, 9, 47, 47,
    32, 83, 99, 97, 108, 101, 32, 116, 104, 101, 32, 105, 110, 99, 111, 109,
    105, 110, 103, 32, 108, 105, 103, 104, 116, 32, 116, 111, 32, 99, 111, 109,
    112, 101, 110, 115, 97, 116, 101, 32, 102, 111, 114, 32, 116, 104, 101, 32,
    98, 97, 107, 101, 100, 45, 105, 110, 32, 108, 105, 103, 104, 116, 32, 97,
    110, 103, 108, 101, 10, 9, 47, 47, 32, 97, 116, 116, 101, 110, 117, 97, 116,
    105, 111, 110, 46, 10, 9, 108, 105, 103, 104, 116, 67, 111, 108, 111, 114,
    32, 47, 61, 32, 109, 97, 120, 40, 115, 117, 114, 102, 78, 76, 44, 32, 48,
    46, 50, 53, 41, 59, 10, 10, 9, 47, 47, 32, 82, 101, 99, 111, 118, 101, 114,
    32, 97, 110, 121, 32, 117, 110, 117, 115, 101, 100, 32, 108, 105, 103, 104,
    116, 32, 97, 115, 32, 97, 109, 98, 105, 101, 110, 116, 44, 32, 105, 110, 32,
    99, 97, 115, 101, 32, 97, 116, 116, 101, 110, 117, 97, 116, 105, 111, 110,
    32, 105, 115, 32, 111, 118, 101, 114, 32, 52, 120, 32, 111, 114, 10, 9, 47,
    47, 32, 108, 105, 103, 104, 116, 32, 105, 115, 32, 98, 101, 108, 111, 119,
    32, 116, 104, 101, 32, 115, 117, 114, 102, 97, 99, 101, 10, 9, 97, 109, 98,
    105, 101, 110, 116, 67, 111, 108, 111, 114, 32, 45, 61, 32, 108, 105, 103,
    104, 116, 67, 111, 108, 111, 114, 32, 42, 32, 115, 117, 114, 102, 78, 76,
    59, 10, 32, 32, 35, 101, 110, 100, 105, 102, 10, 32, 32, 10, 9, 118, 101,
    99, 51, 32, 114, 101, 102, 108, 101, 99, 116, 97, 110, 99, 101, 59, 10, 10,
    9, 78, 76, 32, 61, 32, 99, 108, 97, 109, 112, 40, 100, 111, 116, 40, 78, 44,
    32, 76, 41, 44, 32, 48, 46, 48, 44, 32, 49, 46, 48, 41, 59, 10, 9, 78, 69,
    32, 61, 32, 99, 108, 97, 109, 112, 40, 100, 111, 116, 40, 78, 44, 32, 69,
    41, 44, 32, 48, 46, 48, 44, 32, 49, 46, 48, 41, 59, 10, 10, 9, 118, 101, 99,
    52, 32, 115, 112, 101, 99, 117, 108, 97, 114, 32, 61, 32, 118, 101, 99, 52,
    40, 49, 46, 48, 41, 59, 10, 32, 32, 35, 105, 102, 32, 100, 101, 102, 105,
    110, 101, 100, 40, 85, 83, 69, 95, 83, 80, 69, 67, 85, 76, 65, 82, 77, 65,
    80, 41, 10, 9, 115, 112, 101, 99, 117, 108, 97, 114, 32, 43, 61, 32, 116,
    101, 120, 116, 117, 114, 101, 50, 68, 40, 117, 95, 83, 112, 101, 99, 117,
    108, 97, 114, 77, 97, 112, 44, 32, 116, 101, 120, 67, 111, 111, 114, 100,
    115, 41, 32, 42, 32, 117, 95, 69, 110, 97, 98, 108, 101, 84, 101, 120, 116,
    117, 114, 101, 115, 46, 122, 32, 45, 32, 117, 95, 69, 110, 97, 98, 108, 101,
    84, 101, 120, 116, 117, 114, 101, 115, 46, 122, 122, 122, 122, 59, 10, 32,
    32, 32, 32, 35, 105, 102, 32, 100, 101, 102, 105, 110, 101, 100, 40, 85, 83,
    69, 95, 71, 65, 77, 77, 65, 50, 95, 84, 69, 88, 84, 85, 82, 69, 83, 41, 10,
    9, 115, 112, 101, 99, 117, 108, 97, 114, 46, 114, 103, 98, 32, 42, 61, 32,
    115, 112, 101, 99, 117, 108, 97, 114, 46, 114, 103, 98, 59, 10, 32, 32, 32,
    32, 35, 101, 110, 100, 105, 102, 10, 32, 32, 35, 101, 110, 100, 105, 102,
    10, 10, 9, 115, 112, 101, 99, 117, 108, 97, 114, 32, 42, 61, 32, 117, 95,
    77, 97, 116, 101, 114, 105, 97, 108, 73, 110, 102, 111, 46, 120, 120, 120,
    121, 59, 10, 10, 9, 102, 108, 111, 97, 116, 32, 103, 108, 111, 115, 115, 32,
    61, 32, 115, 112, 101, 99, 117, 108, 97, 114, 46, 97, 59, 10, 9, 102, 108,
    111, 97, 116, 32, 115, 104, 105, 110, 105, 110, 101, 115, 115, 32, 61, 32,
    101, 120, 112, 50, 40, 103, 108, 111, 115, 115, 32, 42, 32, 49, 51, 46, 48,
    41, 59, 10, 10, 32, 32, 35, 105, 102, 32, 100, 101, 102, 105, 110, 101, 100,
    40, 83, 80, 69, 67, 85, 76, 65, 82, 95, 73, 83, 95, 77, 69, 84, 65, 76, 76,
    73, 67, 41, 10, 9, 47, 47, 32, 100, 105, 102, 102, 117, 115, 101, 32, 105,
    115, 32, 97, 99, 116, 117, 97, 108, 108, 121, 32, 98, 97, 115, 101, 32, 99,
    111, 108, 111, 114, 44, 32, 97, 110, 100, 32, 114, 101, 100, 32, 111, 102,
    32, 115, 112, 101, 99, 117, 108, 97, 114, 32, 105, 115, 32, 109, 101, 116,
    97, 108, 108, 105, 99, 110, 101, 115, 115, 10, 9, 102, 108, 111, 97, 116,
    32, 109, 101, 116, 97, 108, 108, 105, 99, 32, 61, 32, 115, 112, 101, 99,
    117, 108, 97, 114, 46, 114, 59, 10, 10, 9, 115, 112, 101, 99, 117, 108, 97,
    114, 46, 114, 103, 98, 32, 61, 32, 40, 48, 46, 57, 54, 32, 42, 32, 109, 101,
    116, 97, 108, 108, 105, 99, 41, 32, 42, 32, 100, 105, 102, 102, 117, 115,
    101, 46, 114, 103, 98, 32, 43, 32, 118, 101, 99, 51, 40, 48, 46, 48, 52, 41,
    59, 10, 9, 100, 105, 102, 102, 117, 115, 101, 46, 114, 103, 98, 32, 42, 61,
    32, 49, 46, 48, 32, 45, 32, 109, 101, 116, 97, 108, 108, 105, 99, 59, 10,
    32, 32, 35, 101, 108, 115, 101, 10, 9, 47, 47, 32, 97, 100, 106, 117, 115,
    116, 32, 100, 105, 102, 102, 117, 115, 101, 32, 98, 121, 32, 115, 112, 101,
    99, 117, 108, 97, 114, 32, 114, 101, 102, 108, 101, 99, 116, 97, 110, 99,
    101, 44, 32, 116, 111, 32, 109, 97, 105, 110, 116, 97, 105, 110, 32, 101,
    110, 101, 114, 103, 121, 32, 99, 111, 110, 115, 101, 114, 118, 97, 116, 105,
    111, 110, 10, 9, 100, 105, 102, 102, 117, 115, 101, 46, 114, 103, 98, 32,
    42, 61, 32, 118, 101, 99, 51, 40, 49, 46, 48, 41, 32, 45, 32, 115, 112, 101,
    99, 117, 108, 97, 114, 46, 114, 103, 98, 59, 10, 32, 32, 35, 101, 110, 100,
    105, 102, 10, 10, 9, 114, 101, 102, 108, 101, 99, 116, 97, 110, 99, 101, 32,
    61, 32, 67, 97, 108, 99, 68, 105, 102, 102, 117, 115, 101, 40, 100, 105,
    102, 102, 117, 115, 101, 46, 114, 103, 98, 44, 32, 78, 44, 32, 76, 44, 32,
    69, 44, 32, 78, 69, 44, 32, 78, 76, 44, 32, 115, 104, 105, 110, 105, 110,
    101, 115, 115, 41, 59, 10, 10, 32, 32, 35, 105, 102, 32, 100, 101, 102, 105,
    110, 101, 100, 40, 114, 95, 100, 101, 108, 117, 120, 101, 83, 112, 101, 99,
    117, 108, 97, 114, 41, 32, 124, 124, 32, 100, 101, 102, 105, 110, 101, 100,
    40, 85, 83, 69, 95, 76, 73, 71, 72, 84, 95, 86, 69, 67, 84, 79, 82, 41, 10,
    9, 102, 108, 111, 97, 116, 32, 97, 100, 106, 71, 108, 111, 115, 115, 32, 61,
    32, 103, 108, 111, 115, 115, 59, 10, 9, 102, 108, 111, 97, 116, 32, 97, 100,
    106, 83, 104, 105, 110, 105, 110, 101, 115, 115, 32, 61, 32, 115, 104, 105,
    110, 105, 110, 101, 115, 115, 59, 10, 10, 32, 32, 32, 32, 35, 105, 102, 32,
    33, 100, 101, 102, 105, 110, 101, 100, 40, 85, 83, 69, 95, 76, 73, 71, 72,
    84, 95, 86, 69, 67, 84, 79, 82, 41, 10, 9, 97, 100, 106, 71, 108, 111, 115,
    115, 32, 42, 61, 32, 114, 95, 100, 101, 108, 117, 120, 101, 83, 112, 101,
    99, 117, 108, 97, 114, 59, 10, 9, 97, 100, 106, 83, 104, 105, 110, 105, 110,
    101, 115, 115, 32, 61, 32, 101, 120, 112, 50, 40, 97, 100, 106, 71, 108,
    111, 115, 115, 32, 42, 32, 49, 51, 46, 48, 41, 59, 10, 32, 32, 32, 32, 35,
    101, 110, 100, 105, 102, 10, 10, 9, 72, 32, 61, 32, 110, 111, 114, 109, 97,
    108, 105, 122, 101, 40, 76, 32, 43, 32, 69, 41, 59, 10, 10, 9, 69, 72, 32,
    61, 32, 99, 108, 97, 109, 112, 40, 100, 111, 116, 40, 69, 44, 32, 72, 41,
    44, 32, 48, 46, 48, 44, 32, 49, 46, 48, 41, 59, 10, 9, 78, 72, 32, 61, 32,
    99, 108, 97, 109, 112, 40, 100, 111, 116, 40, 78, 44, 32, 72, 41, 44, 32,
    48, 46, 48, 44, 32, 49, 46, 48, 41, 59, 10, 10, 32, 32, 32, 32, 35, 105,
    102, 32, 33, 100, 101, 102, 105, 110, 101, 100, 40, 85, 83, 69, 95, 76, 73,
    71, 72, 84, 95, 86, 69, 67, 84, 79, 82, 41, 10, 9, 114, 101, 102, 108, 101,
    99, 116, 97, 110, 99, 101, 32, 43, 61, 32, 67, 97, 108, 99, 83, 112, 101,
    99, 117, 108, 97, 114, 40, 115, 112, 101, 99, 117, 108, 97, 114, 46, 114,
    103, 98, 44, 32, 78, 72, 44, 32, 78, 76, 44, 32, 78, 69, 44, 32, 69, 72, 44,
    32, 97, 100, 106, 71, 108, 111, 115, 115, 44, 32, 97, 100, 106, 83, 104,
    105, 110, 105, 110, 101, 115, 115, 41, 32, 42, 32, 114, 95, 100, 101, 108,
    117, 120, 101, 83, 112, 101, 99, 117, 108, 97, 114, 59, 10, 32, 32, 32, 32,
    35, 101, 108, 115, 101, 10, 9, 114, 101, 102, 108, 101, 99, 116, 97, 110,
    99, 101, 32, 43, 61, 32, 67, 97, 108, 99, 83, 112, 101, 99, 117, 108, 97,
    114, 40, 115, 112, 101, 99, 117, 108, 97, 114, 46, 114, 103, 98, 44, 32, 78,
    72, 44, 32, 78, 76, 44, 32, 78, 69, 44, 32, 69, 72, 44, 32, 97, 100, 106,
    71, 108, 111, 115, 115, 44, 32, 97, 100, 106, 83, 104, 105, 110, 105, 110,
    101, 115, 115, 41, 59, 10, 32, 32, 32, 32, 35, 101, 110, 100, 105, 102, 10,
    32, 32, 35, 101, 110, 100, 105, 102, 10, 10, 9, 103, 108, 95, 70, 114, 97,
    103, 67, 111, 108, 111, 114, 46, 114, 103, 98, 32, 32, 61, 32, 108, 105,
    103, 104, 116, 67, 111, 108, 111, 114, 32, 32, 32, 42, 32, 114, 101, 102,
    108, 101, 99, 116, 97, 110, 99, 101, 32, 42, 32, 78, 76, 59, 10, 9, 103,
    108, 95, 70, 114, 97, 103, 67, 111, 108, 111, 114, 46, 114, 103, 98, 32, 43,
    61, 32, 97, 109, 98, 105, 101, 110, 116, 67, 111, 108, 111, 114, 32, 42, 32,
    40, 100, 105, 102, 102, 117, 115, 101, 46, 114, 103, 98, 32, 43, 32, 115,
    112, 101, 99, 117, 108, 97, 114, 46, 114, 103, 98, 41, 59, 10, 10, 32, 32,
    35, 105, 102, 32, 100, 101, 102, 105, 110, 101, 100, 40, 85, 83, 69, 95, 67,
    85, 66, 69, 77, 65, 80, 41, 10, 9, 114, 101, 102, 108, 101, 99, 116, 97,
    110, 99, 101, 32, 61, 32, 69, 110, 118, 105, 114, 111, 110, 109, 101, 110,
    116, 66, 82, 68, 70, 40, 103, 108, 111, 115, 115, 44, 32, 78, 69, 44, 32,
    115, 112, 101, 99, 117, 108, 97, 114, 46, 114, 103, 98, 41, 59, 10, 10, 9,
    118, 101, 99, 51, 32, 82, 32, 61, 32, 114, 101, 102, 108, 101, 99, 116, 40,
    69, 44, 32, 78, 41, 59, 10, 10, 9, 118, 101, 99, 51, 32, 99, 117, 98, 101,
    76, 105, 103, 104, 116, 67, 111, 108, 111, 114, 32, 61, 32, 116, 101, 120,
    116, 117, 114, 101, 67, 117, 98, 101, 76, 111, 100, 40, 117, 95, 67, 117,
    98, 101, 77, 97, 112, 44, 32, 82, 44, 32, 55, 46, 48, 32, 45, 32, 103, 108,
    111, 115, 115, 32, 42, 32, 55, 46, 48, 41, 46, 114, 103, 98, 32, 42, 32,
    117, 95, 69, 110, 97, 98, 108, 101, 84, 101, 120, 116, 117, 114, 101, 115,
    46, 119, 59, 10, 10, 9, 35, 105, 102, 32, 100, 101, 102, 105, 110, 101, 100,
    40, 85, 83, 69, 95, 76, 73, 71, 72, 84, 77, 65, 80, 41, 10, 9, 99, 117, 98,
    101, 76, 105, 103, 104, 116, 67, 111, 108, 111, 114, 32, 42, 61, 32, 108,
    105, 103, 104, 116, 83, 97, 109, 112, 108, 101, 46, 114, 103, 98, 59, 10, 9,
    35, 101, 108, 105, 102, 32, 100, 101, 102, 105, 110, 101, 100, 32, 40, 85,
    83, 69, 95, 76, 73, 71, 72, 84, 95, 86, 69, 82, 84, 69, 88, 41, 10, 9, 99,
    117, 98, 101, 76, 105, 103, 104, 116, 67, 111, 108, 111, 114, 32, 42, 61,
    32, 118, 97, 114, 95, 76, 105, 103, 104, 116, 67, 111, 108, 111, 114, 59,
    10, 9, 35, 101, 108, 115, 101, 10, 9, 99, 117, 98, 101, 76, 105, 103, 104,
    116, 67, 111, 108, 111, 114, 32, 42, 61, 32, 108, 105, 103, 104, 116, 67,
    111, 108, 111, 114, 32, 42, 32, 78, 76, 32, 43, 32, 97, 109, 98, 105, 101,
    110, 116, 67, 111, 108, 111, 114, 59, 10, 9, 35, 101, 110, 100, 105, 102,
    10, 10, 9, 47, 47, 103, 108, 95, 70, 114, 97, 103, 67, 111, 108, 111, 114,
    46, 114, 103, 98, 32, 43, 61, 32, 100, 105, 102, 102, 117, 115, 101, 46,
    114, 103, 98, 32, 42, 32, 116, 101, 120, 116, 117, 114, 101, 67, 117, 98,
    101, 76, 111, 100, 40, 117, 95, 67, 117, 98, 101, 77, 97, 112, 44, 32, 78,
    44, 32, 55, 46, 48, 41, 46, 114, 103, 98, 32, 42, 32, 117, 95, 69, 110, 97,
    98, 108, 101, 84, 101, 120, 116, 117, 114, 101, 115, 46, 119, 59, 10, 9,
    103, 108, 95, 70, 114, 97, 103, 67, 111, 108, 111, 114, 46, 114, 103, 98,
    32, 43, 61, 32, 99, 117, 98, 101, 76, 105, 103, 104, 116, 67, 111, 108, 111,
    114, 32, 42, 32, 114, 101, 102, 108, 101, 99, 116, 97, 110, 99, 101, 59, 10,
    32, 32, 35, 101, 110, 100, 105, 102, 10, 10, 32, 32, 35, 105, 102, 32, 100,
    101, 102, 105, 110, 101, 100, 40, 85, 83, 69, 95, 80, 82, 73, 77, 65, 82,
    89, 95, 76, 73, 71, 72, 84, 41, 10, 9, 118, 101, 99, 51, 32, 76, 50, 44, 32,
    72, 50, 59, 10, 9, 102, 108, 111, 97, 116, 32, 78, 76, 50, 44, 32, 69, 72,
    50, 44, 32, 78, 72, 50, 59, 10, 10, 9, 76, 50, 32, 61, 32, 118, 97, 114, 95,
    80, 114, 105, 109, 97, 114, 121, 76, 105, 103, 104, 116, 68, 105, 114, 46,
    120, 121, 122, 59, 10, 10, 9, 47, 47, 32, 101, 110, 97, 98, 108, 101, 32,
    119, 104, 101, 110, 32, 112, 111, 105, 110, 116, 32, 108, 105, 103, 104,
    116, 115, 32, 97, 114, 101, 32, 115, 117, 112, 112, 111, 114, 116, 101, 100,
    32, 97, 115, 32, 112, 114, 105, 109, 97, 114, 121, 32, 108, 105, 103, 104,
    116, 115, 10, 9, 47, 47, 115, 113, 114, 76, 105, 103, 104, 116, 68, 105,
    115, 116, 32, 61, 32, 100, 111, 116, 40, 76, 50, 44, 32, 76, 50, 41, 59, 10,
    9, 47, 47, 76, 50, 32, 47, 61, 32, 115, 113, 114, 116, 40, 115, 113, 114,
    76, 105, 103, 104, 116, 68, 105, 115, 116, 41, 59, 10, 10, 9, 78, 76, 50,
    32, 61, 32, 99, 108, 97, 109, 112, 40, 100, 111, 116, 40, 78, 44, 32, 76,
    50, 41, 44, 32, 48, 46, 48, 44, 32, 49, 46, 48, 41, 59, 10, 10, 9, 72, 50,
    32, 61, 32, 110, 111, 114, 109, 97, 108, 105, 122, 101, 40, 76, 50, 32, 43,
    32, 69, 41, 59, 10, 9, 69, 72, 50, 32, 61, 32, 99, 108, 97, 109, 112, 40,
    100, 111, 116, 40, 69, 44, 32, 72, 50, 41, 44, 32, 48, 46, 48, 44, 32, 49,
    46, 48, 41, 59, 10, 9, 78, 72, 50, 32, 61, 32, 99, 108, 97, 109, 112, 40,
    100, 111, 116, 40, 78, 44, 32, 72, 50, 41, 44, 32, 48, 46, 48, 44, 32, 49,
    46, 48, 41, 59, 10, 10, 9, 114, 101, 102, 108, 101, 99, 116, 97, 110, 99,
    101, 32, 32, 61, 32, 67, 97, 108, 99, 68, 105, 102, 102, 117, 115, 101, 40,
    100, 105, 102, 102, 117, 115, 101, 46, 114, 103, 98, 44, 32, 78, 44, 32, 76,
    50, 44, 32, 69, 44, 32, 78, 69, 44, 32, 78, 76, 50, 44, 32, 115, 104, 105,
    110, 105, 110, 101, 115, 115, 41, 59, 10, 9, 114, 101, 102, 108, 101, 99,
    116, 97, 110, 99, 101, 32, 43, 61, 32, 67, 97, 108, 99, 83, 112, 101, 99,
    117, 108, 97, 114, 40, 115, 112, 101, 99, 117, 108, 97, 114, 46, 114, 103,
    98, 44, 32, 78, 72, 50, 44, 32, 78, 76, 50, 44, 32, 78, 69, 44, 32, 69, 72,
    50, 44, 32, 103, 108, 111, 115, 115, 44, 32, 115, 104, 105, 110, 105, 110,
    101, 115, 115, 41, 59, 10, 10, 9, 108, 105, 103, 104, 116, 67, 111, 108,
    111, 114, 32, 61, 32, 117, 95, 80, 114, 105, 109, 97, 114, 121, 76, 105,
    103, 104, 116, 67, 111, 108, 111, 114, 59, 10, 10, 9, 47, 47, 32, 101, 110,
    97, 98, 108, 101, 32, 119, 104, 101, 110, 32, 112, 111, 105, 110, 116, 32,
    108, 105, 103, 104, 116, 115, 32, 97, 114, 101, 32, 115, 117, 112, 112, 111,
    114, 116, 101, 100, 32, 97, 115, 32, 112, 114, 105, 109, 97, 114, 121, 32,
    108, 105, 103, 104, 116, 115, 10, 9, 47, 47, 108, 105, 103, 104, 116, 67,
    111, 108, 111, 114, 32, 42, 61, 32, 67, 97, 108, 99, 76, 105, 103, 104, 116,
    65, 116, 116, 101, 110, 117, 97, 116, 105, 111, 110, 40, 102, 108, 111, 97,
    116, 40, 117, 95, 80, 114, 105, 109, 97, 114, 121, 76, 105, 103, 104, 116,
    68, 105, 114, 46, 119, 32, 62, 32, 48, 46, 48, 41, 44, 32, 117, 95, 80, 114,
    105, 109, 97, 114, 121, 76, 105, 103, 104, 116, 68, 105, 114, 46, 119, 32,
    47, 32, 115, 113, 114, 76, 105, 103, 104, 116, 68, 105, 115, 116, 41, 59,
    10, 10, 32, 32, 32, 32, 35, 105, 102, 32, 100, 101, 102, 105, 110, 101, 100,
    40, 85, 83, 69, 95, 83, 72, 65, 68, 79, 87, 77, 65, 80, 41, 10, 9, 108, 105,
    103, 104, 116, 67, 111, 108, 111, 114, 32, 42, 61, 32, 115, 104, 97, 100,
    111, 119, 86, 97, 108, 117, 101, 59, 10, 32, 32, 32, 32, 35, 101, 110, 100,
    105, 102, 10, 10, 9, 103, 108, 95, 70, 114, 97, 103, 67, 111, 108, 111, 114,
    46, 114, 103, 98, 32, 43, 61, 32, 108, 105, 103, 104, 116, 67, 111, 108,
    111, 114, 32, 42, 32, 114, 101, 102, 108, 101, 99, 116, 97, 110, 99, 101,
    32, 42, 32, 78, 76, 50, 59, 10, 32, 32, 35, 101, 110, 100, 105, 102, 10, 10,
    9, 103, 108, 95, 70, 114, 97, 103, 67, 111, 108, 111, 114, 46, 97, 32, 61,
    32, 100, 105, 102, 102, 117, 115, 101, 46, 97, 59, 10, 35, 101, 108, 115,
    101, 10, 9, 103, 108, 95, 70, 114, 97, 103, 67, 111, 108, 111, 114, 32, 61,
    32, 100, 105, 102, 102, 117, 115, 101, 59, 10, 32, 32, 35, 105, 102, 32,
    100, 101, 102, 105, 110, 101, 100, 40, 85, 83, 69, 95, 76, 73, 71, 72, 84,
    77, 65, 80, 41, 32, 10, 9, 103, 108, 95, 70, 114, 97, 103, 67, 111, 108,
    111, 114, 46, 114, 103, 98, 32, 42, 61, 32, 108, 105, 103, 104, 116, 67,
    111, 108, 111, 114, 59, 10, 32, 32, 35, 101, 110, 100, 105, 102, 10, 35,
    101, 110, 100, 105, 102, 10, 10, 9, 103, 108, 95, 70, 114, 97, 103, 67, 111,
    108, 111, 114, 32, 42, 61, 32, 118, 97, 114, 95, 67, 111, 108, 111, 114, 59,
    10, 125, 10, 0, 0, 0, 0, 0, 60, 0, 0, 0, 0, 0, 0, 0, 97, 116, 116, 114, 105,
    98, 117, 116, 101, 32, 118, 101, 99, 51, 32, 97, 116, 116, 114, 95, 80, 111,
    115, 105, 116, 105, 111, 110, 59, 10, 97, 116, 116, 114, 105, 98, 117, 116,
    101, 32, 118, 101, 99, 51, 32, 97, 116, 116, 114, 95, 78, 111, 114, 109, 97,
    108, 59, 10, 10, 35, 105, 102, 32, 100, 101, 102, 105, 110, 101, 100, 40,
    85, 83, 69, 95, 86, 69, 82, 84, 69, 88, 95, 65, 78, 73, 77, 65, 84, 73, 79,
    78, 41, 10, 97, 116, 116, 114, 105, 98, 117, 116, 101, 32, 118, 101, 99, 51,
    32, 97, 116, 116, 114, 95, 80, 111, 115, 105, 116, 105, 111, 110, 50, 59,
    10, 97, 116, 116, 114, 105, 98, 117, 116, 101, 32, 118, 101, 99, 51, 32, 97,
    116, 116, 114, 95, 78, 111, 114, 109, 97, 108, 50, 59, 10, 35, 101, 110,
    100, 105, 102, 10, 10, 97, 116, 116, 114, 105, 98, 117, 116, 101, 32, 118,
    101, 99, 52, 32, 97, 116, 116, 114, 95, 67, 111, 108, 111, 114, 59, 10, 97,
    116, 116, 114, 105, 98, 117, 116, 101, 32, 118, 101, 99, 52, 32, 97, 116,
    116, 114, 95, 84, 101, 120, 67, 111, 111, 114, 100, 48, 59, 10, 10, 35, 105,
    102, 32, 100, 101, 102, 105, 110, 101, 100, 40, 85, 83, 69, 95, 76, 73, 71,
    72, 84, 77, 65, 80, 41, 32, 124, 124, 32, 100, 101, 102, 105, 110, 101, 100,
    40, 85, 83, 69, 95, 84, 67, 71, 69, 78, 41, 10, 97, 116, 116, 114, 105, 98,
    117, 116, 101, 32, 118, 101, 99, 52, 32, 97, 116, 116, 114, 95, 84, 101,
    120, 67, 111, 111, 114, 100, 49, 59, 10, 35, 101, 110, 100, 105, 102, 10,
    10, 117, 110, 105, 102, 111, 114, 109, 32, 118, 101, 99, 52, 32, 32, 32,
    117, 95, 68, 105, 102, 102, 117, 115, 101, 84, 101, 120, 77, 97, 116, 114,
    105, 120, 59, 10, 117, 110, 105, 102, 111, 114, 109, 32, 118, 101, 99, 52,
    32, 32, 32, 117, 95, 68, 105, 102, 102, 117, 115, 101, 84, 101, 120, 79,
    102, 102, 84, 117, 114, 98, 59, 10, 10, 35, 105, 102, 32, 100, 101, 102,
    105, 110, 101, 100, 40, 85, 83, 69, 95, 84, 67, 71, 69, 78, 41, 32, 124,
    124, 32, 100, 101, 102, 105, 110, 101, 100, 40, 85, 83, 69, 95, 82, 71, 66,
    65, 71, 69, 78, 41, 10, 117, 110, 105, 102, 111, 114, 109, 32, 118, 101, 99,
    51, 32, 32, 32, 117, 95, 76, 111, 99, 97, 108, 86, 105, 101, 119, 79, 114,
    105, 103, 105, 110, 59, 10, 35, 101, 110, 100, 105, 102, 10, 10, 35, 105,
    102, 32, 100, 101, 102, 105, 110, 101, 100, 40, 85, 83, 69, 95, 84, 67, 71,
    69, 78, 41, 10, 117, 110, 105, 102, 111, 114, 109, 32, 105, 110, 116, 32,
    32, 32, 32, 117, 95, 84, 67, 71, 101, 110, 48, 59, 10, 117, 110, 105, 102,
    111, 114, 109, 32, 118, 101, 99, 51, 32, 32, 32, 117, 95, 84, 67, 71, 101,
    110, 48, 86, 101, 99, 116, 111, 114, 48, 59, 10, 117, 110, 105, 102, 111,
    114, 109, 32, 118, 101, 99, 51, 32, 32, 32, 117, 95, 84, 67, 71, 101, 110,
    48, 86, 101, 99, 116, 111, 114, 49, 59, 10, 35, 101, 110, 100, 105, 102, 10,
    10, 35, 105, 102, 32, 100, 101, 102, 105, 110, 101, 100, 40, 85, 83, 69, 95,
    70, 79, 71, 41, 10, 117, 110, 105, 102, 111, 114, 109, 32, 118, 101, 99, 52,
    32, 32, 32, 117, 95, 70, 111, 103, 68, 105, 115, 116, 97, 110, 99, 101, 59,
    10, 117, 110, 105, 102, 111, 114, 109, 32, 118, 101, 99, 52, 32, 32, 32,
    117, 95, 70, 111, 103, 68, 101, 112, 116, 104, 59, 10, 117, 110, 105, 102,
    111, 114, 109, 32, 102, 108, 111, 97, 116, 32, 32, 117, 95, 70, 111, 103,
    69, 121, 101, 84, 59, 10, 117, 110, 105, 102, 111, 114, 109, 32, 118, 101,
    99, 52, 32, 32, 32, 117, 95, 70, 111, 103, 67, 111, 108, 111, 114, 77, 97,
    115, 107, 59, 10, 35, 101, 110, 100, 105, 102, 10, 10, 35, 105, 102, 32,
    100, 101, 102, 105, 110, 101, 100, 40, 85, 83, 69, 95, 68, 69, 70, 79, 82,
    77, 95, 86, 69, 82, 84, 69, 88, 69, 83, 41, 10, 117, 110, 105, 102, 111,
    114, 109, 32, 105, 110, 116, 32, 32, 32, 32, 117, 95, 68, 101, 102, 111,
    114, 109, 71, 101, 110, 59, 10, 117, 110, 105, 102, 111, 114, 109, 32, 102,
    108, 111, 97, 116, 32, 32, 117, 95, 68, 101, 102, 111, 114, 109, 80, 97,
    114, 97, 109, 115, 91, 53, 93, 59, 10, 117, 110, 105, 102, 111, 114, 109,
    32, 102, 108, 111, 97, 116, 32, 32, 117, 95, 84, 105, 109, 101, 59, 10, 35,
    101, 110, 100, 105, 102, 10, 10, 117, 110, 105, 102, 111, 114, 109, 32, 109,
    97, 116, 52, 32, 32, 32, 117, 95, 77, 111, 100, 101, 108, 86, 105, 101, 119,
    80, 114, 111, 106, 101, 99, 116, 105, 111, 110, 77, 97, 116, 114, 105, 120,
    59, 10, 117, 110, 105, 102, 111, 114, 109, 32, 118, 101, 99, 52, 32, 32, 32,
    117, 95, 66, 97, 115, 101, 67, 111, 108, 111, 114, 59, 10, 117, 110, 105,
    102, 111, 114, 109, 32, 118, 101, 99, 52, 32, 32, 32, 117, 95, 86, 101, 114,
    116, 67, 111, 108, 111, 114, 59, 10, 10, 35, 105, 102, 32, 100, 101, 102,
    105, 110, 101, 100, 40, 85, 83, 69, 95, 82, 71, 66, 65, 71, 69, 78, 41, 10,
    117, 110, 105, 102, 111, 114, 109, 32, 105, 110, 116, 32, 32, 32, 32, 117,
    95, 67, 111, 108, 111, 114, 71, 101, 110, 59, 10, 117, 110, 105, 102, 111,
    114, 109, 32, 105, 110, 116, 32, 32, 32, 32, 117, 95, 65, 108, 112, 104, 97,
    71, 101, 110, 59, 10, 117, 110, 105, 102, 111, 114, 109, 32, 118, 101, 99,
    51, 32, 32, 32, 117, 95, 65, 109, 98, 105, 101, 110, 116, 76, 105, 103, 104,
    116, 59, 10, 117, 110, 105, 102, 111, 114, 109, 32, 118, 101, 99, 51, 32,
    32, 32, 117, 95, 68, 105, 114, 101, 99, 116, 101, 100, 76, 105, 103, 104,
    116, 59, 10, 117, 110, 105, 102, 111, 114, 109, 32, 118, 101, 99, 51, 32,
    32, 32, 117, 95, 77, 111, 100, 101, 108, 76, 105, 103, 104, 116, 68, 105,
    114, 59, 10, 117, 110, 105, 102, 111, 114, 109, 32, 102, 108, 111, 97, 116,
    32, 32, 117, 95, 80, 111, 114, 116, 97, 108, 82, 97, 110, 103, 101, 59, 10,
    35, 101, 110, 100, 105, 102, 10, 10, 35, 105, 102, 32, 100, 101, 102, 105,
    110, 101, 100, 40, 85, 83, 69, 95, 86, 69, 82, 84, 69, 88, 95, 65, 78, 73,
    77, 65, 84, 73, 79, 78, 41, 10, 117, 110, 105, 102, 111, 114, 109, 32, 102,
    108, 111, 97, 116, 32, 32, 117, 95, 86, 101, 114, 116, 101, 120, 76, 101,
    114, 112, 59, 10, 35, 101, 110, 100, 105, 102, 10, 10, 118, 97, 114, 121,
    105, 110, 103, 32, 118, 101, 99, 50, 32, 32, 32, 118, 97, 114, 95, 68, 105,
    102, 102, 117, 115, 101, 84, 101, 120, 59, 10, 35, 105, 102, 32, 100, 101,
    102, 105, 110, 101, 100, 40, 85, 83, 69, 95, 76, 73, 71, 72, 84, 77, 65, 80,
    41, 10, 118, 97, 114, 121, 105, 110, 103, 32, 118, 101, 99, 50, 32, 32, 32,
    118, 97, 114, 95, 76, 105, 103, 104, 116, 84, 101, 120, 59, 10, 35, 101,
    110, 100, 105, 102, 10, 118, 97, 114, 121, 105, 110, 103, 32, 118, 101, 99,
    52, 32, 32, 32, 118, 97, 114, 95, 67, 111, 108, 111, 114, 59, 10, 10, 35,
    105, 102, 32, 100, 101, 102, 105, 110, 101, 100, 40, 85, 83, 69, 95, 68, 69,
    70, 79, 82, 77, 95, 86, 69, 82, 84, 69, 88, 69, 83, 41, 10, 118, 101, 99,
    51, 32, 68, 101, 102, 111, 114, 109, 80, 111, 115, 105, 116, 105, 111, 110,
    40, 99, 111, 110, 115, 116, 32, 118, 101, 99, 51, 32, 112, 111, 115, 44, 32,
    99, 111, 110, 115, 116, 32, 118, 101, 99, 51, 32, 110, 111, 114, 109, 97,
    108, 44, 32, 99, 111, 110, 115, 116, 32, 118, 101, 99, 50, 32, 115, 116, 41,
    10, 123, 10, 9, 102, 108, 111, 97, 116, 32, 98, 97, 115, 101, 32, 61, 32,
    32, 32, 32, 32, 32, 117, 95, 68, 101, 102, 111, 114, 109, 80, 97, 114, 97,
    109, 115, 91, 48, 93, 59, 10, 9, 102, 108, 111, 97, 116, 32, 97, 109, 112,
    108, 105, 116, 117, 100, 101, 32, 61, 32, 117, 95, 68, 101, 102, 111, 114,
    109, 80, 97, 114, 97, 109, 115, 91, 49, 93, 59, 10, 9, 102, 108, 111, 97,
    116, 32, 112, 104, 97, 115, 101, 32, 61, 32, 32, 32, 32, 32, 117, 95, 68,
    101, 102, 111, 114, 109, 80, 97, 114, 97, 109, 115, 91, 50, 93, 59, 10, 9,
    102, 108, 111, 97, 116, 32, 102, 114, 101, 113, 117, 101, 110, 99, 121, 32,
    61, 32, 117, 95, 68, 101, 102, 111, 114, 109, 80, 97, 114, 97, 109, 115, 91,
    51, 93, 59, 10, 9, 102, 108, 111, 97, 116, 32, 115, 112, 114, 101, 97, 100,
    32, 61, 32, 32, 32, 32, 117, 95, 68, 101, 102, 111, 114, 109, 80, 97, 114,
    97, 109, 115, 91, 52, 93, 59, 10, 10, 9, 105, 102, 32, 40, 117, 95, 68, 101,
    102, 111, 114, 109, 71, 101, 110, 32, 61, 61, 32, 68, 71, 69, 78, 95, 66,
    85, 76, 71, 69, 41, 10, 9, 123, 10, 9, 9, 112, 104, 97, 115, 101, 32, 42,
    61, 32, 115, 116, 46, 120, 59, 10, 9, 125, 10, 9, 101, 108, 115, 101, 32,
    47, 47, 32, 105, 102, 32, 40, 117, 95, 68, 101, 102, 111, 114, 109, 71, 101,
    110, 32, 60, 61, 32, 68, 71, 69, 78, 95, 87, 65, 86, 69, 95, 73, 78, 86, 69,
    82, 83, 69, 95, 83, 65, 87, 84, 79, 79, 84, 72, 41, 10, 9, 123, 10, 9, 9,
    112, 104, 97, 115, 101, 32, 43, 61, 32, 100, 111, 116, 40, 112, 111, 115,
    46, 120, 121, 122, 44, 32, 118, 101, 99, 51, 40, 115, 112, 114, 101, 97,
    100, 41, 41, 59, 10, 9, 125, 10, 10, 9, 102, 108, 111, 97, 116, 32, 118, 97,
    108, 117, 101, 32, 61, 32, 112, 104, 97, 115, 101, 32, 43, 32, 40, 117, 95,
    84, 105, 109, 101, 32, 42, 32, 102, 114, 101, 113, 117, 101, 110, 99, 121,
    41, 59, 10, 9, 102, 108, 111, 97, 116, 32, 102, 117, 110, 99, 59, 10, 10, 9,
    105, 102, 32, 40, 117, 95, 68, 101, 102, 111, 114, 109, 71, 101, 110, 32,
    61, 61, 32, 68, 71, 69, 78, 95, 87, 65, 86, 69, 95, 83, 73, 78, 41, 10, 9,
    123, 10, 9, 9, 102, 117, 110, 99, 32, 61, 32, 115, 105, 110, 40, 118, 97,
    108, 117, 101, 32, 42, 32, 50, 46, 48, 32, 42, 32, 77, 95, 80, 73, 41, 59,
    10, 9, 125, 10, 9, 101, 108, 115, 101, 32, 105, 102, 32, 40, 117, 95, 68,
    101, 102, 111, 114, 109, 71, 101, 110, 32, 61, 61, 32, 68, 71, 69, 78, 95,
    87, 65, 86, 69, 95, 83, 81, 85, 65, 82, 69, 41, 10, 9, 123, 10, 9, 9, 102,
    117, 110, 99, 32, 61, 32, 115, 105, 103, 110, 40, 102, 114, 97, 99, 116, 40,
    48, 46, 53, 32, 45, 32, 118, 97, 108, 117, 101, 41, 41, 59, 10, 9, 125, 10,
    9, 101, 108, 115, 101, 32, 105, 102, 32, 40, 117, 95, 68, 101, 102, 111,
    114, 109, 71, 101, 110, 32, 61, 61, 32, 68, 71, 69, 78, 95, 87, 65, 86, 69,
    95, 84, 82, 73, 65, 78, 71, 76, 69, 41, 10, 9, 123, 10, 9, 9, 102, 117, 110,
    99, 32, 61, 32, 97, 98, 115, 40, 102, 114, 97, 99, 116, 40, 118, 97, 108,
    117, 101, 32, 43, 32, 48, 46, 55, 53, 41, 32, 45, 32, 48, 46, 53, 41, 32,
    42, 32, 52, 46, 48, 32, 45, 32, 49, 46, 48, 59, 10, 9, 125, 10, 9, 101, 108,
    115, 101, 32, 105, 102, 32, 40, 117, 95, 68, 101, 102, 111, 114, 109, 71,
    101, 110, 32, 61, 61, 32, 68, 71, 69, 78, 95, 87, 65, 86, 69, 95, 83, 65,
    87, 84, 79, 79, 84, 72, 41, 10, 9, 123, 10, 9, 9, 102, 117, 110, 99, 32, 61,
    32, 102, 114, 97, 99, 116, 40, 118, 97, 108, 117, 101, 41, 59, 10, 9, 125,
    10, 9, 101, 108, 115, 101, 32, 105, 102, 32, 40, 117, 95, 68, 101, 102, 111,
    114, 109, 71, 101, 110, 32, 61, 61, 32, 68, 71, 69, 78, 95, 87, 65, 86, 69,
    95, 73, 78, 86, 69, 82, 83, 69, 95, 83, 65, 87, 84, 79, 79, 84, 72, 41, 10,
    9, 123, 10, 9, 9, 102, 117, 110, 99, 32, 61, 32, 40, 49, 46, 48, 32, 45, 32,
    102, 114, 97, 99, 116, 40, 118, 97, 108, 117, 101, 41, 41, 59, 10, 9, 125,
    10, 9, 101, 108, 115, 101, 32, 47, 47, 32, 105, 102, 32, 40, 117, 95, 68,
    101, 102, 111, 114, 109, 71, 101, 110, 32, 61, 61, 32, 68, 71, 69, 78, 95,
    66, 85, 76, 71, 69, 41, 10, 9, 123, 10, 9, 9, 102, 117, 110, 99, 32, 61, 32,
    115, 105, 110, 40, 118, 97, 108, 117, 101, 41, 59, 10, 9, 125, 10, 10, 9,
    114, 101, 116, 117, 114, 110, 32, 112, 111, 115, 32, 43, 32, 110, 111, 114,
    109, 97, 108, 32, 42, 32, 40, 98, 97, 115, 101, 32, 43, 32, 102, 117, 110,
    99, 32, 42, 32, 97, 109, 112, 108, 105, 116, 117, 100, 101, 41, 59, 10, 125,
    10, 35, 101, 110, 100, 105, 102, 10, 10, 35, 105, 102, 32, 100, 101, 102,
    105, 110, 101, 100, 40, 85, 83, 69, 95, 84, 67, 71, 69, 78, 41, 10, 118,
    101, 99, 50, 32, 71, 101, 110, 84, 101, 120, 67, 111, 111, 114, 100, 115,
    40, 105, 110, 116, 32, 84, 67, 71, 101, 110, 44, 32, 118, 101, 99, 51, 32,
    112, 111, 115, 105, 116, 105, 111, 110, 44, 32, 118, 101, 99, 51, 32, 110,
    111, 114, 109, 97, 108, 44, 32, 118, 101, 99, 51, 32, 84, 67, 71, 101, 110,
    86, 101, 99, 116, 111, 114, 48, 44, 32, 118, 101, 99, 51, 32, 84, 67, 71,
    101, 110, 86, 101, 99, 116, 111, 114, 49, 41, 10, 123, 10, 9, 118, 101, 99,
    50, 32, 116, 101, 120, 32, 61, 32, 97, 116, 116, 114, 95, 84, 101, 120, 67,
    111, 111, 114, 100, 48, 46, 115, 116, 59, 10, 10, 9, 105, 102, 32, 40, 84,
    67, 71, 101, 110, 32, 61, 61, 32, 84, 67, 71, 69, 78, 95, 76, 73, 71, 72,
    84, 77, 65, 80, 41, 10, 9, 123, 10, 9, 9, 116, 101, 120, 32, 61, 32, 97,
    116, 116, 114, 95, 84, 101, 120, 67, 111, 111, 114, 100, 49, 46, 115, 116,
    59, 10, 9, 125, 10, 9, 101, 108, 115, 101, 32, 105, 102, 32, 40, 84, 67, 71,
    101, 110, 32, 61, 61, 32, 84, 67, 71, 69, 78, 95, 69, 78, 86, 73, 82, 79,
    78, 77, 69, 78, 84, 95, 77, 65, 80, 80, 69, 68, 41, 10, 9, 123, 10, 9, 9,
    118, 101, 99, 51, 32, 118, 105, 101, 119, 101, 114, 32, 61, 32, 110, 111,
    114, 109, 97, 108, 105, 122, 101, 40, 117, 95, 76, 111, 99, 97, 108, 86,
    105, 101, 119, 79, 114, 105, 103, 105, 110, 32, 45, 32, 112, 111, 115, 105,
    116, 105, 111, 110, 41, 59, 10, 9, 9, 118, 101, 99, 50, 32, 114, 101, 102,
    32, 61, 32, 114, 101, 102, 108, 101, 99, 116, 40, 118, 105, 101, 119, 101,
    114, 44, 32, 110, 111, 114, 109, 97, 108, 41, 46, 121, 122, 59, 10, 9, 9,
    116, 101, 120, 46, 115, 32, 61, 32, 114, 101, 102, 46, 120, 32, 42, 32, 45,
    48, 46, 53, 32, 43, 32, 48, 46, 53, 59, 10, 9, 9, 116, 101, 120, 46, 116,
    32, 61, 32, 114, 101, 102, 46, 121, 32, 42, 32, 32, 48, 46, 53, 32, 43, 32,
    48, 46, 53, 59, 10, 9, 125, 10, 9, 101, 108, 115, 101, 32, 105, 102, 32, 40,
    84, 67, 71, 101, 110, 32, 61, 61, 32, 84, 67, 71, 69, 78, 95, 86, 69, 67,
    84, 79, 82, 41, 10, 9, 123, 10, 9, 9, 116, 101, 120, 32, 61, 32, 118, 101,
    99, 50, 40, 100, 111, 116, 40, 112, 111, 115, 105, 116, 105, 111, 110, 44,
    32, 84, 67, 71, 101, 110, 86, 101, 99, 116, 111, 114, 48, 41, 44, 32, 100,
    111, 116, 40, 112, 111, 115, 105, 116, 105, 111, 110, 44, 32, 84, 67, 71,
    101, 110, 86, 101, 99, 116, 111, 114, 49, 41, 41, 59, 10, 9, 125, 10, 9, 10,
    9, 114, 101, 116, 117, 114, 110, 32, 116, 101, 120, 59, 10, 125, 10, 35,
    101, 110, 100, 105, 102, 10, 10, 35, 105, 102, 32, 100, 101, 102, 105, 110,
    101, 100, 40, 85, 83, 69, 95, 84, 67, 77, 79, 68, 41, 10, 118, 101, 99, 50,
    32, 77, 111, 100, 84, 101, 120, 67, 111, 111, 114, 100, 115, 40, 118, 101,
    99, 50, 32, 115, 116, 44, 32, 118, 101, 99, 51, 32, 112, 111, 115, 105, 116,
    105, 111, 110, 44, 32, 118, 101, 99, 52, 32, 116, 101, 120, 77, 97, 116,
    114, 105, 120, 44, 32, 118, 101, 99, 52, 32, 111, 102, 102, 84, 117, 114,
    98, 41, 10, 123, 10, 9, 102, 108, 111, 97, 116, 32, 97, 109, 112, 108, 105,
    116, 117, 100, 101, 32, 61, 32, 111, 102, 102, 84, 117, 114, 98, 46, 122,
    59, 10, 9, 102, 108, 111, 97, 116, 32, 112, 104, 97, 115, 101, 32, 61, 32,
    111, 102, 102, 84, 117, 114, 98, 46, 119, 32, 42, 32, 50, 46, 48, 32, 42,
    32, 77, 95, 80, 73, 59, 10, 9, 118, 101, 99, 50, 32, 115, 116, 50, 59, 10,
    9, 115, 116, 50, 46, 120, 32, 61, 32, 115, 116, 46, 120, 32, 42, 32, 116,
    101, 120, 77, 97, 116, 114, 105, 120, 46, 120, 32, 43, 32, 40, 115, 116, 46,
    121, 32, 42, 32, 116, 101, 120, 77, 97, 116, 114, 105, 120, 46, 122, 32, 43,
    32, 111, 102, 102, 84, 117, 114, 98, 46, 120, 41, 59, 10, 9, 115, 116, 50,
    46, 121, 32, 61, 32, 115, 116, 46, 120, 32, 42, 32, 116, 101, 120, 77, 97,
    116, 114, 105, 120, 46, 121, 32, 43, 32, 40, 115, 116, 46, 121, 32, 42, 32,
    116, 101, 120, 77, 97, 116, 114, 105, 120, 46, 119, 32, 43, 32, 111, 102,
    102, 84, 117, 114, 98, 46, 121, 41, 59, 10, 10, 9, 118, 101, 99, 50, 32,
    111, 102, 102, 115, 101, 116, 80, 111, 115, 32, 61, 32, 118, 101, 99, 50,
    40, 112, 111, 115, 105, 116, 105, 111, 110, 46, 120, 32, 43, 32, 112, 111,
    115, 105, 116, 105, 111, 110, 46, 122, 44, 32, 112, 111, 115, 105, 116, 105,
    111, 110, 46, 121, 41, 59, 10, 9, 10, 9, 118, 101, 99, 50, 32, 116, 101,
    120, 79, 102, 102, 115, 101, 116, 32, 61, 32, 115, 105, 110, 40, 111, 102,
    102, 115, 101, 116, 80, 111, 115, 32, 42, 32, 40, 50, 46, 48, 32, 42, 32,
    77, 95, 80, 73, 32, 47, 32, 49, 48, 50, 52, 46, 48, 41, 32, 43, 32, 118,
    101, 99, 50, 40, 112, 104, 97, 115, 101, 41, 41, 59, 10, 9, 10, 9, 114, 101,
    116, 117, 114, 110, 32, 115, 116, 50, 32, 43, 32, 116, 101, 120, 79, 102,
    102, 115, 101, 116, 32, 42, 32, 97, 109, 112, 108, 105, 116, 117, 100, 101,
    59, 9, 10, 125, 10, 35, 101, 110, 100, 105, 102, 10, 10, 35, 105, 102, 32,
    100, 101, 102, 105, 110, 101, 100, 40, 85, 83, 69, 95, 82, 71, 66, 65, 71,
    69, 78, 41, 10, 118, 101, 99, 52, 32, 67, 97, 108, 99, 67, 111, 108, 111,
    114, 40, 118, 101, 99, 51, 32, 112, 111, 115, 105, 116, 105, 111, 110, 44,
    32, 118, 101, 99, 51, 32, 110, 111, 114, 109, 97, 108, 41, 10, 123, 10, 9,
    118, 101, 99, 52, 32, 99, 111, 108, 111, 114, 32, 61, 32, 117, 95, 86, 101,
    114, 116, 67, 111, 108, 111, 114, 32, 42, 32, 97, 116, 116, 114, 95, 67,
    111, 108, 111, 114, 32, 43, 32, 117, 95, 66, 97, 115, 101, 67, 111, 108,
    111, 114, 59, 10, 9, 10, 9, 105, 102, 32, 40, 117, 95, 67, 111, 108, 111,
    114, 71, 101, 110, 32, 61, 61, 32, 67, 71, 69, 78, 95, 76, 73, 71, 72, 84,
    73, 78, 71, 95, 68, 73, 70, 70, 85, 83, 69, 41, 10, 9, 123, 10, 9, 9, 102,
    108, 111, 97, 116, 32, 105, 110, 99, 111, 109, 105, 110, 103, 32, 61, 32,
    99, 108, 97, 109, 112, 40, 100, 111, 116, 40, 110, 111, 114, 109, 97, 108,
    44, 32, 117, 95, 77, 111, 100, 101, 108, 76, 105, 103, 104, 116, 68, 105,
    114, 41, 44, 32, 48, 46, 48, 44, 32, 49, 46, 48, 41, 59, 10, 10, 9, 9, 99,
    111, 108, 111, 114, 46, 114, 103, 98, 32, 61, 32, 99, 108, 97, 109, 112, 40,
    117, 95, 68, 105, 114, 101, 99, 116, 101, 100, 76, 105, 103, 104, 116, 32,
    42, 32, 105, 110, 99, 111, 109, 105, 110, 103, 32, 43, 32, 117, 95, 65, 109,
    98, 105, 101, 110, 116, 76, 105, 103, 104, 116, 44, 32, 48, 46, 48, 44, 32,
    49, 46, 48, 41, 59, 10, 9, 125, 10, 9, 10, 9, 118, 101, 99, 51, 32, 118,
    105, 101, 119, 101, 114, 32, 61, 32, 117, 95, 76, 111, 99, 97, 108, 86, 105,
    101, 119, 79, 114, 105, 103, 105, 110, 32, 45, 32, 112, 111, 115, 105, 116,
    105, 111, 110, 59, 10, 10, 9, 105, 102, 32, 40, 117, 95, 65, 108, 112, 104,
    97, 71, 101, 110, 32, 61, 61, 32, 65, 71, 69, 78, 95, 76, 73, 71, 72, 84,
    73, 78, 71, 95, 83, 80, 69, 67, 85, 76, 65, 82, 41, 10, 9, 123, 10, 9, 9,
    118, 101, 99, 51, 32, 108, 105, 103, 104, 116, 68, 105, 114, 32, 61, 32,
    110, 111, 114, 109, 97, 108, 105, 122, 101, 40, 118, 101, 99, 51, 40, 45,
    57, 54, 48, 46, 48, 44, 32, 49, 57, 56, 48, 46, 48, 44, 32, 57, 54, 46, 48,
    41, 32, 45, 32, 112, 111, 115, 105, 116, 105, 111, 110, 41, 59, 10, 9, 9,
    118, 101, 99, 51, 32, 114, 101, 102, 108, 101, 99, 116, 101, 100, 32, 61,
    32, 45, 114, 101, 102, 108, 101, 99, 116, 40, 108, 105, 103, 104, 116, 68,
    105, 114, 44, 32, 110, 111, 114, 109, 97, 108, 41, 59, 10, 9, 9, 10, 9, 9,
    99, 111, 108, 111, 114, 46, 97, 32, 61, 32, 99, 108, 97, 109, 112, 40, 100,
    111, 116, 40, 114, 101, 102, 108, 101, 99, 116, 101, 100, 44, 32, 110, 111,
    114, 109, 97, 108, 105, 122, 101, 40, 118, 105, 101, 119, 101, 114, 41, 41,
    44, 32, 48, 46, 48, 44, 32, 49, 46, 48, 41, 59, 10, 9, 9, 99, 111, 108, 111,
    114, 46, 97, 32, 42, 61, 32, 99, 111, 108, 111, 114, 46, 97, 59, 10, 9, 9,
    99, 111, 108, 111, 114, 46, 97, 32, 42, 61, 32, 99, 111, 108, 111, 114, 46,
    97, 59, 10, 9, 125, 10, 9, 101, 108, 115, 101, 32, 105, 102, 32, 40, 117,
    95, 65, 108, 112, 104, 97, 71, 101, 110, 32, 61, 61, 32, 65, 71, 69, 78, 95,
    80, 79, 82, 84, 65, 76, 41, 10, 9, 123, 10, 9, 9, 99, 111, 108, 111, 114,
    46, 97, 32, 61, 32, 99, 108, 97, 109, 112, 40, 108, 101, 110, 103, 116, 104,
    40, 118, 105, 101, 119, 101, 114, 41, 32, 47, 32, 117, 95, 80, 111, 114,
    116, 97, 108, 82, 97, 110, 103, 101, 44, 32, 48, 46, 48, 44, 32, 49, 46, 48,
    41, 59, 10, 9, 125, 10, 9, 10, 9, 114, 101, 116, 117, 114, 110, 32, 99, 111,
    108, 111, 114, 59, 10, 125, 10, 35, 101, 110, 100, 105, 102, 10, 10, 35,
    105, 102, 32, 100, 101, 102, 105, 110, 101, 100, 40, 85, 83, 69, 95, 70, 79,
    71, 41, 10, 102, 108, 111, 97, 116, 32, 67, 97, 108, 99, 70, 111, 103, 40,
    118, 101, 99, 51, 32, 112, 111, 115, 105, 116, 105, 111, 110, 41, 10, 123,
    10, 9, 102, 108, 111, 97, 116, 32, 115, 32, 61, 32, 100, 111, 116, 40, 118,
    101, 99, 52, 40, 112, 111, 115, 105, 116, 105, 111, 110, 44, 32, 49, 46, 48,
    41, 44, 32, 117, 95, 70, 111, 103, 68, 105, 115, 116, 97, 110, 99, 101, 41,
    32, 42, 32, 56, 46, 48, 59, 10, 9, 102, 108, 111, 97, 116, 32, 116, 32, 61,
    32, 100, 111, 116, 40, 118, 101, 99, 52, 40, 112, 111, 115, 105, 116, 105,
    111, 110, 44, 32, 49, 46, 48, 41, 44, 32, 117, 95, 70, 111, 103, 68, 101,
    112, 116, 104, 41, 59, 10, 10, 9, 102, 108, 111, 97, 116, 32, 101, 121, 101,
    79, 117, 116, 115, 105, 100, 101, 32, 61, 32, 102, 108, 111, 97, 116, 40,
    117, 95, 70, 111, 103, 69, 121, 101, 84, 32, 60, 32, 48, 46, 48, 41, 59, 10,
    9, 102, 108, 111, 97, 116, 32, 102, 111, 103, 103, 101, 100, 32, 61, 32,
    102, 108, 111, 97, 116, 40, 116, 32, 60, 32, 101, 121, 101, 79, 117, 116,
    115, 105, 100, 101, 41, 59, 10, 10, 9, 116, 32, 43, 61, 32, 49, 101, 45, 54,
    59, 10, 9, 116, 32, 42, 61, 32, 102, 111, 103, 103, 101, 100, 32, 47, 32,
    40, 116, 32, 45, 32, 117, 95, 70, 111, 103, 69, 121, 101, 84, 32, 42, 32,
    101, 121, 101, 79, 117, 116, 115, 105, 100, 101, 41, 59, 10, 10, 9, 114,
    101, 116, 117, 114, 110, 32, 115, 32, 42, 32, 116, 59, 10, 125, 10, 35, 101,
    110, 100, 105, 102, 10, 10, 118, 111, 105, 100, 32, 109, 97, 105, 110, 40,
    41, 10, 123, 10, 35, 105, 102, 32, 100, 101, 102, 105, 110, 101, 100, 40,
    85, 83, 69, 95, 86, 69, 82, 84, 69, 88, 95, 65, 78, 73, 77, 65, 84, 73, 79,
    78, 41, 10, 9, 118, 101, 99, 51, 32, 112, 111, 115, 105, 116, 105, 111, 110,
    32, 32, 61, 32, 109, 105, 120, 40, 97, 116, 116, 114, 95, 80, 111, 115, 105,
    116, 105, 111, 110, 44, 32, 97, 116, 116, 114, 95, 80, 111, 115, 105, 116,
    105, 111, 110, 50, 44, 32, 117, 95, 86, 101, 114, 116, 101, 120, 76, 101,
    114, 112, 41, 59, 10, 9, 118, 101, 99, 51, 32, 110, 111, 114, 109, 97, 108,
    32, 32, 32, 32, 61, 32, 109, 105, 120, 40, 97, 116, 116, 114, 95, 78, 111,
    114, 109, 97, 108, 44, 32, 32, 32, 97, 116, 116, 114, 95, 78, 111, 114, 109,
    97, 108, 50, 44, 32, 32, 32, 117, 95, 86, 101, 114, 116, 101, 120, 76, 101,
    114, 112, 41, 59, 10, 9, 110, 111, 114, 109, 97, 108, 32, 61, 32, 110, 111,
    114, 109, 97, 108, 105, 122, 101, 40, 110, 111, 114, 109, 97, 108, 32, 45,
    32, 118, 101, 99, 51, 40, 48, 46, 53, 41, 41, 59, 10, 35, 101, 108, 115,
    101, 10, 9, 118, 101, 99, 51, 32, 112, 111, 115, 105, 116, 105, 111, 110,
    32, 32, 61, 32, 97, 116, 116, 114, 95, 80, 111, 115, 105, 116, 105, 111,
    110, 59, 10, 9, 118, 101, 99, 51, 32, 110, 111, 114, 109, 97, 108, 32, 32,
    32, 32, 61, 32, 97, 116, 116, 114, 95, 78, 111, 114, 109, 97, 108, 32, 42,
    32, 50, 46, 48, 32, 45, 32, 118, 101, 99, 51, 40, 49, 46, 48, 41, 59, 10,
    35, 101, 110, 100, 105, 102, 10, 10, 35, 105, 102, 32, 100, 101, 102, 105,
    110, 101, 100, 40, 85, 83, 69, 95, 68, 69, 70, 79, 82, 77, 95, 86, 69, 82,
    84, 69, 88, 69, 83, 41, 10, 9, 112, 111, 115, 105, 116, 105, 111, 110, 32,
    61, 32, 68, 101, 102, 111, 114, 109, 80, 111, 115, 105, 116, 105, 111, 110,
    40, 112, 111, 115, 105, 116, 105, 111, 110, 44, 32, 110, 111, 114, 109, 97,
    108, 44, 32, 97, 116, 116, 114, 95, 84, 101, 120, 67, 111, 111, 114, 100,
    48, 46, 115, 116, 41, 59, 10, 35, 101, 110, 100, 105, 102, 10, 10, 9, 103,
    108, 95, 80, 111, 115, 105, 116, 105, 111, 110, 32, 61, 32, 117, 95, 77,
    111, 100, 101, 108, 86, 105, 101, 119, 80, 114, 111, 106, 101, 99, 116, 105,
    111, 110, 77, 97, 116, 114, 105, 120, 32, 42, 32, 118, 101, 99, 52, 40, 112,
    111, 115, 105, 116, 105, 111, 110, 44, 32, 49, 46, 48, 41, 59, 10, 10, 35,
    105, 102, 32, 100, 101, 102, 105, 110, 101, 100, 40, 85, 83, 69, 95, 84, 67,
    71, 69, 78, 41, 10, 9, 118, 101, 99, 50, 32, 116, 101, 120, 32, 61, 32, 71,
    101, 110, 84, 101, 120, 67, 111, 111, 114, 100, 115, 40, 117, 95, 84, 67,
    71, 101, 110, 48, 44, 32, 112, 111, 115, 105, 116, 105, 111, 110, 44, 32,
    110, 111, 114, 109, 97, 108, 44, 32, 117, 95, 84, 67, 71, 101, 110, 48, 86,
    101, 99, 116, 111, 114, 48, 44, 32, 117, 95, 84, 67, 71, 101, 110, 48, 86,
    101, 99, 116, 111, 114, 49, 41, 59, 10, 35, 101, 108, 115, 101, 10, 9, 118,
    101, 99, 50, 32, 116, 101, 120, 32, 61, 32, 97, 116, 116, 114, 95, 84, 101,
    120, 67, 111, 111, 114, 100, 48, 46, 115, 116, 59, 10, 35, 101, 110, 100,
    105, 102, 10, 10, 35, 105, 102, 32, 100, 101, 102, 105, 110, 101, 100, 40,
    85, 83, 69, 95, 84, 67, 77, 79, 68, 41, 10, 9, 118, 97, 114, 95, 68, 105,
    102, 102, 117, 115, 101, 84, 101, 120, 32, 61, 32, 77, 111, 100, 84, 101,
    120, 67, 111, 111, 114, 100, 115, 40, 116, 101, 120, 44, 32, 112, 111, 115,
    105, 116, 105, 111, 110, 44, 32, 117, 95, 68, 105, 102, 102, 117, 115, 101,
    84, 101, 120, 77, 97, 116, 114, 105, 120, 44, 32, 117, 95, 68, 105, 102,
    102, 117, 115, 101, 84, 101, 120, 79, 102, 102, 84, 117, 114, 98, 41, 59,
    10, 35, 101, 108, 115, 101, 10, 32, 32, 32, 32,
  ],
  "i8",
  ALLOC_NONE,
  Runtime.GLOBAL_BASE + 81924
);
/* memory initializer */ allocate(
  [
    118, 97, 114, 95, 68, 105, 102, 102, 117, 115, 101, 84, 101, 120, 32, 61,
    32, 116, 101, 120, 59, 10, 35, 101, 110, 100, 105, 102, 10, 10, 35, 105,
    102, 32, 100, 101, 102, 105, 110, 101, 100, 40, 85, 83, 69, 95, 76, 73, 71,
    72, 84, 77, 65, 80, 41, 10, 9, 118, 97, 114, 95, 76, 105, 103, 104, 116, 84,
    101, 120, 32, 61, 32, 97, 116, 116, 114, 95, 84, 101, 120, 67, 111, 111,
    114, 100, 49, 46, 115, 116, 59, 10, 35, 101, 110, 100, 105, 102, 10, 10, 35,
    105, 102, 32, 100, 101, 102, 105, 110, 101, 100, 40, 85, 83, 69, 95, 82, 71,
    66, 65, 71, 69, 78, 41, 10, 9, 118, 97, 114, 95, 67, 111, 108, 111, 114, 32,
    61, 32, 67, 97, 108, 99, 67, 111, 108, 111, 114, 40, 112, 111, 115, 105,
    116, 105, 111, 110, 44, 32, 110, 111, 114, 109, 97, 108, 41, 59, 10, 35,
    101, 108, 115, 101, 10, 9, 118, 97, 114, 95, 67, 111, 108, 111, 114, 32, 61,
    32, 117, 95, 86, 101, 114, 116, 67, 111, 108, 111, 114, 32, 42, 32, 97, 116,
    116, 114, 95, 67, 111, 108, 111, 114, 32, 43, 32, 117, 95, 66, 97, 115, 101,
    67, 111, 108, 111, 114, 59, 10, 35, 101, 110, 100, 105, 102, 10, 10, 35,
    105, 102, 32, 100, 101, 102, 105, 110, 101, 100, 40, 85, 83, 69, 95, 70, 79,
    71, 41, 10, 9, 118, 97, 114, 95, 67, 111, 108, 111, 114, 32, 42, 61, 32,
    118, 101, 99, 52, 40, 49, 46, 48, 41, 32, 45, 32, 117, 95, 70, 111, 103, 67,
    111, 108, 111, 114, 77, 97, 115, 107, 32, 42, 32, 115, 113, 114, 116, 40,
    99, 108, 97, 109, 112, 40, 67, 97, 108, 99, 70, 111, 103, 40, 112, 111, 115,
    105, 116, 105, 111, 110, 41, 44, 32, 48, 46, 48, 44, 32, 49, 46, 48, 41, 41,
    59, 10, 35, 101, 110, 100, 105, 102, 10, 125, 10, 0, 0, 0, 0, 0, 0, 0, 0,
    70, 111, 117, 110, 100, 32, 117, 105, 32, 121, 115, 99, 97, 108, 101, 32,
    111, 102, 102, 115, 101, 116, 32, 97, 116, 32, 48, 120, 37, 48, 56, 120, 10,
    0, 0, 0, 0, 0, 0, 0, 103, 114, 97, 112, 112, 108, 101, 114, 101, 97, 99,
    104, 0, 0, 0, 0, 117, 110, 105, 102, 111, 114, 109, 32, 115, 97, 109, 112,
    108, 101, 114, 50, 68, 32, 117, 95, 68, 105, 102, 102, 117, 115, 101, 77,
    97, 112, 59, 10, 10, 35, 105, 102, 32, 100, 101, 102, 105, 110, 101, 100,
    40, 85, 83, 69, 95, 76, 73, 71, 72, 84, 77, 65, 80, 41, 10, 117, 110, 105,
    102, 111, 114, 109, 32, 115, 97, 109, 112, 108, 101, 114, 50, 68, 32, 117,
    95, 76, 105, 103, 104, 116, 77, 97, 112, 59, 10, 10, 117, 110, 105, 102,
    111, 114, 109, 32, 105, 110, 116, 32, 32, 32, 32, 32, 32, 32, 117, 95, 84,
    101, 120, 116, 117, 114, 101, 49, 69, 110, 118, 59, 10, 35, 101, 110, 100,
    105, 102, 10, 10, 35, 105, 102, 32, 100, 101, 102, 105, 110, 101, 100, 40,
    85, 83, 69, 95, 82, 71, 66, 65, 71, 69, 78, 41, 10, 117, 110, 105, 102, 111,
    114, 109, 32, 105, 110, 116, 32, 32, 32, 32, 32, 32, 32, 117, 95, 65, 108,
    112, 104, 97, 84, 101, 115, 116, 59, 10, 35, 101, 110, 100, 105, 102, 10,
    10, 118, 97, 114, 121, 105, 110, 103, 32, 118, 101, 99, 50, 32, 32, 32, 32,
    32, 32, 118, 97, 114, 95, 68, 105, 102, 102, 117, 115, 101, 84, 101, 120,
    59, 10, 10, 35, 105, 102, 32, 100, 101, 102, 105, 110, 101, 100, 40, 85, 83,
    69, 95, 76, 73, 71, 72, 84, 77, 65, 80, 41, 10, 118, 97, 114, 121, 105, 110,
    103, 32, 118, 101, 99, 50, 32, 32, 32, 32, 32, 32, 118, 97, 114, 95, 76,
    105, 103, 104, 116, 84, 101, 120, 59, 10, 35, 101, 110, 100, 105, 102, 10,
    10, 118, 97, 114, 121, 105, 110, 103, 32, 118, 101, 99, 52, 32, 32, 32, 32,
    32, 32, 118, 97, 114, 95, 67, 111, 108, 111, 114, 59, 10, 10, 10, 118, 111,
    105, 100, 32, 109, 97, 105, 110, 40, 41, 10, 123, 10, 9, 118, 101, 99, 52,
    32, 99, 111, 108, 111, 114, 32, 32, 61, 32, 116, 101, 120, 116, 117, 114,
    101, 50, 68, 40, 117, 95, 68, 105, 102, 102, 117, 115, 101, 77, 97, 112, 44,
    32, 118, 97, 114, 95, 68, 105, 102, 102, 117, 115, 101, 84, 101, 120, 41,
    59, 10, 35, 105, 102, 32, 100, 101, 102, 105, 110, 101, 100, 40, 85, 83, 69,
    95, 76, 73, 71, 72, 84, 77, 65, 80, 41, 10, 9, 118, 101, 99, 52, 32, 99,
    111, 108, 111, 114, 50, 32, 61, 32, 116, 101, 120, 116, 117, 114, 101, 50,
    68, 40, 117, 95, 76, 105, 103, 104, 116, 77, 97, 112, 44, 32, 118, 97, 114,
    95, 76, 105, 103, 104, 116, 84, 101, 120, 41, 59, 10, 32, 32, 35, 105, 102,
    32, 100, 101, 102, 105, 110, 101, 100, 40, 82, 71, 66, 77, 95, 76, 73, 71,
    72, 84, 77, 65, 80, 41, 10, 9, 99, 111, 108, 111, 114, 50, 46, 114, 103, 98,
    32, 42, 61, 32, 51, 50, 46, 48, 32, 42, 32, 99, 111, 108, 111, 114, 50, 46,
    97, 59, 10, 9, 99, 111, 108, 111, 114, 50, 46, 97, 32, 61, 32, 49, 46, 48,
    59, 10, 32, 32, 35, 101, 110, 100, 105, 102, 10, 10, 9, 105, 102, 32, 40,
    117, 95, 84, 101, 120, 116, 117, 114, 101, 49, 69, 110, 118, 32, 61, 61, 32,
    84, 69, 88, 69, 78, 86, 95, 77, 79, 68, 85, 76, 65, 84, 69, 41, 10, 9, 123,
    10, 9, 9, 99, 111, 108, 111, 114, 32, 42, 61, 32, 99, 111, 108, 111, 114,
    50, 59, 10, 9, 125, 10, 9, 101, 108, 115, 101, 32, 105, 102, 32, 40, 117,
    95, 84, 101, 120, 116, 117, 114, 101, 49, 69, 110, 118, 32, 61, 61, 32, 84,
    69, 88, 69, 78, 86, 95, 65, 68, 68, 41, 10, 9, 123, 10, 9, 9, 99, 111, 108,
    111, 114, 32, 43, 61, 32, 99, 111, 108, 111, 114, 50, 59, 10, 9, 125, 10, 9,
    101, 108, 115, 101, 32, 105, 102, 32, 40, 117, 95, 84, 101, 120, 116, 117,
    114, 101, 49, 69, 110, 118, 32, 61, 61, 32, 84, 69, 88, 69, 78, 86, 95, 82,
    69, 80, 76, 65, 67, 69, 41, 10, 9, 123, 10, 9, 9, 99, 111, 108, 111, 114,
    32, 61, 32, 99, 111, 108, 111, 114, 50, 59, 10, 9, 125, 10, 9, 10, 9, 47,
    47, 99, 111, 108, 111, 114, 32, 61, 32, 99, 111, 108, 111, 114, 32, 42, 32,
    40, 117, 95, 84, 101, 120, 116, 117, 114, 101, 49, 69, 110, 118, 46, 120,
    120, 120, 120, 32, 43, 32, 99, 111, 108, 111, 114, 50, 32, 42, 32, 117, 95,
    84, 101, 120, 116, 117, 114, 101, 49, 69, 110, 118, 46, 122, 41, 32, 43, 32,
    99, 111, 108, 111, 114, 50, 32, 42, 32, 117, 95, 84, 101, 120, 116, 117,
    114, 101, 49, 69, 110, 118, 46, 121, 59, 10, 35, 101, 110, 100, 105, 102,
    10, 10, 9, 103, 108, 95, 70, 114, 97, 103, 67, 111, 108, 111, 114, 32, 61,
    32, 99, 111, 108, 111, 114, 32, 42, 32, 118, 97, 114, 95, 67, 111, 108, 111,
    114, 59, 10, 10, 35, 105, 102, 32, 100, 101, 102, 105, 110, 101, 100, 40,
    85, 83, 69, 95, 82, 71, 66, 65, 71, 69, 78, 41, 10, 9, 105, 102, 32, 40, 40,
    117, 95, 65, 108, 112, 104, 97, 84, 101, 115, 116, 32, 61, 61, 32, 65, 84,
    69, 83, 84, 95, 71, 84, 95, 48, 32, 38, 38, 32, 103, 108, 95, 70, 114, 97,
    103, 67, 111, 108, 111, 114, 46, 97, 32, 60, 61, 32, 48, 46, 48, 41, 32,
    124, 124, 10, 9, 32, 32, 32, 32, 40, 117, 95, 65, 108, 112, 104, 97, 84,
    101, 115, 116, 32, 61, 61, 32, 65, 84, 69, 83, 84, 95, 76, 84, 95, 56, 48,
    32, 38, 38, 32, 103, 108, 95, 70, 114, 97, 103, 67, 111, 108, 111, 114, 46,
    97, 32, 62, 61, 32, 48, 46, 53, 41, 32, 124, 124, 10, 9, 32, 32, 32, 32, 40,
    117, 95, 65, 108, 112, 104, 97, 84, 101, 115, 116, 32, 61, 61, 32, 65, 84,
    69, 83, 84, 95, 71, 69, 95, 56, 48, 32, 38, 38, 32, 103, 108, 95, 70, 114,
    97, 103, 67, 111, 108, 111, 114, 46, 97, 32, 60, 32, 48, 46, 53, 41, 41, 10,
    9, 123, 10, 9, 9, 100, 105, 115, 99, 97, 114, 100, 59, 10, 9, 125, 10, 35,
    101, 110, 100, 105, 102, 10, 125, 10, 0, 0, 0, 0, 97, 116, 116, 114, 105,
    98, 117, 116, 101, 32, 118, 101, 99, 51, 32, 32, 97, 116, 116, 114, 95, 80,
    111, 115, 105, 116, 105, 111, 110, 59, 10, 97, 116, 116, 114, 105, 98, 117,
    116, 101, 32, 118, 101, 99, 51, 32, 32, 97, 116, 116, 114, 95, 78, 111, 114,
    109, 97, 108, 59, 10, 10, 97, 116, 116, 114, 105, 98, 117, 116, 101, 32,
    118, 101, 99, 52, 32, 32, 97, 116, 116, 114, 95, 84, 101, 120, 67, 111, 111,
    114, 100, 48, 59, 10, 10, 35, 105, 102, 32, 100, 101, 102, 105, 110, 101,
    100, 40, 85, 83, 69, 95, 86, 69, 82, 84, 69, 88, 95, 65, 78, 73, 77, 65, 84,
    73, 79, 78, 41, 10, 97, 116, 116, 114, 105, 98, 117, 116, 101, 32, 118, 101,
    99, 51, 32, 32, 97, 116, 116, 114, 95, 80, 111, 115, 105, 116, 105, 111,
    110, 50, 59, 10, 97, 116, 116, 114, 105, 98, 117, 116, 101, 32, 118, 101,
    99, 51, 32, 32, 97, 116, 116, 114, 95, 78, 111, 114, 109, 97, 108, 50, 59,
    10, 35, 101, 110, 100, 105, 102, 10, 10, 117, 110, 105, 102, 111, 114, 109,
    32, 118, 101, 99, 52, 32, 32, 32, 32, 117, 95, 70, 111, 103, 68, 105, 115,
    116, 97, 110, 99, 101, 59, 10, 117, 110, 105, 102, 111, 114, 109, 32, 118,
    101, 99, 52, 32, 32, 32, 32, 117, 95, 70, 111, 103, 68, 101, 112, 116, 104,
    59, 10, 117, 110, 105, 102, 111, 114, 109, 32, 102, 108, 111, 97, 116, 32,
    32, 32, 117, 95, 70, 111, 103, 69, 121, 101, 84, 59, 10, 10, 35, 105, 102,
    32, 100, 101, 102, 105, 110, 101, 100, 40, 85, 83, 69, 95, 68, 69, 70, 79,
    82, 77, 95, 86, 69, 82, 84, 69, 88, 69, 83, 41, 10, 117, 110, 105, 102, 111,
    114, 109, 32, 105, 110, 116, 32, 32, 32, 32, 32, 117, 95, 68, 101, 102, 111,
    114, 109, 71, 101, 110, 59, 10, 117, 110, 105, 102, 111, 114, 109, 32, 102,
    108, 111, 97, 116, 32, 32, 32, 117, 95, 68, 101, 102, 111, 114, 109, 80, 97,
    114, 97, 109, 115, 91, 53, 93, 59, 10, 35, 101, 110, 100, 105, 102, 10, 10,
    117, 110, 105, 102, 111, 114, 109, 32, 102, 108, 111, 97, 116, 32, 32, 32,
    117, 95, 84, 105, 109, 101, 59, 10, 117, 110, 105, 102, 111, 114, 109, 32,
    109, 97, 116, 52, 32, 32, 32, 32, 117, 95, 77, 111, 100, 101, 108, 86, 105,
    101, 119, 80, 114, 111, 106, 101, 99, 116, 105, 111, 110, 77, 97, 116, 114,
    105, 120, 59, 10, 10, 35, 105, 102, 32, 100, 101, 102, 105, 110, 101, 100,
    40, 85, 83, 69, 95, 86, 69, 82, 84, 69, 88, 95, 65, 78, 73, 77, 65, 84, 73,
    79, 78, 41, 10, 117, 110, 105, 102, 111, 114, 109, 32, 102, 108, 111, 97,
    116, 32, 32, 32, 117, 95, 86, 101, 114, 116, 101, 120, 76, 101, 114, 112,
    59, 10, 35, 101, 110, 100, 105, 102, 10, 10, 117, 110, 105, 102, 111, 114,
    109, 32, 118, 101, 99, 52, 32, 32, 117, 95, 67, 111, 108, 111, 114, 59, 10,
    10, 118, 97, 114, 121, 105, 110, 103, 32, 102, 108, 111, 97, 116, 32, 32,
    32, 118, 97, 114, 95, 83, 99, 97, 108, 101, 59, 10, 10, 35, 105, 102, 32,
    100, 101, 102, 105, 110, 101, 100, 40, 85, 83, 69, 95, 68, 69, 70, 79, 82,
    77, 95, 86, 69, 82, 84, 69, 88, 69, 83, 41, 10, 118, 101, 99, 51, 32, 68,
    101, 102, 111, 114, 109, 80, 111, 115, 105, 116, 105, 111, 110, 40, 99, 111,
    110, 115, 116, 32, 118, 101, 99, 51, 32, 112, 111, 115, 44, 32, 99, 111,
    110, 115, 116, 32, 118, 101, 99, 51, 32, 110, 111, 114, 109, 97, 108, 44,
    32, 99, 111, 110, 115, 116, 32, 118, 101, 99, 50, 32, 115, 116, 41, 10, 123,
    10, 9, 105, 102, 32, 40, 117, 95, 68, 101, 102, 111, 114, 109, 71, 101, 110,
    32, 61, 61, 32, 48, 41, 10, 9, 123, 10, 9, 9, 114, 101, 116, 117, 114, 110,
    32, 112, 111, 115, 59, 10, 9, 125, 10, 10, 9, 102, 108, 111, 97, 116, 32,
    98, 97, 115, 101, 32, 61, 32, 32, 32, 32, 32, 32, 117, 95, 68, 101, 102,
    111, 114, 109, 80, 97, 114, 97, 109, 115, 91, 48, 93, 59, 10, 9, 102, 108,
    111, 97, 116, 32, 97, 109, 112, 108, 105, 116, 117, 100, 101, 32, 61, 32,
    117, 95, 68, 101, 102, 111, 114, 109, 80, 97, 114, 97, 109, 115, 91, 49, 93,
    59, 10, 9, 102, 108, 111, 97, 116, 32, 112, 104, 97, 115, 101, 32, 61, 32,
    32, 32, 32, 32, 117, 95, 68, 101, 102, 111, 114, 109, 80, 97, 114, 97, 109,
    115, 91, 50, 93, 59, 10, 9, 102, 108, 111, 97, 116, 32, 102, 114, 101, 113,
    117, 101, 110, 99, 121, 32, 61, 32, 117, 95, 68, 101, 102, 111, 114, 109,
    80, 97, 114, 97, 109, 115, 91, 51, 93, 59, 10, 9, 102, 108, 111, 97, 116,
    32, 115, 112, 114, 101, 97, 100, 32, 61, 32, 32, 32, 32, 117, 95, 68, 101,
    102, 111, 114, 109, 80, 97, 114, 97, 109, 115, 91, 52, 93, 59, 10, 10, 9,
    105, 102, 32, 40, 117, 95, 68, 101, 102, 111, 114, 109, 71, 101, 110, 32,
    61, 61, 32, 68, 71, 69, 78, 95, 66, 85, 76, 71, 69, 41, 10, 9, 123, 10, 9,
    9, 112, 104, 97, 115, 101, 32, 42, 61, 32, 115, 116, 46, 120, 59, 10, 9,
    125, 10, 9, 101, 108, 115, 101, 32, 47, 47, 32, 105, 102, 32, 40, 117, 95,
    68, 101, 102, 111, 114, 109, 71, 101, 110, 32, 60, 61, 32, 68, 71, 69, 78,
    95, 87, 65, 86, 69, 95, 73, 78, 86, 69, 82, 83, 69, 95, 83, 65, 87, 84, 79,
    79, 84, 72, 41, 10, 9, 123, 10, 9, 9, 112, 104, 97, 115, 101, 32, 43, 61,
    32, 100, 111, 116, 40, 112, 111, 115, 46, 120, 121, 122, 44, 32, 118, 101,
    99, 51, 40, 115, 112, 114, 101, 97, 100, 41, 41, 59, 10, 9, 125, 10, 10, 9,
    102, 108, 111, 97, 116, 32, 118, 97, 108, 117, 101, 32, 61, 32, 112, 104,
    97, 115, 101, 32, 43, 32, 40, 117, 95, 84, 105, 109, 101, 32, 42, 32, 102,
    114, 101, 113, 117, 101, 110, 99, 121, 41, 59, 10, 9, 102, 108, 111, 97,
    116, 32, 102, 117, 110, 99, 59, 10, 10, 9, 105, 102, 32, 40, 117, 95, 68,
    101, 102, 111, 114, 109, 71, 101, 110, 32, 61, 61, 32, 68, 71, 69, 78, 95,
    87, 65, 86, 69, 95, 83, 73, 78, 41, 10, 9, 123, 10, 9, 9, 102, 117, 110, 99,
    32, 61, 32, 115, 105, 110, 40, 118, 97, 108, 117, 101, 32, 42, 32, 50, 46,
    48, 32, 42, 32, 77, 95, 80, 73, 41, 59, 10, 9, 125, 10, 9, 101, 108, 115,
    101, 32, 105, 102, 32, 40, 117, 95, 68, 101, 102, 111, 114, 109, 71, 101,
    110, 32, 61, 61, 32, 68, 71, 69, 78, 95, 87, 65, 86, 69, 95, 83, 81, 85, 65,
    82, 69, 41, 10, 9, 123, 10, 9, 9, 102, 117, 110, 99, 32, 61, 32, 115, 105,
    103, 110, 40, 48, 46, 53, 32, 45, 32, 102, 114, 97, 99, 116, 40, 118, 97,
    108, 117, 101, 41, 41, 59, 10, 9, 125, 10, 9, 101, 108, 115, 101, 32, 105,
    102, 32, 40, 117, 95, 68, 101, 102, 111, 114, 109, 71, 101, 110, 32, 61, 61,
    32, 68, 71, 69, 78, 95, 87, 65, 86, 69, 95, 84, 82, 73, 65, 78, 71, 76, 69,
    41, 10, 9, 123, 10, 9, 9, 102, 117, 110, 99, 32, 61, 32, 97, 98, 115, 40,
    102, 114, 97, 99, 116, 40, 118, 97, 108, 117, 101, 32, 43, 32, 48, 46, 55,
    53, 41, 32, 45, 32, 48, 46, 53, 41, 32, 42, 32, 52, 46, 48, 32, 45, 32, 49,
    46, 48, 59, 10, 9, 125, 10, 9, 101, 108, 115, 101, 32, 105, 102, 32, 40,
    117, 95, 68, 101, 102, 111, 114, 109, 71, 101, 110, 32, 61, 61, 32, 68, 71,
    69, 78, 95, 87, 65, 86, 69, 95, 83, 65, 87, 84, 79, 79, 84, 72, 41, 10, 9,
    123, 10, 9, 9, 102, 117, 110, 99, 32, 61, 32, 102, 114, 97, 99, 116, 40,
    118, 97, 108, 117, 101, 41, 59, 10, 9, 125, 10, 9, 101, 108, 115, 101, 32,
    105, 102, 32, 40, 117, 95, 68, 101, 102, 111, 114, 109, 71, 101, 110, 32,
    61, 61, 32, 68, 71, 69, 78, 95, 87, 65, 86, 69, 95, 73, 78, 86, 69, 82, 83,
    69, 95, 83, 65, 87, 84, 79, 79, 84, 72, 41, 10, 9, 123, 10, 9, 9, 102, 117,
    110, 99, 32, 61, 32, 40, 49, 46, 48, 32, 45, 32, 102, 114, 97, 99, 116, 40,
    118, 97, 108, 117, 101, 41, 41, 59, 10, 9, 125, 10, 9, 101, 108, 115, 101,
    32, 47, 47, 32, 105, 102, 32, 40, 117, 95, 68, 101, 102, 111, 114, 109, 71,
    101, 110, 32, 61, 61, 32, 68, 71, 69, 78, 95, 66, 85, 76, 71, 69, 41, 10, 9,
    123, 10, 9, 9, 102, 117, 110, 99, 32, 61, 32, 115, 105, 110, 40, 118, 97,
    108, 117, 101, 41, 59, 10, 9, 125, 10, 10, 9, 114, 101, 116, 117, 114, 110,
    32, 112, 111, 115, 32, 43, 32, 110, 111, 114, 109, 97, 108, 32, 42, 32, 40,
    98, 97, 115, 101, 32, 43, 32, 102, 117, 110, 99, 32, 42, 32, 97, 109, 112,
    108, 105, 116, 117, 100, 101, 41, 59, 10, 125, 10, 35, 101, 110, 100, 105,
    102, 10, 10, 102, 108, 111, 97, 116, 32, 67, 97, 108, 99, 70, 111, 103, 40,
    118, 101, 99, 51, 32, 112, 111, 115, 105, 116, 105, 111, 110, 41, 10, 123,
    10, 9, 102, 108, 111, 97, 116, 32, 115, 32, 61, 32, 100, 111, 116, 40, 118,
    101, 99, 52, 40, 112, 111, 115, 105, 116, 105, 111, 110, 44, 32, 49, 46, 48,
    41, 44, 32, 117, 95, 70, 111, 103, 68, 105, 115, 116, 97, 110, 99, 101, 41,
    32, 42, 32, 56, 46, 48, 59, 10, 9, 102, 108, 111, 97, 116, 32, 116, 32, 61,
    32, 100, 111, 116, 40, 118, 101, 99, 52, 40, 112, 111, 115, 105, 116, 105,
    111, 110, 44, 32, 49, 46, 48, 41, 44, 32, 117, 95, 70, 111, 103, 68, 101,
    112, 116, 104, 41, 59, 10, 10, 9, 102, 108, 111, 97, 116, 32, 101, 121, 101,
    79, 117, 116, 115, 105, 100, 101, 32, 61, 32, 102, 108, 111, 97, 116, 40,
    117, 95, 70, 111, 103, 69, 121, 101, 84, 32, 60, 32, 48, 46, 48, 41, 59, 10,
    9, 102, 108, 111, 97, 116, 32, 102, 111, 103, 103, 101, 100, 32, 61, 32,
    102, 108, 111, 97, 116, 40, 116, 32, 62, 61, 32, 101, 121, 101, 79, 117,
    116, 115, 105, 100, 101, 41, 59, 10, 10, 9, 116, 32, 43, 61, 32, 49, 101,
    45, 54, 59, 10, 9, 116, 32, 42, 61, 32, 102, 111, 103, 103, 101, 100, 32,
    47, 32, 40, 116, 32, 45, 32, 117, 95, 70, 111, 103, 69, 121, 101, 84, 32,
    42, 32, 101, 121, 101, 79, 117, 116, 115, 105, 100, 101, 41, 59, 10, 10, 9,
    114, 101, 116, 117, 114, 110, 32, 115, 32, 42, 32, 116, 59, 10, 125, 10, 10,
    118, 111, 105, 100, 32, 109, 97, 105, 110, 40, 41, 10, 123, 10, 35, 105,
    102, 32, 100, 101, 102, 105, 110, 101, 100, 40, 85, 83, 69, 95, 86, 69, 82,
    84, 69, 88, 95, 65, 78, 73, 77, 65, 84, 73, 79, 78, 41, 10, 9, 118, 101, 99,
    51, 32, 112, 111, 115, 105, 116, 105, 111, 110, 32, 61, 32, 109, 105, 120,
    40, 97, 116, 116, 114, 95, 80, 111, 115, 105, 116, 105, 111, 110, 44, 32,
    97, 116, 116, 114, 95, 80, 111, 115, 105, 116, 105, 111, 110, 50, 44, 32,
    117, 95, 86, 101, 114, 116, 101, 120, 76, 101, 114, 112, 41, 59, 10, 9, 118,
    101, 99, 51, 32, 110, 111, 114, 109, 97, 108, 32, 32, 32, 61, 32, 109, 105,
    120, 40, 97, 116, 116, 114, 95, 78, 111, 114, 109, 97, 108, 44, 32, 32, 32,
    97, 116, 116, 114, 95, 78, 111, 114, 109, 97, 108, 50, 44, 32, 32, 32, 117,
    95, 86, 101, 114, 116, 101, 120, 76, 101, 114, 112, 41, 59, 10, 9, 110, 111,
    114, 109, 97, 108, 32, 61, 32, 110, 111, 114, 109, 97, 108, 105, 122, 101,
    40, 110, 111, 114, 109, 97, 108, 32, 45, 32, 118, 101, 99, 51, 40, 48, 46,
    53, 41, 41, 59, 10, 35, 101, 108, 115, 101, 10, 9, 118, 101, 99, 51, 32,
    112, 111, 115, 105, 116, 105, 111, 110, 32, 61, 32, 97, 116, 116, 114, 95,
    80, 111, 115, 105, 116, 105, 111, 110, 59, 10, 9, 118, 101, 99, 51, 32, 110,
    111, 114, 109, 97, 108, 32, 32, 32, 61, 32, 97, 116, 116, 114, 95, 78, 111,
    114, 109, 97, 108, 32, 42, 32, 50, 46, 48, 32, 45, 32, 118, 101, 99, 51, 40,
    49, 46, 48, 41, 59, 10, 35, 101, 110, 100, 105, 102, 10, 10, 35, 105, 102,
    32, 100, 101, 102, 105, 110, 101, 100, 40, 85, 83, 69, 95, 68, 69, 70, 79,
    82, 77, 95, 86, 69, 82, 84, 69, 88, 69, 83, 41, 10, 9, 112, 111, 115, 105,
    116, 105, 111, 110, 46, 120, 121, 122, 32, 61, 32, 68, 101, 102, 111, 114,
    109, 80, 111, 115, 105, 116, 105, 111, 110, 40, 112, 111, 115, 105, 116,
    105, 111, 110, 46, 120, 121, 122, 44, 32, 110, 111, 114, 109, 97, 108, 44,
    32, 97, 116, 116, 114, 95, 84, 101, 120, 67, 111, 111, 114, 100, 48, 46,
    115, 116, 41, 59, 10, 35, 101, 110, 100, 105, 102, 10, 10, 9, 103, 108, 95,
    80, 111, 115, 105, 116, 105, 111, 110, 32, 61, 32, 117, 95, 77, 111, 100,
    101, 108, 86, 105, 101, 119, 80, 114, 111, 106, 101, 99, 116, 105, 111, 110,
    77, 97, 116, 114, 105, 120, 32, 42, 32, 118, 101, 99, 52, 40, 112, 111, 115,
    105, 116, 105, 111, 110, 44, 32, 49, 46, 48, 41, 59, 10, 10, 9, 118, 97,
    114, 95, 83, 99, 97, 108, 101, 32, 61, 32, 67, 97, 108, 99, 70, 111, 103,
    40, 112, 111, 115, 105, 116, 105, 111, 110, 41, 32, 42, 32, 117, 95, 67,
    111, 108, 111, 114, 46, 97, 32, 42, 32, 117, 95, 67, 111, 108, 111, 114, 46,
    97, 59, 10, 125, 10, 0, 103, 101, 116, 99, 104, 97, 108, 108, 101, 110, 103,
    101, 0, 0, 0, 0, 115, 101, 114, 118, 101, 114, 98, 97, 110, 115, 46, 100,
    97, 116, 0, 0, 117, 110, 105, 102, 111, 114, 109, 32, 118, 101, 99, 52, 32,
    32, 117, 95, 67, 111, 108, 111, 114, 59, 10, 10, 118, 97, 114, 121, 105,
    110, 103, 32, 102, 108, 111, 97, 116, 32, 118, 97, 114, 95, 83, 99, 97, 108,
    101, 59, 10, 10, 118, 111, 105, 100, 32, 109, 97, 105, 110, 40, 41, 10, 123,
    10, 9, 103, 108, 95, 70, 114, 97, 103, 67, 111, 108, 111, 114, 32, 61, 32,
    117, 95, 67, 111, 108, 111, 114, 59, 10, 9, 103, 108, 95, 70, 114, 97, 103,
    67, 111, 108, 111, 114, 46, 97, 32, 61, 32, 115, 113, 114, 116, 40, 99, 108,
    97, 109, 112, 40, 118, 97, 114, 95, 83, 99, 97, 108, 101, 44, 32, 48, 46,
    48, 44, 32, 49, 46, 48, 41, 41, 59, 10, 125, 10, 0, 87, 65, 82, 78, 73, 78,
    71, 58, 32, 98, 97, 100, 32, 99, 111, 109, 109, 97, 110, 100, 32, 98, 121,
    116, 101, 32, 102, 111, 114, 32, 99, 108, 105, 101, 110, 116, 32, 37, 105,
    10, 0, 0, 0, 0, 0, 0, 0, 0, 48, 0, 0, 0, 0, 0, 0, 0, 32, 37, 52, 100, 32,
    37, 102, 10, 0, 0, 0, 0, 0, 0, 0, 0, 94, 51, 87, 65, 82, 78, 73, 78, 71, 58,
    32, 118, 101, 99, 116, 111, 114, 32, 119, 105, 116, 104, 32, 111, 110, 101,
    32, 111, 114, 32, 109, 111, 114, 101, 32, 78, 97, 78, 32, 99, 111, 109, 112,
    111, 110, 101, 110, 116, 115, 32, 98, 101, 105, 110, 103, 32, 112, 97, 115,
    115, 101, 100, 32, 116, 111, 32, 79, 112, 101, 110, 65, 76, 32, 97, 116, 32,
    37, 115, 58, 37, 100, 32, 45, 45, 32, 122, 101, 114, 111, 105, 110, 103, 10,
    0, 0, 0, 97, 116, 116, 114, 105, 98, 117, 116, 101, 32, 118, 101, 99, 51,
    32, 97, 116, 116, 114, 95, 80, 111, 115, 105, 116, 105, 111, 110, 59, 10,
    97, 116, 116, 114, 105, 98, 117, 116, 101, 32, 118, 101, 99, 52, 32, 97,
    116, 116, 114, 95, 84, 101, 120, 67, 111, 111, 114, 100, 48, 59, 10, 97,
    116, 116, 114, 105, 98, 117, 116, 101, 32, 118, 101, 99, 51, 32, 97, 116,
    116, 114, 95, 78, 111, 114, 109, 97, 108, 59, 10, 10, 117, 110, 105, 102,
    111, 114, 109, 32, 118, 101, 99, 52, 32, 32, 32, 117, 95, 68, 108, 105, 103,
    104, 116, 73, 110, 102, 111, 59, 10, 10, 35, 105, 102, 32, 100, 101, 102,
    105, 110, 101, 100, 40, 85, 83, 69, 95, 68, 69, 70, 79, 82, 77, 95, 86, 69,
    82, 84, 69, 88, 69, 83, 41, 10, 117, 110, 105, 102, 111, 114, 109, 32, 105,
    110, 116, 32, 32, 32, 32, 117, 95, 68, 101, 102, 111, 114, 109, 71, 101,
    110, 59, 10, 117, 110, 105, 102, 111, 114, 109, 32, 102, 108, 111, 97, 116,
    32, 32, 117, 95, 68, 101, 102, 111, 114, 109, 80, 97, 114, 97, 109, 115, 91,
    53, 93, 59, 10, 117, 110, 105, 102, 111, 114, 109, 32, 102, 108, 111, 97,
    116, 32, 32, 117, 95, 84, 105, 109, 101, 59, 10, 35, 101, 110, 100, 105,
    102, 10, 10, 117, 110, 105, 102, 111, 114, 109, 32, 118, 101, 99, 52, 32,
    32, 32, 117, 95, 67, 111, 108, 111, 114, 59, 10, 117, 110, 105, 102, 111,
    114, 109, 32, 109, 97, 116, 52, 32, 32, 32, 117, 95, 77, 111, 100, 101, 108,
    86, 105, 101, 119, 80, 114, 111, 106, 101, 99, 116, 105, 111, 110, 77, 97,
    116, 114, 105, 120, 59, 10, 10, 118, 97, 114, 121, 105, 110, 103, 32, 118,
    101, 99, 50, 32, 32, 32, 118, 97, 114, 95, 84, 101, 120, 49, 59, 10, 118,
    97, 114, 121, 105, 110, 103, 32, 118, 101, 99, 52, 32, 32, 32, 118, 97, 114,
    95, 67, 111, 108, 111, 114, 59, 10, 10, 35, 105, 102, 32, 100, 101, 102,
    105, 110, 101, 100, 40, 85, 83, 69, 95, 68, 69, 70, 79, 82, 77, 95, 86, 69,
    82, 84, 69, 88, 69, 83, 41, 10, 118, 101, 99, 51, 32, 68, 101, 102, 111,
    114, 109, 80, 111, 115, 105, 116, 105, 111, 110, 40, 99, 111, 110, 115, 116,
    32, 118, 101, 99, 51, 32, 112, 111, 115, 44, 32, 99, 111, 110, 115, 116, 32,
    118, 101, 99, 51, 32, 110, 111, 114, 109, 97, 108, 44, 32, 99, 111, 110,
    115, 116, 32, 118, 101, 99, 50, 32, 115, 116, 41, 10, 123, 10, 9, 105, 102,
    32, 40, 117, 95, 68, 101, 102, 111, 114, 109, 71, 101, 110, 32, 61, 61, 32,
    48, 41, 10, 9, 123, 10, 9, 9, 114, 101, 116, 117, 114, 110, 32, 112, 111,
    115, 59, 10, 9, 125, 10, 10, 9, 102, 108, 111, 97, 116, 32, 98, 97, 115,
    101, 32, 61, 32, 32, 32, 32, 32, 32, 117, 95, 68, 101, 102, 111, 114, 109,
    80, 97, 114, 97, 109, 115, 91, 48, 93, 59, 10, 9, 102, 108, 111, 97, 116,
    32, 97, 109, 112, 108, 105, 116, 117, 100, 101, 32, 61, 32, 117, 95, 68,
    101, 102, 111, 114, 109, 80, 97, 114, 97, 109, 115, 91, 49, 93, 59, 10, 9,
    102, 108, 111, 97, 116, 32, 112, 104, 97, 115, 101, 32, 61, 32, 32, 32, 32,
    32, 117, 95, 68, 101, 102, 111, 114, 109, 80, 97, 114, 97, 109, 115, 91, 50,
    93, 59, 10, 9, 102, 108, 111, 97, 116, 32, 102, 114, 101, 113, 117, 101,
    110, 99, 121, 32, 61, 32, 117, 95, 68, 101, 102, 111, 114, 109, 80, 97, 114,
    97, 109, 115, 91, 51, 93, 59, 10, 9, 102, 108, 111, 97, 116, 32, 115, 112,
    114, 101, 97, 100, 32, 61, 32, 32, 32, 32, 117, 95, 68, 101, 102, 111, 114,
    109, 80, 97, 114, 97, 109, 115, 91, 52, 93, 59, 10, 10, 9, 105, 102, 32, 40,
    117, 95, 68, 101, 102, 111, 114, 109, 71, 101, 110, 32, 61, 61, 32, 68, 71,
    69, 78, 95, 66, 85, 76, 71, 69, 41, 10, 9, 123, 10, 9, 9, 112, 104, 97, 115,
    101, 32, 42, 61, 32, 115, 116, 46, 120, 59, 10, 9, 125, 10, 9, 101, 108,
    115, 101, 32, 47, 47, 32, 105, 102, 32, 40, 117, 95, 68, 101, 102, 111, 114,
    109, 71, 101, 110, 32, 60, 61, 32, 68, 71, 69, 78, 95, 87, 65, 86, 69, 95,
    73, 78, 86, 69, 82, 83, 69, 95, 83, 65, 87, 84, 79, 79, 84, 72, 41, 10, 9,
    123, 10, 9, 9, 112, 104, 97, 115, 101, 32, 43, 61, 32, 100, 111, 116, 40,
    112, 111, 115, 46, 120, 121, 122, 44, 32, 118, 101, 99, 51, 40, 115, 112,
    114, 101, 97, 100, 41, 41, 59, 10, 9, 125, 10, 10, 9, 102, 108, 111, 97,
    116, 32, 118, 97, 108, 117, 101, 32, 61, 32, 112, 104, 97, 115, 101, 32, 43,
    32, 40, 117, 95, 84, 105, 109, 101, 32, 42, 32, 102, 114, 101, 113, 117,
    101, 110, 99, 121, 41, 59, 10, 9, 102, 108, 111, 97, 116, 32, 102, 117, 110,
    99, 59, 10, 10, 9, 105, 102, 32, 40, 117, 95, 68, 101, 102, 111, 114, 109,
    71, 101, 110, 32, 61, 61, 32, 68, 71, 69, 78, 95, 87, 65, 86, 69, 95, 83,
    73, 78, 41, 10, 9, 123, 10, 9, 9, 102, 117, 110, 99, 32, 61, 32, 115, 105,
    110, 40, 118, 97, 108, 117, 101, 32, 42, 32, 50, 46, 48, 32, 42, 32, 77, 95,
    80, 73, 41, 59, 10, 9, 125, 10, 9, 101, 108, 115, 101, 32, 105, 102, 32, 40,
    117, 95, 68, 101, 102, 111, 114, 109, 71, 101, 110, 32, 61, 61, 32, 68, 71,
    69, 78, 95, 87, 65, 86, 69, 95, 83, 81, 85, 65, 82, 69, 41, 10, 9, 123, 10,
    9, 9, 102, 117, 110, 99, 32, 61, 32, 115, 105, 103, 110, 40, 48, 46, 53, 32,
    45, 32, 102, 114, 97, 99, 116, 40, 118, 97, 108, 117, 101, 41, 41, 59, 10,
    9, 125, 10, 9, 101, 108, 115, 101, 32, 105, 102, 32, 40, 117, 95, 68, 101,
    102, 111, 114, 109, 71, 101, 110, 32, 61, 61, 32, 68, 71, 69, 78, 95, 87,
    65, 86, 69, 95, 84, 82, 73, 65, 78, 71, 76, 69, 41, 10, 9, 123, 10, 9, 9,
    102, 117, 110, 99, 32, 61, 32, 97, 98, 115, 40, 102, 114, 97, 99, 116, 40,
    118, 97, 108, 117, 101, 32, 43, 32, 48, 46, 55, 53, 41, 32, 45, 32, 48, 46,
    53, 41, 32, 42, 32, 52, 46, 48, 32, 45, 32, 49, 46, 48, 59, 10, 9, 125, 10,
    9, 101, 108, 115, 101, 32, 105, 102, 32, 40, 117, 95, 68, 101, 102, 111,
    114, 109, 71, 101, 110, 32, 61, 61, 32, 68, 71, 69, 78, 95, 87, 65, 86, 69,
    95, 83, 65, 87, 84, 79, 79, 84, 72, 41, 10, 9, 123, 10, 9, 9, 102, 117, 110,
    99, 32, 61, 32, 102, 114, 97, 99, 116, 40, 118, 97, 108, 117, 101, 41, 59,
    10, 9, 125, 10, 9, 101, 108, 115, 101, 32, 105, 102, 32, 40, 117, 95, 68,
    101, 102, 111, 114, 109, 71, 101, 110, 32, 61, 61, 32, 68, 71, 69, 78, 95,
    87, 65, 86, 69, 95, 73, 78, 86, 69, 82, 83, 69, 95, 83, 65, 87, 84, 79, 79,
    84, 72, 41, 10, 9, 123, 10, 9, 9, 102, 117, 110, 99, 32, 61, 32, 40, 49, 46,
    48, 32, 45, 32, 102, 114, 97, 99, 116, 40, 118, 97, 108, 117, 101, 41, 41,
    59, 10, 9, 125, 10, 9, 101, 108, 115, 101, 32, 47, 47, 32, 105, 102, 32, 40,
    117, 95, 68, 101, 102, 111, 114, 109, 71, 101, 110, 32, 61, 61, 32, 68, 71,
    69, 78, 95, 66, 85, 76, 71, 69, 41, 10, 9, 123, 10, 9, 9, 102, 117, 110, 99,
    32, 61, 32, 115, 105, 110, 40, 118, 97, 108, 117, 101, 41, 59, 10, 9, 125,
    10, 10, 9, 114, 101, 116, 117, 114, 110, 32, 112, 111, 115, 32, 43, 32, 110,
    111, 114, 109, 97, 108, 32, 42, 32, 40, 98, 97, 115, 101, 32, 43, 32, 102,
    117, 110, 99, 32, 42, 32, 97, 109, 112, 108, 105, 116, 117, 100, 101, 41,
    59, 10, 125, 10, 35, 101, 110, 100, 105, 102, 10, 10, 118, 111, 105, 100,
    32, 109, 97, 105, 110, 40, 41, 10, 123, 10, 9, 118, 101, 99, 51, 32, 112,
    111, 115, 105, 116, 105, 111, 110, 32, 61, 32, 97, 116, 116, 114, 95, 80,
    111, 115, 105, 116, 105, 111, 110, 59, 10, 9, 118, 101, 99, 51, 32, 110,
    111, 114, 109, 97, 108, 32, 61, 32, 97, 116, 116, 114, 95, 78, 111, 114,
    109, 97, 108, 32, 42, 32, 50, 46, 48, 32, 45, 32, 118, 101, 99, 51, 40, 49,
    46, 48, 41, 59, 10, 10, 35, 105, 102, 32, 100, 101, 102, 105, 110, 101, 100,
    40, 85, 83, 69, 95, 68, 69, 70, 79, 82, 77, 95, 86, 69, 82, 84, 69, 88, 69,
    83, 41, 10, 9, 112, 111, 115, 105, 116, 105, 111, 110, 32, 61, 32, 68, 101,
    102, 111, 114, 109, 80, 111, 115, 105, 116, 105, 111, 110, 40, 112, 111,
    115, 105, 116, 105, 111, 110, 44, 32, 110, 111, 114, 109, 97, 108, 44, 32,
    97, 116, 116, 114, 95, 84, 101, 120, 67, 111, 111, 114, 100, 48, 46, 115,
    116, 41, 59, 10, 35, 101, 110, 100, 105, 102, 10, 10, 9, 103, 108, 95, 80,
    111, 115, 105, 116, 105, 111, 110, 32, 61, 32, 117, 95, 77, 111, 100, 101,
    108, 86, 105, 101, 119, 80, 114, 111, 106, 101, 99, 116, 105, 111, 110, 77,
    97, 116, 114, 105, 120, 32, 42, 32, 118, 101, 99, 52, 40, 112, 111, 115,
    105, 116, 105, 111, 110, 44, 32, 49, 46, 48, 41, 59, 10, 9, 9, 10, 9, 118,
    101, 99, 51, 32, 100, 105, 115, 116, 32, 61, 32, 117, 95, 68, 108, 105, 103,
    104, 116, 73, 110, 102, 111, 46, 120, 121, 122, 32, 45, 32, 112, 111, 115,
    105, 116, 105, 111, 110, 59, 10, 10, 9, 118, 97, 114, 95, 84, 101, 120, 49,
    32, 61, 32, 100, 105, 115, 116, 46, 120, 121, 32, 42, 32, 117, 95, 68, 108,
    105, 103, 104, 116, 73, 110, 102, 111, 46, 97, 32, 43, 32, 118, 101, 99, 50,
    40, 48, 46, 53, 41, 59, 10, 9, 102, 108, 111, 97, 116, 32, 100, 108, 105,
    103, 104, 116, 109, 111, 100, 32, 61, 32, 115, 116, 101, 112, 40, 48, 46,
    48, 44, 32, 100, 111, 116, 40, 100, 105, 115, 116, 44, 32, 110, 111, 114,
    109, 97, 108, 41, 41, 59, 10, 9, 100, 108, 105, 103, 104, 116, 109, 111,
    100, 32, 42, 61, 32, 99, 108, 97, 109, 112, 40, 50, 46, 48, 32, 42, 32, 40,
    49, 46, 48, 32, 45, 32, 97, 98, 115, 40, 100, 105, 115, 116, 46, 122, 41,
    32, 42, 32, 117, 95, 68, 108, 105, 103, 104, 116, 73, 110, 102, 111, 46, 97,
    41, 44, 32, 48, 46, 48, 44, 32, 49, 46, 48, 41, 59, 10, 9, 10, 9, 118, 97,
    114, 95, 67, 111, 108, 111, 114, 32, 61, 32, 117, 95, 67, 111, 108, 111,
    114, 32, 42, 32, 100, 108, 105, 103, 104, 116, 109, 111, 100, 59, 10, 125,
    10, 0, 0, 0, 0, 0, 0, 0, 110, 101, 116, 95, 100, 114, 111, 112, 115, 105,
    109, 0, 0, 0, 0, 0, 65, 65, 83, 95, 65, 114, 101, 97, 80, 114, 101, 115,
    101, 110, 99, 101, 84, 121, 112, 101, 58, 32, 105, 110, 118, 97, 108, 105,
    100, 32, 97, 114, 101, 97, 32, 110, 117, 109, 98, 101, 114, 10, 0, 0, 0, 0,
    0, 0, 74, 79, 89, 50, 50, 0, 0, 0, 117, 110, 105, 102, 111, 114, 109, 32,
    115, 97, 109, 112, 108, 101, 114, 50, 68, 32, 117, 95, 68, 105, 102, 102,
    117, 115, 101, 77, 97, 112, 59, 10, 10, 118, 97, 114, 121, 105, 110, 103,
    32, 118, 101, 99, 50, 32, 32, 32, 32, 32, 32, 118, 97, 114, 95, 84, 101,
    120, 49, 59, 10, 118, 97, 114, 121, 105, 110, 103, 32, 118, 101, 99, 52, 32,
    32, 32, 32, 32, 32, 118, 97, 114, 95, 67, 111, 108, 111, 114, 59, 10, 10,
    10, 118, 111, 105, 100, 32, 109, 97, 105, 110, 40, 41, 10, 123, 10, 9, 118,
    101, 99, 52, 32, 99, 111, 108, 111, 114, 32, 61, 32, 116, 101, 120, 116,
    117, 114, 101, 50, 68, 40, 117, 95, 68, 105, 102, 102, 117, 115, 101, 77,
    97, 112, 44, 32, 118, 97, 114, 95, 84, 101, 120, 49, 41, 59, 10, 10, 9, 103,
    108, 95, 70, 114, 97, 103, 67, 111, 108, 111, 114, 32, 61, 32, 99, 111, 108,
    111, 114, 32, 42, 32, 118, 97, 114, 95, 67, 111, 108, 111, 114, 59, 10, 10,
    9, 105, 102, 32, 40, 103, 108, 95, 70, 114, 97, 103, 67, 111, 108, 111, 114,
    46, 97, 32, 61, 61, 32, 48, 46, 48, 41, 32, 123, 10, 9, 9, 100, 105, 115,
    99, 97, 114, 100, 59, 10, 9, 125, 10, 125, 10, 0, 0, 37, 51, 105, 58, 32,
    35, 37, 45, 51, 105, 32, 0, 0, 0, 0, 0, 109, 97, 112, 115, 47, 37, 115, 46,
    114, 99, 100, 0, 0, 0, 0, 0, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45,
    45, 45, 45, 10, 0, 0, 0, 0, 0, 0, 0, 0, 32, 111, 117, 116, 32, 111, 102, 32,
    114, 97, 110, 103, 101, 32, 40, 109, 105, 110, 32, 37, 100, 41, 0, 0, 111,
    114, 105, 103, 105, 110, 0, 0, 43, 98, 117, 116, 116, 111, 110, 49, 49, 0,
    0, 0, 0, 0, 0, 0, 112, 104, 121, 115, 95, 119, 97, 116, 101, 114, 102, 114,
    105, 99, 116, 105, 111, 110, 0, 0, 0, 0, 0, 0, 32, 32, 32, 32, 32, 32, 32,
    32, 37, 56, 105, 32, 98, 121, 116, 101, 115, 32, 105, 110, 32, 115, 109, 97,
    108, 108, 32, 90, 111, 110, 101, 32, 109, 101, 109, 111, 114, 121, 10, 0,
    99, 111, 117, 108, 100, 110, 39, 116, 32, 119, 114, 105, 116, 101, 32, 37,
    115, 10, 0, 0, 0, 0, 0, 0, 115, 118, 95, 109, 97, 112, 67, 104, 101, 99,
    107, 115, 117, 109, 0, 0, 65, 65, 83, 95, 69, 110, 116, 105, 116, 121, 77,
    111, 100, 101, 108, 78, 117, 109, 58, 32, 101, 110, 116, 110, 117, 109, 32,
    37, 100, 32, 111, 117, 116, 32, 111, 102, 32, 114, 97, 110, 103, 101, 10, 0,
    0, 0, 0, 0, 65, 65, 83, 95, 77, 65, 88, 95, 80, 79, 82, 84, 65, 76, 83, 10,
    0, 0, 0, 0, 0, 0, 0, 0, 125, 0, 0, 0, 0, 0, 0, 0, 86, 77, 32, 112, 114, 111,
    103, 114, 97, 109, 32, 99, 111, 117, 110, 116, 101, 114, 32, 111, 117, 116,
    32, 111, 102, 32, 114, 97, 110, 103, 101, 32, 105, 110, 32, 79, 80, 95, 74,
    85, 77, 80, 0, 0, 0, 0, 0, 0, 103, 108, 85, 110, 105, 102, 111, 114, 109,
    51, 102, 118, 0, 0, 0, 0, 70, 73, 88, 73, 78, 71, 32, 69, 78, 84, 45, 62,
    83, 46, 78, 85, 77, 66, 69, 82, 33, 33, 33, 10, 0, 0, 0, 0, 0, 0, 0, 0, 85,
    110, 115, 117, 112, 112, 111, 114, 116, 101, 100, 32, 74, 80, 69, 71, 32,
    112, 114, 111, 99, 101, 115, 115, 58, 32, 83, 79, 70, 32, 116, 121, 112,
    101, 32, 48, 120, 37, 48, 50, 120, 0, 0, 0, 0, 0, 0, 0, 46, 46, 46, 71, 76,
    95, 69, 88, 84, 95, 116, 101, 120, 116, 117, 114, 101, 95, 102, 105, 108,
    116, 101, 114, 95, 97, 110, 105, 115, 111, 116, 114, 111, 112, 105, 99, 32,
    110, 111, 116, 32, 112, 114, 111, 112, 101, 114, 108, 121, 32, 115, 117,
    112, 112, 111, 114, 116, 101, 100, 33, 10, 0, 0, 0, 89, 111, 117, 32, 109,
    117, 115, 116, 32, 98, 101, 32, 105, 110, 32, 97, 32, 108, 101, 118, 101,
    108, 32, 116, 111, 32, 114, 101, 99, 111, 114, 100, 46, 10, 0, 0, 0, 0, 0,
    0, 37, 105, 32, 116, 111, 116, 97, 108, 32, 115, 104, 97, 100, 101, 114,
    115, 10, 0, 0, 0, 0, 0, 0, 0, 114, 95, 109, 111, 100, 101, 0, 0, 49, 0, 0,
    0, 0, 0, 0, 0, 113, 103, 108, 69, 110, 97, 98, 108, 101, 86, 101, 114, 116,
    101, 120, 65, 116, 116, 114, 105, 98, 65, 114, 114, 97, 121, 65, 82, 66, 40,
    32, 65, 84, 84, 82, 95, 73, 78, 68, 69, 88, 95, 78, 79, 82, 77, 65, 76, 32,
    41, 10, 0, 0, 0, 0, 0, 81, 117, 97, 107, 101, 51, 65, 114, 101, 110, 97, 0,
    0, 0, 0, 0, 103, 108, 66, 105, 110, 100, 65, 116, 116, 114, 105, 98, 76,
    111, 99, 97, 116, 105, 111, 110, 65, 82, 66, 0, 110, 117, 109, 98, 101, 114,
    32, 108, 111, 110, 103, 101, 114, 32, 116, 104, 97, 110, 32, 77, 65, 88, 95,
    84, 79, 75, 69, 78, 32, 61, 32, 37, 100, 0, 0, 0, 0, 0, 0, 0, 83, 86, 95,
    71, 101, 116, 85, 115, 101, 114, 105, 110, 102, 111, 58, 32, 98, 117, 102,
    102, 101, 114, 83, 105, 122, 101, 32, 61, 61, 32, 37, 105, 0, 0, 0, 0, 0, 0,
    0, 0, 43, 43, 32, 111, 114, 32, 45, 45, 32, 117, 115, 101, 100, 32, 105,
    110, 32, 35, 105, 102, 47, 35, 101, 108, 105, 102, 0, 0, 0, 0, 0, 0, 66, 97,
    100, 32, 103, 97, 109, 101, 32, 115, 121, 115, 116, 101, 109, 32, 116, 114,
    97, 112, 58, 32, 37, 108, 100, 0, 0, 0, 0, 0, 0, 0, 101, 120, 112, 101, 99,
    116, 101, 100, 32, 91, 44, 32, 102, 111, 117, 110, 100, 32, 37, 115, 0, 0,
    0, 0, 70, 111, 117, 110, 100, 32, 117, 105, 32, 120, 115, 99, 97, 108, 101,
    32, 111, 102, 102, 115, 101, 116, 32, 97, 116, 32, 48, 120, 37, 48, 56, 120,
    10, 0, 0, 0, 0, 0, 0, 0, 102, 111, 114, 99, 101, 114, 101, 97, 99, 104, 97,
    98, 105, 108, 105, 116, 121, 0, 0, 0, 0, 0, 0, 0, 103, 101, 116, 105, 110,
    102, 111, 0, 83, 86, 67, 95, 68, 105, 114, 101, 99, 116, 67, 111, 110, 110,
    101, 99, 116, 32, 40, 41, 10, 0, 0, 0, 115, 118, 95, 98, 97, 110, 70, 105,
    108, 101, 0, 0, 0, 0, 0, 0, 37, 115, 32, 97, 99, 107, 110, 111, 119, 108,
    101, 100, 103, 101, 100, 32, 103, 97, 109, 101, 115, 116, 97, 116, 101, 10,
    0, 0, 0, 0, 0, 0, 103, 95, 103, 97, 109, 101, 116, 121, 112, 101, 0, 0, 0,
    0, 0, 0, 83, 95, 85, 112, 100, 97, 116, 101, 69, 110, 116, 105, 116, 121,
    80, 111, 115, 105, 116, 105, 111, 110, 58, 32, 98, 97, 100, 32, 101, 110,
    116, 105, 116, 121, 110, 117, 109, 32, 37, 105, 0, 0, 0, 0, 0, 0, 0, 0, 73,
    110, 105, 116, 105, 97, 108, 105, 122, 105, 110, 103, 32, 79, 112, 101, 110,
    71, 76, 32, 100, 105, 115, 112, 108, 97, 121, 10, 0, 0, 0, 0, 110, 101, 116,
    95, 115, 111, 99, 107, 115, 80, 97, 115, 115, 119, 111, 114, 100, 0, 0, 0,
    0, 0, 0, 0, 74, 79, 89, 50, 49, 0, 0, 0, 105, 110, 118, 97, 108, 105, 100,
    32, 101, 110, 116, 105, 116, 121, 83, 116, 97, 116, 101, 32, 102, 105, 101,
    108, 100, 32, 99, 111, 117, 110, 116, 0, 115, 116, 97, 116, 117, 115, 0, 0,
    68, 105, 114, 101, 99, 116, 111, 114, 121, 32, 111, 102, 32, 37, 115, 32,
    37, 115, 10, 0, 0, 0, 0, 0, 87, 65, 82, 78, 73, 78, 71, 58, 32, 99, 118, 97,
    114, 32, 39, 37, 115, 39, 0, 0, 0, 0, 0, 0, 98, 111, 116, 95, 104, 105, 103,
    104, 108, 105, 103, 104, 116, 97, 114, 101, 97, 0, 0, 0, 0, 0, 0, 0, 112,
    108, 97, 121, 40, 37, 115, 41, 44, 32, 82, 79, 81, 83, 105, 122, 101, 60,
    61, 48, 10, 0, 0, 0, 102, 111, 117, 110, 100, 32, 99, 108, 117, 115, 116,
    101, 114, 58, 37, 105, 32, 32, 97, 114, 101, 97, 58, 37, 105, 32, 32, 105,
    110, 100, 101, 120, 58, 37, 105, 10, 0, 0, 0, 0, 115, 95, 97, 108, 68, 111,
    112, 112, 108, 101, 114, 70, 97, 99, 116, 111, 114, 0, 0, 0, 0, 0, 0, 0,
    100, 97, 116, 97, 0, 0, 0, 0, 45, 98, 117, 116, 116, 111, 110, 49, 48, 0, 0,
    0, 0, 0, 0, 0, 32, 32, 32, 32, 32, 32, 32, 32, 37, 56, 105, 32, 98, 121,
    116, 101, 115, 32, 105, 110, 32, 100, 121, 110, 97, 109, 105, 99, 32, 111,
    116, 104, 101, 114, 10, 0, 0, 0, 0, 0, 48, 46, 50, 53, 0, 0, 0, 0, 37, 53,
    100, 32, 115, 112, 101, 101, 100, 10, 0, 0, 0, 0, 0, 0, 79, 118, 101, 114,
    115, 105, 122, 101, 32, 112, 97, 99, 107, 101, 116, 32, 102, 114, 111, 109,
    32, 37, 115, 10, 0, 0, 0, 0, 0, 0, 0, 0, 103, 108, 85, 110, 105, 102, 111,
    114, 109, 50, 102, 118, 0, 0, 0, 0, 78, 101, 116, 99, 104, 97, 110, 95, 84,
    114, 97, 110, 115, 109, 105, 116, 58, 32, 108, 101, 110, 103, 116, 104, 32,
    61, 32, 37, 105, 0, 0, 0, 73, 110, 118, 97, 108, 105, 100, 32, 74, 80, 69,
    71, 32, 102, 105, 108, 101, 32, 115, 116, 114, 117, 99, 116, 117, 114, 101,
    58, 32, 109, 105, 115, 115, 105, 110, 103, 32, 83, 79, 83, 32, 109, 97, 114,
    107, 101, 114, 0, 71, 76, 95, 69, 88, 84, 95, 116, 101, 120, 116, 117, 114,
    101, 95, 102, 105, 108, 116, 101, 114, 95, 97, 110, 105, 115, 111, 116, 114,
    111, 112, 105, 99, 0, 0, 0, 0, 0, 0, 0, 58, 32, 37, 115, 10, 0, 0, 0, 98,
    97, 100, 32, 118, 98, 111, 85, 115, 97, 103, 101, 95, 116, 32, 103, 105,
    118, 101, 110, 58, 32, 37, 105, 0, 0, 0, 0, 0, 0, 0, 0, 114, 95, 105, 103,
    110, 111, 114, 101, 104, 119, 103, 97, 109, 109, 97, 0, 77, 83, 71, 95, 87,
    114, 105, 116, 101, 83, 116, 114, 105, 110, 103, 58, 32, 66, 73, 71, 95, 73,
    78, 70, 79, 95, 83, 84, 82, 73, 78, 71, 0, 0, 0, 0, 0, 0, 0, 0, 114, 95,
    105, 110, 116, 101, 110, 115, 105, 116, 121, 0, 0, 0, 0, 0, 113, 103, 108,
    68, 105, 115, 97, 98, 108, 101, 86, 101, 114, 116, 101, 120, 65, 116, 116,
    114, 105, 98, 65, 114, 114, 97, 121, 65, 82, 66, 40, 32, 65, 84, 84, 82, 95,
    73, 78, 68, 69, 88, 95, 76, 73, 71, 72, 84, 67, 79, 79, 82, 68, 32, 41, 10,
    0, 0, 0, 0, 0, 0, 0, 0, 71, 76, 95, 65, 82, 66, 95, 118, 101, 114, 116, 101,
    120, 95, 115, 104, 97, 100, 101, 114, 0, 0, 0, 0, 98, 105, 110, 97, 114,
    121, 32, 110, 117, 109, 98, 101, 114, 32, 108, 111, 110, 103, 101, 114, 32,
    116, 104, 97, 110, 32, 77, 65, 88, 95, 84, 79, 75, 69, 78, 32, 61, 32, 37,
    100, 0, 0, 0, 0, 0, 0, 0, 0, 33, 32, 111, 114, 32, 126, 32, 97, 102, 116,
    101, 114, 32, 118, 97, 108, 117, 101, 32, 105, 110, 32, 35, 105, 102, 47,
    35, 101, 108, 105, 102, 0, 82, 66, 95, 67, 104, 101, 99, 107, 79, 118, 101,
    114, 102, 108, 111, 119, 58, 32, 118, 101, 114, 116, 115, 32, 62, 32, 77,
    65, 88, 32, 40, 37, 100, 32, 62, 32, 37, 100, 41, 0, 118, 97, 114, 105, 97,
    98, 108, 101, 115, 32, 102, 114, 111, 109, 32, 116, 104, 101, 32, 109, 97,
    116, 99, 104, 32, 116, 101, 109, 112, 108, 97, 116, 101, 40, 115, 41, 32,
    99, 111, 117, 108, 100, 32, 98, 101, 32, 105, 110, 118, 97, 108, 105, 100,
    32, 119, 104, 101, 110, 32, 111, 117, 116, 112, 117, 116, 116, 105, 110,
    103, 32, 111, 110, 101, 32, 111, 102, 32, 116, 104, 101, 32, 99, 104, 97,
    116, 32, 109, 101, 115, 115, 97, 103, 101, 115, 0, 0, 102, 97, 115, 116, 0,
    0, 0, 0, 58, 58, 0, 0, 0, 0, 0, 0, 99, 97, 108, 99, 117, 108, 97, 116, 105,
    110, 103, 32, 99, 108, 117, 115, 116, 101, 114, 115, 46, 46, 46, 10, 0, 0,
    0, 0, 0, 0, 0, 0, 83, 72, 65, 68, 69, 82, 95, 77, 65, 88, 95, 86, 69, 82,
    84, 69, 88, 69, 83, 32, 104, 105, 116, 32, 105, 110, 32, 68, 114, 97, 119,
    83, 107, 121, 83, 105, 100, 101, 86, 66, 79, 40, 41, 0, 0, 0, 0, 0, 103,
    101, 116, 115, 116, 97, 116, 117, 115, 0, 0, 0, 0, 0, 0, 0, 115, 118, 95,
    108, 97, 110, 70, 111, 114, 99, 101, 82, 97, 116, 101, 0, 37, 115, 32, 58,
    32, 100, 114, 111, 112, 112, 101, 100, 32, 103, 97, 109, 101, 115, 116, 97,
    116, 101, 44, 32, 114, 101, 115, 101, 110, 100, 105, 110, 103, 10, 0, 0, 0,
    0, 0, 0, 67, 97, 110, 39, 116, 32, 102, 105, 110, 100, 32, 109, 97, 112, 32,
    37, 115, 10, 0, 0, 0, 0, 0, 0, 94, 51, 87, 65, 82, 78, 73, 78, 71, 58, 32,
    67, 97, 110, 110, 111, 116, 32, 103, 101, 116, 32, 115, 97, 109, 112, 108,
    101, 32, 111, 102, 102, 115, 101, 116, 32, 102, 114, 111, 109, 32, 115, 111,
    117, 114, 99, 101, 32, 37, 100, 58, 32, 37, 115, 10, 0, 34, 37, 115, 34, 32,
    105, 115, 58, 34, 37, 115, 94, 55, 34, 0, 0, 110, 101, 116, 95, 115, 111,
    99, 107, 115, 85, 115, 101, 114, 110, 97, 109, 101, 0, 0, 0, 0, 0, 0, 0, 74,
    79, 89, 50, 48, 0, 0, 0, 68, 79, 87, 78, 65, 82, 82, 79, 87, 0, 0, 0, 0, 0,
    0, 0, 37, 51, 105, 58, 32, 35, 37, 45, 51, 105, 32, 114, 101, 109, 111, 118,
    101, 10, 0, 0, 0, 0, 0, 0, 117, 115, 97, 103, 101, 58, 32, 100, 105, 114,
    32, 60, 100, 105, 114, 101, 99, 116, 111, 114, 121, 62, 32, 91, 101, 120,
    116, 101, 110, 115, 105, 111, 110, 93, 10, 0, 0, 0, 0, 0, 32, 97, 110, 100,
    32, 105, 115, 0, 43, 98, 117, 116, 116, 111, 110, 49, 48, 0, 0, 0, 0, 0, 0,
    0, 32, 32, 32, 32, 32, 32, 32, 32, 37, 56, 105, 32, 98, 121, 116, 101, 115,
    32, 105, 110, 32, 100, 121, 110, 97, 109, 105, 99, 32, 114, 101, 110, 100,
    101, 114, 101, 114, 10, 0, 0, 103, 108, 85, 110, 105, 102, 111, 114, 109,
    49, 102, 118, 0, 0, 0, 0, 73, 110, 118, 97, 108, 105, 100, 32, 74, 80, 69,
    71, 32, 102, 105, 108, 101, 32, 115, 116, 114, 117, 99, 116, 117, 114, 101,
    58, 32, 116, 119, 111, 32, 83, 79, 70, 32, 109, 97, 114, 107, 101, 114, 115,
    0, 0, 0, 0, 46, 46, 46, 71, 76, 95, 69, 88, 84, 95, 99, 111, 109, 112, 105,
    108, 101, 100, 95, 118, 101, 114, 116, 101, 120, 95, 97, 114, 114, 97, 121,
    32, 110, 111, 116, 32, 102, 111, 117, 110, 100, 10, 0, 0, 0, 0, 0, 0, 58,
    32, 37, 115, 32, 40, 68, 69, 70, 65, 85, 76, 84, 69, 68, 41, 10, 0, 0, 0, 0,
    0, 0, 0, 114, 95, 111, 118, 101, 114, 66, 114, 105, 103, 104, 116, 66, 105,
    116, 115, 0, 0, 0, 0, 0, 0, 0, 0, 42, 114, 101, 110, 100, 101, 114, 67, 117,
    98, 101, 0, 0, 0, 0, 0, 113, 103, 108, 69, 110, 97, 98, 108, 101, 86, 101,
    114, 116, 101, 120, 65, 116, 116, 114, 105, 98, 65, 114, 114, 97, 121, 65,
    82, 66, 40, 32, 65, 84, 84, 82, 95, 73, 78, 68, 69, 88, 95, 76, 73, 71, 72,
    84, 67, 79, 79, 82, 68, 32, 41, 10, 0, 103, 108, 71, 101, 116, 83, 104, 97,
    100, 101, 114, 83, 111, 117, 114, 99, 101, 65, 82, 66, 0, 0, 0, 0, 115, 118,
    99, 95, 98, 97, 100, 0, 104, 101, 120, 97, 100, 101, 99, 105, 109, 97, 108,
    32, 110, 117, 109, 98, 101, 114, 32, 108, 111, 110, 103, 101, 114, 32, 116,
    104, 97, 110, 32, 77, 65, 88, 95, 84, 79, 75, 69, 78, 32, 61, 32, 37, 100,
    0, 0, 0, 105, 108, 108, 105, 103, 97, 108, 32, 111, 112, 101, 114, 97, 116,
    111, 114, 32, 37, 115, 32, 111, 110, 32, 102, 108, 111, 97, 116, 105, 110,
    103, 32, 112, 111, 105, 110, 116, 32, 111, 112, 101, 114, 97, 110, 100, 115,
    0, 0, 49, 48, 48, 48, 0, 0, 0, 0, 97, 108, 108, 32, 107, 101, 121, 115, 32,
    104, 97, 118, 101, 32, 97, 32, 38, 32, 111, 114, 32, 33, 32, 112, 114, 101,
    102, 105, 120, 0, 0, 0, 99, 108, 95, 112, 97, 117, 115, 101, 100, 0, 0, 0,
    0, 0, 0, 0, 10, 112, 108, 101, 97, 115, 101, 32, 119, 97, 105, 116, 32, 119,
    104, 105, 108, 101, 32, 115, 116, 111, 114, 105, 110, 103, 32, 114, 101, 97,
    99, 104, 97, 98, 105, 108, 105, 116, 121, 46, 46, 46, 10, 0, 0, 0, 0, 0, 83,
    86, 32, 112, 97, 99, 107, 101, 116, 32, 37, 115, 32, 58, 32, 37, 115, 10, 0,
    0, 0, 0, 0, 0, 115, 118, 95, 109, 97, 112, 67, 104, 101, 99, 107, 115, 117,
    109, 0, 0, 37, 115, 32, 58, 32, 105, 103, 110, 111, 114, 105, 110, 103, 32,
    112, 114, 101, 32, 109, 97, 112, 95, 114, 101, 115, 116, 97, 114, 116, 32,
    47, 32, 111, 117, 116, 100, 97, 116, 101, 100, 32, 99, 108, 105, 101, 110,
    116, 32, 109, 101, 115, 115, 97, 103, 101, 10, 0, 0, 0, 0, 0, 0, 0, 0, 102,
    115, 95, 99, 111, 109, 112, 108, 101, 116, 101, 77, 97, 110, 105, 102, 101,
    115, 116, 0, 0, 0, 0, 0, 94, 51, 87, 65, 82, 78, 73, 78, 71, 58, 32, 67,
    111, 117, 108, 100, 32, 110, 111, 116, 32, 103, 101, 116, 32, 116, 105, 109,
    101, 32, 111, 102, 102, 115, 101, 116, 32, 102, 111, 114, 32, 97, 108, 83,
    111, 117, 114, 99, 101, 32, 37, 100, 58, 32, 37, 115, 10, 0, 0, 0, 0, 0, 0,
    0, 49, 48, 56, 48, 0, 0, 0, 0, 74, 79, 89, 49, 57, 0, 0, 0, 66, 97, 100, 32,
    100, 101, 108, 116, 97, 32, 101, 110, 116, 105, 116, 121, 32, 110, 117, 109,
    98, 101, 114, 58, 32, 37, 105, 0, 0, 0, 0, 0, 47, 100, 101, 115, 99, 114,
    105, 112, 116, 105, 111, 110, 46, 116, 120, 116, 0, 0, 0, 0, 0, 0, 0, 0, 87,
    65, 82, 78, 73, 78, 71, 58, 32, 99, 118, 97, 114, 32, 39, 37, 115, 39, 32,
    109, 117, 115, 116, 32, 98, 101, 32, 110, 117, 109, 101, 114, 105, 99, 0, 0,
    0, 0, 0, 0, 45, 98, 117, 116, 116, 111, 110, 57, 0, 0, 0, 0, 0, 0, 0, 0, 67,
    76, 95, 71, 101, 116, 83, 101, 114, 118, 101, 114, 67, 111, 109, 109, 97,
    110, 100, 58, 32, 97, 32, 114, 101, 108, 105, 97, 98, 108, 101, 32, 99, 111,
    109, 109, 97, 110, 100, 32, 119, 97, 115, 32, 99, 121, 99, 108, 101, 100,
    32, 111, 117, 116, 0, 0, 32, 32, 32, 32, 32, 32, 32, 32, 37, 56, 105, 32,
    98, 121, 116, 101, 115, 32, 105, 110, 32, 100, 121, 110, 97, 109, 105, 99,
    32, 98, 111, 116, 108, 105, 98, 10, 0, 0, 0, 0, 87, 65, 82, 78, 73, 78, 71,
    58, 32, 35, 52, 54, 50, 32, 117, 110, 115, 101, 110, 116, 32, 102, 114, 97,
    103, 109, 101, 110, 116, 115, 32, 40, 110, 111, 116, 32, 115, 117, 112, 112,
    111, 115, 101, 100, 32, 116, 111, 32, 104, 97, 112, 112, 101, 110, 33, 41,
    10, 0, 0, 0, 0, 0, 0, 0, 103, 108, 85, 110, 105, 102, 111, 114, 109, 52,
    105, 118, 0, 0, 0, 0, 67, 97, 110, 110, 111, 116, 32, 113, 117, 97, 110,
    116, 105, 122, 101, 32, 116, 111, 32, 109, 111, 114, 101, 32, 116, 104, 97,
    110, 32, 37, 100, 32, 99, 111, 108, 111, 114, 115, 0, 0, 46, 46, 46, 105,
    103, 110, 111, 114, 105, 110, 103, 32, 71, 76, 95, 69, 88, 84, 95, 99, 111,
    109, 112, 105, 108, 101, 100, 95, 118, 101, 114, 116, 101, 120, 95, 97, 114,
    114, 97, 121, 10, 0, 0, 0, 0, 0, 0, 0, 32, 32, 32, 32,
  ],
  "i8",
  ALLOC_NONE,
  Runtime.GLOBAL_BASE + 92164
);
/* memory initializer */ allocate(
  [
    0, 0, 0, 0, 114, 95, 101, 120, 116, 95, 109, 117, 108, 116, 105, 115, 97,
    109, 112, 108, 101, 0, 0, 0, 0, 0, 0, 0, 42, 115, 99, 114, 101, 101, 110,
    83, 104, 97, 100, 111, 119, 0, 0, 0, 113, 103, 108, 68, 105, 115, 97, 98,
    108, 101, 86, 101, 114, 116, 101, 120, 65, 116, 116, 114, 105, 98, 65, 114,
    114, 97, 121, 65, 82, 66, 40, 32, 65, 84, 84, 82, 95, 73, 78, 68, 69, 88,
    95, 84, 69, 88, 67, 79, 79, 82, 68, 32, 41, 10, 0, 0, 103, 108, 71, 101,
    116, 85, 110, 105, 102, 111, 114, 109, 105, 118, 65, 82, 66, 0, 0, 0, 0, 0,
    0, 0, 40, 37, 99, 41, 0, 0, 0, 0, 110, 97, 109, 101, 32, 108, 111, 110, 103,
    101, 114, 32, 116, 104, 97, 110, 32, 77, 65, 88, 95, 84, 79, 75, 69, 78, 32,
    61, 32, 37, 100, 0, 116, 111, 111, 32, 109, 97, 110, 121, 32, 41, 32, 105,
    110, 32, 35, 105, 102, 47, 35, 101, 108, 115, 105, 102, 0, 0, 0, 0, 0, 0, 0,
    0, 100, 114, 111, 112, 112, 101, 100, 119, 101, 105, 103, 104, 116, 0, 0, 0,
    116, 104, 101, 32, 107, 101, 121, 32, 37, 115, 32, 119, 105, 116, 104, 32,
    112, 114, 101, 102, 105, 120, 32, 33, 32, 105, 115, 32, 105, 110, 115, 105,
    100, 101, 32, 116, 104, 101, 32, 109, 97, 116, 99, 104, 32, 116, 101, 109,
    112, 108, 97, 116, 101, 32, 115, 116, 114, 105, 110, 103, 32, 37, 115, 0,
    118, 100, 114, 0, 0, 0, 0, 0, 13, 37, 54, 46, 49, 102, 37, 37, 0, 0, 0, 0,
    0, 0, 0, 0, 80, 114, 101, 100, 105, 99, 116, 77, 111, 118, 101, 109, 101,
    110, 116, 58, 32, 115, 116, 97, 114, 116, 32, 115, 111, 108, 105, 100, 10,
    0, 0, 0, 114, 101, 99, 117, 114, 115, 105, 118, 101, 32, 101, 114, 114, 111,
    114, 32, 97, 102, 116, 101, 114, 58, 32, 37, 115, 0, 0, 0, 0, 0, 0, 0, 99,
    111, 110, 110, 101, 99, 116, 0, 115, 118, 95, 107, 105, 108, 108, 115, 101,
    114, 118, 101, 114, 0, 0, 0, 110, 101, 120, 116, 100, 108, 0, 0, 37, 115,
    46, 112, 107, 51, 0, 0, 94, 49, 69, 82, 82, 79, 82, 58, 32, 119, 104, 105,
    108, 101, 32, 98, 117, 102, 102, 101, 114, 105, 110, 103, 32, 100, 97, 116,
    97, 32, 102, 111, 114, 32, 109, 117, 115, 105, 99, 32, 115, 116, 114, 101,
    97, 109, 32, 45, 32, 37, 115, 10, 0, 0, 0, 0, 110, 101, 116, 95, 115, 111,
    99, 107, 115, 80, 111, 114, 116, 0, 0, 0, 74, 79, 89, 49, 56, 0, 0, 0, 77,
    83, 71, 95, 87, 114, 105, 116, 101, 68, 101, 108, 116, 97, 69, 110, 116,
    105, 116, 121, 58, 32, 66, 97, 100, 32, 101, 110, 116, 105, 116, 121, 32,
    110, 117, 109, 98, 101, 114, 58, 32, 37, 105, 0, 0, 0, 0, 0, 46, 0, 0, 0, 0,
    0, 0, 0, 87, 65, 82, 78, 73, 78, 71, 58, 32, 99, 118, 97, 114, 32, 39, 37,
    115, 39, 32, 109, 117, 115, 116, 32, 98, 101, 32, 105, 110, 116, 101, 103,
    114, 97, 108, 0, 0, 0, 0, 0, 43, 98, 117, 116, 116, 111, 110, 57, 0, 0, 0,
    0, 0, 0, 0, 0, 37, 56, 105, 32, 98, 121, 116, 101, 115, 32, 105, 110, 32,
    37, 105, 32, 122, 111, 110, 101, 32, 98, 108, 111, 99, 107, 115, 10, 0, 0,
    0, 0, 103, 108, 85, 110, 105, 102, 111, 114, 109, 51, 105, 118, 0, 0, 0, 0,
    67, 97, 110, 110, 111, 116, 32, 113, 117, 97, 110, 116, 105, 122, 101, 32,
    116, 111, 32, 102, 101, 119, 101, 114, 32, 116, 104, 97, 110, 32, 37, 100,
    32, 99, 111, 108, 111, 114, 115, 0, 101, 120, 101, 99, 113, 0, 0, 0, 98, 97,
    100, 32, 103, 101, 116, 112, 114, 111, 99, 97, 100, 100, 114, 101, 115, 115,
    0, 0, 0, 0, 0, 0, 115, 107, 121, 32, 0, 0, 0, 0, 114, 95, 100, 101, 112,
    116, 104, 98, 105, 116, 115, 0, 0, 0, 0, 0, 42, 115, 117, 110, 115, 104, 97,
    100, 111, 119, 100, 101, 112, 116, 104, 37, 105, 0, 0, 0, 0, 0, 0, 0, 113,
    103, 108, 69, 110, 97, 98, 108, 101, 86, 101, 114, 116, 101, 120, 65, 116,
    116, 114, 105, 98, 65, 114, 114, 97, 121, 65, 82, 66, 40, 32, 65, 84, 84,
    82, 95, 73, 78, 68, 69, 88, 95, 84, 69, 88, 67, 79, 79, 82, 68, 32, 41, 10,
    0, 0, 0, 87, 65, 82, 78, 73, 78, 71, 58, 32, 82, 95, 82, 101, 109, 97, 112,
    83, 104, 97, 100, 101, 114, 58, 32, 115, 104, 97, 100, 101, 114, 32, 37,
    115, 32, 110, 111, 116, 32, 102, 111, 117, 110, 100, 10, 0, 0, 0, 0, 103,
    108, 71, 101, 116, 85, 110, 105, 102, 111, 114, 109, 102, 118, 65, 82, 66,
    0, 0, 0, 0, 0, 0, 0, 32, 85, 58, 48, 120, 37, 48, 50, 120, 0, 0, 0, 0, 0, 0,
    0, 110, 101, 119, 108, 105, 110, 101, 32, 105, 110, 115, 105, 100, 101, 32,
    115, 116, 114, 105, 110, 103, 32, 37, 115, 0, 0, 0, 0, 0, 0, 0, 0, 109, 105,
    115, 112, 108, 97, 99, 101, 100, 32, 109, 105, 110, 117, 115, 32, 115, 105,
    103, 110, 32, 105, 110, 32, 35, 105, 102, 47, 35, 101, 108, 105, 102, 0, 0,
    0, 0, 0, 0, 0, 99, 111, 117, 108, 100, 110, 39, 116, 32, 108, 111, 97, 100,
    32, 105, 116, 101, 109, 32, 99, 111, 110, 102, 105, 103, 10, 0, 0, 0, 0, 0,
    0, 116, 104, 101, 32, 107, 101, 121, 32, 37, 115, 32, 119, 105, 116, 104,
    32, 112, 114, 101, 102, 105, 120, 32, 33, 32, 105, 115, 32, 105, 110, 115,
    105, 100, 101, 32, 116, 104, 101, 32, 107, 101, 121, 32, 37, 115, 0, 0, 0,
    99, 112, 32, 37, 100, 32, 37, 115, 0, 0, 0, 0, 0, 0, 0, 0, 99, 97, 108, 99,
    117, 108, 97, 116, 105, 110, 103, 32, 114, 101, 97, 99, 104, 97, 98, 105,
    108, 105, 116, 121, 46, 46, 46, 10, 0, 0, 0, 0, 52, 53, 48, 0, 0, 0, 0, 0,
    49, 0, 0, 0, 0, 0, 0, 0, 115, 118, 95, 112, 97, 100, 80, 97, 99, 107, 101,
    116, 115, 0, 0, 0, 65, 117, 116, 111, 115, 112, 114, 105, 116, 101, 50, 32,
    115, 104, 97, 100, 101, 114, 32, 37, 115, 32, 104, 97, 100, 32, 111, 100,
    100, 32, 118, 101, 114, 116, 101, 120, 32, 99, 111, 117, 110, 116, 10, 0, 0,
    0, 0, 0, 99, 108, 105, 101, 110, 116, 32, 116, 101, 120, 116, 32, 105, 103,
    110, 111, 114, 101, 100, 32, 102, 111, 114, 32, 37, 115, 58, 32, 37, 115,
    10, 0, 109, 97, 112, 115, 47, 37, 115, 46, 98, 115, 112, 0, 0, 0, 0, 0, 94,
    51, 82, 101, 115, 116, 97, 114, 116, 101, 100, 32, 79, 112, 101, 110, 65,
    76, 32, 109, 117, 115, 105, 99, 10, 0, 0, 0, 0, 0, 0, 0, 110, 101, 116, 95,
    115, 111, 99, 107, 115, 83, 101, 114, 118, 101, 114, 0, 74, 79, 89, 49, 55,
    0, 0, 0, 102, 114, 97, 109, 101, 0, 0, 0, 45, 45, 45, 32, 82, 66, 95, 83,
    116, 97, 103, 101, 73, 116, 101, 114, 97, 116, 111, 114, 71, 101, 110, 101,
    114, 105, 99, 40, 32, 37, 115, 32, 41, 32, 45, 45, 45, 10, 0, 0, 36, 109,
    111, 100, 108, 105, 115, 116, 0, 0, 0, 0, 0, 0, 0, 0, 99, 118, 97, 114, 95,
    114, 101, 115, 116, 97, 114, 116, 0, 0, 0, 0, 67, 77, 95, 71, 101, 110, 101,
    114, 97, 116, 101, 80, 97, 116, 99, 104, 70, 97, 99, 101, 116, 115, 58, 32,
    101, 118, 101, 110, 32, 115, 105, 122, 101, 115, 32, 97, 114, 101, 32, 105,
    110, 118, 97, 108, 105, 100, 32, 102, 111, 114, 32, 113, 117, 97, 100, 114,
    97, 116, 105, 99, 32, 109, 101, 115, 104, 101, 115, 0, 0, 0, 0, 0, 45, 98,
    117, 116, 116, 111, 110, 56, 0, 0, 0, 0, 0, 0, 0, 0, 37, 56, 105, 32, 117,
    110, 117, 115, 101, 100, 32, 104, 105, 103, 104, 119, 97, 116, 101, 114, 10,
    0, 0, 0, 87, 65, 82, 78, 73, 78, 71, 58, 32, 82, 69, 95, 65, 100, 100, 80,
    111, 108, 121, 84, 111, 83, 99, 101, 110, 101, 58, 32, 114, 95, 109, 97,
    120, 95, 112, 111, 108, 121, 115, 32, 111, 114, 32, 114, 95, 109, 97, 120,
    95, 112, 111, 108, 121, 118, 101, 114, 116, 115, 32, 114, 101, 97, 99, 104,
    101, 100, 10, 0, 0, 0, 0, 0, 103, 108, 85, 110, 105, 102, 111, 114, 109, 50,
    105, 118, 0, 0, 0, 0, 102, 115, 95, 109, 97, 110, 105, 102, 101, 115, 116,
    0, 0, 0, 0, 0, 73, 78, 84, 69, 82, 81, 85, 65, 75, 69, 77, 79, 68, 69, 76,
    0, 67, 97, 110, 110, 111, 116, 32, 113, 117, 97, 110, 116, 105, 122, 101,
    32, 109, 111, 114, 101, 32, 116, 104, 97, 110, 32, 37, 100, 32, 99, 111,
    108, 111, 114, 32, 99, 111, 109, 112, 111, 110, 101, 110, 116, 115, 0, 0, 0,
    77, 79, 68, 95, 76, 111, 97, 100, 66, 109, 111, 100, 101, 108, 58, 32, 102,
    117, 110, 110, 121, 32, 108, 117, 109, 112, 32, 115, 105, 122, 101, 0, 103,
    108, 85, 110, 108, 111, 99, 107, 65, 114, 114, 97, 121, 115, 69, 88, 84, 0,
    0, 0, 0, 0, 0, 0, 103, 101, 110, 32, 0, 0, 0, 0, 56, 0, 0, 0, 0, 0, 0, 0,
    42, 115, 104, 97, 100, 111, 119, 109, 97, 112, 37, 105, 0, 0, 0, 0, 49, 53,
    0, 0, 0, 0, 0, 0, 113, 103, 108, 68, 105, 115, 97, 98, 108, 101, 86, 101,
    114, 116, 101, 120, 65, 116, 116, 114, 105, 98, 65, 114, 114, 97, 121, 65,
    82, 66, 40, 32, 65, 84, 84, 82, 95, 73, 78, 68, 69, 88, 95, 80, 79, 83, 73,
    84, 73, 79, 78, 32, 41, 10, 0, 0, 103, 108, 71, 101, 116, 65, 99, 116, 105,
    118, 101, 85, 110, 105, 102, 111, 114, 109, 65, 82, 66, 0, 0, 0, 32, 81, 58,
    48, 120, 37, 48, 50, 120, 40, 37, 115, 41, 0, 0, 0, 109, 105, 115, 115, 105,
    110, 103, 32, 116, 114, 97, 105, 108, 105, 110, 103, 32, 113, 117, 111, 116,
    101, 0, 0, 100, 101, 102, 105, 110, 101, 100, 32, 119, 105, 116, 104, 111,
    117, 116, 32, 41, 32, 105, 110, 32, 35, 105, 102, 47, 35, 101, 108, 105,
    102, 0, 0, 105, 116, 101, 109, 115, 46, 99, 0, 111, 110, 101, 32, 111, 102,
    32, 116, 104, 101, 32, 109, 97, 116, 99, 104, 32, 116, 101, 109, 112, 108,
    97, 116, 101, 115, 32, 100, 111, 101, 115, 32, 110, 111, 116, 32, 108, 101,
    97, 118, 101, 32, 115, 112, 97, 99, 101, 32, 102, 111, 114, 32, 116, 104,
    101, 32, 107, 101, 121, 32, 37, 115, 32, 119, 105, 116, 104, 32, 116, 104,
    101, 32, 38, 32, 112, 114, 101, 102, 105, 120, 0, 0, 0, 0, 0, 0, 0, 0, 89,
    111, 117, 32, 109, 117, 115, 116, 32, 101, 105, 116, 104, 101, 114, 32, 98,
    101, 32, 99, 111, 110, 110, 101, 99, 116, 101, 100, 44, 10, 111, 114, 32,
    115, 101, 116, 32, 116, 104, 101, 32, 39, 114, 99, 111, 110, 65, 100, 100,
    114, 101, 115, 115, 39, 32, 99, 118, 97, 114, 10, 116, 111, 32, 105, 115,
    115, 117, 101, 32, 114, 99, 111, 110, 32, 99, 111, 109, 109, 97, 110, 100,
    115, 10, 0, 0, 0, 0, 0, 37, 100, 32, 119, 101, 97, 112, 111, 110, 32, 106,
    117, 109, 112, 32, 97, 114, 101, 97, 115, 10, 0, 0, 0, 114, 115, 95, 109,
    97, 120, 106, 117, 109, 112, 102, 97, 108, 108, 104, 101, 105, 103, 104,
    116, 0, 0, 0, 0, 115, 118, 95, 112, 97, 117, 115, 101, 100, 0, 0, 0, 0, 0,
    0, 0, 115, 118, 95, 115, 104, 111, 119, 108, 111, 115, 115, 0, 0, 0, 0, 0,
    117, 115, 101, 114, 105, 110, 102, 111, 32, 115, 116, 114, 105, 110, 103,
    32, 108, 101, 110, 103, 116, 104, 32, 101, 120, 99, 101, 101, 100, 101, 100,
    0, 98, 115, 112, 0, 0, 0, 0, 0, 83, 95, 65, 76, 95, 66, 117, 102, 102, 101,
    114, 70, 105, 110, 100, 70, 114, 101, 101, 58, 32, 78, 111, 32, 102, 114,
    101, 101, 32, 115, 111, 117, 110, 100, 32, 104, 97, 110, 100, 108, 101, 115,
    0, 0, 0, 0, 0, 0, 48, 0, 0, 0, 0, 0, 0, 0, 74, 79, 89, 49, 54, 0, 0, 0, 82,
    95, 65, 100, 100, 77, 68, 51, 83, 117, 114, 102, 97, 99, 101, 115, 58, 32,
    110, 111, 32, 115, 117, 99, 104, 32, 102, 114, 97, 109, 101, 32, 37, 100,
    32, 116, 111, 32, 37, 100, 32, 102, 111, 114, 32, 39, 37, 115, 39, 10, 0, 0,
    0, 0, 0, 0, 99, 111, 110, 115, 116, 97, 110, 116, 76, 105, 103, 104, 116, 0,
    0, 0, 70, 97, 105, 108, 101, 100, 32, 116, 111, 32, 111, 112, 101, 110, 32,
    37, 115, 10, 0, 0, 0, 0, 0, 0, 99, 118, 97, 114, 108, 105, 115, 116, 0, 0,
    0, 0, 0, 0, 0, 0, 94, 51, 116, 117, 114, 110, 105, 110, 103, 32, 69, 88, 69,
    67, 95, 78, 79, 87, 32, 39, 37, 46, 49, 49, 115, 39, 32, 105, 110, 116, 111,
    32, 69, 88, 69, 67, 95, 73, 78, 83, 69, 82, 84, 10, 0, 0, 0, 0, 43, 98, 117,
    116, 116, 111, 110, 56, 0, 0, 0, 0, 0, 0, 0, 0, 37, 56, 105, 32, 116, 111,
    116, 97, 108, 32, 104, 117, 110, 107, 32, 105, 110, 32, 117, 115, 101, 10,
    0, 0, 87, 65, 82, 78, 73, 78, 71, 58, 32, 114, 101, 99, 117, 114, 115, 105,
    118, 101, 32, 109, 105, 114, 114, 111, 114, 47, 112, 111, 114, 116, 97, 108,
    32, 102, 111, 117, 110, 100, 10, 0, 103, 108, 85, 115, 101, 80, 114, 111,
    103, 114, 97, 109, 0, 0, 0, 0, 51, 50, 0, 0, 0, 0, 0, 0, 97, 109, 98, 58,
    37, 105, 32, 32, 100, 105, 114, 58, 37, 105, 10, 0, 103, 108, 85, 110, 105,
    102, 111, 114, 109, 49, 105, 118, 0, 0, 0, 0, 102, 115, 95, 99, 100, 110, 0,
    0, 73, 110, 115, 117, 102, 102, 105, 99, 105, 101, 110, 116, 32, 109, 101,
    109, 111, 114, 121, 32, 40, 99, 97, 115, 101, 32, 37, 100, 41, 0, 0, 0, 103,
    108, 76, 111, 99, 107, 65, 114, 114, 97, 121, 115, 69, 88, 84, 0, 69, 32, 0,
    0, 0, 0, 0, 0, 114, 95, 115, 116, 101, 110, 99, 105, 108, 98, 105, 116, 115,
    0, 0, 0, 42, 104, 100, 114, 68, 101, 112, 116, 104, 0, 0, 0, 0, 0, 0, 0,
    113, 103, 108, 69, 110, 97, 98, 108, 101, 86, 101, 114, 116, 101, 120, 65,
    116, 116, 114, 105, 98, 65, 114, 114, 97, 121, 65, 82, 66, 40, 32, 65, 84,
    84, 82, 95, 73, 78, 68, 69, 88, 95, 80, 79, 83, 73, 84, 73, 79, 78, 32, 41,
    10, 0, 0, 0, 103, 108, 71, 101, 116, 85, 110, 105, 102, 111, 114, 109, 76,
    111, 99, 97, 116, 105, 111, 110, 65, 82, 66, 0, 73, 110, 118, 97, 108, 105,
    100, 32, 99, 114, 111, 112, 32, 114, 101, 113, 117, 101, 115, 116, 0, 0, 0,
    0, 32, 75, 77, 79, 68, 95, 82, 69, 83, 69, 82, 86, 69, 68, 0, 0, 115, 116,
    114, 105, 110, 103, 32, 108, 111, 110, 103, 101, 114, 32, 116, 104, 97, 110,
    32, 77, 65, 88, 95, 84, 79, 75, 69, 78, 32, 61, 32, 37, 100, 0, 0, 0, 0, 0,
    0, 0, 111, 117, 116, 32, 111, 102, 32, 118, 97, 108, 117, 101, 32, 115, 112,
    97, 99, 101, 0, 0, 0, 0, 0, 0, 115, 112, 105, 110, 100, 111, 119, 110, 0, 0,
    0, 0, 0, 0, 0, 0, 105, 116, 101, 109, 99, 111, 110, 102, 105, 103, 0, 0, 0,
    0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 37, 115, 32, 105, 110, 32, 115, 111, 108,
    105, 100, 32, 97, 116, 32, 40, 37, 49, 46, 49, 102, 32, 37, 49, 46, 49, 102,
    32, 37, 49, 46, 49, 102, 41, 10, 0, 0, 0, 0, 0, 48, 0, 0, 0, 0, 0, 0, 0,
    116, 105, 109, 101, 100, 32, 111, 117, 116, 0, 0, 0, 0, 0, 0, 0, 51, 0, 0,
    0, 0, 0, 0, 0, 115, 110, 97, 112, 115, 0, 0, 0, 32, 105, 110, 118, 97, 108,
    105, 100, 32, 109, 111, 100, 101, 10, 0, 0, 109, 97, 112, 115, 0, 0, 0, 0,
    94, 51, 87, 65, 82, 78, 73, 78, 71, 58, 32, 84, 114, 105, 101, 100, 32, 116,
    111, 32, 108, 111, 97, 100, 32, 112, 108, 97, 121, 101, 114, 32, 115, 111,
    117, 110, 100, 32, 100, 105, 114, 101, 99, 116, 108, 121, 58, 32, 37, 115,
    10, 0, 0, 0, 0, 0, 110, 101, 116, 95, 115, 111, 99, 107, 115, 69, 110, 97,
    98, 108, 101, 100, 0, 0, 0, 0, 0, 0, 0, 0, 74, 79, 89, 49, 53, 0, 0, 0, 82,
    95, 67, 114, 101, 97, 116, 101, 86, 66, 79, 50, 58, 32, 77, 65, 88, 95, 86,
    66, 79, 83, 32, 104, 105, 116, 0, 0, 0, 0, 0, 0, 97, 110, 103, 108, 101,
    115, 50, 91, 50, 93, 0, 0, 0, 0, 0, 0, 70, 83, 95, 87, 114, 105, 116, 101,
    70, 105, 108, 101, 58, 32, 78, 85, 76, 76, 32, 112, 97, 114, 97, 109, 101,
    116, 101, 114, 0, 0, 0, 0, 117, 110, 115, 101, 116, 0, 0, 0, 115, 118, 99,
    95, 115, 101, 114, 118, 101, 114, 67, 111, 109, 109, 97, 110, 100, 0, 0, 0,
    0, 0, 0, 0, 45, 98, 117, 116, 116, 111, 110, 55, 0, 0, 0, 0, 0, 0, 0, 0, 37,
    56, 105, 32, 104, 105, 103, 104, 32, 116, 101, 109, 112, 72, 105, 103, 104,
    119, 97, 116, 101, 114, 10, 0, 111, 112, 97, 113, 117, 101, 0, 0, 82, 95,
    82, 101, 110, 100, 101, 114, 83, 99, 101, 110, 101, 58, 32, 78, 85, 76, 76,
    32, 119, 111, 114, 108, 100, 109, 111, 100, 101, 108, 0, 0, 82, 95, 76, 111,
    97, 100, 73, 81, 77, 58, 32, 37, 115, 32, 104, 97, 115, 32, 109, 111, 114,
    101, 32, 116, 104, 97, 110, 32, 37, 105, 32, 116, 114, 105, 97, 110, 103,
    108, 101, 115, 32, 111, 110, 32, 37, 115, 32, 40, 37, 105, 41, 46, 10, 0, 0,
    0, 82, 69, 95, 82, 101, 103, 105, 115, 116, 101, 114, 77, 111, 100, 101,
    108, 58, 32, 78, 85, 76, 76, 32, 110, 97, 109, 101, 10, 0, 0, 0, 0, 103,
    108, 85, 110, 105, 102, 111, 114, 109, 52, 105, 0, 0, 0, 0, 0, 115, 118, 95,
    100, 108, 85, 82, 76, 0, 0, 0, 0, 0, 0, 0, 0, 78, 111, 116, 32, 97, 32, 74,
    80, 69, 71, 32, 102, 105, 108, 101, 58, 32, 115, 116, 97, 114, 116, 115, 32,
    119, 105, 116, 104, 32, 48, 120, 37, 48, 50, 120, 32, 48, 120, 37, 48, 50,
    120, 0, 0, 0, 0, 0, 0, 46, 46, 46, 117, 115, 105, 110, 103, 32, 71, 76, 95,
    69, 88, 84, 95, 99, 111, 109, 112, 105, 108, 101, 100, 95, 118, 101, 114,
    116, 101, 120, 95, 97, 114, 114, 97, 121, 10, 0, 0, 32, 32, 32, 32, 32, 32,
    0, 0, 114, 95, 99, 111, 108, 111, 114, 98, 105, 116, 115, 0, 0, 0, 0, 0, 42,
    115, 99, 114, 101, 101, 110, 83, 115, 97, 111, 0, 0, 0, 0, 0, 45, 45, 45,
    32, 71, 76, 95, 66, 105, 110, 100, 78, 117, 108, 108, 80, 114, 111, 103,
    114, 97, 109, 32, 45, 45, 45, 10, 0, 0, 0, 0, 0, 103, 108, 71, 101, 116, 65,
    116, 116, 97, 99, 104, 101, 100, 79, 98, 106, 101, 99, 116, 115, 65, 82, 66,
    0, 66, 114, 105, 103, 104, 116, 101, 115, 116, 32, 108, 105, 103, 104, 116,
    109, 97, 112, 32, 118, 97, 108, 117, 101, 58, 32, 37, 100, 10, 0, 0, 0, 32,
    75, 77, 79, 68, 95, 77, 79, 68, 69, 0, 0, 0, 0, 0, 0, 117, 110, 107, 110,
    111, 119, 110, 32, 101, 115, 99, 97, 112, 101, 32, 99, 104, 97, 114, 0, 0,
    0, 0, 0, 100, 101, 102, 105, 110, 101, 100, 32, 119, 105, 116, 104, 111,
    117, 116, 32, 110, 97, 109, 101, 32, 105, 110, 32, 35, 105, 102, 47, 35,
    101, 108, 105, 102, 0, 0, 0, 0, 0, 0, 0, 115, 112, 105, 110, 117, 112, 0, 0,
    48, 0, 0, 0, 0, 0, 0, 0, 114, 99, 111, 110, 32, 0, 0, 0, 105, 116, 101, 109,
    95, 105, 110, 118, 117, 108, 110, 101, 114, 97, 98, 105, 108, 105, 116, 121,
    0, 0, 0, 0, 114, 115, 95, 109, 97, 120, 102, 97, 108, 108, 104, 101, 105,
    103, 104, 116, 0, 0, 0, 0, 0, 0, 0, 0, 71, 111, 105, 110, 103, 32, 102, 114,
    111, 109, 32, 67, 83, 95, 90, 79, 77, 66, 73, 69, 32, 116, 111, 32, 67, 83,
    95, 70, 82, 69, 69, 32, 102, 111, 114, 32, 99, 108, 105, 101, 110, 116, 32,
    37, 100, 10, 0, 0, 71, 76, 95, 79, 85, 84, 95, 79, 70, 95, 77, 69, 77, 79,
    82, 89, 0, 0, 0, 0, 0, 0, 0, 0, 115, 118, 95, 114, 101, 99, 111, 110, 110,
    101, 99, 116, 108, 105, 109, 105, 116, 0, 0, 0, 0, 0, 0, 0, 49, 48, 48, 0,
    0, 0, 0, 0, 76, 111, 97, 100, 84, 71, 65, 58, 32, 102, 105, 108, 101, 32,
    116, 114, 117, 110, 99, 97, 116, 101, 100, 32, 40, 37, 115, 41, 0, 0, 0, 0,
    99, 111, 110, 115, 111, 108, 101, 58, 32, 0, 0, 0, 0, 0, 0, 0, 76, 111, 97,
    100, 66, 77, 80, 58, 32, 109, 111, 110, 111, 99, 104, 114, 111, 109, 101,
    32, 97, 110, 100, 32, 52, 45, 98, 105, 116, 32, 66, 77, 80, 32, 102, 105,
    108, 101, 115, 32, 110, 111, 116, 32, 115, 117, 112, 112, 111, 114, 116,
    101, 100, 32, 40, 37, 115, 41, 0, 0, 0, 0, 0, 0, 94, 51, 87, 65, 82, 78, 73,
    78, 71, 58, 32, 83, 111, 117, 110, 100, 32, 110, 97, 109, 101, 32, 105, 115,
    32, 116, 111, 111, 32, 108, 111, 110, 103, 58, 32, 37, 115, 10, 0, 0, 74,
    79, 89, 49, 52, 0, 0, 0, 97, 110, 103, 108, 101, 115, 50, 91, 48, 93, 0, 0,
    0, 0, 0, 0, 70, 83, 95, 70, 114, 101, 101, 70, 105, 108, 101, 40, 32, 78,
    85, 76, 76, 32, 41, 0, 0, 0, 0, 0, 114, 101, 115, 101, 116, 0, 0, 0, 71, 76,
    95, 76, 73, 78, 69, 65, 82, 95, 77, 73, 80, 77, 65, 80, 95, 76, 73, 78, 69,
    65, 82, 0, 43, 98, 117, 116, 116, 111, 110, 55, 0, 0, 0, 0, 0, 0, 0, 0, 37,
    56, 105, 32, 104, 105, 103, 104, 32, 116, 101, 109, 112, 10, 0, 0, 71, 76,
    83, 76, 95, 83, 101, 116, 85, 110, 105, 102, 111, 114, 109, 86, 101, 99, 52,
    58, 32, 119, 114, 111, 110, 103, 32, 116, 121, 112, 101, 32, 102, 111, 114,
    32, 117, 110, 105, 102, 111, 114, 109, 32, 37, 105, 32, 105, 110, 32, 112,
    114, 111, 103, 114, 97, 109, 32, 37, 115, 10, 0, 0, 0, 82, 95, 67, 104, 101,
    99, 107, 70, 66, 79, 58, 32, 40, 37, 115, 41, 32, 70, 114, 97, 109, 101, 98,
    117, 102, 102, 101, 114, 32, 105, 110, 99, 111, 109, 112, 108, 101, 116,
    101, 44, 32, 109, 105, 115, 115, 105, 110, 103, 32, 100, 114, 97, 119, 32,
    98, 117, 102, 102, 101, 114, 10, 0, 0, 0, 122, 70, 97, 114, 58, 32, 37, 46,
    48, 102, 10, 0, 0, 0, 0, 0, 103, 108, 85, 110, 105, 102, 111, 114, 109, 51,
    105, 0, 0, 0, 0, 0, 115, 118, 95, 97, 108, 108, 111, 119, 68, 111, 119, 110,
    108, 111, 97, 100, 0, 0, 0, 0, 0, 0, 0, 0, 87, 65, 82, 78, 73, 78, 71, 58,
    32, 110, 111, 32, 115, 101, 109, 105, 32, 99, 111, 108, 111, 110, 32, 105,
    110, 32, 118, 101, 114, 116, 101, 120, 115, 104, 97, 100, 101, 114, 114,
    101, 109, 97, 112, 32, 39, 37, 115, 39, 10, 0, 0, 0, 0, 0, 0, 0, 81, 117,
    97, 110, 116, 105, 122, 97, 116, 105, 111, 110, 32, 116, 97, 98, 108, 101,
    32, 48, 120, 37, 48, 50, 120, 32, 119, 97, 115, 32, 110, 111, 116, 32, 100,
    101, 102, 105, 110, 101, 100, 0, 0, 0, 0, 0, 0, 0, 68, 114, 97, 119, 95, 83,
    116, 114, 101, 116, 99, 104, 82, 97, 119, 58, 32, 115, 105, 122, 101, 32,
    110, 111, 116, 32, 97, 32, 112, 111, 119, 101, 114, 32, 111, 102, 32, 50,
    58, 32, 37, 105, 32, 98, 121, 32, 37, 105, 0, 0, 0, 0, 0, 0, 0, 0, 71, 76,
    95, 69, 88, 84, 95, 99, 111, 109, 112, 105, 108, 101, 100, 95, 118, 101,
    114, 116, 101, 120, 95, 97, 114, 114, 97, 121, 0, 0, 0, 0, 105, 110, 118,
    97, 108, 105, 100, 32, 115, 116, 111, 114, 101, 100, 32, 98, 108, 111, 99,
    107, 32, 108, 101, 110, 103, 116, 104, 115, 0, 0, 0, 0, 77, 84, 40, 100, 41,
    32, 0, 0, 114, 95, 116, 101, 120, 116, 117, 114, 101, 98, 105, 116, 115, 0,
    0, 0, 42, 113, 117, 97, 114, 116, 101, 114, 37, 100, 0, 0, 0, 0, 0, 0, 45,
    45, 45, 32, 71, 76, 95, 66, 105, 110, 100, 80, 114, 111, 103, 114, 97, 109,
    40, 32, 37, 115, 32, 41, 32, 45, 45, 45, 10, 0, 0, 0, 103, 108, 71, 101,
    116, 73, 110, 102, 111, 76, 111, 103, 65, 82, 66, 0, 42, 100, 101, 108, 117,
    120, 101, 109, 97, 112, 37, 100, 0, 0, 0, 0, 32, 75, 77, 79, 68, 95, 67, 65,
    80, 83, 0, 0, 0, 0, 0, 0, 116, 111, 111, 32, 108, 97, 114, 103, 101, 32,
    118, 97, 108, 117, 101, 32, 105, 110, 32, 101, 115, 99, 97, 112, 101, 32,
    99, 104, 97, 114, 97, 99, 116, 101, 114, 0, 0, 0, 0, 0, 117, 110, 100, 101,
    102, 105, 110, 101, 100, 32, 110, 97, 109, 101, 32, 37, 115, 32, 105, 110,
    32, 35, 105, 102, 47, 35, 101, 108, 105, 102, 0, 0, 114, 101, 108, 111, 97,
    100, 0, 0, 103, 95, 103, 97, 109, 101, 116, 121, 112, 101, 0, 0, 0, 0, 0, 0,
    89, 111, 117, 32, 109, 117, 115, 116, 32, 115, 101, 116, 32, 39, 114, 99,
    111, 110, 112, 97, 115, 115, 119, 111, 114, 100, 39, 32, 98, 101, 102, 111,
    114, 101, 10, 105, 115, 115, 117, 105, 110, 103, 32, 97, 110, 32, 114, 99,
    111, 110, 32, 99, 111, 109, 109, 97, 110, 100, 46, 10, 0, 0, 0, 0, 105, 116,
    101, 109, 95, 114, 101, 103, 101, 110, 0, 0, 0, 0, 0, 0, 114, 115, 95, 102,
    97, 108, 108, 100, 97, 109, 97, 103, 101, 49, 48, 0, 115, 118, 95, 109, 105,
    110, 82, 97, 116, 101, 0, 0, 0, 0, 0, 0, 115, 118, 95, 109, 97, 115, 116,
    101, 114, 37, 100, 0, 0, 0, 0, 0, 104, 97, 110, 100, 105, 99, 97, 112, 0, 0,
    0, 0, 0, 0, 0, 0, 99, 104, 97, 116, 32, 34, 37, 115, 34, 0, 0, 0, 0, 0, 0,
    0, 94, 51, 87, 65, 82, 78, 73, 78, 71, 58, 32, 83, 111, 117, 110, 100, 32,
    110, 97, 109, 101, 32, 105, 115, 32, 101, 109, 112, 116, 121, 10, 0, 110,
    101, 116, 95, 109, 99, 97, 115, 116, 54, 105, 102, 97, 99, 101, 0, 74, 79,
    89, 49, 51, 0, 0, 0, 97, 110, 103, 108, 101, 115, 91, 50, 93, 0, 0, 0, 0, 0,
    0, 0, 87, 114, 105, 116, 105, 110, 103, 32, 37, 115, 32, 116, 111, 32, 106,
    111, 117, 114, 110, 97, 108, 32, 102, 105, 108, 101, 46, 10, 0, 0, 0, 0,
    115, 101, 116, 97, 0, 0, 0, 0, 97, 114, 99, 104, 0, 0, 0, 0, 50, 0, 0, 0, 0,
    0, 0, 0, 45, 98, 117, 116, 116, 111, 110, 54, 0, 0, 0, 0, 0, 0, 0, 0, 37,
    56, 105, 32, 104, 105, 103, 104, 32, 112, 101, 114, 109, 97, 110, 101, 110,
    116, 10, 0, 0, 0, 0, 0, 48, 0, 0, 0, 0, 0, 0, 0, 102, 108, 111, 97, 116, 32,
    111, 117, 116, 32, 111, 102, 32, 114, 97, 110, 103, 101, 32, 91, 37, 102,
    44, 32, 37, 102, 93, 0, 0, 0, 0, 0, 124, 124, 0, 0, 0, 0, 0, 0, 103, 108,
    85, 110, 105, 102, 111, 114, 109, 50, 105, 0, 0, 0, 0, 0, 100, 101, 102,
    105, 110, 101, 32, 119, 105, 116, 104, 32, 109, 111, 114, 101, 32, 116, 104,
    97, 110, 32, 37, 100, 32, 112, 97, 114, 97, 109, 101, 116, 101, 114, 115, 0,
    0, 0, 0, 0, 48, 0, 0, 0, 0, 0, 0, 0, 74, 80, 69, 71, 32, 100, 97, 116, 97,
    115, 116, 114, 101, 97, 109, 32, 99, 111, 110, 116, 97, 105, 110, 115, 32,
    110, 111, 32, 105, 109, 97, 103, 101, 0, 0, 0, 0, 0, 0, 0, 99, 97, 110, 39,
    116, 32, 111, 112, 101, 110, 32, 116, 104, 101, 32, 108, 111, 103, 32, 102,
    105, 108, 101, 32, 37, 115, 10, 0, 0, 0, 0, 0, 46, 46, 46, 71, 76, 95, 65,
    82, 66, 95, 109, 117, 108, 116, 105, 116, 101, 120, 116, 117, 114, 101, 32,
    110, 111, 116, 32, 102, 111, 117, 110, 100, 10, 0, 0, 0, 0, 0, 0, 0, 103,
    97, 109, 101, 100, 105, 114, 0, 77, 84, 40, 109, 41, 32, 0, 0, 114, 95, 100,
    101, 116, 97, 105, 108, 116, 101, 120, 116, 117, 114, 101, 115, 0, 0, 0, 0,
    0, 0, 0, 0, 42, 116, 101, 120, 116, 117, 114, 101, 83, 99, 114, 97, 116, 99,
    104, 37, 100, 0, 0, 0, 0, 0, 0, 0, 40, 0, 0, 0, 0, 0, 0, 0, 45, 45, 45, 45,
    45, 45, 45, 32, 71, 76, 83, 76, 95, 83, 104, 117, 116, 100, 111, 119, 110,
    71, 80, 85, 83, 104, 97, 100, 101, 114, 115, 32, 45, 45, 45, 45, 45, 45, 45,
    10, 0, 0, 0, 0, 0, 0, 0, 0, 103, 108, 71, 101, 116, 79, 98, 106, 101, 99,
    116, 80, 97, 114, 97, 109, 101, 116, 101, 114, 105, 118, 65, 82, 66, 0, 0,
    0, 0, 0, 0, 0, 42, 108, 105, 103, 104, 116, 109, 97, 112, 37, 100, 0, 0, 0,
    0, 0, 109, 97, 120, 95, 119, 101, 97, 112, 111, 110, 105, 110, 102, 111, 32,
    61, 32, 37, 100, 10, 0, 0, 0, 0, 101, 110, 116, 105, 116, 121, 32, 37, 115,
    32, 109, 111, 100, 101, 108, 32, 110, 117, 109, 98, 101, 114, 32, 111, 117,
    116, 32, 111, 102, 32, 114, 97, 110, 103, 101, 10, 0, 0, 0, 0, 32, 75, 77,
    79, 68, 95, 78, 85, 77, 0, 0, 0, 0, 0, 0, 0, 102, 105, 108, 101, 32, 37,
    115, 44, 32, 108, 105, 110, 101, 32, 37, 100, 58, 32, 37, 115, 10, 0, 0, 0,
    100, 101, 102, 105, 110, 101, 100, 0, 114, 101, 115, 112, 97, 119, 110, 116,
    105, 109, 101, 0, 0, 0, 0, 0, 97, 99, 116, 105, 118, 97, 116, 101, 0, 0, 0,
    0, 0, 0, 0, 0, 105, 110, 118, 97, 108, 105, 100, 32, 103, 111, 97, 108, 32,
    115, 116, 97, 116, 101, 32, 104, 97, 110, 100, 108, 101, 32, 37, 100, 10, 0,
    0, 0, 105, 116, 0, 0, 0, 0, 0, 0, 99, 108, 95, 99, 117, 114, 114, 101, 110,
    116, 83, 101, 114, 118, 101, 114, 65, 100, 100, 114, 101, 115, 115, 0, 105,
    116, 101, 109, 95, 113, 117, 97, 100, 0, 0, 0, 0, 0, 0, 0, 114, 115, 95,
    102, 97, 108, 108, 100, 97, 109, 97, 103, 101, 53, 0, 0, 49, 48, 48, 48, 0,
    0, 0, 0, 109, 97, 115, 116, 101, 114, 46, 113, 117, 97, 107, 101, 106, 115,
    46, 99, 111, 109, 0, 0, 0, 0, 0, 0, 114, 97, 116, 101, 0, 0, 0, 0, 99, 111,
    110, 115, 111, 108, 101, 95, 116, 101, 108, 108, 58, 32, 0, 0, 32, 37, 52,
    100, 32, 37, 100, 10, 0, 0, 0, 0, 0, 0, 0, 0, 83, 111, 117, 110, 100, 32,
    110, 97, 109, 101, 32, 105, 115, 32, 78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 102,
    102, 48, 52, 58, 58, 54, 57, 54, 102, 58, 55, 49, 55, 53, 58, 54, 49, 54,
    98, 58, 54, 53, 51, 51, 0, 0, 0, 0, 0, 0, 0, 74, 79, 89, 49, 50, 0, 0, 0,
    116, 105, 109, 101, 50, 0, 0, 0, 87, 114, 105, 116, 105, 110, 103, 32, 108,
    101, 110, 32, 102, 111, 114, 32, 37, 115, 32, 116, 111, 32, 106, 111, 117,
    114, 110, 97, 108, 32, 102, 105, 108, 101, 46, 10, 0, 0, 0, 0, 115, 101,
    116, 117, 0, 0, 0, 0, 116, 114, 105, 103, 103, 101, 114, 95, 112, 117, 115,
    104, 32, 119, 105, 116, 104, 111, 117, 116, 32, 116, 97, 114, 103, 101, 116,
    32, 101, 110, 116, 105, 116, 121, 32, 37, 115, 10, 0, 0, 43, 98, 117, 116,
    116, 111, 110, 54, 0, 0, 0, 0, 0, 0, 0, 0, 56, 48, 48, 0, 0, 0, 0, 0, 37,
    56, 105, 32, 104, 105, 103, 104, 32, 109, 97, 114, 107, 10, 0, 0, 37, 115,
    32, 119, 114, 105, 116, 116, 101, 110, 32, 115, 117, 99, 99, 101, 115, 115,
    102, 117, 108, 108, 121, 10, 0, 0, 0, 0, 0, 0, 0, 0, 97, 97, 115, 32, 102,
    105, 108, 101, 32, 37, 115, 32, 105, 115, 32, 118, 101, 114, 115, 105, 111,
    110, 32, 37, 105, 44, 32, 110, 111, 116, 32, 37, 105, 10, 0, 0, 0, 0, 0, 0,
    65, 65, 83, 95, 69, 110, 116, 105, 116, 121, 84, 121, 112, 101, 58, 32, 101,
    110, 116, 110, 117, 109, 32, 37, 100, 32, 111, 117, 116, 32, 111, 102, 32,
    114, 97, 110, 103, 101, 10, 0, 65, 65, 83, 95, 77, 65, 88, 95, 67, 76, 85,
    83, 84, 69, 82, 83, 10, 0, 0, 0, 0, 0, 0, 0, 116, 111, 111, 32, 109, 97,
    110, 121, 32, 101, 110, 116, 105, 116, 105, 101, 115, 32, 105, 110, 32, 66,
    83, 80, 32, 102, 105, 108, 101, 10, 0, 0, 86, 77, 32, 112, 114, 111, 103,
    114, 97, 109, 32, 99, 111, 117, 110, 116, 101, 114, 32, 111, 117, 116, 32,
    111, 102, 32, 114, 97, 110, 103, 101, 32, 105, 110, 32, 79, 80, 95, 76, 69,
    65, 86, 69, 0, 0, 0, 0, 0, 118, 109, 105, 110, 102, 111, 0, 0, 103, 108, 85,
    110, 105, 102, 111, 114, 109, 49, 105, 0, 0, 0, 0, 0, 99, 108, 95, 112, 97,
    117, 115, 101, 100, 0, 0, 0, 0, 0, 0, 0, 83, 86, 95, 81, 115, 111, 114, 116,
    69, 110, 116, 105, 116, 121, 83, 116, 97, 116, 101, 115, 58, 32, 100, 117,
    112, 108, 105, 99, 97, 116, 101, 100, 32, 101, 110, 116, 105, 116, 121, 0,
    72, 117, 102, 102, 109, 97, 110, 32, 116, 97, 98, 108, 101, 32, 48, 120, 37,
    48, 50, 120, 32, 119, 97, 115, 32, 110, 111, 116, 32, 100, 101, 102, 105,
    110, 101, 100, 0, 0, 0, 0, 46, 46, 46, 105, 103, 110, 111, 114, 105, 110,
    103, 32, 71, 76, 95, 65, 82, 66, 95, 109, 117, 108, 116, 105, 116, 101, 120,
    116, 117, 114, 101, 10, 0, 0, 0, 0, 0, 0, 0, 0, 77, 84, 40, 97, 41, 32, 0,
    0, 65, 108, 114, 101, 97, 100, 121, 32, 114, 101, 99, 111, 114, 100, 105,
    110, 103, 46, 10, 0, 0, 0, 0, 0, 114, 95, 99, 111, 108, 111, 114, 77, 105,
    112, 76, 101, 118, 101, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 42, 102, 105, 120,
    101, 100, 76, 101, 118, 101, 108, 115, 0, 0, 0, 0, 108, 111, 97, 100, 101,
    100, 32, 37, 105, 32, 71, 76, 83, 76, 32, 115, 104, 97, 100, 101, 114, 115,
    32, 40, 37, 105, 32, 103, 101, 110, 32, 37, 105, 32, 108, 105, 103, 104,
    116, 32, 37, 105, 32, 101, 116, 99, 41, 32, 105, 110, 32, 37, 53, 46, 50,
    102, 32, 115, 101, 99, 111, 110, 100, 115, 10, 0, 0, 0, 0, 0, 0, 0, 110,
    101, 116, 95, 101, 110, 97, 98, 108, 101, 100, 0, 0, 0, 0, 0, 103, 108, 71,
    101, 116, 79, 98, 106, 101, 99, 116, 80, 97, 114, 97, 109, 101, 116, 101,
    114, 102, 118, 65, 82, 66, 0, 0, 0, 0, 0, 0, 0, 66, 97, 100, 32, 115, 105,
    122, 101, 32, 102, 111, 114, 32, 37, 115, 32, 40, 37, 105, 41, 33, 0, 0, 0,
    71, 76, 95, 73, 78, 86, 65, 76, 73, 68, 95, 69, 78, 85, 77, 0, 32, 75, 77,
    79, 68, 95, 82, 77, 69, 84, 65, 0, 0, 0, 0, 0, 110, 97, 109, 101, 0, 0, 0,
    0, 115, 121, 110, 116, 97, 120, 32, 101, 114, 114, 111, 114, 32, 105, 110,
    32, 35, 105, 102, 47, 35, 101, 108, 105, 102, 0, 0, 0, 0, 0, 0, 0, 97, 109,
    109, 111, 105, 110, 100, 101, 120, 0, 0, 0, 0, 0, 0, 0, 83, 86, 95, 71, 101,
    116, 85, 115, 101, 114, 99, 109, 100, 58, 32, 98, 97, 100, 32, 99, 108, 105,
    101, 110, 116, 78, 117, 109, 58, 37, 105, 0, 99, 111, 117, 108, 100, 110,
    39, 116, 32, 108, 111, 97, 100, 32, 119, 101, 105, 103, 104, 116, 115, 10,
    0, 0, 109, 97, 108, 101, 0, 0, 0, 0, 37, 115, 32, 114, 101, 115, 111, 108,
    118, 101, 100, 32, 116, 111, 32, 37, 115, 10, 0, 0, 0, 0, 0, 0, 119, 101,
    97, 112, 111, 110, 95, 98, 102, 103, 0, 0, 0, 0, 0, 0, 114, 115, 95, 115,
    116, 97, 114, 116, 101, 108, 101, 118, 97, 116, 111, 114, 0, 0, 0, 0, 0, 0,
    0, 0, 80, 67, 88, 32, 116, 114, 117, 110, 99, 97, 116, 101, 100, 58, 32, 37,
    115, 10, 0, 0, 0, 0, 0, 0, 115, 118, 95, 77, 97, 120, 82, 97, 116, 101, 0,
    0, 0, 0, 0, 0, 99, 104, 97, 108, 108, 101, 110, 103, 101, 82, 101, 115, 112,
    111, 110, 115, 101, 32, 37, 100, 32, 37, 100, 32, 37, 100, 0, 0, 0, 0, 0, 0,
    115, 118, 95, 109, 97, 115, 116, 101, 114, 49, 0, 0, 0, 0, 0, 0, 110, 97,
    109, 101, 0, 0, 0, 0, 85, 115, 97, 103, 101, 58, 32, 116, 101, 108, 108, 32,
    60, 99, 108, 105, 101, 110, 116, 32, 110, 117, 109, 98, 101, 114, 62, 32,
    60, 116, 101, 120, 116, 62, 10, 0, 0, 0, 0, 0, 94, 51, 87, 65, 82, 78, 73,
    78, 71, 58, 32, 85, 115, 105, 110, 103, 32, 100, 101, 102, 97, 117, 108,
    116, 32, 115, 111, 117, 110, 100, 32, 102, 111, 114, 32, 37, 115, 10, 0, 0,
    76, 111, 97, 100, 84, 71, 65, 58, 32, 104, 101, 97, 100, 101, 114, 32, 116,
    111, 111, 32, 115, 104, 111, 114, 116, 32, 40, 37, 115, 41, 0, 0, 83, 95,
    70, 105, 110, 100, 78, 97, 109, 101, 58, 32, 111, 117, 116, 32, 111, 102,
    32, 115, 102, 120, 95, 116, 0, 0, 0, 0, 0, 0, 0, 0, 110, 101, 116, 95, 109,
    99, 97, 115, 116, 54, 97, 100, 100, 114, 0, 0, 74, 79, 89, 49, 49, 0, 0, 0,
    97, 112, 111, 115, 46, 116, 114, 68, 101, 108, 116, 97, 91, 50, 93, 0, 99,
    108, 105, 101, 110, 116, 107, 105, 99, 107, 0, 0, 0, 0, 0, 0, 87, 114, 105,
    116, 105, 110, 103, 32, 122, 101, 114, 111, 32, 102, 111, 114, 32, 37, 115,
    32, 116, 111, 32, 106, 111, 117, 114, 110, 97, 108, 32, 102, 105, 108, 101,
    46, 10, 0, 0, 0, 115, 101, 116, 115, 0, 0, 0, 0, 49, 0, 0, 0, 0, 0, 0, 0,
    76, 111, 97, 100, 66, 77, 80, 58, 32, 104, 101, 97, 100, 101, 114, 32, 116,
    111, 111, 32, 115, 104, 111, 114, 116, 32, 40, 37, 115, 41, 0, 0, 76, 111,
    97, 100, 74, 80, 71, 58, 32, 37, 115, 32, 104, 97, 115, 32, 97, 110, 32,
    105, 110, 118, 97, 108, 105, 100, 32, 105, 109, 97, 103, 101, 32, 102, 111,
    114, 109, 97, 116, 58, 32, 37, 100, 120, 37, 100, 42, 52, 61, 37, 100, 44,
    32, 99, 111, 109, 112, 111, 110, 101, 110, 116, 115, 58, 32, 37, 100, 0, 0,
    0, 0, 0, 57, 54, 0, 0, 0, 0, 0, 0, 94, 49, 69, 82, 82, 79, 82, 58, 32, 76,
    101, 115, 115, 32, 116, 104, 97, 110, 32, 56, 32, 98, 105, 116, 32, 115,
    111, 117, 110, 100, 32, 105, 115, 32, 110, 111, 116, 32, 115, 117, 112, 112,
    111, 114, 116, 101, 100, 10, 0, 0, 0, 0, 0, 0, 0, 0, 67, 73, 78, 95, 80,
    108, 97, 121, 67, 105, 110, 101, 109, 97, 116, 105, 99, 40, 32, 37, 115, 32,
    41, 10, 0, 0, 0, 0, 0, 0, 0, 0, 45, 98, 117, 116, 116, 111, 110, 53, 0, 0,
    0, 0, 0, 0, 0, 0, 137, 80, 78, 71, 13, 10, 26, 10, 0, 0, 0, 0, 0, 0, 0, 0,
    111, 112, 101, 110, 0, 0, 0, 0, 37, 56, 105, 32, 108, 111, 119, 32, 116,
    101, 109, 112, 72, 105, 103, 104, 119, 97, 116, 101, 114, 10, 0, 0, 115, 95,
    109, 117, 115, 105, 99, 118, 111, 108, 117, 109, 101, 0, 0, 0, 37, 100, 32,
    98, 121, 116, 101, 115, 32, 102, 114, 101, 101, 32, 115, 111, 117, 110, 100,
    32, 98, 117, 102, 102, 101, 114, 32, 109, 101, 109, 111, 114, 121, 44, 32,
    37, 100, 32, 116, 111, 116, 97, 108, 32, 117, 115, 101, 100, 10, 0, 0, 0, 0,
    0, 0, 0, 37, 53, 100, 32, 115, 117, 98, 109, 105, 115, 115, 105, 111, 110,
    95, 99, 104, 117, 110, 107, 10, 0, 0, 0, 78, 69, 84, 95, 71, 101, 116, 80,
    97, 99, 107, 101, 116, 58, 32, 37, 115, 10, 0, 0, 0, 0, 0, 0, 103, 108, 85,
    110, 105, 102, 111, 114, 109, 52, 102, 0, 0, 0, 0, 0, 37, 115, 32, 115, 101,
    110, 100, 32, 37, 52, 105, 32, 58, 32, 115, 61, 37, 105, 32, 102, 114, 97,
    103, 109, 101, 110, 116, 61, 37, 105, 44, 37, 105, 10, 0, 0, 0, 0, 0, 0, 67,
    76, 95, 80, 97, 114, 115, 101, 83, 101, 114, 118, 101, 114, 77, 101, 115,
    115, 97, 103, 101, 58, 32, 73, 108, 108, 101, 103, 105, 98, 108, 101, 32,
    115, 101, 114, 118, 101, 114, 32, 109, 101, 115, 115, 97, 103, 101, 0, 66,
    97, 99, 107, 105, 110, 103, 32, 115, 116, 111, 114, 101, 32, 110, 111, 116,
    32, 115, 117, 112, 112, 111, 114, 116, 101, 100, 0, 0, 0, 0, 0, 46, 46, 46,
    110, 111, 116, 32, 117, 115, 105, 110, 103, 32, 71, 76, 95, 65, 82, 66, 95,
    109, 117, 108, 116, 105, 116, 101, 120, 116, 117, 114, 101, 44, 32, 60, 32,
    50, 32, 116, 101, 120, 116, 117, 114, 101, 32, 117, 110, 105, 116, 115, 10,
    0, 0, 0, 0, 32, 32, 0, 0, 0, 0, 0, 0, 114, 95, 114, 111, 117, 110, 100, 73,
    109, 97, 103, 101, 115, 68, 111, 119, 110, 0, 0, 0, 0, 0, 0, 0, 77, 83, 71,
    95, 87, 114, 105, 116, 101, 83, 116, 114, 105, 110, 103, 58, 32, 77, 65, 88,
    95, 83, 84, 82, 73, 78, 71, 95, 67, 72, 65, 82, 83, 0, 0, 0, 0, 0, 0, 0, 42,
    116, 97, 114, 103, 101, 116, 76, 101, 118, 101, 108, 115, 0, 0, 0, 67, 111,
    117, 108, 100, 32, 110, 111, 116, 32, 108, 111, 97, 100, 32, 108, 105, 103,
    104, 116, 97, 108, 108, 32, 115, 104, 97, 100, 101, 114, 33, 0, 103, 108,
    85, 110, 105, 102, 111, 114, 109, 77, 97, 116, 114, 105, 120, 52, 102, 118,
    65, 82, 66, 0, 0, 0, 66, 97, 100, 32, 104, 101, 97, 100, 101, 114, 32, 102,
    111, 114, 32, 37, 115, 33, 0, 0, 0, 0, 0, 0, 32, 75, 77, 79, 68, 95, 76, 77,
    69, 84, 65, 0, 0, 0, 0, 0, 36, 0, 0, 0, 0, 0, 0, 0, 109, 105, 115, 112, 108,
    97, 99, 101, 100, 32, 35, 101, 110, 100, 105, 102, 0, 0, 0, 0, 0, 0, 0, 0,
    97, 109, 109, 111, 97, 109, 111, 117, 110, 116, 0, 0, 0, 0, 0, 0, 103, 111,
    97, 108, 32, 104, 101, 97, 112, 32, 111, 118, 101, 114, 102, 108, 111, 119,
    10, 0, 0, 0, 0, 0, 102, 101, 109, 97, 108, 101, 0, 0, 46, 46, 0, 0, 0, 0, 0,
    0, 119, 101, 97, 112, 111, 110, 95, 114, 97, 105, 108, 103, 117, 110, 0, 0,
    66, 97, 100, 32, 115, 101, 114, 118, 101, 114, 32, 97, 100, 100, 114, 101,
    115, 115, 10, 0, 0, 0, 0, 0, 114, 115, 95, 102, 117, 110, 99, 98, 111, 98,
    0, 0, 0, 0, 0, 0, 109, 97, 112, 95, 114, 101, 115, 116, 97, 114, 116, 32,
    48, 10, 0, 0, 115, 118, 95, 100, 108, 85, 82, 76, 0, 0, 0, 0, 0, 0, 0, 0,
    99, 108, 105, 101, 110, 116, 68, 111, 119, 110, 108, 111, 97, 100, 58, 32,
    37, 100, 32, 58, 32, 119, 114, 105, 116, 105, 110, 103, 32, 98, 108, 111,
    99, 107, 32, 37, 100, 10, 0, 0, 69, 120, 99, 101, 112, 116, 32, 35, 37, 100,
    58, 32, 37, 115, 47, 37, 100, 10, 0, 0, 0, 0, 0, 0, 67, 97, 110, 39, 116,
    32, 108, 111, 97, 100, 32, 100, 101, 102, 97, 117, 108, 116, 32, 115, 111,
    117, 110, 100, 32, 101, 102, 102, 101, 99, 116, 32, 37, 115, 0, 0, 0, 0, 0,
    0, 69, 114, 114, 111, 114, 58, 32, 84, 111, 111, 32, 109, 97, 110, 121, 32,
    99, 118, 97, 114, 115, 44, 32, 99, 97, 110, 110, 111, 116, 32, 99, 114, 101,
    97, 116, 101, 32, 97, 32, 110, 101, 119, 32, 111, 110, 101, 33, 0, 94, 51,
    87, 65, 82, 78, 73, 78, 71, 58, 32, 84, 114, 105, 101, 100, 32, 116, 111,
    32, 108, 111, 97, 100, 32, 112, 108, 97, 121, 101, 114, 32, 115, 111, 117,
    110, 100, 32, 100, 105, 114, 101, 99, 116, 108, 121, 58, 32, 37, 115, 10, 0,
    0, 0, 0, 0, 37, 105, 0, 0, 0, 0, 0, 0, 74, 79, 89, 49, 48, 0, 0, 0, 85, 80,
    65, 82, 82, 79, 87, 0, 97, 112, 111, 115, 46, 116, 114, 68, 101, 108, 116,
    97, 91, 49, 93, 0, 82, 101, 97, 100, 32, 102, 114, 111, 109, 32, 106, 111,
    117, 114, 110, 97, 108, 68, 97, 116, 97, 70, 105, 108, 101, 32, 102, 97,
    105, 108, 101, 100, 0, 0, 0, 0, 0, 0, 0, 0, 115, 101, 116, 0, 0, 0, 0, 0,
    43, 98, 117, 116, 116, 111, 110, 53, 0, 0, 0, 0, 0, 0, 0, 0, 71, 76, 95, 78,
    69, 65, 82, 69, 83, 84, 0, 0, 0, 0, 0, 0, 37, 56, 105, 32, 108, 111, 119,
    32, 116, 101, 109, 112, 10, 0, 0, 0, 103, 108, 85, 110, 105, 102, 111, 114,
    109, 51, 102, 0, 0, 0, 0, 0, 37, 51, 105, 58, 66, 65, 68, 32, 67, 77, 68,
    32, 37, 105, 10, 0, 65, 114, 105, 116, 104, 109, 101, 116, 105, 99, 32, 116,
    97, 98, 108, 101, 32, 48, 120, 37, 48, 50, 120, 32, 119, 97, 115, 32, 110,
    111, 116, 32, 100, 101, 102, 105, 110, 101, 100, 0, 46, 46, 46, 117, 115,
    105, 110, 103, 32, 71, 76, 95, 65, 82, 66, 95, 109, 117, 108, 116, 105, 116,
    101, 120, 116, 117, 114, 101, 10, 0, 0, 0, 76, 32, 0, 0, 0, 0, 0, 0, 114,
    95, 112, 105, 99, 109, 105, 112, 0, 0, 0, 0, 0, 0, 0, 0, 42, 99, 97, 108,
    99, 76, 101, 118, 101, 108, 115, 0, 0, 0, 0, 0, 108, 105, 103, 104, 116, 97,
    108, 108, 0, 0, 0, 0, 0, 0, 0, 0, 103, 108, 85, 110, 105, 102, 111, 114,
    109, 77, 97, 116, 114, 105, 120, 51, 102, 118, 65, 82, 66, 0, 0, 0, 109, 97,
    112, 115, 47, 37, 115, 47, 108, 109, 95, 37, 48, 52, 100, 46, 104, 100, 114,
    0, 0, 0, 0, 0, 32, 75, 77, 79, 68, 95, 82, 65, 76, 84, 0, 0, 0, 0, 0, 0, 35,
    0, 0, 0, 0, 0, 0, 0, 35, 101, 108, 115, 101, 32, 97, 102, 116, 101, 114, 32,
    35, 101, 108, 115, 101, 0, 0, 0, 0, 0, 0, 0, 101, 120, 116, 114, 97, 122,
    118, 101, 108, 111, 99, 105, 116, 121, 0, 0, 37, 100, 58, 32, 37, 115, 0, 0,
    110, 97, 109, 101, 0, 0, 0, 0, 119, 101, 97, 112, 111, 110, 95, 112, 108,
    97, 115, 109, 97, 103, 117, 110, 0, 0, 0, 0, 0, 0, 0, 0, 83, 101, 114, 118,
    101, 114, 32, 113, 117, 105, 116, 0, 0, 0, 0, 0, 114, 115, 95, 97, 105, 114,
    99, 111, 110, 116, 114, 111, 108, 108, 101, 100, 106, 117, 109, 112, 112,
    97, 100, 0, 82, 101, 115, 116, 97, 114, 116, 105, 110, 103, 32, 115, 101,
    114, 118, 101, 114, 32, 100, 117, 101, 32, 116, 111, 32, 110, 117, 109, 83,
    110, 97, 112, 115, 104, 111, 116, 69, 110, 116, 105, 116, 105, 101, 115, 32,
    119, 114, 97, 112, 112, 105, 110, 103, 0, 0, 0, 115, 118, 95, 97, 108, 108,
    111, 119, 68, 111, 119, 110, 108, 111, 97, 100, 0, 0, 0, 0, 0, 0, 0, 0, 99,
    108, 105, 101, 110, 116, 68, 111, 119, 110, 108, 111, 97, 100, 58, 32, 37,
    100, 32, 58, 32, 98, 101, 103, 105, 110, 110, 105, 110, 103, 32, 34, 37,
    115, 34, 10, 0, 0, 0, 0, 66, 97, 110, 32, 35, 37, 100, 58, 32, 37, 115, 47,
    37, 100, 10, 0, 94, 49, 69, 82, 82, 79, 82, 58, 32, 67, 97, 110, 39, 116,
    32, 99, 114, 101, 97, 116, 101, 32, 97, 32, 115, 111, 117, 110, 100, 32, 98,
    117, 102, 102, 101, 114, 32, 102, 111, 114, 32, 37, 115, 32, 45, 32, 37,
    115, 10, 0, 0, 0, 0, 0, 0, 0, 94, 51, 87, 65, 82, 78, 73, 78, 71, 58, 32,
    83, 111, 117, 110, 100, 32, 110, 97, 109, 101, 32, 105, 115, 32, 116, 111,
    111, 32, 108, 111, 110, 103, 58, 32, 37, 115, 10, 0, 0, 58, 58, 0, 0, 0, 0,
    0, 0, 74, 79, 89, 57, 0, 0, 0, 0, 97, 112, 111, 115, 46, 116, 114, 68, 101,
    108, 116, 97, 91, 48, 93, 0, 76, 111, 97, 100, 105, 110, 103, 32, 37, 115,
    32, 102, 114, 111, 109, 32, 106, 111, 117, 114, 110, 97, 108, 32, 102, 105,
    108, 101, 46, 10, 0, 0, 116, 111, 103, 103, 108, 101, 0, 0, 45, 98, 117,
    116, 116, 111, 110, 52, 0, 0, 0, 0, 0, 0, 0, 0, 77, 65, 88, 95, 71, 65, 77,
    69, 83, 84, 65, 84, 69, 95, 67, 72, 65, 82, 83, 32, 101, 120, 99, 101, 101,
    100, 101, 100, 0, 0, 0, 0, 37, 56, 105, 32, 108, 111, 119, 32, 112, 101,
    114, 109, 97, 110, 101, 110, 116, 10, 0, 0, 0, 0, 0, 0, 103, 108, 85, 110,
    105, 102, 111, 114, 109, 50, 102, 0, 0, 0, 0, 0, 69, 78, 68, 32, 79, 70, 32,
    77, 69, 83, 83, 65, 71, 69, 0, 0, 82, 101, 113, 117, 101, 115, 116, 101,
    100, 32, 102, 101, 97, 116, 117, 114, 101, 32, 119, 97, 115, 32, 111, 109,
    105, 116, 116, 101, 100, 32, 97, 116, 32, 99, 111, 109, 112, 105, 108, 101,
    32, 116, 105, 109, 101, 0, 0, 0, 103, 108, 67, 108, 105, 101, 110, 116, 65,
    99, 116, 105, 118, 101, 84, 101, 120, 116, 117, 114, 101, 65, 82, 66, 0, 0,
    0, 0, 0, 0, 0, 0, 37, 105, 32, 0, 0, 0, 0, 0, 50, 0, 0, 0, 0, 0, 0, 0, 42,
    116, 101, 120, 116, 117, 114, 101, 100, 101, 112, 116, 104, 0, 0, 0, 35,
    100, 101, 102, 105, 110, 101, 32, 85, 83, 69, 95, 86, 69, 82, 84, 69, 88,
    95, 65, 78, 73, 77, 65, 84, 73, 79, 78, 10, 35, 100, 101, 102, 105, 110,
    101, 32, 85, 83, 69, 95, 77, 79, 68, 69, 76, 77, 65, 84, 82, 73, 88, 10, 0,
    0, 0, 103, 108, 85, 110, 105, 102, 111, 114, 109, 77, 97, 116, 114, 105,
    120, 50, 102, 118, 65, 82, 66, 0, 0, 0, 95, 102, 97, 116, 100, 101, 108,
    117, 120, 101, 109, 97, 112, 37, 100, 0, 32, 75, 77, 79, 68, 95, 76, 65, 76,
    84, 0, 0, 0, 0, 0, 0, 92, 0, 0, 0, 0, 0, 0, 0, 109, 105, 115, 112, 108, 97,
    99, 101, 100, 32, 35, 101, 108, 115, 101, 0, 97, 110, 103, 108, 101, 111,
    102, 102, 115, 101, 116, 0, 0, 0, 0, 0, 97, 118, 111, 105, 100, 32, 103,
    111, 97, 108, 32, 37, 115, 44, 32, 110, 117, 109, 98, 101, 114, 32, 37, 100,
    32, 102, 111, 114, 32, 37, 102, 32, 115, 101, 99, 111, 110, 100, 115, 0, 33,
    0, 0, 0, 0, 0, 0, 0, 119, 101, 97, 112, 111, 110, 95, 108, 105, 103, 104,
    116, 110, 105, 110, 103, 0, 0, 0, 0, 0, 0, 0, 0, 119, 97, 114, 110, 105,
    110, 103, 58, 32, 111, 110, 108, 121, 32, 45, 52, 32, 111, 114, 32, 45, 54,
    32, 97, 115, 32, 97, 100, 100, 114, 101, 115, 115, 32, 116, 121, 112, 101,
    32, 117, 110, 100, 101, 114, 115, 116, 111, 111, 100, 46, 10, 0, 0, 0, 0, 0,
    50, 53, 48, 0, 0, 0, 0, 0, 37, 115, 0, 0, 0, 0, 0, 0, 109, 97, 112, 32, 37,
    115, 10, 0, 50, 0, 0, 0, 0, 0, 0, 0, 70, 105, 108, 101, 32, 34, 37, 115, 34,
    32, 110, 111, 116, 32, 102, 111, 117, 110, 100, 32, 111, 110, 32, 115, 101,
    114, 118, 101, 114, 32, 102, 111, 114, 32, 97, 117, 116, 111, 100, 111, 119,
    110, 108, 111, 97, 100, 105, 110, 103, 46, 10, 0, 0, 0, 0, 0, 67, 108, 105,
    101, 110, 116, 32, 37, 105, 32, 105, 115, 32, 110, 111, 116, 32, 97, 99,
    116, 105, 118, 101, 10, 0, 0, 0, 0, 0, 0, 0, 0, 94, 49, 69, 82, 82, 79, 82,
    58, 32, 79, 117, 116, 32, 111, 102, 32, 97, 117, 100, 105, 111, 32, 98, 117,
    102, 102, 101, 114, 115, 10, 0, 0, 94, 51, 87, 65, 82, 78, 73, 78, 71, 58,
    32, 83, 111, 117, 110, 100, 32, 110, 97, 109, 101, 32, 105, 115, 32, 101,
    109, 112, 116, 121, 10, 0, 110, 101, 116, 95, 105, 112, 54, 0, 74, 79, 89,
    56, 0, 0, 0, 0, 97, 112, 111, 115, 46, 116, 114, 66, 97, 115, 101, 91, 50,
    93, 0, 0, 70, 83, 95, 82, 101, 97, 100, 70, 105, 108, 101, 32, 119, 105,
    116, 104, 32, 101, 109, 112, 116, 121, 32, 110, 97, 109, 101, 0, 0, 0, 0, 0,
    112, 114, 105, 110, 116, 0, 0, 0, 99, 111, 100, 101, 47, 114, 101, 110, 100,
    101, 114, 101, 114, 103, 108, 50, 47, 116, 114, 95, 103, 108, 115, 108, 46,
    99, 0, 0, 0, 0, 0, 0, 43, 98, 117, 116, 116, 111, 110, 52, 0, 0, 0, 0, 0, 0,
    0, 0, 82, 69, 95, 82, 101, 103, 105, 115, 116, 101, 114, 70, 111, 110, 116,
    58, 32, 99, 97, 108, 108, 101, 100, 32, 119, 105, 116, 104, 32, 101, 109,
    112, 116, 121, 32, 110, 97, 109, 101, 10, 0, 0, 0, 0, 0, 0, 0, 0, 37, 56,
    105, 32, 108, 111, 119, 32, 109, 97, 114, 107, 10, 0, 0, 0, 49, 53, 48, 0,
    0, 0, 0, 0, 103, 108, 85, 110, 105, 102, 111, 114, 109, 49, 102, 0, 0, 0, 0,
    0, 67, 76, 95, 80, 97, 114, 115, 101, 83, 101, 114, 118, 101, 114, 77, 101,
    115, 115, 97, 103, 101, 58, 32, 114, 101, 97, 100, 32, 112, 97, 115, 116,
    32, 101, 110, 100, 32, 111, 102, 32, 115, 101, 114, 118, 101, 114, 32, 109,
    101, 115, 115, 97, 103, 101, 0, 0, 78, 111, 116, 32, 105, 109, 112, 108,
    101, 109, 101, 110, 116, 101, 100, 32, 121, 101, 116, 0, 0, 0, 0, 0, 67, 98,
    117, 102, 95, 69, 120, 101, 99, 117, 116, 101, 84, 101, 120, 116, 58, 32,
    98, 97, 100, 32, 101, 120, 101, 99, 95, 119, 104, 101, 110, 0, 103, 108, 65,
    99, 116, 105, 118, 101, 84, 101, 120, 116, 117, 114, 101, 65, 82, 66, 0, 0,
    0, 0, 0, 0, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45,
    45, 45, 45, 45, 45, 45, 45, 10, 0, 0, 0, 0, 0, 0, 0, 0, 114, 95, 101, 120,
    116, 95, 109, 97, 120, 95, 97, 110, 105, 115, 111, 116, 114, 111, 112, 121,
    0, 0, 0, 0, 42, 114, 101, 110, 100, 101, 114, 100, 101, 112, 116, 104, 0, 0,
    0, 0, 35, 100, 101, 102, 105, 110, 101, 32, 85, 83, 69, 95, 80, 82, 73, 77,
    65, 82, 89, 95, 76, 73, 71, 72, 84, 10, 0, 0, 0, 0, 0, 0, 103, 108, 85, 110,
    105, 102, 111, 114, 109, 52, 105, 118, 65, 82, 66, 0, 95, 102, 97, 116, 108,
    105, 103, 104, 116, 109, 97, 112, 37, 100, 0, 0, 82, 95, 67, 104,
  ],
  "i8",
  ALLOC_NONE,
  Runtime.GLOBAL_BASE + 102404
);
/* memory initializer */ allocate(
  [
    101, 99, 107, 70, 66, 79, 58, 32, 40, 37, 115, 41, 32, 85, 110, 115, 117,
    112, 112, 111, 114, 116, 101, 100, 32, 102, 114, 97, 109, 101, 98, 117, 102,
    102, 101, 114, 32, 102, 111, 114, 109, 97, 116, 10, 0, 0, 0, 0, 0, 0, 0, 0,
    32, 75, 77, 79, 68, 95, 82, 67, 84, 82, 76, 0, 0, 0, 0, 0, 93, 0, 0, 0, 0,
    0, 0, 0, 101, 120, 112, 101, 99, 116, 101, 100, 32, 110, 97, 109, 101, 32,
    97, 102, 116, 101, 114, 32, 35, 105, 102, 100, 101, 102, 44, 32, 102, 111,
    117, 110, 100, 32, 37, 115, 0, 0, 0, 0, 111, 102, 102, 115, 101, 116, 0, 0,
    38, 0, 0, 0, 0, 0, 0, 0, 119, 101, 97, 112, 111, 110, 95, 114, 111, 99, 107,
    101, 116, 108, 97, 117, 110, 99, 104, 101, 114, 0, 0, 0, 45, 54, 0, 0, 0, 0,
    0, 0, 114, 115, 95, 106, 117, 109, 112, 112, 97, 100, 0, 0, 0, 0, 0, 0, 86,
    77, 95, 82, 101, 115, 117, 109, 101, 73, 110, 116, 101, 114, 112, 114, 101,
    116, 101, 100, 32, 110, 111, 116, 32, 105, 109, 112, 108, 101, 109, 101,
    110, 116, 101, 100, 0, 0, 0, 0, 82, 101, 115, 116, 97, 114, 116, 105, 110,
    103, 32, 115, 101, 114, 118, 101, 114, 32, 100, 117, 101, 32, 116, 111, 32,
    116, 105, 109, 101, 32, 119, 114, 97, 112, 112, 105, 110, 103, 0, 0, 115,
    118, 95, 122, 111, 109, 98, 105, 101, 116, 105, 109, 101, 0, 0, 0, 67, 108,
    105, 112, 87, 105, 110, 100, 105, 110, 103, 58, 32, 77, 65, 88, 95, 80, 79,
    73, 78, 84, 83, 95, 79, 78, 95, 87, 73, 78, 68, 73, 78, 71, 0, 0, 0, 0, 0,
    0, 99, 108, 105, 101, 110, 116, 68, 111, 119, 110, 108, 111, 97, 100, 58,
    32, 37, 100, 32, 58, 32, 34, 37, 115, 34, 32, 102, 105, 108, 101, 32, 110,
    111, 116, 32, 102, 111, 117, 110, 100, 32, 111, 110, 32, 115, 101, 114, 118,
    101, 114, 10, 0, 0, 0, 0, 0, 66, 97, 100, 32, 99, 108, 105, 101, 110, 116,
    32, 115, 108, 111, 116, 58, 32, 37, 105, 10, 0, 0, 0, 0, 94, 51, 87, 65, 82,
    78, 73, 78, 71, 58, 32, 117, 110, 104, 97, 110, 100, 108, 101, 100, 32, 65,
    76, 32, 101, 114, 114, 111, 114, 58, 32, 37, 115, 10, 0, 0, 0, 0, 0, 0, 83,
    111, 117, 110, 100, 32, 110, 97, 109, 101, 32, 105, 115, 32, 78, 85, 76, 76,
    0, 0, 0, 0, 0, 0, 48, 46, 48, 46, 48, 46, 48, 0, 74, 79, 89, 55, 0, 0, 0, 0,
    97, 112, 111, 115, 46, 116, 114, 68, 117, 114, 97, 116, 105, 111, 110, 0,
    66, 97, 100, 32, 111, 114, 105, 103, 105, 110, 32, 105, 110, 32, 70, 83, 95,
    83, 101, 101, 107, 0, 0, 0, 49, 0, 0, 0, 0, 0, 0, 0, 67, 77, 95, 71, 101,
    110, 101, 114, 97, 116, 101, 80, 97, 116, 99, 104, 70, 97, 99, 101, 116,
    115, 58, 32, 98, 97, 100, 32, 112, 97, 114, 97, 109, 101, 116, 101, 114,
    115, 58, 32, 40, 37, 105, 44, 32, 37, 105, 44, 32, 37, 112, 41, 0, 0, 0, 0,
    45, 98, 117, 116, 116, 111, 110, 51, 0, 0, 0, 0, 0, 0, 0, 0, 37, 56, 105,
    32, 98, 121, 116, 101, 115, 32, 116, 111, 116, 97, 108, 32, 122, 111, 110,
    101, 10, 0, 0, 0, 103, 108, 71, 101, 116, 65, 99, 116, 105, 118, 101, 85,
    110, 105, 102, 111, 114, 109, 0, 0, 0, 0, 0, 0, 45, 45, 45, 45, 45, 45, 45,
    45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 10, 0, 0, 0, 0, 0, 73, 110, 118,
    97, 108, 105, 100, 32, 99, 111, 108, 111, 114, 32, 113, 117, 97, 110, 116,
    105, 122, 97, 116, 105, 111, 110, 32, 109, 111, 100, 101, 32, 99, 104, 97,
    110, 103, 101, 0, 0, 77, 65, 88, 95, 83, 85, 66, 77, 79, 68, 69, 76, 83, 32,
    101, 120, 99, 101, 101, 100, 101, 100, 0, 0, 103, 108, 77, 117, 108, 116,
    105, 84, 101, 120, 67, 111, 111, 114, 100, 50, 102, 65, 82, 66, 0, 0, 0, 0,
    82, 95, 71, 101, 116, 83, 104, 97, 100, 101, 114, 66, 121, 72, 97, 110, 100,
    108, 101, 58, 32, 111, 117, 116, 32, 111, 102, 32, 114, 97, 110, 103, 101,
    32, 104, 83, 104, 97, 100, 101, 114, 32, 39, 37, 100, 39, 10, 0, 114, 95,
    101, 120, 116, 95, 116, 101, 120, 116, 117, 114, 101, 95, 102, 105, 108,
    116, 101, 114, 95, 97, 110, 105, 115, 111, 116, 114, 111, 112, 105, 99, 0,
    0, 0, 0, 0, 0, 0, 0, 42, 115, 117, 110, 82, 97, 121, 115, 0, 0, 0, 0, 0, 0,
    0, 0, 35, 100, 101, 102, 105, 110, 101, 32, 83, 72, 65, 68, 79, 87, 77, 65,
    80, 95, 77, 79, 68, 85, 76, 65, 84, 69, 10, 0, 0, 0, 0, 0, 103, 108, 85,
    110, 105, 102, 111, 114, 109, 51, 105, 118, 65, 82, 66, 0, 87, 65, 82, 78,
    73, 78, 71, 58, 32, 110, 117, 109, 98, 101, 114, 32, 111, 102, 32, 108, 105,
    103, 104, 116, 109, 97, 112, 115, 32, 62, 32, 49, 48, 50, 52, 10, 0, 0, 0,
    0, 32, 75, 77, 79, 68, 95, 76, 67, 84, 82, 76, 0, 0, 0, 0, 0, 99, 108, 95,
    109, 97, 120, 112, 97, 99, 107, 101, 116, 115, 0, 0, 0, 91, 0, 0, 0, 0, 0,
    0, 0, 46, 46, 46, 105, 103, 110, 111, 114, 105, 110, 103, 32, 37, 115, 10,
    0, 35, 105, 102, 100, 101, 102, 32, 119, 105, 116, 104, 111, 117, 116, 32,
    110, 97, 109, 101, 0, 0, 0, 0, 0, 114, 101, 99, 111, 105, 108, 0, 0, 102,
    111, 117, 110, 100, 32, 37, 100, 32, 108, 101, 118, 101, 108, 32, 105, 116,
    101, 109, 115, 10, 0, 0, 0, 119, 101, 97, 112, 111, 110, 95, 103, 114, 101,
    110, 97, 100, 101, 108, 97, 117, 110, 99, 104, 101, 114, 0, 0, 45, 52, 0, 0,
    0, 0, 0, 0, 114, 115, 95, 98, 102, 103, 106, 117, 109, 112, 0, 0, 0, 0, 0,
    0, 37, 102, 0, 0, 0, 0, 0, 0, 50, 48, 48, 0, 0, 0, 0, 0, 67, 111, 117, 108,
    100, 32, 110, 111, 116, 32, 100, 111, 119, 110, 108, 111, 97, 100, 32, 34,
    37, 115, 34, 32, 98, 101, 99, 97, 117, 115, 101, 32, 97, 117, 116, 111, 100,
    111, 119, 110, 108, 111, 97, 100, 105, 110, 103, 32, 105, 115, 32, 100, 105,
    115, 97, 98, 108, 101, 100, 32, 111, 110, 32, 116, 104, 101, 32, 115, 101,
    114, 118, 101, 114, 46, 10, 10, 84, 104, 101, 32, 115, 101, 114, 118, 101,
    114, 32, 121, 111, 117, 32, 97, 114, 101, 32, 99, 111, 110, 110, 101, 99,
    116, 105, 110, 103, 32, 116, 111, 32, 105, 115, 32, 110, 111, 116, 32, 97,
    32, 112, 117, 114, 101, 32, 115, 101, 114, 118, 101, 114, 44, 32, 115, 101,
    116, 32, 97, 117, 116, 111, 100, 111, 119, 110, 108, 111, 97, 100, 32, 116,
    111, 32, 78, 111, 32, 105, 110, 32, 121, 111, 117, 114, 32, 115, 101, 116,
    116, 105, 110, 103, 115, 32, 97, 110, 100, 32, 121, 111, 117, 32, 109, 105,
    103, 104, 116, 32, 98, 101, 32, 97, 98, 108, 101, 32, 116, 111, 32, 106,
    111, 105, 110, 32, 116, 104, 101, 32, 103, 97, 109, 101, 32, 97, 110, 121,
    119, 97, 121, 46, 10, 0, 0, 0, 0, 0, 0, 66, 97, 100, 32, 115, 108, 111, 116,
    32, 110, 117, 109, 98, 101, 114, 58, 32, 37, 115, 10, 0, 0, 0, 0, 117, 110,
    107, 110, 111, 119, 110, 32, 112, 114, 105, 110, 116, 32, 116, 121, 112,
    101, 10, 0, 0, 0, 0, 0, 94, 49, 69, 82, 82, 79, 82, 58, 32, 67, 97, 110, 39,
    116, 32, 100, 101, 108, 101, 116, 101, 32, 115, 111, 117, 110, 100, 32, 98,
    117, 102, 102, 101, 114, 32, 102, 111, 114, 32, 37, 115, 10, 0, 0, 0, 0, 0,
    0, 100, 114, 111, 112, 112, 105, 110, 103, 32, 115, 111, 117, 110, 100, 10,
    0, 110, 101, 116, 95, 105, 112, 0, 0, 74, 79, 89, 54, 0, 0, 0, 0, 97, 112,
    111, 115, 46, 116, 114, 84, 105, 109, 101, 0, 0, 0, 0, 0, 70, 83, 95, 87,
    114, 105, 116, 101, 58, 32, 45, 49, 32, 98, 121, 116, 101, 115, 32, 119,
    114, 105, 116, 116, 101, 110, 10, 0, 0, 0, 0, 0, 115, 118, 95, 99, 104, 101,
    97, 116, 115, 0, 0, 0, 0, 0, 0, 0, 113, 117, 105, 116, 0, 0, 0, 0, 37, 105,
    47, 37, 105, 47, 37, 105, 32, 115, 104, 97, 100, 101, 114, 115, 47, 98, 97,
    116, 99, 104, 101, 115, 47, 115, 117, 114, 102, 115, 32, 37, 105, 32, 108,
    101, 97, 102, 115, 32, 37, 105, 32, 118, 101, 114, 116, 115, 32, 37, 105,
    47, 37, 105, 32, 116, 114, 105, 115, 32, 37, 46, 50, 102, 32, 109, 116, 101,
    120, 32, 37, 46, 50, 102, 32, 100, 99, 10, 0, 0, 43, 98, 117, 116, 116, 111,
    110, 51, 0, 0, 0, 0, 0, 0, 0, 0, 37, 56, 105, 32, 98, 121, 116, 101, 115,
    32, 116, 111, 116, 97, 108, 32, 104, 117, 110, 107, 10, 0, 0, 0, 103, 108,
    85, 115, 101, 80, 114, 111, 103, 114, 97, 109, 79, 98, 106, 101, 99, 116, 0,
    0, 0, 0, 0, 0, 103, 114, 97, 112, 104, 104, 101, 105, 103, 104, 116, 0, 0,
    0, 0, 0, 103, 108, 71, 101, 116, 86, 101, 114, 116, 101, 120, 65, 116, 116,
    114, 105, 98, 80, 111, 105, 110, 116, 101, 114, 118, 0, 0, 0, 0, 0, 0, 0,
    37, 105, 32, 0, 0, 0, 0, 0, 83, 99, 97, 110, 32, 115, 99, 114, 105, 112,
    116, 32, 100, 111, 101, 115, 32, 110, 111, 116, 32, 116, 114, 97, 110, 115,
    109, 105, 116, 32, 97, 108, 108, 32, 100, 97, 116, 97, 0, 0, 71, 76, 95, 65,
    82, 66, 95, 109, 117, 108, 116, 105, 116, 101, 120, 116, 117, 114, 101, 0,
    0, 0, 0, 0, 83, 104, 97, 100, 101, 114, 32, 110, 97, 109, 101, 32, 101, 120,
    99, 101, 101, 100, 115, 32, 77, 65, 88, 95, 81, 80, 65, 84, 72, 10, 0, 0,
    114, 95, 97, 114, 98, 95, 118, 101, 114, 116, 101, 120, 95, 116, 121, 112,
    101, 95, 50, 95, 49, 48, 95, 49, 48, 95, 49, 48, 95, 114, 101, 118, 0, 0, 0,
    0, 0, 0, 0, 0, 95, 114, 101, 110, 100, 101, 114, 0, 35, 100, 101, 102, 105,
    110, 101, 32, 85, 83, 69, 95, 67, 85, 66, 69, 77, 65, 80, 10, 0, 0, 0, 0,
    103, 108, 85, 110, 105, 102, 111, 114, 109, 50, 105, 118, 65, 82, 66, 0,
    102, 111, 103, 32, 98, 114, 117, 115, 104, 32, 115, 105, 100, 101, 78, 117,
    109, 98, 101, 114, 32, 111, 117, 116, 32, 111, 102, 32, 114, 97, 110, 103,
    101, 0, 0, 0, 0, 0, 0, 0, 115, 116, 105, 116, 99, 104, 101, 100, 32, 37,
    100, 32, 76, 111, 68, 32, 99, 114, 97, 99, 107, 115, 10, 0, 73, 110, 118,
    97, 108, 105, 100, 32, 99, 111, 109, 112, 111, 110, 101, 110, 116, 32, 73,
    68, 32, 37, 100, 32, 105, 110, 32, 83, 79, 83, 0, 0, 32, 75, 77, 79, 68, 95,
    82, 83, 72, 73, 70, 84, 0, 0, 0, 0, 125, 0, 0, 0, 0, 0, 0, 0, 42, 101, 120,
    116, 101, 114, 110, 0, 71, 76, 95, 66, 105, 110, 100, 58, 32, 78, 85, 76,
    76, 32, 105, 109, 97, 103, 101, 10, 0, 0, 0, 0, 97, 99, 99, 101, 108, 101,
    114, 97, 116, 105, 111, 110, 0, 0, 0, 0, 37, 115, 32, 110, 111, 116, 32,
    114, 101, 97, 99, 104, 97, 98, 108, 101, 32, 102, 111, 114, 32, 98, 111,
    116, 115, 32, 97, 116, 32, 40, 37, 49, 46, 49, 102, 32, 37, 49, 46, 49, 102,
    32, 37, 49, 46, 49, 102, 41, 10, 0, 0, 0, 0, 0, 0, 0, 82, 95, 77, 68, 82,
    65, 100, 100, 65, 110, 105, 109, 83, 117, 114, 102, 97, 99, 101, 115, 58,
    32, 110, 111, 32, 115, 117, 99, 104, 32, 102, 114, 97, 109, 101, 32, 37,
    100, 32, 116, 111, 32, 37, 100, 32, 102, 111, 114, 32, 39, 37, 115, 39, 10,
    0, 0, 66, 111, 116, 67, 104, 101, 99, 107, 67, 104, 97, 116, 77, 101, 115,
    115, 97, 103, 101, 73, 110, 116, 101, 103, 114, 101, 116, 121, 58, 32, 109,
    101, 115, 115, 97, 103, 101, 32, 34, 37, 115, 34, 32, 105, 110, 118, 97,
    108, 105, 100, 32, 101, 115, 99, 97, 112, 101, 32, 99, 104, 97, 114, 10, 0,
    105, 116, 101, 109, 95, 104, 101, 97, 108, 116, 104, 95, 109, 101, 103, 97,
    0, 0, 0, 0, 0, 0, 0, 0, 117, 115, 97, 103, 101, 58, 32, 99, 111, 110, 110,
    101, 99, 116, 32, 91, 45, 52, 124, 45, 54, 93, 32, 115, 101, 114, 118, 101,
    114, 10, 0, 0, 114, 115, 95, 114, 111, 99, 107, 101, 116, 106, 117, 109,
    112, 0, 0, 0, 79, 80, 95, 66, 76, 79, 67, 75, 95, 67, 79, 80, 89, 32, 111,
    117, 116, 32, 111, 102, 32, 114, 97, 110, 103, 101, 33, 0, 0, 0, 0, 0, 116,
    105, 109, 101, 115, 99, 97, 108, 101, 0, 0, 0, 0, 0, 0, 0, 115, 118, 95,
    116, 105, 109, 101, 111, 117, 116, 0, 0, 0, 0, 0, 0, 67, 111, 117, 108, 100,
    32, 110, 111, 116, 32, 100, 111, 119, 110, 108, 111, 97, 100, 32, 34, 37,
    115, 34, 32, 98, 101, 99, 97, 117, 115, 101, 32, 97, 117, 116, 111, 100,
    111, 119, 110, 108, 111, 97, 100, 105, 110, 103, 32, 105, 115, 32, 100, 105,
    115, 97, 98, 108, 101, 100, 32, 111, 110, 32, 116, 104, 101, 32, 115, 101,
    114, 118, 101, 114, 46, 10, 10, 89, 111, 117, 32, 119, 105, 108, 108, 32,
    110, 101, 101, 100, 32, 116, 111, 32, 103, 101, 116, 32, 116, 104, 105, 115,
    32, 102, 105, 108, 101, 32, 101, 108, 115, 101, 119, 104, 101, 114, 101, 32,
    98, 101, 102, 111, 114, 101, 32, 121, 111, 117, 32, 99, 97, 110, 32, 99,
    111, 110, 110, 101, 99, 116, 32, 116, 111, 32, 116, 104, 105, 115, 32, 112,
    117, 114, 101, 32, 115, 101, 114, 118, 101, 114, 46, 10, 0, 0, 0, 0, 0, 0,
    0, 67, 97, 110, 110, 111, 116, 32, 100, 101, 116, 101, 114, 109, 105, 110,
    101, 32, 100, 105, 115, 112, 108, 97, 121, 32, 114, 101, 115, 111, 108, 117,
    116, 105, 111, 110, 44, 32, 97, 115, 115, 117, 109, 105, 110, 103, 32, 54,
    52, 48, 120, 52, 56, 48, 10, 0, 0, 78, 111, 32, 112, 108, 97, 121, 101, 114,
    32, 115, 112, 101, 99, 105, 102, 105, 101, 100, 46, 10, 0, 0, 0, 94, 49, 69,
    120, 105, 116, 58, 32, 37, 115, 0, 0, 0, 0, 0, 0, 85, 110, 107, 110, 111,
    119, 110, 32, 101, 114, 114, 111, 114, 0, 0, 0, 37, 105, 32, 58, 32, 37,
    115, 10, 0, 0, 0, 0, 0, 0, 0, 0, 51, 0, 0, 0, 0, 0, 0, 0, 82, 95, 67, 114,
    101, 97, 116, 101, 86, 66, 79, 50, 58, 32, 34, 37, 115, 34, 32, 105, 115,
    32, 116, 111, 111, 32, 108, 111, 110, 103, 0, 0, 74, 79, 89, 53, 0, 0, 0, 0,
    116, 105, 109, 101, 0, 0, 0, 0, 66, 97, 100, 32, 115, 117, 114, 102, 97, 99,
    101, 32, 116, 101, 115, 115, 101, 108, 97, 116, 101, 100, 46, 10, 0, 0, 0,
    0, 0, 0, 0, 0, 70, 83, 95, 87, 114, 105, 116, 101, 58, 32, 48, 32, 98, 121,
    116, 101, 115, 32, 119, 114, 105, 116, 116, 101, 110, 10, 0, 0, 0, 0, 0, 0,
    67, 118, 97, 114, 95, 85, 112, 100, 97, 116, 101, 58, 32, 115, 114, 99, 32,
    37, 115, 32, 108, 101, 110, 103, 116, 104, 32, 37, 117, 32, 101, 120, 99,
    101, 101, 100, 115, 32, 77, 65, 88, 95, 67, 86, 65, 82, 95, 86, 65, 76, 85,
    69, 95, 83, 84, 82, 73, 78, 71, 0, 0, 0, 0, 0, 115, 118, 99, 95, 98, 97,
    115, 101, 108, 105, 110, 101, 0, 0, 0, 0, 45, 98, 117, 116, 116, 111, 110,
    50, 0, 0, 0, 0, 0, 0, 0, 0, 69, 82, 82, 79, 82, 58, 32, 116, 119, 111, 32,
    99, 111, 110, 115, 101, 99, 117, 116, 105, 118, 101, 32, 102, 114, 101, 101,
    32, 98, 108, 111, 99, 107, 115, 10, 0, 0, 0, 0, 0, 105, 110, 118, 97, 108,
    105, 100, 32, 100, 105, 115, 116, 97, 110, 99, 101, 32, 116, 111, 111, 32,
    102, 97, 114, 32, 98, 97, 99, 107, 0, 0, 0, 115, 107, 121, 0, 0, 0, 0, 0,
    84, 97, 98, 108, 101, 70, 111, 114, 70, 117, 110, 99, 32, 99, 97, 108, 108,
    101, 100, 32, 119, 105, 116, 104, 32, 105, 110, 118, 97, 108, 105, 100, 32,
    102, 117, 110, 99, 116, 105, 111, 110, 32, 39, 37, 100, 39, 32, 105, 110,
    32, 115, 104, 97, 100, 101, 114, 32, 39, 37, 115, 39, 0, 0, 0, 69, 82, 82,
    79, 82, 58, 32, 117, 110, 107, 110, 111, 119, 110, 32, 116, 101, 120, 109,
    111, 100, 32, 39, 37, 100, 39, 32, 105, 110, 32, 115, 104, 97, 100, 101,
    114, 32, 39, 37, 115, 39, 0, 0, 0, 0, 0, 0, 0, 61, 61, 61, 61, 61, 61, 32,
    82, 69, 95, 82, 101, 110, 100, 101, 114, 83, 99, 101, 110, 101, 32, 61, 61,
    61, 61, 61, 10, 0, 0, 0, 0, 97, 32, 115, 117, 114, 102, 97, 99, 101, 0, 0,
    0, 0, 0, 0, 0, 82, 95, 82, 101, 103, 105, 115, 116, 101, 114, 73, 81, 77,
    58, 32, 99, 111, 117, 108, 100, 110, 39, 116, 32, 108, 111, 97, 100, 32,
    105, 113, 109, 32, 102, 105, 108, 101, 32, 37, 115, 10, 0, 0, 0, 0, 0, 0, 0,
    82, 95, 65, 100, 100, 69, 110, 116, 105, 116, 121, 83, 117, 114, 102, 97,
    99, 101, 115, 58, 32, 66, 97, 100, 32, 114, 101, 84, 121, 112, 101, 0, 103,
    108, 71, 101, 116, 86, 101, 114, 116, 101, 120, 65, 116, 116, 114, 105, 98,
    105, 118, 0, 0, 0, 0, 0, 99, 108, 95, 100, 111, 119, 110, 108, 111, 97, 100,
    67, 111, 117, 110, 116, 0, 0, 0, 0, 0, 0, 0, 0, 67, 97, 110, 110, 111, 116,
    32, 116, 114, 97, 110, 115, 99, 111, 100, 101, 32, 100, 117, 101, 32, 116,
    111, 32, 109, 117, 108, 116, 105, 112, 108, 101, 32, 117, 115, 101, 32, 111,
    102, 32, 113, 117, 97, 110, 116, 105, 122, 97, 116, 105, 111, 110, 32, 116,
    97, 98, 108, 101, 32, 37, 100, 0, 0, 0, 46, 46, 46, 71, 76, 95, 69, 88, 84,
    95, 116, 101, 120, 116, 117, 114, 101, 95, 101, 110, 118, 95, 97, 100, 100,
    32, 110, 111, 116, 32, 102, 111, 117, 110, 100, 10, 0, 0, 0, 0, 79, 103,
    103, 83, 0, 0, 0, 0, 67, 111, 117, 108, 100, 110, 39, 116, 32, 102, 105,
    110, 100, 32, 105, 109, 97, 103, 101, 32, 102, 105, 108, 101, 32, 102, 111,
    114, 32, 115, 104, 97, 100, 101, 114, 32, 37, 115, 10, 0, 114, 95, 97, 114,
    98, 95, 115, 101, 97, 109, 108, 101, 115, 115, 95, 99, 117, 98, 101, 95,
    109, 97, 112, 0, 42, 115, 99, 114, 97, 116, 99, 104, 0, 0, 0, 0, 0, 0, 0, 0,
    35, 100, 101, 102, 105, 110, 101, 32, 85, 83, 69, 95, 76, 65, 90, 65, 82,
    79, 86, 10, 0, 0, 0, 0, 103, 108, 85, 110, 105, 102, 111, 114, 109, 52, 102,
    118, 65, 82, 66, 0, 102, 111, 103, 32, 98, 114, 117, 115, 104, 78, 117, 109,
    98, 101, 114, 32, 111, 117, 116, 32, 111, 102, 32, 114, 97, 110, 103, 101,
    0, 0, 0, 0, 32, 75, 77, 79, 68, 95, 76, 83, 72, 73, 70, 84, 0, 0, 0, 0, 79,
    112, 117, 115, 72, 101, 97, 100, 0, 0, 0, 0, 0, 0, 0, 0, 123, 0, 0, 0, 0, 0,
    0, 0, 100, 101, 102, 105, 110, 101, 32, 119, 105, 116, 104, 32, 109, 105,
    115, 112, 108, 97, 99, 101, 100, 32, 35, 35, 0, 0, 0, 0, 0, 0, 0, 0, 115,
    112, 101, 101, 100, 0, 0, 0, 37, 115, 32, 105, 110, 32, 115, 111, 108, 105,
    100, 32, 97, 116, 32, 40, 37, 49, 46, 49, 102, 32, 37, 49, 46, 49, 102, 32,
    37, 49, 46, 49, 102, 41, 10, 0, 0, 0, 0, 0, 37, 115, 32, 61, 32, 123, 34,
    37, 115, 34, 125, 32, 47, 47, 77, 73, 83, 83, 73, 78, 71, 32, 82, 65, 78,
    68, 79, 77, 13, 10, 0, 0, 105, 116, 101, 109, 95, 97, 114, 109, 111, 114,
    95, 99, 111, 109, 98, 97, 116, 0, 0, 0, 0, 0, 0, 0, 99, 111, 110, 110, 101,
    99, 116, 32, 37, 115, 10, 0, 0, 0, 0, 0, 114, 115, 95, 115, 116, 97, 114,
    116, 106, 117, 109, 112, 0, 0, 0, 0, 49, 48, 0, 0, 0, 0, 0, 0, 71, 76, 95,
    83, 84, 65, 67, 75, 95, 85, 78, 68, 69, 82, 70, 76, 79, 87, 0, 0, 0, 0, 0,
    0, 115, 118, 95, 102, 112, 115, 0, 0, 99, 108, 105, 101, 110, 116, 68, 111,
    119, 110, 108, 111, 97, 100, 58, 32, 37, 100, 32, 58, 32, 34, 37, 115, 34,
    32, 100, 111, 119, 110, 108, 111, 97, 100, 32, 100, 105, 115, 97, 98, 108,
    101, 100, 10, 0, 0, 0, 0, 76, 111, 97, 100, 84, 71, 65, 58, 32, 37, 115, 32,
    104, 97, 115, 32, 97, 110, 32, 105, 110, 118, 97, 108, 105, 100, 32, 105,
    109, 97, 103, 101, 32, 115, 105, 122, 101, 0, 0, 0, 98, 97, 110, 32, 101,
    120, 99, 101, 112, 116, 105, 111, 110, 0, 0, 0, 94, 49, 70, 97, 116, 97,
    108, 58, 32, 37, 115, 0, 0, 0, 0, 0, 76, 111, 97, 100, 66, 77, 80, 58, 32,
    111, 110, 108, 121, 32, 117, 110, 99, 111, 109, 112, 114, 101, 115, 115,
    101, 100, 32, 66, 77, 80, 32, 102, 105, 108, 101, 115, 32, 115, 117, 112,
    112, 111, 114, 116, 101, 100, 32, 40, 37, 115, 41, 0, 0, 0, 0, 0, 79, 117,
    116, 32, 111, 102, 32, 109, 101, 109, 111, 114, 121, 0, 0, 0, 94, 51, 83,
    95, 83, 116, 97, 114, 116, 83, 111, 117, 110, 100, 58, 32, 104, 97, 110,
    100, 108, 101, 32, 37, 105, 32, 111, 117, 116, 32, 111, 102, 32, 114, 97,
    110, 103, 101, 10, 0, 110, 101, 116, 95, 101, 110, 97, 98, 108, 101, 100, 0,
    0, 0, 0, 0, 97, 110, 103, 108, 101, 115, 91, 48, 93, 0, 0, 0, 0, 0, 0, 0,
    74, 79, 89, 52, 0, 0, 0, 0, 70, 83, 95, 82, 101, 97, 100, 58, 32, 45, 49,
    32, 98, 121, 116, 101, 115, 32, 114, 101, 97, 100, 0, 0, 67, 118, 97, 114,
    95, 85, 112, 100, 97, 116, 101, 58, 32, 104, 97, 110, 100, 108, 101, 32,
    111, 117, 116, 32, 111, 102, 32, 114, 97, 110, 103, 101, 0, 0, 0, 0, 0, 0,
    0, 0, 71, 76, 95, 78, 69, 65, 82, 69, 83, 84, 95, 77, 73, 80, 77, 65, 80,
    95, 76, 73, 78, 69, 65, 82, 0, 0, 0, 0, 0, 0, 0, 0, 43, 98, 117, 116, 116,
    111, 110, 50, 0, 0, 0, 0, 0, 0, 0, 0, 69, 82, 82, 79, 82, 58, 32, 110, 101,
    120, 116, 32, 98, 108, 111, 99, 107, 32, 100, 111, 101, 115, 110, 39, 116,
    32, 104, 97, 118, 101, 32, 112, 114, 111, 112, 101, 114, 32, 98, 97, 99,
    107, 32, 108, 105, 110, 107, 10, 0, 0, 0, 0, 0, 0, 0, 0, 71, 76, 83, 76, 95,
    83, 101, 116, 85, 110, 105, 102, 111, 114, 109, 86, 101, 99, 51, 58, 32,
    119, 114, 111, 110, 103, 32, 116, 121, 112, 101, 32, 102, 111, 114, 32, 117,
    110, 105, 102, 111, 114, 109, 32, 37, 105, 32, 105, 110, 32, 112, 114, 111,
    103, 114, 97, 109, 32, 37, 115, 10, 0, 0, 0, 82, 95, 67, 104, 101, 99, 107,
    70, 66, 79, 58, 32, 40, 37, 115, 41, 32, 70, 114, 97, 109, 101, 98, 117,
    102, 102, 101, 114, 32, 105, 110, 99, 111, 109, 112, 108, 101, 116, 101, 44,
    32, 97, 116, 116, 97, 99, 104, 101, 100, 32, 105, 109, 97, 103, 101, 115,
    32, 109, 117, 115, 116, 32, 104, 97, 118, 101, 32, 115, 97, 109, 101, 32,
    102, 111, 114, 109, 97, 116, 10, 0, 10, 0, 0, 0, 0, 0, 0, 0, 100, 108, 105,
    103, 104, 116, 32, 115, 114, 102, 58, 37, 105, 32, 32, 99, 117, 108, 108,
    101, 100, 58, 37, 105, 32, 32, 118, 101, 114, 116, 115, 58, 37, 105, 32, 32,
    116, 114, 105, 115, 58, 37, 105, 10, 0, 0, 0, 0, 103, 108, 71, 101, 116, 86,
    101, 114, 116, 101, 120, 65, 116, 116, 114, 105, 98, 102, 118, 0, 0, 0, 0,
    0, 110, 101, 120, 116, 100, 108, 32, 37, 100, 0, 0, 0, 0, 0, 0, 0, 118, 101,
    114, 116, 101, 120, 114, 101, 109, 97, 112, 115, 104, 97, 100, 101, 114, 0,
    0, 0, 0, 0, 0, 0, 80, 114, 101, 109, 97, 116, 117, 114, 101, 32, 101, 110,
    100, 32, 111, 102, 32, 105, 110, 112, 117, 116, 32, 102, 105, 108, 101, 0,
    0, 0, 0, 0, 71, 76, 95, 83, 116, 97, 116, 101, 58, 32, 105, 110, 118, 97,
    108, 105, 100, 32, 100, 115, 116, 32, 98, 108, 101, 110, 100, 32, 115, 116,
    97, 116, 101, 32, 98, 105, 116, 115, 0, 0, 46, 46, 46, 105, 103, 110, 111,
    114, 105, 110, 103, 32, 71, 76, 95, 69, 88, 84, 95, 116, 101, 120, 116, 117,
    114, 101, 95, 101, 110, 118, 95, 97, 100, 100, 10, 0, 0, 0, 0, 0, 105, 110,
    118, 97, 108, 105, 100, 32, 98, 108, 111, 99, 107, 32, 116, 121, 112, 101,
    0, 0, 0, 0, 0, 0, 42, 83, 72, 65, 68, 69, 82, 42, 32, 37, 115, 10, 0, 0, 0,
    0, 114, 95, 101, 120, 116, 95, 102, 114, 97, 109, 101, 98, 117, 102, 102,
    101, 114, 95, 109, 117, 108, 116, 105, 115, 97, 109, 112, 108, 101, 0, 0, 0,
    42, 105, 100, 101, 110, 116, 105, 116, 121, 76, 105, 103, 104, 116, 0, 0,
    35, 100, 101, 102, 105, 110, 101, 32, 85, 83, 69, 95, 71, 79, 84, 65, 78,
    68, 65, 10, 0, 0, 0, 0, 103, 108, 85, 110, 105, 102, 111, 114, 109, 51, 102,
    118, 65, 82, 66, 0, 80, 97, 114, 115, 101, 77, 101, 115, 104, 58, 32, 98,
    97, 100, 32, 115, 105, 122, 101, 0, 0, 0, 0, 0, 48, 120, 37, 48, 50, 120,
    32, 34, 37, 115, 34, 0, 0, 0, 0, 0, 41, 0, 0, 0, 0, 0, 0, 0, 35, 35, 0, 0,
    0, 0, 0, 0, 118, 115, 112, 114, 101, 97, 100, 0, 105, 116, 101, 109, 95, 98,
    111, 116, 114, 111, 97, 109, 0, 0, 0, 0, 105, 116, 101, 109, 95, 97, 114,
    109, 111, 114, 95, 98, 111, 100, 121, 0, 68, 105, 115, 99, 111, 110, 110,
    101, 99, 116, 101, 100, 32, 102, 114, 111, 109, 32, 115, 101, 114, 118, 101,
    114, 0, 0, 0, 0, 0, 0, 0, 0, 55, 48, 0, 0, 0, 0, 0, 0, 115, 118, 95, 102,
    112, 115, 0, 0, 115, 118, 95, 112, 114, 105, 118, 97, 116, 101, 80, 97, 115,
    115, 119, 111, 114, 100, 0, 0, 0, 0, 0, 0, 67, 97, 110, 110, 111, 116, 32,
    97, 117, 116, 111, 100, 111, 119, 110, 108, 111, 97, 100, 32, 105, 100, 32,
    112, 107, 51, 32, 102, 105, 108, 101, 32, 34, 37, 115, 34, 0, 0, 0, 0, 65,
    100, 100, 101, 100, 32, 37, 115, 58, 32, 37, 115, 47, 37, 100, 10, 0, 0, 0,
    0, 0, 0, 0, 0, 94, 49, 69, 114, 114, 111, 114, 58, 32, 37, 115, 0, 0, 0, 0,
    0, 73, 110, 118, 97, 108, 105, 100, 32, 111, 112, 101, 114, 97, 116, 105,
    111, 110, 0, 0, 0, 0, 0, 0, 0, 83, 95, 83, 116, 97, 114, 116, 83, 111, 117,
    110, 100, 58, 32, 98, 97, 100, 32, 101, 110, 116, 105, 116, 121, 110, 117,
    109, 32, 37, 105, 0, 0, 87, 97, 114, 110, 105, 110, 103, 58, 32, 115, 101,
    108, 101, 99, 116, 40, 41, 32, 115, 121, 115, 99, 97, 108, 108, 32, 102, 97,
    105, 108, 101, 100, 58, 32, 37, 115, 10, 0, 0, 0, 109, 111, 100, 101, 108,
    105, 110, 100, 101, 120, 50, 0, 0, 0, 0, 0, 74, 79, 89, 51, 0, 0, 0, 0, 118,
    109, 47, 37, 115, 46, 113, 118, 109, 0, 0, 0, 0, 0, 0, 0, 94, 51, 87, 65,
    82, 78, 73, 78, 71, 58, 32, 85, 110, 115, 101, 116, 116, 105, 110, 103, 32,
    67, 86, 65, 82, 95, 82, 79, 77, 32, 99, 118, 97, 114, 32, 39, 37, 115, 39,
    44, 32, 115, 105, 110, 99, 101, 32, 105, 116, 32, 105, 115, 32, 97, 108,
    115, 111, 32, 67, 86, 65, 82, 95, 65, 82, 67, 72, 73, 86, 69, 10, 0, 45, 98,
    117, 116, 116, 111, 110, 49, 0, 0, 0, 0, 0, 0, 0, 0, 105, 110, 95, 114, 101,
    115, 116, 97, 114, 116, 0, 0, 0, 0, 0, 0, 115, 95, 115, 100, 108, 67, 104,
    97, 110, 110, 101, 108, 115, 0, 0, 0, 117, 115, 97, 103, 101, 58, 32, 99,
    111, 110, 100, 117, 109, 112, 32, 60, 102, 105, 108, 101, 110, 97, 109, 101,
    62, 10, 0, 0, 0, 0, 0, 0, 69, 82, 82, 79, 82, 58, 32, 98, 108, 111, 99, 107,
    32, 115, 105, 122, 101, 32, 100, 111, 101, 115, 32, 110, 111, 116, 32, 116,
    111, 117, 99, 104, 32, 116, 104, 101, 32, 110, 101, 120, 116, 32, 98, 108,
    111, 99, 107, 10, 0, 0, 0, 0, 0, 0, 0, 0, 105, 110, 95, 107, 101, 121, 98,
    111, 97, 114, 100, 68, 101, 98, 117, 103, 0, 0, 0, 0, 0, 0, 0, 0, 117, 110,
    101, 120, 112, 101, 99, 116, 101, 100, 32, 102, 108, 111, 97, 116, 0, 0, 0,
    0, 0, 0, 0, 0, 38, 38, 0, 0, 0, 0, 0, 0, 103, 108, 71, 101, 116, 85, 110,
    105, 102, 111, 114, 109, 76, 111, 99, 97, 116, 105, 111, 110, 0, 0, 0, 0,
    100, 101, 102, 105, 110, 101, 32, 37, 115, 32, 109, 105, 115, 115, 105, 110,
    103, 32, 112, 97, 114, 109, 115, 0, 67, 111, 117, 108, 100, 32, 110, 111,
    116, 32, 99, 114, 101, 97, 116, 101, 32, 37, 115, 10, 0, 0, 0, 0, 69, 109,
    112, 116, 121, 32, 105, 110, 112, 117, 116, 32, 102, 105, 108, 101, 0, 0, 0,
    0, 0, 0, 0, 0, 119, 98, 0, 0, 0, 0, 0, 0, 46, 46, 46, 117, 115, 105, 110,
    103, 32, 71, 76, 95, 69, 88, 84, 95, 116, 101, 120, 116, 117, 114, 101, 95,
    101, 110, 118, 95, 97, 100, 100, 10, 0, 0, 0, 0, 0, 0, 0, 0, 104, 111, 109,
    101, 100, 105, 114, 0, 87, 65, 82, 78, 73, 78, 71, 58, 32, 115, 104, 97,
    100, 101, 114, 32, 39, 37, 115, 39, 32, 104, 97, 115, 32, 105, 110, 118, 97,
    108, 105, 100, 32, 108, 105, 103, 104, 116, 109, 97, 112, 32, 105, 110, 100,
    101, 120, 32, 111, 102, 32, 37, 100, 10, 0, 0, 114, 95, 97, 114, 98, 95,
    104, 97, 108, 102, 95, 102, 108, 111, 97, 116, 95, 112, 105, 120, 101, 108,
    0, 0, 42, 115, 104, 97, 100, 111, 119, 99, 117, 98, 101, 109, 97, 112, 37,
    105, 0, 0, 0, 0, 0, 0, 0, 0, 98, 97, 108, 97, 110, 99, 101, 0, 35, 100, 101,
    102, 105, 110, 101, 32, 85, 83, 69, 95, 77, 67, 65, 85, 76, 69, 89, 10, 0,
    0, 0, 0, 103, 108, 85, 110, 105, 102, 111, 114, 109, 50, 102, 118, 65, 82,
    66, 0, 84, 114, 105, 115, 117, 114, 102, 32, 104, 97, 115, 32, 98, 97, 100,
    32, 116, 114, 105, 97, 110, 103, 108, 101, 115, 44, 32, 111, 114, 105, 103,
    105, 110, 97, 108, 108, 121, 32, 115, 104, 97, 100, 101, 114, 32, 37, 115,
    32, 37, 100, 32, 116, 114, 105, 115, 32, 37, 100, 32, 118, 101, 114, 116,
    115, 44, 32, 110, 111, 119, 32, 37, 100, 32, 116, 114, 105, 115, 10, 0, 0,
    51, 50, 0, 0, 0, 0, 0, 0, 109, 111, 100, 101, 108, 0, 0, 0, 32, 32, 0, 0, 0,
    0, 0, 0, 40, 0, 0, 0, 0, 0, 0, 0, 114, 101, 99, 117, 114, 115, 105, 118,
    101, 32, 100, 101, 102, 105, 110, 101, 32, 40, 114, 101, 109, 111, 118, 101,
    100, 32, 114, 101, 99, 117, 114, 115, 105, 111, 110, 41, 0, 0, 0, 0, 105,
    110, 100, 101, 120, 0, 0, 0, 104, 115, 112, 114, 101, 97, 100, 0, 110, 111,
    116, 98, 111, 116, 0, 0, 66, 111, 116, 77, 97, 116, 99, 104, 86, 97, 114,
    105, 97, 98, 108, 101, 58, 32, 118, 97, 114, 105, 97, 98, 108, 101, 32, 111,
    117, 116, 32, 111, 102, 32, 114, 97, 110, 103, 101, 10, 0, 0, 0, 0, 0, 0, 0,
    0, 97, 114, 101, 97, 32, 37, 100, 32, 99, 101, 110, 116, 101, 114, 32, 37,
    102, 32, 37, 102, 32, 37, 102, 32, 105, 110, 32, 115, 111, 108, 105, 100,
    63, 13, 10, 0, 0, 0, 0, 0, 114, 115, 95, 115, 116, 97, 114, 116, 119, 97,
    108, 107, 111, 102, 102, 108, 101, 100, 103, 101, 0, 0, 0, 0, 48, 0, 0, 0,
    0, 0, 0, 0, 48, 0, 0, 0, 0, 0, 0, 0, 101, 109, 112, 116, 121, 32, 99, 111,
    110, 115, 111, 108, 101, 32, 109, 101, 115, 115, 97, 103, 101, 32, 104, 101,
    97, 112, 10, 0, 0, 0, 0, 0, 114, 99, 111, 110, 80, 97, 115, 115, 119, 111,
    114, 100, 0, 0, 0, 0, 99, 108, 105, 101, 110, 116, 68, 111, 119, 110, 108,
    111, 97, 100, 58, 32, 37, 100, 32, 58, 32, 34, 37, 115, 34, 32, 99, 97, 110,
    110, 111, 116, 32, 100, 111, 119, 110, 108, 111, 97, 100, 32, 105, 100, 32,
    112, 107, 51, 32, 102, 105, 108, 101, 115, 10, 0, 69, 114, 114, 111, 114,
    58, 32, 37, 115, 32, 37, 115, 47, 37, 100, 32, 115, 117, 112, 101, 114, 115,
    101, 100, 101, 115, 32, 97, 108, 114, 101, 97, 100, 121, 32, 101, 120, 105,
    115, 116, 105, 110, 103, 32, 37, 115, 32, 37, 115, 47, 37, 100, 10, 0, 0, 0,
    123, 10, 0, 0, 0, 0, 0, 0, 94, 51, 87, 97, 114, 110, 105, 110, 103, 58, 32,
    37, 115, 0, 0, 0, 73, 110, 118, 97, 108, 105, 100, 32, 118, 97, 108, 117,
    101, 0, 0, 0, 94, 51, 87, 65, 82, 78, 73, 78, 71, 58, 32, 109, 117, 115,
    105, 99, 32, 102, 105, 108, 101, 32, 37, 115, 32, 105, 115, 32, 110, 111,
    116, 32, 50, 50, 107, 32, 115, 116, 101, 114, 101, 111, 10, 0, 0, 0, 0, 0,
    110, 101, 116, 95, 114, 101, 115, 116, 97, 114, 116, 0, 0, 0, 0, 0, 65, 65,
    83, 95, 80, 111, 105, 110, 116, 65, 114, 101, 97, 78, 117, 109, 58, 32, 97,
    97, 115, 32, 110, 111, 116, 32, 108, 111, 97, 100, 101, 100, 10, 0, 0, 0, 0,
    0, 0, 0, 111, 114, 105, 103, 105, 110, 50, 91, 49, 93, 0, 0, 0, 0, 0, 0, 74,
    79, 89, 50, 0, 0, 0, 0, 97, 114, 101, 97, 32, 37, 100, 32, 104, 97, 115, 32,
    109, 111, 114, 101, 32, 116, 104, 97, 110, 32, 49, 50, 56, 32, 114, 101, 97,
    99, 104, 97, 98, 105, 108, 105, 116, 105, 101, 115, 10, 0, 0, 0, 0, 0, 0, 0,
    37, 115, 46, 106, 115, 0, 0, 0, 69, 114, 114, 111, 114, 58, 32, 37, 115, 58,
    32, 86, 97, 114, 105, 97, 98, 108, 101, 32, 37, 115, 32, 105, 115, 32, 110,
    111, 116, 32, 117, 115, 101, 114, 32, 99, 114, 101, 97, 116, 101, 100, 46,
    10, 0, 0, 0, 0, 116, 97, 114, 103, 101, 116, 110, 97, 109, 101, 0, 0, 0, 0,
    0, 0, 43, 98, 117, 116, 116, 111, 110, 49, 0, 0, 0, 0, 0, 0, 0, 0, 112, 104,
    121, 115, 95, 103, 114, 97, 118, 105, 116, 121, 0, 0, 0, 0, 48, 0, 0, 0, 0,
    0, 0, 0, 98, 108, 111, 99, 107, 58, 37, 112, 32, 32, 32, 32, 115, 105, 122,
    101, 58, 37, 55, 105, 32, 32, 32, 32, 116, 97, 103, 58, 37, 51, 105, 10, 0,
    0, 0, 0, 0, 0, 0, 0, 37, 115, 32, 105, 115, 32, 110, 111, 116, 32, 97, 110,
    32, 65, 65, 83, 32, 102, 105, 108, 101, 10, 0, 0, 65, 65, 83, 95, 69, 110,
    116, 105, 116, 121, 77, 111, 100, 101, 108, 105, 110, 100, 101, 120, 58, 32,
    101, 110, 116, 110, 117, 109, 32, 37, 100, 32, 111, 117, 116, 32, 111, 102,
    32, 114, 97, 110, 103, 101, 10, 0, 0, 0, 99, 108, 117, 115, 116, 101, 114,
    32, 37, 100, 32, 116, 111, 117, 99, 104, 101, 100, 32, 99, 108, 117, 115,
    116, 101, 114, 32, 37, 100, 32, 97, 116, 32, 97, 114, 101, 97, 32, 37, 100,
    10, 0, 0, 0, 0, 0, 0, 0, 105, 110, 118, 97, 108, 105, 100, 32, 37, 115, 0,
    0, 0, 0, 0, 0, 86, 77, 32, 112, 114, 111, 103, 114, 97, 109, 32, 99, 111,
    117, 110, 116, 101, 114, 32, 111, 117, 116, 32, 111, 102, 32, 114, 97, 110,
    103, 101, 32, 105, 110, 32, 79, 80, 95, 67, 65, 76, 76, 0, 0, 0, 0, 0, 0,
    118, 109, 112, 114, 111, 102, 105, 108, 101, 0, 0, 0, 0, 0, 0, 0, 103, 108,
    71, 101, 116, 85, 110, 105, 102, 111, 114, 109, 105, 118, 0, 0, 67, 76, 95,
    80, 97, 114, 115, 101, 68, 111, 119, 110, 108, 111, 97, 100, 58, 32, 69,
    120, 112, 101, 99, 116, 101, 100, 32, 98, 108, 111, 99, 107, 32, 37, 100,
    44, 32, 103, 111, 116, 32, 37, 100, 10, 0, 0, 0, 0, 115, 118, 115, 46, 110,
    101, 120, 116, 83, 110, 97, 112, 115, 104, 111, 116, 69, 110, 116, 105, 116,
    105, 101, 115, 32, 119, 114, 97, 112, 112, 101, 100, 0, 0, 0, 0, 0, 0, 0, 0,
    77, 97, 120, 105, 109, 117, 109, 32, 115, 117, 112, 112, 111, 114, 116, 101,
    100, 32, 105, 109, 97, 103, 101, 32, 100, 105, 109, 101, 110, 115, 105, 111,
    110, 32, 105, 115, 32, 37, 117, 32, 112, 105, 120, 101, 108, 115, 0, 0, 69,
    88, 84, 95, 116, 101, 120, 116, 117, 114, 101, 95, 101, 110, 118, 95, 97,
    100, 100, 0, 0, 0, 0, 0, 100, 117, 115, 116, 0, 0, 0, 0, 114, 101, 99, 111,
    114, 100, 32, 60, 100, 101, 109, 111, 110, 97, 109, 101, 62, 10, 0, 0, 0, 0,
    0, 0, 114, 95, 101, 120, 116, 95, 116, 101, 120, 116, 117, 114, 101, 95,
    102, 108, 111, 97, 116, 0, 0, 0, 0, 0, 95, 110, 0, 0, 0, 0, 0, 0, 35, 100,
    101, 102, 105, 110, 101, 32, 85, 83, 69, 95, 66, 76, 73, 78, 78, 95, 70, 82,
    69, 83, 78, 69, 76, 10, 0, 0, 0, 0, 0, 0, 84, 114, 105, 101, 100, 32, 116,
    111, 32, 98, 108, 105, 116, 32, 102, 114, 111, 109, 32, 97, 32, 78, 85, 76,
    76, 32, 70, 66, 79, 33, 10, 0, 98, 114, 111, 97, 100, 99, 97, 115, 116, 58,
    32, 37, 115, 10, 0, 0, 103, 108, 85, 110, 105, 102, 111, 114, 109, 49, 102,
    118, 65, 82, 66, 0, 70, 97, 99, 101, 32, 104, 97, 115, 32, 98, 97, 100, 32,
    116, 114, 105, 97, 110, 103, 108, 101, 115, 44, 32, 111, 114, 105, 103, 105,
    110, 97, 108, 108, 121, 32, 115, 104, 97, 100, 101, 114, 32, 37, 115, 32,
    37, 100, 32, 116, 114, 105, 115, 32, 37, 100, 32, 118, 101, 114, 116, 115,
    44, 32, 110, 111, 119, 32, 37, 100, 32, 116, 114, 105, 115, 10, 0, 0, 0, 0,
    0, 43, 32, 0, 0, 0, 0, 0, 0, 63, 0, 0, 0, 0, 0, 0, 0, 83, 86, 95, 83, 101,
    116, 85, 115, 101, 114, 105, 110, 102, 111, 58, 32, 98, 97, 100, 32, 105,
    110, 100, 101, 120, 32, 37, 105, 0, 0, 0, 0, 100, 101, 102, 105, 110, 101,
    32, 110, 111, 116, 32, 116, 101, 114, 109, 105, 110, 97, 116, 101, 100, 0,
    0, 0, 110, 117, 109, 112, 114, 111, 106, 101, 99, 116, 105, 108, 101, 115,
    0, 0, 83, 86, 95, 71, 101, 116, 83, 101, 114, 118, 101, 114, 105, 110, 102,
    111, 58, 32, 98, 117, 102, 102, 101, 114, 83, 105, 122, 101, 32, 61, 61, 32,
    37, 105, 0, 0, 0, 0, 0, 0, 110, 111, 116, 115, 105, 110, 103, 108, 101, 0,
    0, 0, 0, 0, 0, 0, 101, 120, 112, 101, 99, 116, 101, 100, 32, 105, 110, 116,
    101, 103, 101, 114, 44, 32, 102, 111, 117, 110, 100, 32, 37, 115, 0, 0, 0,
    0, 0, 0, 102, 111, 117, 110, 100, 32, 97, 32, 116, 114, 105, 103, 103, 101,
    114, 95, 112, 117, 115, 104, 32, 119, 105, 116, 104, 32, 118, 101, 108, 111,
    99, 105, 116, 121, 32, 37, 102, 32, 37, 102, 32, 37, 102, 10, 0, 0, 0, 0,
    53, 48, 48, 0, 0, 0, 0, 0, 117, 105, 95, 115, 105, 110, 103, 108, 101, 80,
    108, 97, 121, 101, 114, 65, 99, 116, 105, 118, 101, 0, 0, 0, 32, 32, 32, 32,
    100, 97, 116, 97, 32, 108, 101, 110, 103, 116, 104, 32, 58, 32, 37, 55, 105,
    10, 0, 0, 115, 118, 95, 107, 105, 108, 108, 115, 101, 114, 118, 101, 114, 0,
    0, 0, 112, 114, 105, 110, 116, 10, 71, 97, 109, 101, 32, 109, 105, 115, 109,
    97, 116, 99, 104, 58, 32, 84, 104, 105, 115, 32, 105, 115, 32, 97, 32, 37,
    115, 32, 115, 101, 114, 118, 101, 114, 10, 0, 0, 0, 0, 0, 0, 0, 115, 118,
    95, 114, 101, 102, 101, 114, 101, 110, 99, 101, 100, 80, 97, 107, 78, 97,
    109, 101, 115, 0, 0, 0, 70, 105, 108, 101, 32, 34, 37, 115, 34, 32, 105,
    115, 32, 110, 111, 116, 32, 114, 101, 102, 101, 114, 101, 110, 99, 101, 100,
    32, 97, 110, 100, 32, 99, 97, 110, 110, 111, 116, 32, 98, 101, 32, 100, 111,
    119, 110, 108, 111, 97, 100, 101, 100, 46, 0, 0, 0, 66, 97, 110, 0, 0, 0, 0,
    0, 37, 115, 0, 0, 0, 0, 0, 0, 73, 110, 118, 97, 108, 105, 100, 32, 101, 110,
    117, 109, 101, 114, 97, 116, 111, 114, 0, 0, 0, 0, 0, 0, 94, 51, 87, 65, 82,
    78, 73, 78, 71, 58, 32, 99, 111, 117, 108, 100, 110, 39, 116, 32, 111, 112,
    101, 110, 32, 109, 117, 115, 105, 99, 32, 102, 105, 108, 101, 32, 37, 115,
    10, 0, 87, 65, 82, 78, 73, 78, 71, 58, 32, 67, 111, 117, 108, 100, 110, 39,
    116, 32, 98, 105, 110, 100, 32, 116, 111, 32, 97, 32, 118, 52, 32, 105, 112,
    32, 97, 100, 100, 114, 101, 115, 115, 46, 10, 0, 0, 0, 0, 0, 111, 114, 105,
    103, 105, 110, 50, 91, 48, 93, 0, 0, 0, 0, 0, 0, 74, 79, 89, 49, 0, 0, 0, 0,
    107, 105, 99, 107, 110, 117, 109, 0, 70, 83, 95, 70, 79, 112, 101, 110, 70,
    105, 108, 101, 82, 101, 97, 100, 58, 32, 37, 115, 32, 40, 102, 111, 117,
    110, 100, 32, 105, 110, 32, 39, 37, 115, 37, 99, 37, 115, 39, 41, 10, 0, 0,
    0, 0, 0, 0, 0, 85, 115, 97, 103, 101, 58, 32, 37, 115, 32, 60, 118, 97, 114,
    110, 97, 109, 101, 62, 10, 0, 0, 0, 0, 98, 111, 116, 95, 103, 114, 111, 117,
    110, 100, 111, 110, 108, 121, 0, 0, 115, 95, 97, 108, 83, 111, 117, 114, 99,
    101, 115, 0, 0, 0, 0, 0, 94, 49, 69, 82, 82, 79, 82, 58, 32, 67, 111, 117,
    108, 100, 110, 39, 116, 32, 102, 105, 110, 100, 32, 34, 102, 109, 116, 34,
    32, 99, 104, 117, 110, 107, 10, 0, 0, 0, 0, 0, 45, 98, 117, 116, 116, 111,
    110, 48, 0, 0, 0, 0, 0, 0, 0, 0, 108, 111, 97, 100, 0, 0, 0, 0, 48, 46, 56,
    0, 0, 0, 0, 0, 37, 115, 0, 0, 0, 0, 0, 0, 94, 51, 87, 65, 82, 78, 73, 78,
    71, 58, 32, 37, 115, 32, 105, 115, 32, 110, 111, 116, 32, 97, 32, 50, 50,
    107, 72, 122, 32, 97, 117, 100, 105, 111, 32, 102, 105, 108, 101, 10, 0, 0,
    0, 0, 0, 0, 0, 0, 37, 53, 100, 32, 115, 97, 109, 112, 108, 101, 98, 105,
    116, 115, 10, 0, 91, 37, 115, 93, 58, 37, 104, 117, 0, 0, 0, 0, 0, 0, 0, 0,
    103, 108, 71, 101, 116, 85, 110, 105, 102, 111, 114, 109, 102, 118, 0, 0,
    37, 105, 0, 0, 0, 0, 0, 0, 67, 76, 95, 80, 97, 114, 115, 101, 68, 111, 119,
    110, 108, 111, 97, 100, 58, 32, 73, 110, 118, 97, 108, 105, 100, 32, 115,
    105, 122, 101, 32, 37, 100, 32, 102, 111, 114, 32, 100, 111, 119, 110, 108,
    111, 97, 100, 32, 99, 104, 117, 110, 107, 0, 0, 0, 0, 77, 105, 115, 115,
    105, 110, 103, 32, 72, 117, 102, 102, 109, 97, 110, 32, 99, 111, 100, 101,
    32, 116, 97, 98, 108, 101, 32, 101, 110, 116, 114, 121, 0, 0, 0, 0, 0, 0, 0,
    0, 46, 46, 46, 71, 76, 95, 83, 51, 95, 115, 51, 116, 99, 32, 110, 111, 116,
    32, 102, 111, 117, 110, 100, 10, 0, 0, 0, 0, 0, 0, 0, 0, 110, 111, 100, 108,
    105, 103, 104, 116, 0, 0, 0, 0, 0, 0, 0, 0, 114, 95, 101, 120, 116, 95, 102,
    114, 97, 109, 101, 98, 117, 102, 102, 101, 114, 95, 111, 98, 106, 101, 99,
    116, 0, 0, 0, 0, 0, 0, 0, 0, 87, 65, 82, 78, 73, 78, 71, 58, 32, 114, 101,
    117, 115, 101, 100, 32, 105, 109, 97, 103, 101, 32, 37, 115, 32, 119, 105,
    116, 104, 32, 109, 105, 120, 101, 100, 32, 102, 108, 97, 103, 115, 32, 40,
    37, 105, 32, 118, 115, 32, 37, 105, 41, 10, 0, 0, 0, 35, 100, 101, 102, 105,
    110, 101, 32, 85, 83, 69, 95, 66, 76, 73, 78, 78, 10, 0, 0, 0, 0, 0, 0, 103,
    108, 85, 110, 105, 102, 111, 114, 109, 52, 105, 65, 82, 66, 0, 0, 66, 97,
    100, 32, 105, 110, 100, 101, 120, 32, 105, 110, 32, 102, 97, 99, 101, 32,
    115, 117, 114, 102, 97, 99, 101, 0, 0, 0, 0, 0, 0, 0, 32, 32, 73, 103, 110,
    111, 114, 101, 100, 32, 100, 101, 97, 100, 32, 107, 101, 121, 32, 39, 37,
    99, 39, 10, 0, 0, 0, 0, 0, 0, 0, 0, 58, 0, 0, 0, 0, 0, 0, 0, 100, 101, 102,
    105, 110, 101, 32, 112, 97, 114, 97, 109, 101, 116, 101, 114, 115, 32, 110,
    111, 116, 32, 116, 101, 114, 109, 105, 110, 97, 116, 101, 100, 0, 0, 0, 0,
    0, 0, 0, 0, 112, 114, 111, 106, 101, 99, 116, 105, 108, 101, 0, 0, 0, 0, 0,
    0, 110, 111, 116, 116, 101, 97, 109, 0, 105, 110, 118, 97, 108, 105, 100,
    32, 116, 111, 107, 101, 110, 32, 37, 115, 0, 0, 0, 0, 0, 0, 0, 0, 37, 115,
    37, 115, 0, 0, 0, 0, 102, 117, 110, 99, 98, 111, 98, 32, 114, 101, 97, 99,
    104, 32, 102, 114, 111, 109, 32, 97, 114, 101, 97, 32, 37, 100, 32, 116,
    111, 32, 37, 100, 10, 0, 0, 0, 0, 0, 0, 0, 114, 115, 95, 115, 116, 97, 114,
    116, 103, 114, 97, 112, 112, 108, 101, 0, 78, 111, 116, 32, 99, 111, 110,
    110, 101, 99, 116, 101, 100, 32, 116, 111, 32, 97, 32, 115, 101, 114, 118,
    101, 114, 46, 10, 0, 0, 0, 0, 0, 32, 32, 32, 32, 116, 97, 98, 108, 101, 32,
    108, 101, 110, 103, 116, 104, 58, 32, 37, 55, 105, 10, 0, 0, 83, 101, 114,
    118, 101, 114, 32, 119, 97, 115, 32, 107, 105, 108, 108, 101, 100, 0, 0, 0,
    0, 0, 0, 0, 115, 118, 95, 114, 101, 102, 101, 114, 101, 110, 99, 101, 100,
    80, 97, 107, 115, 0, 0, 0, 0, 0, 0, 0, 99, 108, 105, 101, 110, 116, 68, 111,
    119, 110, 108, 111, 97, 100, 58, 32, 37, 100, 32, 58, 32, 34, 37, 115, 34,
    32, 105, 115, 32, 110, 111, 116, 32, 114, 101, 102, 101, 114, 101, 110, 99,
    101, 100, 32, 97, 110, 100, 32, 99, 97, 110, 110, 111, 116, 32, 98, 101, 32,
    100, 111, 119, 110, 108, 111, 97, 100, 101, 100, 46, 10, 0, 0, 69, 120, 99,
    101, 112, 116, 105, 111, 110, 0, 0, 0, 0, 0, 0, 0, 83, 86, 95, 66, 111, 116,
    95, 72, 117, 110, 107, 65, 108, 108, 111, 99, 58, 32, 65, 108, 108, 111, 99,
    32, 119, 105, 116, 104, 32, 109, 97, 114, 107, 115, 32, 97, 108, 114, 101,
    97, 100, 121, 32, 115, 101, 116, 0, 0, 73, 110, 118, 97, 108, 105, 100, 32,
    110, 97, 109, 101, 0, 0, 0, 0, 87, 97, 114, 110, 105, 110, 103, 58, 32, 99,
    118, 97, 114, 32, 34, 37, 115, 34, 32, 103, 105, 118, 101, 110, 32, 105,
    110, 105, 116, 105, 97, 108, 32, 118, 97, 108, 117, 101, 115, 58, 32, 34,
    37, 115, 34, 32, 97, 110, 100, 32, 34, 37, 115, 34, 10, 0, 115, 95, 116,
    101, 115, 116, 115, 111, 117, 110, 100, 0, 0, 0, 0, 0, 110, 101, 116, 95,
    112, 111, 114, 116, 0, 0, 0, 0, 0, 0, 0, 0, 111, 114, 105, 103, 105, 110,
    50, 91, 50, 93, 0, 0, 0, 0, 0, 0, 77, 87, 72, 69, 69, 76, 68, 79, 87, 78, 0,
    0, 0, 0, 0, 0, 66, 65, 67, 75, 83, 80, 65, 67, 69, 0, 0, 0, 0, 0, 0, 0, 46,
    100, 97, 116, 0, 0, 0, 0, 37, 105, 32, 99, 118, 97, 114, 32, 105, 110, 100,
    101, 120, 101, 115, 10, 0, 0, 0, 0, 0, 0, 0, 0, 43, 98, 117, 116, 116, 111,
    110, 48, 0, 0, 0, 0, 0, 0, 0, 0, 103, 108, 73, 115, 82, 101, 110, 100, 101,
    114, 98, 117, 102, 102, 101, 114, 0, 0, 0, 0, 0, 0, 0, 0, 37, 115, 0, 0, 0,
    0, 0, 0, 72, 117, 102, 102, 109, 97, 110, 32, 99, 111, 100, 101, 32, 115,
    105, 122, 101, 32, 116, 97, 98, 108, 101, 32, 111, 118, 101, 114, 102, 108,
    111, 119, 0, 0, 0, 0, 0, 0, 0, 0, 114, 0, 0, 0, 0, 0, 0, 0, 46, 46, 46, 105,
    103, 110, 111, 114, 105, 110, 103, 32, 71, 76, 95, 83, 51, 95, 115, 51, 116,
    99, 10, 0, 110, 111, 108, 105, 103, 104, 116, 109, 97, 112, 0, 0, 0, 0, 0,
    0, 114, 95, 101, 120, 116, 95, 109, 117, 108, 116, 105, 95, 100, 114, 97,
    119, 95, 97, 114, 114, 97, 121, 115, 0, 42, 119, 104, 105, 116, 101, 0, 0,
    35, 100, 101, 102, 105, 110, 101, 32, 85, 83, 69, 95, 83, 80, 69, 67, 85,
    76, 65, 82, 77, 65, 80, 10, 0, 0, 0, 0, 0, 0, 0, 0, 103, 108, 85, 110, 105,
    102, 111, 114, 109, 51, 105, 65, 82, 66, 0, 0, 87, 65, 82, 78, 73, 78, 71,
    58, 32, 77, 65, 88, 95, 70, 65, 67, 69, 95, 80, 79, 73, 78, 84, 83, 32, 101,
    120, 99, 101, 101, 100, 101, 100, 58, 32, 37, 105, 10, 0, 0, 45, 49, 0, 0,
    0, 0, 0, 0, 59, 0, 0, 0, 0, 0, 0, 0, 116, 119, 111, 32, 116, 104, 101, 32,
    115, 97, 109, 101, 32, 100, 101, 102, 105, 110, 101, 32, 112, 97, 114, 97,
    109, 101, 116, 101, 114, 115, 0, 0, 119, 101, 97, 112, 111, 110, 105, 110,
    100, 101, 120, 0, 0, 0, 0, 0, 110, 111, 116, 102, 114, 101, 101, 0, 110,
    111, 116, 32, 97, 108, 108, 111, 119, 101, 100, 32, 116, 111, 32, 104, 97,
    118, 101, 32, 97, 100, 106, 97, 99, 101, 110, 116, 32, 118, 97, 114, 105,
    97, 98, 108, 101, 115, 0, 0, 102, 117, 110, 99, 98, 111, 98, 32, 109, 111,
    100, 101, 108, 32, 37, 100, 44, 32, 115, 116, 97, 114, 116, 32, 61, 32, 123,
    37, 49, 46, 49, 102, 44, 32, 37, 49, 46, 49, 102, 44, 32, 37, 49, 46, 49,
    102, 125, 32, 101, 110, 100, 32, 61, 32, 123, 37, 49, 46, 49, 102, 44, 32,
    37, 49, 46, 49, 102, 44, 32, 37, 49, 46, 49, 102, 125, 10, 0, 0, 0, 0, 51,
    48, 48, 0, 0, 0, 0, 0, 85, 110, 107, 110, 111, 119, 110, 32, 99, 111, 109,
    109, 97, 110, 100, 32, 34, 37, 115, 94, 55, 34, 10, 0, 32, 32, 32, 32, 99,
    111, 100, 101, 32, 108, 101, 110, 103, 116, 104, 32, 58, 32, 37, 55, 105,
    10, 0, 0, 83, 86, 95, 80, 97, 99, 107, 101, 116, 69, 118, 101, 110, 116, 58,
    32, 102, 105, 120, 105, 110, 103, 32, 117, 112, 32, 97, 32, 116, 114, 97,
    110, 115, 108, 97, 116, 101, 100, 32, 112, 111, 114, 116, 10, 0, 0, 0, 0,
    115, 118, 95, 112, 97, 107, 78, 97, 109, 101, 115, 0, 0, 0, 0, 0, 115, 95,
    115, 100, 108, 66, 105, 116, 115, 0, 0, 0, 0, 0, 0, 0, 98, 97, 115, 101,
    113, 51, 0, 0, 69, 114, 114, 111, 114, 58, 32, 37, 115, 32, 37, 115, 47, 37,
    100, 32, 115, 117, 112, 101, 114, 115, 101, 100, 101, 115, 32, 37, 115, 32,
    37, 115, 47, 37, 100, 10, 0, 0, 0, 0, 98, 111, 116, 95, 105, 110, 116, 101,
    114, 98, 114, 101, 101, 100, 119, 114, 105, 116, 101, 0, 0, 0, 0, 0, 78,
    111, 32, 101, 114, 114, 111, 114, 0, 0, 0, 0, 0, 0, 0, 0, 48, 0, 0, 0, 0, 0,
    0, 0, 87, 65, 82, 78, 73, 78, 71, 58, 32, 67, 111, 117, 108, 100, 110, 39,
    116, 32, 98, 105, 110, 100, 32, 116, 111, 32, 97, 32, 118, 54, 32, 105, 112,
    32, 97, 100, 100, 114, 101, 115, 115, 46, 10, 0, 0, 0, 0, 0, 103, 101, 110,
    101, 114, 105, 99, 49, 0, 0, 0, 0, 0, 0, 0, 0, 77, 87, 72, 69, 69, 76, 85,
    80, 0, 0, 0, 0, 0, 0, 0, 0, 46, 103, 97, 109, 101, 0, 0, 0, 10, 37, 105, 32,
    116, 111, 116, 97, 108, 32, 99, 118, 97, 114, 115, 10, 0, 0, 0, 0, 0, 0, 0,
    0, 45, 97, 116, 116, 97, 99, 107, 0, 67, 76, 95, 67, 111, 110, 102, 105,
    103, 115, 116, 114, 105, 110, 103, 77, 111, 100, 105, 102, 105, 101, 100,
    58, 32, 98, 97, 100, 32, 105, 110, 100, 101, 120, 32, 37, 105, 0, 0, 0, 103,
    108, 71, 101, 116, 82, 101, 110, 100, 101, 114, 98, 117, 102, 102, 101, 114,
    80, 97, 114, 97, 109, 101, 116, 101, 114, 105, 118, 0, 0, 0, 0, 70, 114, 97,
    99, 116, 105, 111, 110, 97, 108, 32, 115, 97, 109, 112, 108, 105, 110, 103,
    32, 110, 111, 116, 32, 105, 109, 112, 108, 101, 109, 101, 110, 116, 101,
    100, 32, 121, 101, 116, 0, 99, 108, 95, 100, 111, 119, 110, 108, 111, 97,
    100, 83, 105, 122, 101, 0, 46, 46, 46, 117, 115, 105, 110, 103, 32, 71, 76,
    95, 83, 51, 95, 115, 51, 116, 99, 10, 0, 0, 0, 0, 112, 111, 105, 110, 116,
    108, 105, 103, 104, 116, 0, 0, 0, 0, 0, 0, 114, 95, 102, 117, 108, 108, 115,
    99, 114, 101, 101, 110, 0, 0, 0, 0, 114, 95, 101, 120, 116, 95, 100, 114,
    97, 119, 95, 114, 97, 110, 103, 101, 95, 101, 108, 101, 109, 101, 110, 116,
    115, 0, 0, 0, 0, 0, 0, 0, 87, 65, 82, 78, 73, 78, 71, 58, 32, 37, 115, 32,
    110, 111, 116, 32, 112, 114, 101, 115, 101, 110, 116, 44, 32, 117, 115, 105,
    110, 103, 32, 37, 115, 32, 105, 110, 115, 116, 101, 97, 100, 10, 0, 0, 0, 0,
    0, 0, 35, 100, 101, 102, 105, 110, 101, 32, 85, 83, 69, 95, 80, 65, 82, 65,
    76, 76, 65, 88, 77, 65, 80, 10, 0, 0, 0, 0, 0, 0, 0, 0, 103, 108, 85, 110,
    105, 102, 111, 114, 109, 50, 105, 65, 82, 66, 0, 0, 83, 104, 97, 100, 101,
    114, 70, 111, 114, 83, 104, 97, 100, 101, 114, 78, 117, 109, 58, 32, 98, 97,
    100, 32, 110, 117, 109, 32, 37, 105, 0, 0, 114, 95, 109, 111, 100, 101, 0,
    0, 44, 0, 0, 0, 0, 0, 0, 0, 105, 110, 118, 97, 108, 105, 100, 32, 100, 101,
    102, 105, 110, 101, 32, 112, 97, 114, 97, 109, 101, 116, 101, 114, 0, 0, 0,
    0, 0, 0, 0, 0, 108, 101, 118, 101, 108, 0, 0, 0, 105, 116, 101, 109, 32, 37,
    115, 32, 114, 101, 97, 99, 104, 97, 98, 108, 101, 32, 102, 114, 111, 109,
    32, 106, 117, 109, 112, 112, 97, 100, 32, 97, 114, 101, 97, 32, 37, 100, 13,
    10, 0, 0, 0, 0, 0, 0, 0, 0, 99, 97, 110, 39, 116, 32, 104, 97, 118, 101, 32,
    109, 111, 114, 101, 32, 116, 104, 97, 110, 32, 37, 100, 32, 109, 97, 116,
    99, 104, 32, 118, 97, 114, 105, 97, 98, 108, 101, 115, 0, 101, 120, 112,
    101, 99, 116, 101, 100, 32, 117, 110, 115,
  ],
  "i8",
  ALLOC_NONE,
  Runtime.GLOBAL_BASE + 112644
);
/* memory initializer */ allocate(
  [
    105, 103, 110, 101, 100, 32, 118, 97, 108, 117, 101, 44, 32, 102, 111, 117,
    110, 100, 32, 37, 115, 0, 0, 0, 0, 0, 0, 0, 115, 112, 97, 119, 110, 102,
    108, 97, 103, 115, 0, 0, 0, 0, 0, 0, 114, 115, 95, 115, 116, 97, 114, 116,
    99, 114, 111, 117, 99, 104, 0, 0, 115, 118, 95, 99, 104, 101, 97, 116, 115,
    0, 0, 0, 0, 0, 0, 0, 105, 110, 116, 101, 114, 112, 114, 101, 116, 101, 100,
    10, 0, 0, 0, 0, 105, 110, 102, 111, 82, 101, 115, 112, 111, 110, 115, 101,
    10, 37, 115, 0, 108, 111, 103, 102, 105, 108, 101, 0, 115, 118, 95, 112, 97,
    107, 115, 0, 112, 107, 51, 0, 0, 0, 0, 0, 69, 114, 114, 111, 114, 58, 32,
    67, 97, 110, 32, 98, 97, 110, 32, 112, 108, 97, 121, 101, 114, 115, 32, 99,
    111, 110, 110, 101, 99, 116, 101, 100, 32, 118, 105, 97, 32, 116, 104, 101,
    32, 105, 110, 116, 101, 114, 110, 101, 116, 32, 111, 110, 108, 121, 46, 10,
    0, 0, 0, 0, 0, 0, 0, 0, 50, 48, 0, 0, 0, 0, 0, 0, 94, 49, 69, 82, 82, 79,
    82, 58, 32, 67, 97, 110, 39, 116, 32, 102, 105, 108, 108, 32, 115, 111, 117,
    110, 100, 32, 98, 117, 102, 102, 101, 114, 32, 102, 111, 114, 32, 37, 115,
    32, 45, 32, 37, 115, 10, 0, 0, 0, 115, 95, 115, 104, 111, 119, 0, 0, 110,
    101, 116, 95, 112, 111, 114, 116, 54, 0, 0, 0, 0, 0, 0, 0, 108, 111, 111,
    112, 83, 111, 117, 110, 100, 0, 0, 0, 0, 0, 0, 0, 77, 79, 85, 83, 69, 53, 0,
    0, 70, 83, 95, 70, 79, 112, 101, 110, 70, 105, 108, 101, 82, 101, 97, 100,
    58, 32, 37, 115, 32, 40, 102, 111, 117, 110, 100, 32, 105, 110, 32, 39, 37,
    115, 39, 41, 10, 0, 0, 0, 32, 37, 115, 32, 34, 37, 115, 34, 10, 0, 0, 0, 0,
    0, 0, 0, 43, 97, 116, 116, 97, 99, 107, 0, 103, 108, 66, 105, 110, 100, 82,
    101, 110, 100, 101, 114, 98, 117, 102, 102, 101, 114, 0, 0, 0, 0, 0, 0, 79,
    117, 116, 112, 117, 116, 32, 102, 105, 108, 101, 32, 119, 114, 105, 116,
    101, 32, 101, 114, 114, 111, 114, 32, 45, 45, 45, 32, 111, 117, 116, 32,
    111, 102, 32, 100, 105, 115, 107, 32, 115, 112, 97, 99, 101, 63, 0, 0, 115,
    116, 111, 112, 100, 108, 0, 0, 71, 76, 95, 83, 51, 95, 115, 51, 116, 99, 0,
    0, 0, 0, 0, 0, 67, 98, 117, 102, 95, 69, 120, 101, 99, 117, 116, 101, 84,
    101, 120, 116, 58, 32, 69, 88, 69, 67, 95, 78, 79, 87, 32, 99, 97, 108, 108,
    101, 100, 32, 97, 110, 32, 97, 115, 121, 110, 99, 32, 104, 97, 110, 100,
    108, 101, 114, 0, 0, 0, 0, 0, 0, 110, 111, 100, 114, 97, 119, 0, 0, 114, 95,
    101, 120, 116, 95, 116, 101, 120, 116, 117, 114, 101, 95, 101, 110, 118, 95,
    97, 100, 100, 0, 0, 0, 37, 115, 46, 37, 115, 0, 0, 0, 35, 100, 101, 102,
    105, 110, 101, 32, 85, 83, 69, 95, 86, 69, 82, 84, 95, 84, 65, 78, 71, 69,
    78, 84, 95, 83, 80, 65, 67, 69, 10, 0, 103, 108, 85, 110, 105, 102, 111,
    114, 109, 49, 105, 65, 82, 66, 0, 0, 46, 46, 46, 108, 111, 97, 100, 101,
    100, 32, 37, 100, 32, 102, 97, 99, 101, 115, 44, 32, 37, 105, 32, 109, 101,
    115, 104, 101, 115, 44, 32, 37, 105, 32, 116, 114, 105, 115, 117, 114, 102,
    115, 44, 32, 37, 105, 32, 102, 108, 97, 114, 101, 115, 10, 0, 0, 97, 114,
    101, 97, 32, 62, 61, 32, 99, 109, 46, 110, 117, 109, 65, 114, 101, 97, 115,
    0, 0, 0, 0, 0, 114, 95, 99, 117, 115, 116, 111, 109, 104, 101, 105, 103,
    104, 116, 0, 0, 46, 0, 0, 0, 0, 0, 0, 0, 101, 120, 112, 101, 99, 116, 101,
    100, 32, 100, 101, 102, 105, 110, 101, 32, 112, 97, 114, 97, 109, 101, 116,
    101, 114, 0, 0, 0, 0, 0, 0, 0, 110, 117, 109, 98, 101, 114, 0, 0, 105, 116,
    101, 109, 32, 37, 115, 32, 119, 105, 116, 104, 111, 117, 116, 32, 111, 114,
    105, 103, 105, 110, 10, 0, 102, 117, 110, 99, 95, 98, 111, 98, 98, 105, 110,
    103, 32, 119, 105, 116, 104, 32, 105, 110, 118, 97, 108, 105, 100, 32, 109,
    111, 100, 101, 108, 32, 110, 117, 109, 98, 101, 114, 10, 0, 114, 115, 95,
    98, 97, 114, 114, 105, 101, 114, 106, 117, 109, 112, 0, 0, 100, 105, 115,
    99, 111, 110, 110, 101, 99, 116, 0, 0, 0, 0, 0, 0, 99, 111, 109, 112, 105,
    108, 101, 100, 32, 111, 110, 32, 108, 111, 97, 100, 10, 0, 0, 0, 0, 0, 0, 0,
    103, 97, 109, 101, 0, 0, 0, 0, 115, 118, 95, 112, 117, 114, 101, 0, 62, 62,
    61, 0, 0, 0, 0, 0, 67, 108, 105, 112, 87, 105, 110, 100, 105, 110, 103, 58,
    32, 112, 111, 105, 110, 116, 115, 32, 101, 120, 99, 101, 101, 100, 101, 100,
    32, 101, 115, 116, 105, 109, 97, 116, 101, 0, 0, 0, 37, 115, 0, 0, 0, 0, 0,
    0, 69, 114, 114, 111, 114, 58, 32, 80, 108, 97, 121, 101, 114, 110, 117,
    109, 32, 37, 115, 32, 100, 111, 101, 115, 32, 110, 111, 116, 32, 101, 120,
    105, 115, 116, 46, 10, 0, 0, 0, 0, 98, 111, 116, 95, 105, 110, 116, 101,
    114, 98, 114, 101, 101, 100, 99, 121, 99, 108, 101, 0, 0, 0, 0, 0, 94, 49,
    69, 82, 82, 79, 82, 58, 32, 79, 117, 116, 32, 111, 102, 32, 109, 101, 109,
    111, 114, 121, 32, 108, 111, 97, 100, 105, 110, 103, 32, 37, 115, 10, 0, 0,
    0, 0, 0, 0, 48, 46, 48, 53, 0, 0, 0, 0, 78, 69, 84, 95, 79, 112, 101, 110,
    83, 111, 99, 107, 115, 58, 32, 114, 101, 108, 97, 121, 32, 97, 100, 100,
    114, 101, 115, 115, 32, 105, 115, 32, 110, 111, 116, 32, 73, 80, 86, 52, 58,
    32, 37, 105, 10, 0, 0, 0, 111, 116, 104, 101, 114, 69, 110, 116, 105, 116,
    121, 78, 117, 109, 50, 0, 77, 79, 85, 83, 69, 52, 0, 0, 67, 111, 117, 108,
    100, 110, 39, 116, 32, 111, 112, 101, 110, 32, 37, 115, 0, 0, 0, 0, 0, 0, 0,
    0, 63, 0, 0, 0, 0, 0, 0, 0, 45, 115, 112, 101, 101, 100, 0, 0, 87, 65, 82,
    78, 73, 78, 71, 58, 32, 67, 77, 95, 65, 100, 100, 70, 97, 99, 101, 116, 66,
    101, 118, 101, 108, 115, 46, 46, 46, 32, 105, 110, 118, 97, 108, 105, 100,
    32, 98, 101, 118, 101, 108, 10, 0, 0, 0, 0, 103, 108, 68, 101, 108, 101,
    116, 101, 82, 101, 110, 100, 101, 114, 98, 117, 102, 102, 101, 114, 115, 0,
    0, 0, 73, 110, 112, 117, 116, 32, 102, 105, 108, 101, 32, 114, 101, 97, 100,
    32, 101, 114, 114, 111, 114, 0, 0, 0, 83, 101, 114, 118, 101, 114, 32, 115,
    101, 110, 100, 105, 110, 103, 32, 100, 111, 119, 110, 108, 111, 97, 100, 44,
    32, 98, 117, 116, 32, 110, 111, 32, 100, 111, 119, 110, 108, 111, 97, 100,
    32, 119, 97, 115, 32, 114, 101, 113, 117, 101, 115, 116, 101, 100, 10, 0,
    46, 46, 46, 71, 76, 95, 69, 88, 84, 95, 116, 101, 120, 116, 117, 114, 101,
    95, 99, 111, 109, 112, 114, 101, 115, 115, 105, 111, 110, 95, 115, 51, 116,
    99, 32, 110, 111, 116, 32, 102, 111, 117, 110, 100, 10, 0, 0, 0, 77, 97,
    112, 32, 119, 105, 116, 104, 32, 110, 111, 32, 109, 111, 100, 101, 108, 115,
    0, 0, 0, 0, 0, 0, 110, 111, 115, 116, 101, 112, 115, 0, 114, 95, 101, 120,
    116, 95, 99, 111, 109, 112, 105, 108, 101, 100, 95, 118, 101, 114, 116, 101,
    120, 95, 97, 114, 114, 97, 121, 0, 0, 0, 0, 0, 99, 111, 100, 101, 47, 114,
    101, 110, 100, 101, 114, 101, 114, 103, 108, 50, 47, 116, 114, 95, 105, 109,
    97, 103, 101, 46, 99, 0, 0, 0, 0, 0, 35, 100, 101, 102, 105, 110, 101, 32,
    85, 83, 69, 95, 84, 82, 73, 65, 67, 69, 95, 79, 82, 69, 78, 95, 78, 65, 89,
    65, 82, 10, 0, 0, 103, 108, 85, 110, 105, 102, 111, 114, 109, 52, 102, 65,
    82, 66, 0, 0, 66, 97, 100, 32, 115, 117, 114, 102, 97, 99, 101, 84, 121,
    112, 101, 0, 114, 95, 99, 117, 115, 116, 111, 109, 119, 105, 100, 116, 104,
    0, 0, 0, 60, 0, 0, 0, 0, 0, 0, 0, 114, 101, 100, 101, 102, 105, 110, 105,
    116, 105, 111, 110, 32, 111, 102, 32, 37, 115, 0, 0, 0, 0, 0, 0, 98, 111,
    117, 110, 99, 101, 115, 116, 111, 112, 0, 0, 0, 0, 0, 0, 101, 110, 116, 105,
    116, 121, 32, 37, 115, 32, 117, 110, 107, 110, 111, 119, 110, 32, 105, 116,
    101, 109, 13, 10, 0, 0, 0, 0, 0, 0, 0, 0, 102, 117, 110, 99, 95, 98, 111,
    98, 98, 105, 110, 103, 32, 119, 105, 116, 104, 111, 117, 116, 32, 109, 111,
    100, 101, 108, 10, 0, 0, 0, 0, 0, 53, 48, 0, 0, 0, 0, 0, 0, 114, 97, 116,
    101, 120, 58, 32, 37, 102, 44, 32, 114, 97, 116, 101, 121, 58, 32, 37, 102,
    44, 32, 112, 111, 119, 120, 58, 32, 37, 102, 44, 32, 112, 111, 119, 121, 58,
    32, 37, 102, 10, 0, 0, 0, 0, 0, 0, 0, 99, 108, 95, 100, 111, 119, 110, 108,
    111, 97, 100, 78, 97, 109, 101, 0, 110, 97, 116, 105, 118, 101, 10, 0, 102,
    115, 95, 103, 97, 109, 101, 0, 115, 118, 95, 115, 101, 114, 118, 101, 114,
    105, 100, 0, 0, 0, 0, 0, 71, 111, 105, 110, 103, 32, 102, 114, 111, 109, 32,
    67, 83, 95, 80, 82, 73, 77, 69, 68, 32, 116, 111, 32, 67, 83, 95, 65, 67,
    84, 73, 86, 69, 32, 102, 111, 114, 32, 37, 115, 10, 0, 0, 0, 0, 0, 0, 0, 69,
    114, 114, 111, 114, 58, 32, 77, 97, 120, 105, 109, 117, 109, 32, 110, 117,
    109, 98, 101, 114, 32, 111, 102, 32, 98, 97, 110, 115, 47, 101, 120, 99,
    101, 112, 116, 105, 111, 110, 115, 32, 101, 120, 99, 101, 101, 100, 101,
    100, 46, 10, 0, 0, 0, 0, 0, 49, 48, 0, 0, 0, 0, 0, 0, 32, 32, 65, 118, 97,
    105, 108, 97, 98, 108, 101, 32, 68, 101, 118, 105, 99, 101, 115, 58, 10, 37,
    115, 0, 115, 95, 109, 105, 120, 80, 114, 101, 83, 116, 101, 112, 0, 0, 0, 0,
    78, 69, 84, 95, 79, 112, 101, 110, 83, 111, 99, 107, 115, 58, 32, 114, 101,
    113, 117, 101, 115, 116, 32, 100, 101, 110, 105, 101, 100, 58, 32, 37, 105,
    10, 0, 0, 0, 0, 0, 0, 109, 111, 100, 101, 108, 105, 110, 100, 101, 120, 0,
    0, 0, 0, 0, 0, 77, 79, 85, 83, 69, 51, 0, 0, 117, 105, 46, 113, 118, 109, 0,
    0, 67, 0, 0, 0, 0, 0, 0, 0, 118, 105, 100, 95, 114, 101, 115, 116, 97, 114,
    116, 0, 0, 0, 0, 0, 43, 115, 112, 101, 101, 100, 0, 0, 90, 95, 67, 104, 101,
    99, 107, 72, 101, 97, 112, 58, 32, 116, 119, 111, 32, 99, 111, 110, 115,
    101, 99, 117, 116, 105, 118, 101, 32, 102, 114, 101, 101, 32, 98, 108, 111,
    99, 107, 115, 0, 0, 0, 0, 0, 0, 0, 0, 103, 108, 67, 114, 101, 97, 116, 101,
    80, 114, 111, 103, 114, 97, 109, 0, 100, 101, 98, 117, 103, 103, 114, 97,
    112, 104, 0, 0, 0, 0, 0, 0, 103, 108, 71, 101, 110, 82, 101, 110, 100, 101,
    114, 98, 117, 102, 102, 101, 114, 115, 0, 0, 0, 0, 0, 0, 102, 105, 108, 101,
    32, 37, 115, 44, 32, 108, 105, 110, 101, 32, 37, 100, 58, 32, 37, 115, 10,
    0, 0, 0, 68, 105, 100, 110, 39, 116, 32, 101, 120, 112, 101, 99, 116, 32,
    109, 111, 114, 101, 32, 116, 104, 97, 110, 32, 111, 110, 101, 32, 115, 99,
    97, 110, 0, 0, 0, 0, 0, 0, 0, 0, 67, 76, 95, 80, 97, 114, 115, 101, 71, 97,
    109, 101, 115, 116, 97, 116, 101, 58, 32, 98, 97, 100, 32, 99, 111, 109,
    109, 97, 110, 100, 32, 98, 121, 116, 101, 0, 0, 0, 0, 0, 46, 46, 46, 105,
    103, 110, 111, 114, 105, 110, 103, 32, 71, 76, 95, 69, 88, 84, 95, 116, 101,
    120, 116, 117, 114, 101, 95, 99, 111, 109, 112, 114, 101, 115, 115, 105,
    111, 110, 95, 115, 51, 116, 99, 10, 0, 0, 0, 0, 102, 108, 101, 115, 104, 0,
    0, 0, 114, 95, 101, 120, 116, 95, 109, 117, 108, 116, 105, 116, 101, 120,
    116, 117, 114, 101, 0, 0, 0, 0, 0, 0, 82, 95, 67, 114, 101, 97, 116, 101,
    73, 109, 97, 103, 101, 58, 32, 77, 65, 88, 95, 68, 82, 65, 87, 73, 77, 65,
    71, 69, 83, 32, 104, 105, 116, 0, 0, 0, 0, 0, 0, 0, 35, 100, 101, 102, 105,
    110, 101, 32, 85, 83, 69, 95, 79, 82, 69, 78, 95, 78, 65, 89, 65, 82, 10, 0,
    45, 45, 45, 45, 45, 45, 45, 32, 70, 66, 79, 95, 83, 104, 117, 116, 100, 111,
    119, 110, 32, 45, 45, 45, 45, 45, 45, 45, 10, 0, 0, 0, 103, 108, 85, 110,
    105, 102, 111, 114, 109, 51, 102, 65, 82, 66, 0, 0, 109, 97, 112, 115, 47,
    37, 115, 47, 118, 101, 114, 116, 108, 105, 103, 104, 116, 46, 114, 97, 119,
    0, 0, 0, 66, 111, 103, 117, 115, 32, 98, 117, 102, 102, 101, 114, 32, 99,
    111, 110, 116, 114, 111, 108, 32, 109, 111, 100, 101, 0, 0, 0, 0, 0, 0, 0,
    37, 100, 0, 0, 0, 0, 0, 0, 62, 0, 0, 0, 0, 0, 0, 0, 99, 97, 110, 39, 116,
    32, 114, 101, 100, 101, 102, 105, 110, 101, 32, 37, 115, 0, 0, 0, 0, 0, 0,
    0, 98, 111, 117, 110, 99, 101, 102, 114, 105, 99, 0, 0, 0, 0, 0, 0, 115,
    112, 97, 119, 110, 102, 108, 97, 103, 115, 0, 0, 0, 0, 0, 0, 124, 0, 0, 0,
    0, 0, 0, 0, 99, 104, 97, 114, 97, 99, 116, 101, 114, 105, 115, 116, 105, 99,
    32, 37, 100, 32, 105, 115, 32, 110, 111, 116, 32, 97, 32, 115, 116, 114,
    105, 110, 103, 10, 0, 0, 0, 0, 0, 0, 108, 111, 103, 0, 0, 0, 0, 0, 102, 117,
    110, 99, 95, 98, 111, 98, 98, 105, 110, 103, 0, 0, 0, 0, 114, 115, 95, 116,
    101, 108, 101, 112, 111, 114, 116, 0, 0, 0, 0, 0, 49, 0, 0, 0, 0, 0, 0, 0,
    37, 115, 32, 58, 32, 0, 0, 0, 109, 97, 120, 80, 105, 110, 103, 0, 115, 118,
    95, 99, 104, 101, 97, 116, 115, 0, 0, 0, 0, 0, 0, 0, 71, 111, 105, 110, 103,
    32, 116, 111, 32, 67, 83, 95, 90, 79, 77, 66, 73, 69, 32, 102, 111, 114, 32,
    37, 115, 10, 0, 0, 0, 0, 0, 0, 46, 46, 46, 115, 101, 116, 116, 105, 110,
    103, 32, 109, 111, 100, 101, 32, 37, 100, 58, 0, 0, 0, 0, 0, 85, 115, 97,
    103, 101, 58, 32, 37, 115, 32, 40, 105, 112, 91, 47, 115, 117, 98, 110, 101,
    116, 93, 32, 124, 32, 99, 108, 105, 101, 110, 116, 110, 117, 109, 32, 91,
    115, 117, 98, 110, 101, 116, 93, 41, 10, 0, 0, 0, 98, 111, 116, 95, 105,
    110, 116, 101, 114, 98, 114, 101, 101, 100, 98, 111, 116, 115, 0, 0, 0, 0,
    0, 0, 32, 32, 68, 101, 118, 105, 99, 101, 58, 32, 32, 32, 32, 32, 32, 32,
    32, 32, 37, 115, 10, 0, 0, 0, 48, 46, 50, 0, 0, 0, 0, 0, 78, 69, 84, 95, 79,
    112, 101, 110, 83, 111, 99, 107, 115, 58, 32, 97, 117, 116, 104, 101, 110,
    116, 105, 99, 97, 116, 105, 111, 110, 32, 102, 97, 105, 108, 101, 100, 10,
    0, 0, 0, 99, 111, 100, 101, 47, 114, 101, 110, 100, 101, 114, 101, 114, 103,
    108, 50, 47, 116, 114, 95, 118, 98, 111, 46, 99, 0, 0, 0, 0, 0, 0, 0, 112,
    111, 119, 101, 114, 117, 112, 115, 0, 0, 0, 0, 0, 0, 0, 0, 77, 79, 85, 83,
    69, 50, 0, 0, 45, 45, 45, 32, 82, 66, 95, 83, 117, 114, 102, 97, 99, 101,
    86, 66, 79, 77, 68, 86, 77, 101, 115, 104, 32, 45, 45, 45, 10, 0, 0, 0, 99,
    103, 97, 109, 101, 46, 113, 118, 109, 0, 0, 0, 0, 0, 0, 0, 67, 108, 105,
    112, 83, 107, 121, 80, 111, 108, 121, 103, 111, 110, 58, 32, 77, 65, 88, 95,
    67, 76, 73, 80, 95, 86, 69, 82, 84, 83, 0, 0, 76, 0, 0, 0, 0, 0, 0, 0, 45,
    109, 111, 118, 101, 114, 105, 103, 104, 116, 0, 0, 0, 0, 0, 0, 115, 118, 99,
    95, 99, 111, 110, 102, 105, 103, 115, 116, 114, 105, 110, 103, 0, 0, 0, 0,
    0, 0, 0, 0, 99, 108, 46, 115, 110, 97, 112, 46, 115, 101, 114, 118, 101,
    114, 84, 105, 109, 101, 32, 60, 32, 99, 108, 46, 111, 108, 100, 70, 114, 97,
    109, 101, 83, 101, 114, 118, 101, 114, 84, 105, 109, 101, 0, 0, 0, 0, 0, 0,
    90, 95, 67, 104, 101, 99, 107, 72, 101, 97, 112, 58, 32, 110, 101, 120, 116,
    32, 98, 108, 111, 99, 107, 32, 100, 111, 101, 115, 110, 39, 116, 32, 104,
    97, 118, 101, 32, 112, 114, 111, 112, 101, 114, 32, 98, 97, 99, 107, 32,
    108, 105, 110, 107, 0, 0, 0, 112, 111, 114, 116, 97, 108, 0, 0, 65, 117,
    116, 111, 115, 112, 114, 105, 116, 101, 32, 115, 104, 97, 100, 101, 114, 32,
    37, 115, 32, 104, 97, 100, 32, 111, 100, 100, 32, 105, 110, 100, 101, 120,
    32, 99, 111, 117, 110, 116, 10, 0, 0, 0, 0, 0, 0, 0, 45, 45, 45, 45, 45, 45,
    45, 45, 45, 45, 10, 0, 0, 0, 0, 0, 82, 69, 95, 65, 100, 100, 82, 101, 102,
    69, 110, 116, 105, 116, 121, 84, 111, 83, 99, 101, 110, 101, 58, 32, 98, 97,
    100, 32, 114, 101, 84, 121, 112, 101, 32, 37, 105, 0, 0, 0, 82, 95, 76, 111,
    97, 100, 73, 81, 77, 58, 32, 37, 115, 32, 104, 97, 115, 32, 109, 111, 114,
    101, 32, 116, 104, 97, 110, 32, 37, 105, 32, 118, 101, 114, 116, 115, 32,
    111, 110, 32, 37, 115, 32, 40, 37, 105, 41, 46, 10, 0, 0, 0, 0, 0, 0, 0, 82,
    95, 82, 101, 103, 105, 115, 116, 101, 114, 77, 68, 82, 58, 32, 99, 111, 117,
    108, 100, 110, 39, 116, 32, 108, 111, 97, 100, 32, 109, 100, 114, 32, 102,
    105, 108, 101, 32, 37, 115, 10, 0, 0, 0, 0, 0, 0, 0, 82, 95, 65, 100, 100,
    69, 110, 116, 105, 116, 121, 83, 117, 114, 102, 97, 99, 101, 115, 58, 32,
    66, 97, 100, 32, 109, 111, 100, 101, 108, 116, 121, 112, 101, 0, 0, 0, 0, 0,
    0, 103, 108, 73, 115, 66, 117, 102, 102, 101, 114, 0, 0, 0, 0, 0, 0, 87,
    114, 105, 116, 101, 32, 116, 111, 32, 69, 77, 83, 32, 102, 97, 105, 108,
    101, 100, 0, 0, 0, 0, 0, 66, 97, 115, 101, 108, 105, 110, 101, 32, 110, 117,
    109, 98, 101, 114, 32, 111, 117, 116, 32, 111, 102, 32, 114, 97, 110, 103,
    101, 58, 32, 37, 105, 0, 0, 0, 0, 0, 0, 0, 0, 46, 46, 46, 117, 115, 105,
    110, 103, 32, 71, 76, 95, 69, 88, 84, 95, 116, 101, 120, 116, 117, 114, 101,
    95, 99, 111, 109, 112, 114, 101, 115, 115, 105, 111, 110, 95, 115, 51, 116,
    99, 10, 0, 0, 0, 0, 0, 0, 0, 109, 101, 116, 97, 108, 115, 116, 101, 112,
    115, 0, 0, 0, 0, 0, 0, 115, 97, 121, 32, 37, 115, 0, 0, 48, 0, 0, 0, 0, 0,
    0, 0, 42, 108, 105, 103, 104, 116, 109, 97, 112, 0, 0, 0, 0, 0, 0, 0, 35,
    100, 101, 102, 105, 110, 101, 32, 85, 83, 69, 95, 78, 79, 82, 77, 65, 76,
    77, 65, 80, 10, 0, 0, 95, 114, 101, 110, 100, 101, 114, 67, 117, 98, 101,
    70, 98, 111, 0, 0, 103, 108, 85, 110, 105, 102, 111, 114, 109, 50, 102, 65,
    82, 66, 0, 0, 42, 37, 100, 0, 0, 0, 0, 0, 105, 111, 113, 51, 46, 112, 105,
    100, 0, 0, 0, 0, 0, 0, 0, 0, 113, 117, 105, 116, 32, 67, 108, 111, 115, 101,
    100, 32, 119, 105, 110, 100, 111, 119, 10, 0, 0, 0, 0, 0, 33, 0, 0, 0, 0, 0,
    0, 0, 101, 120, 112, 101, 99, 116, 101, 100, 32, 110, 97, 109, 101, 32, 97,
    102, 116, 101, 114, 32, 35, 100, 101, 102, 105, 110, 101, 44, 32, 102, 111,
    117, 110, 100, 32, 37, 115, 0, 0, 0, 98, 111, 117, 110, 99, 101, 0, 0, 103,
    114, 97, 112, 112, 108, 101, 111, 102, 102, 0, 0, 0, 0, 0, 0, 105, 116, 101,
    109, 32, 37, 115, 32, 104, 97, 115, 32, 109, 111, 100, 101, 108, 105, 110,
    100, 101, 120, 32, 48, 0, 0, 0, 0, 0, 0, 0, 0, 99, 97, 110, 110, 111, 116,
    32, 98, 111, 117, 110, 100, 32, 99, 104, 97, 114, 97, 99, 116, 101, 114,
    105, 115, 116, 105, 99, 32, 37, 100, 32, 98, 101, 116, 119, 101, 101, 110,
    32, 37, 100, 32, 97, 110, 100, 32, 37, 100, 10, 0, 0, 0, 0, 0, 0, 0, 104,
    101, 105, 103, 104, 116, 0, 0, 114, 115, 95, 119, 97, 116, 101, 114, 106,
    117, 109, 112, 0, 0, 0, 0, 114, 95, 117, 105, 70, 117, 108, 108, 83, 99,
    114, 101, 101, 110, 0, 0, 82, 101, 103, 105, 115, 116, 101, 114, 101, 100,
    32, 118, 105, 114, 116, 117, 97, 108, 32, 109, 97, 99, 104, 105, 110, 101,
    115, 58, 10, 0, 0, 0, 109, 105, 110, 80, 105, 110, 103, 0, 71, 76, 95, 83,
    84, 65, 67, 75, 95, 79, 86, 69, 82, 70, 76, 79, 87, 0, 0, 0, 0, 0, 0, 0, 49,
    0, 0, 0, 0, 0, 0, 0, 80, 67, 88, 32, 109, 105, 115, 115, 105, 110, 103, 32,
    112, 97, 108, 101, 116, 116, 101, 58, 32, 37, 115, 10, 0, 0, 0, 0, 0, 0, 0,
    0, 76, 111, 97, 100, 84, 71, 65, 58, 32, 79, 110, 108, 121, 32, 51, 50, 32,
    111, 114, 32, 50, 52, 32, 98, 105, 116, 32, 105, 109, 97, 103, 101, 115, 32,
    115, 117, 112, 112, 111, 114, 116, 101, 100, 32, 40, 110, 111, 32, 99, 111,
    108, 111, 114, 109, 97, 112, 115, 41, 0, 0, 0, 0, 0, 0, 69, 114, 114, 111,
    114, 58, 32, 73, 110, 118, 97, 108, 105, 100, 32, 98, 97, 110, 32, 110, 117,
    109, 98, 101, 114, 32, 103, 105, 118, 101, 110, 10, 0, 0, 0, 0, 0, 0, 0, 0,
    76, 111, 97, 100, 66, 77, 80, 58, 32, 104, 101, 97, 100, 101, 114, 32, 115,
    105, 122, 101, 32, 100, 111, 101, 115, 32, 110, 111, 116, 32, 109, 97, 116,
    99, 104, 32, 102, 105, 108, 101, 32, 115, 105, 122, 101, 32, 40, 37, 117,
    32, 118, 115, 46, 32, 37, 117, 41, 32, 40, 37, 115, 41, 0, 0, 37, 115, 0, 0,
    0, 0, 0, 0, 32, 32, 65, 76, 67, 32, 69, 120, 116, 101, 110, 115, 105, 111,
    110, 115, 58, 32, 37, 115, 10, 0, 0, 0, 115, 95, 109, 105, 120, 97, 104,
    101, 97, 100, 0, 0, 0, 0, 0, 0, 78, 69, 84, 95, 79, 112, 101, 110, 83, 111,
    99, 107, 115, 58, 32, 114, 101, 113, 117, 101, 115, 116, 32, 100, 101, 110,
    105, 101, 100, 10, 0, 0, 115, 111, 108, 105, 100, 0, 0, 0, 77, 79, 85, 83,
    69, 49, 0, 0, 108, 101, 118, 101, 108, 115, 104, 111, 116, 115, 0, 0, 0, 0,
    0, 0, 65, 0, 0, 0, 0, 0, 0, 0, 43, 109, 111, 118, 101, 114, 105, 103, 104,
    116, 0, 0, 0, 0, 0, 0, 71, 76, 95, 76, 73, 78, 69, 65, 82, 95, 77, 73, 80,
    77, 65, 80, 95, 78, 69, 65, 82, 69, 83, 84, 0, 0, 0, 0, 0, 0, 0, 0, 45, 0,
    0, 0, 0, 0, 0, 0, 67, 76, 95, 83, 101, 116, 67, 71, 97, 109, 101, 84, 105,
    109, 101, 58, 32, 33, 99, 108, 46, 115, 110, 97, 112, 46, 118, 97, 108, 105,
    100, 0, 90, 95, 67, 104, 101, 99, 107, 72, 101, 97, 112, 58, 32, 98, 108,
    111, 99, 107, 32, 115, 105, 122, 101, 32, 100, 111, 101, 115, 32, 110, 111,
    116, 32, 116, 111, 117, 99, 104, 32, 116, 104, 101, 32, 110, 101, 120, 116,
    32, 98, 108, 111, 99, 107, 0, 0, 0, 71, 76, 83, 76, 95, 83, 101, 116, 85,
    110, 105, 102, 111, 114, 109, 86, 101, 99, 50, 58, 32, 119, 114, 111, 110,
    103, 32, 116, 121, 112, 101, 32, 102, 111, 114, 32, 117, 110, 105, 102, 111,
    114, 109, 32, 37, 105, 32, 105, 110, 32, 112, 114, 111, 103, 114, 97, 109,
    32, 37, 115, 10, 0, 0, 0, 82, 69, 95, 82, 101, 103, 105, 115, 116, 101, 114,
    70, 111, 110, 116, 58, 32, 70, 114, 101, 101, 84, 121, 112, 101, 32, 99,
    111, 100, 101, 32, 110, 111, 116, 32, 97, 118, 97, 105, 108, 97, 98, 108,
    101, 10, 0, 0, 0, 82, 95, 67, 104, 101, 99, 107, 70, 66, 79, 58, 32, 40, 37,
    115, 41, 32, 70, 114, 97, 109, 101, 98, 117, 102, 102, 101, 114, 32, 105,
    110, 99, 111, 109, 112, 108, 101, 116, 101, 44, 32, 97, 116, 116, 97, 99,
    104, 101, 100, 32, 105, 109, 97, 103, 101, 115, 32, 109, 117, 115, 116, 32,
    104, 97, 118, 101, 32, 115, 97, 109, 101, 32, 100, 105, 109, 101, 110, 115,
    105, 111, 110, 115, 10, 0, 0, 0, 0, 0, 79, 69, 83, 95, 101, 108, 101, 109,
    101, 110, 116, 95, 105, 110, 100, 101, 120, 95, 117, 105, 110, 116, 0, 0,
    118, 105, 101, 119, 99, 108, 117, 115, 116, 101, 114, 58, 32, 37, 105, 10,
    0, 0, 0, 0, 0, 0, 0, 0, 68, 117, 109, 112, 101, 100, 32, 99, 111, 110, 115,
    111, 108, 101, 32, 116, 101, 120, 116, 32, 116, 111, 32, 37, 115, 46, 10, 0,
    0, 0, 0, 0, 103, 108, 66, 117, 102, 102, 101, 114, 83, 117, 98, 68, 97, 116,
    97, 0, 66, 97, 100, 32, 115, 105, 122, 101, 32, 102, 111, 114, 32, 37, 115,
    32, 40, 37, 105, 44, 32, 101, 120, 112, 101, 99, 116, 101, 100, 32, 37, 105,
    41, 33, 0, 0, 0, 0, 0, 0, 82, 101, 97, 100, 32, 102, 114, 111, 109, 32, 69,
    77, 83, 32, 102, 97, 105, 108, 101, 100, 0, 0, 0, 0, 77, 65, 88, 95, 71, 65,
    77, 69, 83, 84, 65, 84, 69, 95, 67, 72, 65, 82, 83, 32, 101, 120, 99, 101,
    101, 100, 101, 100, 0, 0, 0, 0, 71, 76, 95, 83, 116, 97, 116, 101, 58, 32,
    105, 110, 118, 97, 108, 105, 100, 32, 115, 114, 99, 32, 98, 108, 101, 110,
    100, 32, 115, 116, 97, 116, 101, 32, 98, 105, 116, 115, 0, 0, 71, 76, 95,
    69, 88, 84, 95, 116, 101, 120, 116, 117, 114, 101, 95, 99, 111, 109, 112,
    114, 101, 115, 115, 105, 111, 110, 95, 115, 51, 116, 99, 0, 105, 110, 118,
    97, 108, 105, 100, 32, 119, 105, 110, 100, 111, 119, 32, 115, 105, 122, 101,
    0, 0, 0, 0, 0, 110, 111, 100, 97, 109, 97, 103, 101, 0, 0, 0, 0, 0, 0, 0, 0,
    119, 101, 97, 112, 111, 110, 32, 110, 117, 109, 98, 101, 114, 32, 111, 117,
    116, 32, 111, 102, 32, 114, 97, 110, 103, 101, 10, 0, 0, 0, 0, 0, 114, 95,
    101, 120, 116, 95, 99, 111, 109, 112, 114, 101, 115, 115, 101, 100, 95, 116,
    101, 120, 116, 117, 114, 101, 115, 0, 0, 0, 0, 0, 0, 0, 82, 95, 67, 114,
    101, 97, 116, 101, 73, 109, 97, 103, 101, 58, 32, 34, 37, 115, 34, 32, 105,
    115, 32, 116, 111, 111, 32, 108, 111, 110, 103, 0, 35, 100, 101, 102, 105,
    110, 101, 32, 85, 83, 69, 95, 76, 73, 71, 72, 84, 95, 86, 69, 82, 84, 69,
    88, 10, 0, 0, 0, 0, 0, 0, 0, 95, 115, 99, 114, 101, 101, 110, 115, 115, 97,
    111, 0, 0, 0, 0, 0, 103, 108, 85, 110, 105, 102, 111, 114, 109, 49, 102, 65,
    82, 66, 0, 0, 82, 95, 76, 111, 97, 100, 83, 117, 98, 109, 111, 100, 101,
    108, 115, 58, 32, 82, 95, 65, 108, 108, 111, 99, 77, 111, 100, 101, 108, 40,
    41, 32, 102, 97, 105, 108, 101, 100, 0, 0, 37, 115, 47, 37, 115, 0, 0, 0,
    78, 111, 0, 0, 0, 0, 0, 0, 126, 0, 0, 0, 0, 0, 0, 0, 35, 100, 101, 102, 105,
    110, 101, 32, 119, 105, 116, 104, 111, 117, 116, 32, 110, 97, 109, 101, 0,
    0, 0, 0, 100, 101, 116, 111, 110, 97, 116, 105, 111, 110, 0, 0, 0, 0, 0, 0,
    99, 109, 100, 95, 103, 114, 97, 112, 112, 108, 101, 111, 102, 102, 0, 0, 37,
    100, 32, 99, 97, 109, 112, 32, 115, 112, 111, 116, 115, 10, 0, 0, 61, 0, 0,
    0, 0, 0, 0, 0, 99, 104, 97, 114, 97, 99, 116, 101, 114, 105, 115, 116, 105,
    99, 32, 37, 100, 32, 105, 115, 32, 110, 111, 116, 32, 97, 110, 32, 105, 110,
    116, 101, 103, 101, 114, 10, 0, 0, 0, 0, 108, 105, 112, 0, 0, 0, 0, 0, 54,
    48, 0, 0, 0, 0, 0, 0, 110, 101, 120, 116, 109, 97, 112, 0, 32, 32, 32, 32,
    37, 57, 46, 48, 102, 32, 116, 111, 116, 97, 108, 10, 0, 0, 0, 0, 0, 0, 0, 0,
    37, 100, 0, 0, 0, 0, 0, 0, 115, 118, 95, 102, 108, 111, 111, 100, 80, 114,
    111, 116, 101, 99, 116, 0, 100, 105, 115, 99, 111, 110, 110, 101, 99, 116,
    32, 34, 37, 115, 34, 0, 98, 97, 110, 0, 0, 0, 0, 0, 98, 111, 116, 95, 105,
    110, 116, 101, 114, 98, 114, 101, 101, 100, 99, 104, 97, 114, 0, 0, 0, 0, 0,
    0, 32, 32, 65, 76, 32, 69, 120, 116, 101, 110, 115, 105, 111, 110, 115, 58,
    32, 32, 37, 115, 10, 0, 0, 0, 115, 95, 105, 110, 102, 111, 0, 0, 78, 69, 84,
    95, 79, 112, 101, 110, 83, 111, 99, 107, 115, 58, 32, 98, 97, 100, 32, 114,
    101, 115, 112, 111, 110, 115, 101, 10, 0, 0, 0, 0, 111, 114, 105, 103, 105,
    110, 91, 50, 93, 0, 0, 0, 0, 0, 0, 0, 109, 111, 118, 101, 32, 115, 116, 97,
    116, 101, 32, 104, 97, 110, 100, 108, 101, 32, 37, 100, 32, 111, 117, 116,
    32, 111, 102, 32, 114, 97, 110, 103, 101, 10, 0, 0, 0, 0, 0, 0, 69, 78, 68,
    0, 0, 0, 0, 0, 118, 109, 47, 113, 97, 103, 97, 109, 101, 46, 113, 118, 109,
    0, 0, 0, 73, 0, 0, 0, 0, 0, 0, 0, 45, 109, 111, 118, 101, 108, 101, 102,
    116, 0, 0, 0, 0, 0, 0, 0, 94, 51, 67, 111, 117, 108, 100, 110, 39, 116, 32,
    119, 114, 105, 116, 101, 32, 37, 115, 46, 10, 0, 0, 0, 48, 0, 0, 0, 0, 0, 0,
    0, 10, 45, 45, 45, 45, 45, 45, 45, 32, 73, 110, 112, 117, 116, 32, 73, 110,
    105, 116, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 32, 45, 45, 45,
    45, 45, 45, 45, 10, 0, 0, 109, 97, 105, 110, 0, 0, 0, 0, 101, 120, 112, 101,
    99, 116, 101, 100, 32, 110, 117, 109, 98, 101, 114, 44, 32, 102, 111, 117,
    110, 100, 32, 37, 115, 0, 0, 0, 0, 0, 0, 0, 35, 35, 0, 0, 0, 0, 0, 0, 103,
    108, 66, 117, 102, 102, 101, 114, 68, 97, 116, 97, 0, 0, 0, 0, 109, 105,
    115, 115, 105, 110, 103, 32, 35, 101, 110, 100, 105, 102, 0, 0, 69, 109,
    112, 116, 121, 32, 74, 80, 69, 71, 32, 105, 109, 97, 103, 101, 32, 40, 68,
    78, 76, 32, 110, 111, 116, 32, 115, 117, 112, 112, 111, 114, 116, 101, 100,
    41, 0, 0, 0, 0, 99, 111, 110, 102, 105, 103, 115, 116, 114, 105, 110, 103,
    32, 62, 32, 77, 65, 88, 95, 67, 79, 78, 70, 73, 71, 83, 84, 82, 73, 78, 71,
    83, 0, 0, 0, 0, 0, 0, 0, 0, 108, 111, 103, 32, 102, 105, 108, 101, 32, 37,
    115, 32, 105, 115, 32, 97, 108, 114, 101, 97, 100, 121, 32, 111, 112, 101,
    110, 101, 100, 10, 0, 0, 71, 76, 95, 65, 82, 66, 95, 116, 101, 120, 116,
    117, 114, 101, 95, 99, 111, 109, 112, 114, 101, 115, 115, 105, 111, 110, 0,
    0, 0, 0, 0, 0, 98, 111, 116, 95, 100, 101, 118, 101, 108, 111, 112, 101,
    114, 0, 0, 0, 108, 97, 100, 100, 101, 114, 0, 0, 110, 97, 109, 101, 0, 0, 0,
    0, 71, 101, 110, 101, 116, 105, 99, 80, 97, 114, 101, 110, 116, 115, 65,
    110, 100, 67, 104, 105, 108, 100, 83, 101, 108, 101, 99, 116, 105, 111, 110,
    58, 32, 116, 111, 111, 32, 109, 97, 110, 121, 32, 98, 111, 116, 115, 10, 0,
    49, 0, 0, 0, 0, 0, 0, 0, 32, 37, 105, 32, 116, 111, 116, 97, 108, 32, 105,
    109, 97, 103, 101, 115, 10, 10, 0, 0, 0, 0, 0, 0, 105, 110, 118, 97, 108,
    105, 100, 32, 114, 101, 116, 117, 114, 110, 32, 118, 97, 108, 117, 101, 32,
    37, 115, 0, 35, 100, 101, 102, 105, 110, 101, 32, 85, 83, 69, 95, 76, 73,
    71, 72, 84, 95, 86, 69, 67, 84, 79, 82, 10, 0, 0, 0, 0, 0, 0, 0, 95, 104,
    100, 114, 68, 101, 112, 116, 104, 0, 0, 0, 0, 0, 0, 0, 103, 108, 86, 97,
    108, 105, 100, 97, 116, 101, 80, 114, 111, 103, 114, 97, 109, 65, 82, 66, 0,
    0, 0, 0, 76, 111, 97, 100, 77, 97, 112, 58, 32, 102, 117, 110, 110, 121, 32,
    108, 117, 109, 112, 32, 115, 105, 122, 101, 32, 105, 110, 32, 37, 115, 0, 0,
    109, 97, 120, 95, 119, 101, 97, 112, 111, 110, 105, 110, 102, 111, 0, 0, 99,
    108, 97, 115, 115, 110, 97, 109, 101, 0, 0, 0, 0, 0, 0, 0, 32, 0, 0, 0, 0,
    0, 0, 0, 89, 101, 115, 0, 0, 0, 0, 0, 94, 0, 0, 0, 0, 0, 0, 0, 99, 97, 110,
    39, 116, 32, 117, 110, 100, 101, 102, 32, 37, 115, 0, 0, 116, 121, 112, 101,
    0, 0, 0, 0, 112, 117, 115, 104, 0, 0, 0, 0, 103, 114, 97, 112, 112, 108,
    101, 111, 110, 0, 0, 0, 0, 0, 0, 0, 37, 100, 32, 109, 97, 112, 32, 108, 111,
    99, 97, 116, 105, 111, 110, 115, 10, 0, 0, 0, 0, 0, 0, 0, 117, 110, 107,
    110, 111, 119, 110, 32, 114, 97, 110, 100, 111, 109, 32, 37, 115, 0, 0, 0,
    0, 0, 0, 0, 99, 97, 110, 110, 111, 116, 32, 98, 111, 117, 110, 100, 32, 99,
    104, 97, 114, 97, 99, 116, 101, 114, 105, 115, 116, 105, 99, 32, 37, 100,
    32, 98, 101, 116, 119, 101, 101, 110, 32, 37, 102, 32, 97, 110, 100, 32, 37,
    102, 10, 0, 0, 0, 0, 0, 0, 0, 102, 117, 110, 99, 95, 112, 108, 97, 116, 32,
    119, 105, 116, 104, 32, 105, 110, 118, 97, 108, 105, 100, 32, 109, 111, 100,
    101, 108, 32, 110, 117, 109, 98, 101, 114, 10, 0, 0, 0, 0, 112, 104, 121,
    115, 95, 102, 97, 108, 108, 100, 101, 108, 116, 97, 49, 48, 0, 0, 0, 0, 0,
    0, 0, 0, 108, 111, 99, 97, 108, 104, 111, 115, 116, 0, 0, 0, 0, 0, 0, 0, 37,
    50, 105, 37, 37, 32, 37, 57, 105, 32, 37, 115, 10, 0, 0, 0, 49, 48, 50, 52,
    0, 0, 0, 0, 103, 95, 110, 101, 101, 100, 112, 97, 115, 115, 0, 0, 0, 0, 0,
    0, 115, 118, 95, 109, 97, 120, 80, 105, 110, 103, 0, 0, 0, 0, 0, 0, 112,
    114, 105, 110, 116, 32, 34, 37, 115, 94, 55, 32, 37, 115, 10, 34, 0, 0, 0,
    0, 0, 0, 0, 0, 101, 120, 99, 101, 112, 116, 105, 111, 110, 0, 0, 0, 0, 0, 0,
    0, 115, 107, 105, 108, 108, 32, 37, 46, 49, 102, 10, 0, 0, 0, 0, 0, 98, 111,
    116, 95, 109, 105, 110, 112, 108, 97, 121, 101, 114, 115, 0, 0, 32, 32, 82,
    101, 110, 100, 101, 114, 101, 114, 58, 32, 32, 32, 32, 32, 32, 32, 37, 115,
    10, 0, 0, 0, 83, 95, 70, 114, 101, 101, 79, 108, 100, 101, 115, 116, 83,
    111, 117, 110, 100, 58, 32, 102, 114, 101, 101, 105, 110, 103, 32, 115, 111,
    117, 110, 100, 32, 37, 115, 10, 0, 0, 0, 0, 78, 69, 84, 95, 79, 112, 101,
    110, 83, 111, 99, 107, 115, 58, 32, 114, 101, 99, 118, 58, 32, 37, 115, 10,
    0, 0, 0, 0, 0, 0, 0, 0, 101, 109, 112, 116, 121, 32, 97, 97, 115, 32, 108,
    105, 110, 107, 32, 104, 101, 97, 112, 10, 0, 0, 0, 0, 111, 114, 105, 103,
    105, 110, 91, 49, 93, 0, 0, 0, 0, 0, 0, 0, 72, 79, 77, 69, 0, 0, 0, 0, 65,
    65, 83, 95, 69, 110, 97, 98, 108, 101, 82, 111, 117, 116, 105, 110, 103, 65,
    114, 101, 97, 58, 32, 97, 114, 101, 97, 110, 117, 109, 32, 37, 100, 32, 111,
    117, 116, 32, 111, 102, 32, 114, 97, 110, 103, 101, 10, 0, 46, 109, 101,
    110, 117, 0, 0, 0, 82, 0, 0, 0, 0, 0, 0, 0, 43, 109, 111, 118, 101, 108,
    101, 102, 116, 0, 0, 0, 0, 0, 0, 0, 116, 97, 114, 103, 101, 116, 0, 0, 97,
    99, 116, 105, 118, 101, 65, 99, 116, 105, 111, 110, 0, 0, 0, 0, 49, 48, 48,
    0, 0, 0, 0, 0, 97, 97, 115, 111, 112, 116, 105, 109, 105, 122, 101, 0, 0, 0,
    0, 0, 99, 97, 110, 39, 116, 32, 111, 112, 101, 110, 32, 37, 115, 10, 0, 0,
    115, 109, 97, 108, 108, 0, 0, 0, 65, 65, 83, 95, 70, 108, 111, 111, 100, 67,
    108, 117, 115, 116, 101, 114, 65, 114, 101, 97, 115, 95, 114, 58, 32, 97,
    114, 101, 97, 110, 117, 109, 32, 111, 117, 116, 32, 111, 102, 32, 114, 97,
    110, 103, 101, 10, 0, 0, 123, 0, 0, 0, 0, 0, 0, 0, 86, 77, 95, 80, 114, 101,
    112, 97, 114, 101, 73, 110, 116, 101, 114, 112, 114, 101, 116, 101, 114, 58,
    32, 74, 117, 109, 112, 32, 116, 111, 32, 105, 110, 118, 97, 108, 105, 100,
    32, 105, 110, 115, 116, 114, 117, 99, 116, 105, 111, 110, 32, 110, 117, 109,
    98, 101, 114, 0, 0, 0, 0, 0, 0, 0, 118, 109, 95, 117, 105, 0, 0, 0, 103,
    108, 71, 101, 116, 66, 117, 102, 102, 101, 114, 80, 97, 114, 97, 109, 101,
    116, 101, 114, 105, 118, 0, 0, 83, 86, 95, 65, 114, 101, 97, 69, 110, 116,
    105, 116, 105, 101, 115, 58, 32, 77, 65, 88, 67, 79, 85, 78, 84, 10, 0, 0,
    0, 0, 0, 0, 83, 86, 95, 83, 118, 69, 110, 116, 105, 116, 121, 70, 111, 114,
    71, 101, 110, 116, 105, 116, 121, 58, 32, 98, 97, 100, 32, 103, 69, 110,
    116, 0, 66, 111, 103, 117, 115, 32, 68, 81, 84, 32, 105, 110, 100, 101, 120,
    32, 37, 100, 0, 0, 0, 0, 0, 0, 115, 118, 95, 112, 117, 114, 101, 0, 35, 52,
    54, 50, 32, 83, 86, 95, 78, 101, 116, 99, 104, 97, 110, 95, 84, 114, 97,
    110, 115, 109, 105, 116, 58, 32, 117, 110, 115, 101, 110, 116, 32, 102, 114,
    97, 103, 109, 101, 110, 116, 115, 44, 32, 115, 116, 97, 99, 107, 101, 100,
    10, 0, 0, 0, 0, 73, 110, 105, 116, 105, 97, 108, 105, 122, 105, 110, 103,
    32, 79, 112, 101, 110, 71, 76, 32, 101, 120, 116, 101, 110, 115, 105, 111,
    110, 115, 10, 0, 110, 111, 109, 97, 114, 107, 115, 0, 100, 101, 109, 111,
    37, 105, 37, 105, 37, 105, 37, 105, 0, 0, 0, 0, 114, 95, 97, 108, 108, 111,
    119, 69, 120, 116, 101, 110, 115, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0,
    32, 97, 112, 112, 114, 111, 120, 32, 37, 105, 32, 98, 121, 116, 101, 115,
    10, 0, 0, 0, 0, 0, 0, 0, 99, 104, 97, 116, 32, 115, 116, 97, 116, 101, 32,
    104, 97, 110, 100, 108, 101, 32, 37, 100, 32, 111, 117, 116, 32, 111, 102,
    32, 114, 97, 110, 103, 101, 10, 0, 0, 0, 0, 0, 0, 35, 100, 101, 102, 105,
    110, 101, 32, 85, 83, 69, 95, 68, 69, 76, 85, 88, 69, 77, 65, 80, 10, 0, 0,
    95, 113, 117, 97, 114, 116, 101, 114, 37, 100, 0, 0, 0, 0, 0, 0, 112, 114,
    105, 110, 116, 0, 0, 0, 103, 108, 85, 115, 101, 80, 114, 111, 103, 114, 97,
    109, 79, 98, 106, 101, 99, 116, 65, 82, 66, 0, 0, 0, 119, 111, 114, 108,
    100, 32, 86, 66, 79, 115, 32, 99, 97, 108, 99, 117, 108, 97, 116, 105, 111,
    110, 32, 116, 105, 109, 101, 32, 61, 32, 37, 53, 46, 50, 102, 32, 115, 101,
    99, 111, 110, 100, 115, 10, 0, 0, 0, 0, 34, 0, 0, 0, 0, 0, 0, 0, 85, 115,
    101, 32, 65, 110, 97, 108, 111, 103, 58, 32, 37, 115, 10, 0, 124, 0, 0, 0,
    0, 0, 0, 0, 83, 86, 95, 71, 101, 116, 67, 111, 110, 102, 105, 103, 115, 116,
    114, 105, 110, 103, 58, 32, 98, 97, 100, 32, 105, 110, 100, 101, 120, 32,
    37, 105, 0, 0, 0, 0, 0, 0, 0, 0, 101, 120, 112, 101, 99, 116, 101, 100, 32,
    110, 97, 109, 101, 44, 32, 102, 111, 117, 110, 100, 32, 37, 115, 0, 104,
    101, 97, 108, 116, 104, 105, 110, 99, 0, 0, 0, 0, 0, 0, 0, 83, 86, 95, 83,
    101, 116, 66, 114, 117, 115, 104, 77, 111, 100, 101, 108, 58, 32, 37, 115,
    32, 105, 115, 110, 39, 116, 32, 97, 32, 98, 114, 117, 115, 104, 32, 109,
    111, 100, 101, 108, 0, 0, 0, 0, 0, 0, 0, 0, 99, 109, 100, 95, 103, 114, 97,
    112, 112, 108, 101, 111, 110, 0, 0, 0, 99, 97, 109, 112, 32, 115, 112, 111,
    116, 32, 97, 116, 32, 37, 49, 46, 49, 102, 32, 37, 49, 46, 49, 102, 32, 37,
    49, 46, 49, 102, 32, 105, 110, 32, 115, 111, 108, 105, 100, 10, 0, 0, 0, 0,
    0, 0, 0, 0, 99, 104, 97, 114, 97, 99, 116, 101, 114, 105, 115, 116, 105, 99,
    32, 37, 100, 32, 105, 115, 32, 110, 111, 116, 32, 97, 32, 102, 108, 111, 97,
    116, 10, 0, 0, 0, 0, 0, 0, 0, 102, 117, 110, 99, 95, 112, 108, 97, 116, 32,
    119, 105, 116, 104, 111, 117, 116, 32, 109, 111, 100, 101, 108, 10, 0, 0, 0,
    0, 0, 0, 0, 0, 52, 48, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 86, 77,
    95, 67, 97, 108, 108, 40, 32, 37, 100, 32, 41, 10, 0, 0, 112, 117, 114, 101,
    0, 0, 0, 0, 83, 86, 95, 71, 101, 116, 67, 104, 97, 108, 108, 101, 110, 103,
    101, 58, 32, 114, 97, 116, 101, 32, 108, 105, 109, 105, 116, 32, 101, 120,
    99, 101, 101, 100, 101, 100, 44, 32, 100, 114, 111, 112, 112, 105, 110, 103,
    32, 114, 101, 113, 117, 101, 115, 116, 10, 0, 115, 118, 95, 109, 105, 110,
    80, 105, 110, 103, 0, 0, 0, 0, 0, 0, 71, 111, 105, 110, 103, 32, 102, 114,
    111, 109, 32, 67, 83, 95, 70, 82, 69, 69, 32, 116, 111, 32, 67, 83, 95, 67,
    79, 78, 78, 69, 67, 84, 69, 68, 32, 102, 111, 114, 32, 37, 115, 10, 0, 0, 0,
    0, 0, 0, 68, 101, 108, 101, 116, 105, 110, 103, 32, 37, 115, 32, 37, 115,
    47, 37, 100, 10, 0, 0, 0, 0, 0, 0, 98, 111, 116, 95, 99, 104, 97, 108, 108,
    101, 110, 103, 101, 0, 0, 0, 32, 32, 86, 101, 114, 115, 105, 111, 110, 58,
    32, 32, 32, 32, 32, 32, 32, 32, 37, 115, 10, 0, 0, 0, 83, 95, 83, 116, 97,
    114, 116, 66, 97, 99, 107, 103, 114, 111, 117, 110, 100, 84, 114, 97, 99,
    107, 40, 32, 37, 115, 44, 32, 37, 115, 32, 41, 10, 0, 0, 0, 0, 0, 0, 0, 78,
    69, 84, 95, 79, 112, 101, 110, 83, 111, 99, 107, 115, 58, 32, 115, 101, 110,
    100, 58, 32, 37, 115, 10, 0, 0, 0, 0, 0, 0, 0, 0, 111, 114, 105, 103, 105,
    110, 91, 48, 93, 0, 0, 0, 0, 0, 0, 0, 107, 105, 99, 107, 97, 108, 108, 0,
    80, 71, 85, 80, 0, 0, 0, 0, 46, 97, 114, 101, 110, 97, 0, 0, 99, 104, 97,
    114, 97, 99, 116, 101, 114, 32, 104, 97, 110, 100, 108, 101, 32, 37, 100,
    32, 111, 117, 116, 32, 111, 102, 32, 114, 97, 110, 103, 101, 10, 0, 0, 0, 0,
    0, 0, 0, 85, 0, 0, 0, 0, 0, 0, 0, 45, 115, 116, 114, 97, 102, 101, 0, 98,
    111, 116, 95, 114, 101, 97, 99, 104, 97, 98, 105, 108, 105, 116, 121, 0, 0,
    0, 0, 0, 0, 0, 0, 49, 46, 48, 0, 0, 0, 0, 0, 102, 109, 116, 32, 0, 0, 0, 0,
    78, 111, 116, 32, 102, 111, 117, 110, 100, 58, 32, 37, 115, 10, 0, 0, 37,
    105, 32, 0, 0, 0, 0, 0, 94, 51, 87, 65, 82, 78, 73, 78, 71, 58, 32, 70, 97,
    105, 108, 101, 100, 32, 116, 111, 32, 37, 115, 32, 115, 111, 117, 110, 100,
    32, 37, 115, 33, 10, 0, 0, 0, 0, 0, 0, 90, 95, 77, 97, 108, 108, 111, 99,
    58, 32, 102, 97, 105, 108, 101, 100, 32, 111, 110, 32, 97, 108, 108, 111,
    99, 97, 116, 105, 111, 110, 32, 111, 102, 32, 37, 105, 32, 98, 121, 116,
    101, 115, 32, 102, 114, 111, 109, 32, 116, 104, 101, 32, 37, 115, 32, 122,
    111, 110, 101, 0, 0, 0, 0, 0, 115, 95, 118, 111, 108, 117, 109, 101, 0, 0,
    0, 0, 0, 0, 0, 0, 68, 101, 109, 111, 32, 102, 105, 108, 101, 58, 32, 37,
    115, 10, 0, 0, 94, 51, 87, 65, 82, 78, 73, 78, 71, 58, 32, 37, 115, 32, 105,
    115, 32, 97, 32, 56, 32, 98, 105, 116, 32, 97, 117, 100, 105, 111, 32, 102,
    105, 108, 101, 10, 0, 0, 0, 0, 94, 49, 37, 115, 0, 0, 0, 0, 37, 53, 100, 32,
    115, 97, 109, 112, 108, 101, 115, 10, 0, 0, 0, 0, 118, 105, 100, 101, 111,
    47, 37, 115, 0, 0, 0, 0, 0, 0, 0, 0, 37, 115, 58, 37, 104, 117, 0, 0, 65,
    65, 83, 95, 80, 114, 101, 115, 101, 110, 99, 101, 84, 121, 112, 101, 66,
    111, 117, 110, 100, 105, 110, 103, 66, 111, 120, 58, 32, 117, 110, 107, 110,
    111, 119, 110, 32, 112, 114, 101, 115, 101, 110, 99, 101, 32, 116, 121, 112,
    101, 10, 0, 0, 0, 0, 0, 94, 51, 37, 115, 0, 0, 0, 0, 103, 108, 68, 101, 108,
    101, 116, 101, 66, 117, 102, 102, 101, 114, 115, 0, 110, 101, 116, 95, 113,
    112, 111, 114, 116, 0, 0, 0, 0, 0, 0, 0, 37, 100, 32, 109, 105, 100, 114,
    97, 110, 103, 101, 32, 97, 114, 101, 97, 32, 37, 100, 0, 0, 0, 0, 0, 66,
    111, 103, 117, 115, 32, 68, 72, 84, 32, 105, 110, 100, 101, 120, 32, 37,
    100, 0, 0, 0, 0, 0, 0, 42, 32, 73, 71, 78, 79, 82, 73, 78, 71, 32, 79, 80,
    69, 78, 71, 76, 32, 69, 88, 84, 69, 78, 83, 73, 79, 78, 83, 32, 42, 10, 0,
    100, 101, 109, 111, 115, 0, 0, 0, 110, 111, 105, 109, 112, 97, 99, 116, 0,
    0, 0, 0, 0, 0, 0, 0, 37, 115, 0, 0, 0, 0, 0, 0, 99, 97, 110, 39, 116, 32,
    114, 101, 97, 100, 32, 37, 100, 32, 98, 105, 116, 115, 0, 0, 0, 0, 0, 0, 32,
    45, 45, 45, 45, 45, 45, 45, 45, 45, 10, 0, 0, 0, 0, 0, 46, 37, 115, 37, 100,
    0, 0, 0, 35, 100, 101, 102, 105, 110, 101, 32, 85, 83, 69, 95, 76, 73, 71,
    72, 84, 10, 0, 0, 0, 0, 0, 0, 95, 116, 97, 114, 103, 101, 116, 108, 101,
    118, 101, 108, 115, 0, 0, 0, 103, 108, 76, 105, 110, 107, 80, 114, 111, 103,
    114, 97, 109, 65, 82, 66, 0, 0, 0, 0, 0, 0, 0, 0, 115, 116, 97, 116, 105,
    99, 66, 115, 112, 77, 111, 100, 101, 108, 48, 95, 73, 66, 79, 32, 37, 105,
    0, 0, 47, 98, 97, 115, 101, 0, 0, 0, 81, 75, 69, 89, 32, 103, 101, 110, 101,
    114, 97, 116, 101, 100, 10, 0, 66, 97, 108, 108, 115, 58, 32, 32, 32, 32,
    32, 32, 37, 100, 10, 0, 37, 100, 32, 97, 114, 101, 97, 32, 99, 97, 99, 104,
    101, 32, 117, 112, 100, 97, 116, 101, 115, 10, 0, 0, 38, 0, 0, 0, 0, 0, 0,
    0, 117, 110, 100, 101, 102, 32, 119, 105, 116, 104, 111, 117, 116, 32, 110,
    97, 109, 101, 0, 0, 0, 0, 0, 0, 100, 97, 109, 97, 103, 101, 116, 121, 112,
    101, 0, 0, 0, 0, 0, 0, 48, 0, 0, 0, 0, 0, 0, 0, 114, 97, 110, 100, 111, 109,
    0, 0, 99, 104, 97, 114, 97, 99, 116, 101, 114, 105, 115, 116, 105, 99, 32,
    37, 100, 32, 105, 115, 32, 110, 111, 116, 32, 105, 110, 105, 116, 105, 97,
    108, 105, 122, 101, 100, 10, 0, 0, 0, 47, 37, 115, 47, 37, 115, 0, 0, 102,
    117, 110, 99, 95, 112, 108, 97, 116, 0, 0, 0, 0, 0, 0, 0, 112, 104, 121,
    115, 95, 102, 97, 108, 108, 100, 101, 108, 116, 97, 53, 0, 81, 75, 69, 89,
    32, 99, 111, 117, 108, 100, 32, 110, 111, 116, 32, 111, 112, 101, 110, 32,
    37, 115, 32, 102, 111, 114, 32, 119, 114, 105, 116, 101, 10, 0, 0, 0, 0, 0,
    0, 0, 86, 77, 95, 67, 97, 108, 108, 32, 119, 105, 116, 104, 32, 78, 85, 76,
    76, 32, 118, 109, 0, 0, 0, 0, 103, 97, 109, 101, 116, 121, 112, 101, 0, 0,
    0, 0, 0, 0, 0, 0, 49, 48, 48, 0, 0, 0, 0, 0, 99, 111, 110, 110, 101, 99,
    116, 82, 101, 115, 112, 111, 110, 115, 101, 32, 37, 100, 0, 0, 0, 0, 0, 0,
    69, 114, 114, 111, 114, 58, 32, 73, 110, 118, 97, 108, 105, 100, 32, 97,
    100, 100, 114, 101, 115, 115, 32, 37, 115, 10, 0, 0, 0, 0, 0, 0, 98, 111,
    116, 95, 114, 111, 99, 107, 101, 116, 106, 117, 109, 112, 0, 0, 32, 32, 86,
    101, 110, 100, 111, 114, 58, 32, 32, 32, 32, 32, 32, 32, 32, 32, 37, 115,
    10, 0, 0, 0, 81, 75, 69, 89, 32, 98, 117, 105, 108, 100, 105, 110, 103, 32,
    114, 97, 110, 100, 111, 109, 32, 115, 116, 114, 105, 110, 103, 10, 0, 0, 0,
    0, 66, 65, 68, 78, 65, 77, 69, 0, 78, 69, 84, 95, 79, 112, 101, 110, 83,
    111, 99, 107, 115, 58, 32, 99, 111, 110, 110, 101, 99, 116, 58, 32, 37, 115,
    10, 0, 0, 0, 0, 0, 97, 112, 111, 115, 46, 116, 114, 84, 121, 112, 101, 0, 0,
    0, 0, 0, 80, 71, 68, 78, 0, 0, 0, 0, 83, 80, 65, 67, 69, 0, 0, 0, 46, 98,
    111, 116, 0, 0, 0, 0, 115, 0, 0, 0, 0, 0, 0, 0, 43, 115, 116, 114, 97, 102,
    101, 0, 81, 75, 69, 89, 32, 102, 105, 108, 101, 32, 115, 105, 122, 101, 32,
    33, 61, 32, 37, 100, 44, 32, 114, 101, 103, 101, 110, 101, 114, 97, 116,
    105, 110, 103, 10, 0, 0, 0, 0, 0, 81, 75, 69, 89, 32, 102, 111, 117, 110,
    100, 46, 10, 0, 0, 0, 0, 60, 70, 65, 83, 84, 62, 32, 0, 90, 95, 84, 97, 103,
    77, 97, 108, 108, 111, 99, 58, 32, 116, 114, 105, 101, 100, 32, 116, 111,
    32, 117, 115, 101, 32, 97, 32, 48, 32, 116, 97, 103, 0, 0, 0, 0, 0, 0, 0,
    113, 107, 101, 121, 0, 0, 0, 0, 103, 95, 110, 101, 101, 100, 112, 97, 115,
    115, 0, 0, 0, 0, 0, 0, 103, 95, 104, 117, 109, 97, 110, 112, 108, 97, 121,
    101, 114, 115, 0, 0, 103, 108, 71, 101, 110, 66, 117, 102, 102, 101, 114,
    115, 0, 0, 0, 0, 115, 112, 101, 101, 100, 0, 0, 0, 66, 111, 103, 117, 115,
    32, 68, 65, 67, 32, 118, 97, 108, 117, 101, 32, 48, 120, 37, 120, 0, 0, 0,
    0, 65, 65, 83, 32, 100, 97, 116, 97, 32, 111, 112, 116, 105, 109, 105, 122,
    101, 100, 46, 10, 0, 0, 0, 0, 94, 51, 87, 65, 82, 78, 73, 78, 71, 58, 32,
    115, 101, 114, 118, 101, 114, 32, 105, 115, 32, 110, 111, 116, 32, 97, 108,
    108, 111, 119, 101, 100, 32, 116, 111, 32, 115, 101, 116, 32, 37, 115, 61,
    37, 115, 10, 0, 0, 118, 105, 100, 95, 114, 101, 115, 116, 97, 114, 116, 32,
    102, 97, 115, 116, 10, 0, 0, 0, 0, 0, 0, 0, 112, 117, 110, 107, 98, 117,
    115, 116, 101, 114, 0, 0, 0, 0, 0, 0, 115, 108, 105, 99, 107, 0, 0, 0, 115,
    99, 114, 101, 101, 110, 115, 104, 111, 116, 115, 47, 37, 115, 46, 106, 112,
    103, 0, 0, 0, 0, 0, 0, 37, 52, 105, 58, 32, 37, 52, 105, 120, 37, 52, 105,
    32, 37, 115, 32, 37, 52, 105, 37, 115, 32, 37, 115, 10, 0, 0, 0, 0, 0, 0, 0,
    109, 97, 120, 112, 105, 110, 103, 0, 35, 100, 101, 102, 105, 110, 101, 32,
    85, 83, 69, 95, 70, 65, 83, 84, 95, 76, 73, 71, 72, 84, 10, 0, 95, 99, 97,
    108, 99, 108, 101, 118, 101, 108, 115, 0, 0, 0, 0, 0, 103, 108, 65, 116,
    116, 97, 99, 104, 79, 98, 106, 101, 99, 116, 65, 82, 66, 0, 0, 0, 0, 0, 0,
    0, 115, 116, 97, 116, 105, 99, 66, 115, 112, 77, 111, 100, 101, 108, 48, 95,
    86, 66, 79, 32, 37, 105, 0, 0, 83, 68, 76, 32, 76, 105, 98, 114, 97, 114,
    121, 32, 84, 111, 111, 32, 79, 108, 100, 0, 0, 0, 0, 0, 65, 85, 68, 73, 79,
    95, 83, 49, 54, 77, 83, 66, 0, 0, 0, 0, 109, 105, 110, 112, 105, 110, 103,
    0, 66, 117, 116, 116, 111, 110, 115, 58, 32, 32, 32, 32, 37, 100, 10, 0, 61,
    0, 0, 0, 0, 0, 0, 0, 92, 0, 0, 0, 0, 0, 0, 0, 118, 105, 115, 100, 97, 109,
    97, 103, 101, 0, 0, 0, 0, 0, 0, 0, 111, 102, 102, 104, 97, 110, 100, 103,
    114, 97, 112, 112, 108, 101, 0, 0, 119, 97, 105, 116, 0, 0, 0, 0, 99, 104,
    97, 114, 97, 99, 116, 101, 114, 105, 115, 116, 105, 99, 32, 37, 100, 32,
    100, 111, 101, 115, 32, 110, 111, 116, 32, 101, 120, 105, 115, 116, 10, 0,
    0, 0, 0, 0, 0, 0, 116, 114, 105, 103, 103, 101, 114, 95, 109, 117, 108, 116,
    105, 112, 108, 101, 32, 110, 111, 116, 32, 105, 110, 32, 97, 110, 121, 32,
    97, 114, 101, 97, 10, 0, 0, 0, 0, 0, 0, 0, 50, 55, 48, 0, 0, 0, 0, 0, 103,
    97, 109, 101, 116, 121, 112, 101, 0, 0, 0, 0, 0, 0, 0, 0, 67, 76, 95, 78,
    101, 120, 116, 68, 101, 109, 111, 58, 32, 37, 115, 10, 0, 0, 0, 0, 0, 0, 0,
    0, 102, 111, 114, 99, 101, 102, 117, 108, 108, 121, 32, 117, 110, 108, 111,
    97, 100, 105, 110, 103, 32, 37, 115, 32, 118, 109, 10, 0, 0, 0, 0, 0, 115,
    118, 95, 109, 97, 120, 99, 108, 105, 101, 110, 116, 115, 0, 0, 0, 115, 118,
    95, 100, 108, 82, 97, 116, 101, 0, 0, 0, 0, 0, 0, 0, 71, 97, 109, 101, 32,
    114, 101, 106, 101, 99, 116, 101, 100, 32, 97, 32, 99, 111, 110, 110, 101,
    99, 116, 105, 111, 110, 58, 32, 37, 115, 46, 10, 0, 0, 0, 0, 0, 0, 0, 0, 85,
    115, 97, 103, 101, 58, 32, 37, 115, 32, 40, 105, 112, 91, 47, 115, 117, 98,
    110, 101, 116, 93, 32, 124, 32, 110, 117, 109, 41, 10, 0, 0, 98, 111, 116,
    95, 103, 114, 97, 112, 112, 108, 101, 0, 0, 0, 0, 0, 79, 112, 101, 110, 65,
    76, 32, 105, 110, 102, 111, 58, 10, 0, 0, 0, 103, 97, 109, 101, 0, 0, 0, 0,
    45, 45, 45, 45, 40, 37, 105, 41, 45, 45, 45, 45, 32, 112, 97, 105, 110, 116,
    101, 100, 58, 32, 37, 105, 10, 0, 0, 0, 0, 0, 0, 0, 87, 65, 82, 78, 73, 78,
    71, 58, 32, 78, 69, 84, 95, 79, 112, 101, 110, 83, 111, 99, 107, 115, 58,
    32, 103, 101, 116, 104, 111, 115, 116, 98, 121, 110, 97, 109, 101, 58, 32,
    97, 100, 100, 114, 101, 115, 115, 32, 116, 121, 112, 101, 32, 119, 97, 115,
    32, 110, 111, 116, 32, 65, 70, 95, 73, 78, 69, 84, 10, 0, 0, 0, 0, 112, 111,
    115, 46, 116, 114, 68, 117, 114, 97, 116, 105, 111, 110, 0, 0, 68, 69, 76,
    0, 0, 0, 0, 0, 46, 99, 111, 110,
  ],
  "i8",
  ALLOC_NONE,
  Runtime.GLOBAL_BASE + 122884
);
/* memory initializer */ allocate(
  [
    102, 105, 103, 0, 32, 0, 0, 0, 0, 0, 0, 0, 45, 108, 111, 111, 107, 100, 111,
    119, 110, 0, 0, 0, 0, 0, 0, 0, 115, 118, 95, 109, 97, 120, 99, 108, 105,
    101, 110, 116, 115, 0, 0, 0, 109, 97, 112, 110, 97, 109, 101, 0, 60, 82, 69,
    83, 69, 84, 62, 32, 0, 0, 0, 0, 0, 0, 0, 0, 67, 76, 95, 71, 101, 116, 83,
    110, 97, 112, 115, 104, 111, 116, 58, 32, 116, 114, 117, 110, 99, 97, 116,
    101, 100, 32, 37, 105, 32, 101, 110, 116, 105, 116, 105, 101, 115, 32, 116,
    111, 32, 37, 105, 10, 0, 0, 0, 0, 43, 108, 111, 111, 107, 100, 111, 119,
    110, 0, 0, 0, 0, 0, 0, 0, 90, 95, 70, 114, 101, 101, 58, 32, 109, 101, 109,
    111, 114, 121, 32, 98, 108, 111, 99, 107, 32, 119, 114, 111, 116, 101, 32,
    112, 97, 115, 116, 32, 101, 110, 100, 0, 0, 0, 0, 0, 112, 104, 121, 115, 95,
    102, 114, 105, 99, 116, 105, 111, 110, 0, 0, 0, 104, 111, 115, 116, 110, 97,
    109, 101, 0, 0, 0, 0, 0, 0, 0, 0, 99, 108, 105, 101, 110, 116, 115, 0, 117,
    115, 97, 103, 101, 58, 32, 115, 101, 114, 118, 101, 114, 115, 116, 97, 116,
    117, 115, 32, 91, 45, 52, 124, 45, 54, 93, 32, 115, 101, 114, 118, 101, 114,
    10, 0, 0, 0, 0, 0, 103, 108, 73, 115, 84, 101, 120, 116, 117, 114, 101, 0,
    0, 0, 0, 0, 37, 115, 0, 0, 0, 0, 0, 0, 66, 111, 103, 117, 115, 32, 68, 65,
    67, 32, 105, 110, 100, 101, 120, 32, 37, 100, 0, 0, 0, 0, 0, 0, 94, 51, 87,
    65, 82, 78, 73, 78, 71, 58, 32, 83, 101, 114, 118, 101, 114, 32, 115, 101,
    110, 116, 32, 105, 110, 118, 97, 108, 105, 100, 32, 102, 115, 95, 103, 97,
    109, 101, 32, 118, 97, 108, 117, 101, 32, 37, 115, 10, 0, 0, 0, 0, 0, 0, 0,
    0, 70, 117, 108, 108, 115, 99, 114, 101, 101, 110, 32, 110, 111, 116, 32,
    97, 108, 108, 111, 119, 101, 100, 32, 119, 105, 116, 104, 32, 105, 110, 95,
    110, 111, 103, 114, 97, 98, 32, 49, 10, 0, 0, 0, 0, 0, 0, 0, 0, 103, 101,
    116, 105, 110, 102, 111, 32, 120, 120, 120, 0, 0, 0, 0, 0, 104, 105, 110,
    116, 0, 0, 0, 0, 65, 65, 83, 32, 102, 105, 108, 101, 32, 110, 111, 116, 32,
    115, 101, 113, 117, 101, 110, 116, 105, 97, 108, 108, 121, 32, 114, 101, 97,
    100, 10, 0, 83, 99, 114, 101, 101, 110, 83, 104, 111, 116, 58, 32, 67, 111,
    117, 108, 100, 110, 39, 116, 32, 99, 114, 101, 97, 116, 101, 32, 97, 32,
    102, 105, 108, 101, 10, 0, 0, 0, 0, 0, 71, 98, 0, 0, 0, 0, 0, 0, 117, 115,
    97, 103, 101, 58, 32, 112, 105, 110, 103, 32, 91, 45, 52, 124, 45, 54, 93,
    32, 115, 101, 114, 118, 101, 114, 10, 0, 0, 0, 0, 0, 35, 100, 101, 102, 105,
    110, 101, 32, 83, 87, 73, 90, 90, 76, 69, 95, 78, 79, 82, 77, 65, 76, 77,
    65, 80, 10, 0, 0, 0, 0, 0, 0, 65, 65, 83, 95, 85, 112, 100, 97, 116, 101,
    69, 110, 116, 105, 116, 121, 58, 32, 110, 111, 116, 32, 108, 111, 97, 100,
    101, 100, 10, 0, 0, 0, 95, 116, 101, 120, 116, 117, 114, 101, 115, 99, 114,
    97, 116, 99, 104, 37, 100, 0, 0, 0, 0, 0, 0, 0, 103, 108, 67, 114, 101, 97,
    116, 101, 80, 114, 111, 103, 114, 97, 109, 79, 98, 106, 101, 99, 116, 65,
    82, 66, 0, 0, 0, 0, 0, 0, 0, 0, 46, 46, 46, 99, 97, 108, 99, 117, 108, 97,
    116, 105, 110, 103, 32, 119, 111, 114, 108, 100, 32, 86, 66, 79, 32, 37,
    100, 32, 40, 32, 37, 105, 32, 118, 101, 114, 116, 115, 32, 37, 105, 32, 116,
    114, 105, 115, 32, 41, 10, 0, 0, 0, 0, 0, 0, 0, 83, 68, 76, 32, 118, 101,
    114, 115, 105, 111, 110, 32, 49, 46, 50, 46, 49, 48, 32, 111, 114, 32, 103,
    114, 101, 97, 116, 101, 114, 32, 105, 115, 32, 114, 101, 113, 117, 105, 114,
    101, 100, 44, 32, 98, 117, 116, 32, 111, 110, 108, 121, 32, 118, 101, 114,
    115, 105, 111, 110, 32, 37, 100, 46, 37, 100, 46, 37, 100, 32, 119, 97, 115,
    32, 102, 111, 117, 110, 100, 46, 32, 89, 111, 117, 32, 109, 97, 121, 32, 98,
    101, 32, 97, 98, 108, 101, 32, 116, 111, 32, 111, 98, 116, 97, 105, 110, 32,
    97, 32, 109, 111, 114, 101, 32, 114, 101, 99, 101, 110, 116, 32, 99, 111,
    112, 121, 32, 102, 114, 111, 109, 32, 104, 116, 116, 112, 58, 47, 47, 119,
    119, 119, 46, 108, 105, 98, 115, 100, 108, 46, 111, 114, 103, 47, 46, 0, 0,
    0, 0, 0, 0, 0, 65, 85, 68, 73, 79, 95, 85, 49, 54, 77, 83, 66, 0, 0, 0, 0,
    103, 101, 116, 115, 101, 114, 118, 101, 114, 115, 32, 37, 115, 32, 37, 115,
    0, 0, 0, 0, 0, 0, 0, 0, 72, 97, 116, 115, 58, 32, 32, 32, 32, 32, 32, 32,
    37, 100, 10, 0, 45, 0, 0, 0, 0, 0, 0, 0, 102, 105, 108, 101, 32, 37, 115,
    32, 110, 111, 116, 32, 102, 111, 117, 110, 100, 0, 0, 0, 0, 0, 0, 0, 99, 97,
    110, 110, 111, 116, 32, 105, 110, 116, 101, 114, 98, 114, 101, 101, 100, 32,
    119, 101, 105, 103, 104, 116, 32, 99, 111, 110, 102, 105, 103, 115, 44, 32,
    117, 110, 101, 113, 117, 97, 108, 32, 110, 117, 109, 119, 101, 105, 103,
    104, 116, 115, 10, 0, 0, 0, 114, 97, 100, 105, 117, 115, 0, 0, 51, 0, 0, 0,
    0, 0, 0, 0, 119, 101, 105, 103, 104, 116, 0, 0, 59, 0, 0, 0, 0, 0, 0, 0, 99,
    111, 117, 108, 100, 110, 39, 116, 32, 108, 111, 97, 100, 32, 97, 110, 121,
    32, 115, 107, 105, 108, 108, 32, 102, 114, 111, 109, 32, 37, 115, 10, 0, 0,
    0, 0, 0, 0, 0, 0, 116, 101, 108, 101, 112, 111, 114, 116, 101, 100, 32, 105,
    110, 116, 111, 32, 115, 108, 105, 109, 101, 32, 111, 114, 32, 108, 97, 118,
    97, 32, 97, 116, 32, 100, 101, 115, 116, 32, 37, 115, 10, 0, 0, 0, 0, 0, 0,
    0, 112, 104, 121, 115, 95, 106, 117, 109, 112, 118, 101, 108, 0, 0, 0, 0,
    103, 101, 116, 115, 101, 114, 118, 101, 114, 115, 32, 37, 115, 0, 0, 0, 110,
    101, 120, 116, 100, 101, 109, 111, 0, 0, 0, 0, 0, 0, 0, 0, 86, 77, 95, 70,
    114, 101, 101, 40, 37, 115, 41, 32, 111, 110, 32, 114, 117, 110, 110, 105,
    110, 103, 32, 118, 109, 0, 0, 0, 0, 0, 0, 0, 103, 95, 104, 117, 109, 97,
    110, 112, 108, 97, 121, 101, 114, 115, 0, 0, 115, 118, 95, 109, 97, 120, 82,
    97, 116, 101, 0, 0, 0, 0, 0, 0, 79, 112, 101, 110, 105, 110, 103, 32, 113,
    99, 111, 110, 115, 111, 108, 101, 46, 108, 111, 103, 32, 102, 97, 105, 108,
    101, 100, 33, 10, 0, 0, 0, 112, 114, 105, 110, 116, 10, 37, 115, 10, 0, 0,
    0, 0, 0, 0, 0, 37, 100, 32, 37, 115, 32, 37, 100, 10, 0, 0, 0, 0, 0, 0, 0,
    98, 111, 116, 95, 114, 101, 112, 111, 114, 116, 0, 0, 0, 0, 0, 0, 70, 97,
    105, 108, 101, 100, 32, 116, 111, 32, 99, 114, 101, 97, 116, 101, 32, 79,
    112, 101, 110, 65, 76, 32, 99, 111, 110, 116, 101, 120, 116, 46, 10, 0, 0,
    0, 0, 0, 0, 0, 81, 117, 97, 107, 101, 51, 65, 114, 101, 110, 97, 0, 0, 0, 0,
    0, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45,
    45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 10, 0, 0, 0, 0, 0,
    0, 0, 110, 111, 32, 112, 111, 114, 116, 97, 108, 32, 111, 102, 32, 97, 114,
    101, 97, 32, 37, 100, 10, 0, 0, 0, 37, 100, 32, 37, 100, 32, 37, 115, 10, 0,
    0, 0, 0, 0, 0, 0, 87, 65, 82, 78, 73, 78, 71, 58, 32, 78, 69, 84, 95, 79,
    112, 101, 110, 83, 111, 99, 107, 115, 58, 32, 103, 101, 116, 104, 111, 115,
    116, 98, 121, 110, 97, 109, 101, 58, 32, 37, 115, 10, 0, 0, 0, 0, 0, 0, 97,
    110, 103, 108, 101, 115, 91, 49, 93, 0, 0, 0, 0, 0, 0, 0, 73, 78, 83, 0, 0,
    0, 0, 0, 46, 99, 102, 103, 0, 0, 0, 0, 83, 0, 0, 0, 0, 0, 0, 0, 98, 115,
    112, 32, 101, 110, 116, 105, 116, 121, 32, 111, 117, 116, 32, 111, 102, 32,
    114, 97, 110, 103, 101, 10, 0, 0, 0, 0, 0, 0, 0, 0, 103, 101, 116, 115, 101,
    114, 118, 101, 114, 115, 69, 120, 116, 32, 37, 115, 32, 37, 115, 32, 105,
    112, 118, 54, 0, 0, 0, 0, 0, 0, 0, 0, 103, 101, 116, 115, 101, 114, 118,
    101, 114, 115, 69, 120, 116, 32, 37, 115, 32, 37, 115, 0, 0, 0, 0, 0, 67,
    76, 95, 73, 110, 105, 116, 67, 71, 97, 109, 101, 58, 32, 37, 53, 46, 50,
    102, 32, 115, 101, 99, 111, 110, 100, 115, 10, 0, 0, 0, 0, 45, 108, 111,
    111, 107, 117, 112, 0, 90, 95, 70, 114, 101, 101, 58, 32, 102, 114, 101,
    101, 100, 32, 97, 32, 102, 114, 101, 101, 100, 32, 112, 111, 105, 110, 116,
    101, 114, 0, 0, 0, 110, 101, 116, 95, 101, 110, 97, 98, 108, 101, 100, 0, 0,
    0, 0, 0, 82, 101, 113, 117, 101, 115, 116, 105, 110, 103, 32, 115, 101, 114,
    118, 101, 114, 115, 32, 102, 114, 111, 109, 32, 109, 97, 115, 116, 101, 114,
    32, 37, 115, 46, 46, 46, 10, 0, 0, 0, 69, 82, 82, 79, 82, 58, 32, 84, 111,
    112, 32, 111, 102, 32, 99, 104, 117, 110, 107, 115, 116, 97, 99, 107, 32,
    98, 114, 101, 97, 99, 104, 101, 100, 0, 0, 0, 0, 0, 0, 0, 67, 76, 95, 71,
    108, 111, 98, 97, 108, 83, 101, 114, 118, 101, 114, 115, 95, 102, 58, 32,
    69, 114, 114, 111, 114, 58, 32, 99, 111, 117, 108, 100, 32, 110, 111, 116,
    32, 114, 101, 115, 111, 108, 118, 101, 32, 97, 100, 100, 114, 101, 115, 115,
    32, 111, 102, 32, 109, 97, 115, 116, 101, 114, 32, 37, 115, 10, 0, 0, 0, 0,
    0, 0, 103, 108, 84, 101, 120, 80, 97, 114, 97, 109, 101, 116, 101, 114, 105,
    118, 0, 0, 0, 0, 0, 0, 0, 0, 85, 110, 115, 117, 112, 112, 111, 114, 116,
    101, 100, 32, 99, 111, 108, 111, 114, 32, 99, 111, 110, 118, 101, 114, 115,
    105, 111, 110, 32, 114, 101, 113, 117, 101, 115, 116, 0, 0, 0, 0, 102, 115,
    95, 103, 97, 109, 101, 0, 105, 110, 95, 110, 111, 103, 114, 97, 98, 0, 0, 0,
    0, 0, 0, 0, 94, 51, 69, 88, 69, 67, 95, 78, 79, 87, 32, 37, 115, 10, 0, 0,
    67, 76, 95, 71, 108, 111, 98, 97, 108, 83, 101, 114, 118, 101, 114, 115, 95,
    102, 58, 32, 69, 114, 114, 111, 114, 58, 32, 78, 111, 32, 109, 97, 115, 116,
    101, 114, 32, 115, 101, 114, 118, 101, 114, 32, 97, 100, 100, 114, 101, 115,
    115, 32, 103, 105, 118, 101, 110, 46, 10, 0, 0, 0, 0, 0, 97, 108, 112, 104,
    97, 115, 104, 97, 100, 111, 119, 0, 0, 0, 0, 0, 115, 99, 114, 101, 101, 110,
    115, 104, 111, 116, 115, 47, 37, 115, 46, 116, 103, 97, 0, 0, 0, 0, 0, 0,
    77, 98, 0, 0, 0, 0, 0, 0, 115, 118, 95, 109, 97, 115, 116, 101, 114, 37,
    100, 0, 0, 0, 0, 0, 35, 100, 101, 102, 105, 110, 101, 32, 85, 83, 69, 95,
    83, 72, 65, 68, 79, 87, 77, 65, 80, 10, 0, 0, 95, 115, 99, 114, 101, 101,
    110, 115, 104, 97, 100, 111, 119, 0, 0, 0, 103, 108, 67, 111, 109, 112, 105,
    108, 101, 83, 104, 97, 100, 101, 114, 65, 82, 66, 0, 0, 0, 0, 0, 0, 105,
    110, 102, 111, 95, 112, 108, 97, 121, 101, 114, 95, 100, 101, 97, 116, 104,
    109, 97, 116, 99, 104, 0, 0, 67, 77, 95, 65, 100, 106, 117, 115, 116, 65,
    114, 101, 97, 80, 111, 114, 116, 97, 108, 83, 116, 97, 116, 101, 58, 32,
    110, 101, 103, 97, 116, 105, 118, 101, 32, 114, 101, 102, 101, 114, 101,
    110, 99, 101, 32, 99, 111, 117, 110, 116, 0, 0, 0, 0, 0, 0, 82, 101, 99,
    101, 105, 118, 101, 100, 32, 115, 105, 103, 110, 97, 108, 32, 37, 100, 0, 0,
    0, 0, 0, 0, 65, 85, 68, 73, 79, 95, 83, 49, 54, 76, 83, 66, 0, 0, 0, 0, 117,
    115, 97, 103, 101, 58, 32, 103, 108, 111, 98, 97, 108, 115, 101, 114, 118,
    101, 114, 115, 32, 60, 109, 97, 115, 116, 101, 114, 35, 32, 48, 45, 37, 100,
    62, 32, 60, 112, 114, 111, 116, 111, 99, 111, 108, 62, 32, 91, 107, 101,
    121, 119, 111, 114, 100, 115, 93, 10, 0, 0, 0, 0, 0, 0, 65, 120, 101, 115,
    58, 32, 32, 32, 32, 32, 32, 32, 37, 100, 10, 0, 43, 0, 0, 0, 0, 0, 0, 0, 35,
    105, 110, 99, 108, 117, 100, 101, 32, 119, 105, 116, 104, 111, 117, 116, 32,
    102, 105, 108, 101, 32, 110, 97, 109, 101, 32, 98, 101, 116, 119, 101, 101,
    110, 32, 60, 32, 62, 0, 0, 99, 97, 110, 110, 111, 116, 32, 105, 110, 116,
    101, 114, 98, 114, 101, 101, 100, 32, 119, 101, 105, 103, 104, 116, 32, 99,
    111, 110, 102, 105, 103, 115, 44, 32, 117, 110, 101, 113, 117, 97, 108, 32,
    110, 101, 120, 116, 10, 0, 100, 97, 109, 97, 103, 101, 0, 0, 101, 110, 116,
    105, 116, 121, 116, 121, 112, 101, 109, 105, 115, 115, 105, 108, 101, 0, 0,
    0, 0, 0, 0, 0, 114, 97, 110, 103, 101, 0, 0, 0, 117, 110, 107, 110, 111,
    119, 110, 32, 109, 101, 115, 115, 97, 103, 101, 32, 99, 111, 109, 112, 111,
    110, 101, 110, 116, 32, 37, 115, 0, 0, 0, 0, 108, 111, 97, 100, 101, 100,
    32, 100, 101, 102, 97, 117, 108, 116, 32, 115, 107, 105, 108, 108, 32, 37,
    102, 32, 102, 114, 111, 109, 32, 37, 115, 10, 0, 0, 0, 0, 0, 0, 0, 0, 97,
    110, 103, 108, 101, 0, 0, 0, 51, 51, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255,
    103, 101, 116, 105, 110, 102, 111, 32, 120, 120, 120, 0, 37, 115, 32, 108,
    111, 97, 100, 101, 100, 32, 105, 110, 32, 37, 100, 32, 98, 121, 116, 101,
    115, 32, 111, 110, 32, 116, 104, 101, 32, 104, 117, 110, 107, 10, 0, 0, 0,
    0, 0, 0, 99, 108, 105, 101, 110, 116, 115, 0, 115, 118, 95, 109, 105, 110,
    82, 97, 116, 101, 0, 0, 0, 0, 0, 0, 118, 109, 95, 99, 103, 97, 109, 101, 0,
    0, 0, 0, 0, 0, 0, 0, 82, 101, 106, 101, 99, 116, 101, 100, 32, 97, 32, 99,
    111, 110, 110, 101, 99, 116, 105, 111, 110, 46, 10, 0, 66, 97, 115, 101, 87,
    105, 110, 100, 105, 110, 103, 70, 111, 114, 80, 108, 97, 110, 101, 58, 32,
    110, 111, 32, 97, 120, 105, 115, 32, 102, 111, 117, 110, 100, 0, 0, 0, 0, 0,
    0, 37, 115, 47, 37, 115, 0, 0, 0, 98, 111, 116, 95, 112, 97, 117, 115, 101,
    0, 0, 0, 0, 0, 0, 0, 70, 97, 105, 108, 101, 100, 32, 116, 111, 32, 111, 112,
    101, 110, 32, 79, 112, 101, 110, 65, 76, 32, 100, 101, 118, 105, 99, 101,
    46, 10, 0, 0, 83, 99, 97, 110, 110, 105, 110, 103, 32, 102, 111, 114, 32,
    115, 101, 114, 118, 101, 114, 115, 32, 111, 110, 32, 116, 104, 101, 32, 108,
    111, 99, 97, 108, 32, 110, 101, 116, 119, 111, 114, 107, 46, 46, 46, 10, 0,
    0, 0, 83, 111, 117, 110, 100, 32, 105, 110, 105, 116, 105, 97, 108, 105,
    122, 97, 116, 105, 111, 110, 32, 102, 97, 105, 108, 101, 100, 46, 10, 0, 0,
    0, 83, 95, 85, 112, 100, 97, 116, 101, 69, 110, 116, 105, 116, 121, 80, 111,
    115, 105, 116, 105, 111, 110, 58, 32, 98, 97, 100, 32, 101, 110, 116, 105,
    116, 121, 110, 117, 109, 32, 37, 105, 0, 0, 0, 0, 0, 0, 0, 0, 87, 65, 82,
    78, 73, 78, 71, 58, 32, 78, 69, 84, 95, 79, 112, 101, 110, 83, 111, 99, 107,
    115, 58, 32, 115, 111, 99, 107, 101, 116, 58, 32, 37, 115, 10, 0, 0, 0, 0,
    0, 114, 98, 0, 0, 0, 0, 0, 0, 99, 108, 105, 101, 110, 116, 78, 117, 109, 0,
    0, 0, 0, 0, 0, 0, 70, 49, 53, 0, 0, 0, 0, 0, 46, 116, 120, 116, 0, 0, 0, 0,
    115, 101, 116, 97, 32, 37, 115, 32, 34, 37, 115, 34, 10, 0, 0, 0, 37, 45,
    50, 100, 32, 32, 32, 37, 45, 51, 100, 32, 32, 32, 32, 37, 45, 51, 100, 32,
    32, 32, 37, 115, 10, 0, 0, 0, 0, 0, 0, 0, 117, 110, 107, 110, 111, 119, 110,
    0, 86, 77, 95, 67, 114, 101, 97, 116, 101, 32, 111, 110, 32, 99, 103, 97,
    109, 101, 32, 102, 97, 105, 108, 101, 100, 0, 0, 0, 0, 0, 0, 0, 87, 65, 82,
    78, 73, 78, 71, 58, 32, 98, 101, 118, 101, 108, 32, 112, 108, 97, 110, 101,
    32, 97, 108, 114, 101, 97, 100, 121, 32, 117, 115, 101, 100, 10, 0, 0, 0, 0,
    0, 0, 43, 108, 111, 111, 107, 117, 112, 0, 90, 95, 70, 114, 101, 101, 58,
    32, 102, 114, 101, 101, 100, 32, 97, 32, 112, 111, 105, 110, 116, 101, 114,
    32, 119, 105, 116, 104, 111, 117, 116, 32, 90, 79, 78, 69, 73, 68, 0, 0, 49,
    46, 50, 46, 51, 0, 0, 0, 37, 100, 32, 37, 100, 0, 0, 0, 92, 37, 115, 0, 0,
    0, 0, 0, 69, 82, 82, 79, 82, 58, 32, 66, 111, 116, 116, 111, 109, 32, 111,
    102, 32, 99, 104, 117, 110, 107, 115, 116, 97, 99, 107, 32, 98, 114, 101,
    97, 99, 104, 101, 100, 0, 0, 0, 0, 110, 117, 109, 58, 32, 115, 99, 111, 114,
    101, 58, 32, 112, 105, 110, 103, 58, 32, 110, 97, 109, 101, 58, 10, 0, 0, 0,
    0, 0, 0, 0, 0, 103, 108, 84, 101, 120, 80, 97, 114, 97, 109, 101, 116, 101,
    114, 102, 118, 0, 0, 0, 0, 0, 0, 0, 0, 37, 115, 10, 0, 0, 0, 0, 0, 84, 111,
    111, 32, 109, 97, 110, 121, 32, 99, 111, 108, 111, 114, 32, 99, 111, 109,
    112, 111, 110, 101, 110, 116, 115, 58, 32, 37, 100, 44, 32, 109, 97, 120,
    32, 37, 100, 0, 0, 0, 115, 118, 95, 114, 101, 102, 101, 114, 101, 110, 99,
    101, 100, 80, 97, 107, 78, 97, 109, 101, 115, 0, 0, 0, 71, 76, 95, 70, 82,
    79, 78, 84, 0, 0, 0, 0, 0, 0, 0, 0, 45, 45, 45, 32, 82, 66, 95, 85, 112,
    100, 97, 116, 101, 86, 66, 79, 115, 32, 45, 45, 45, 10, 0, 0, 67, 77, 111,
    100, 95, 76, 111, 97, 100, 83, 117, 98, 109, 111, 100, 101, 108, 115, 58,
    32, 102, 117, 110, 110, 121, 32, 108, 117, 109, 112, 32, 115, 105, 122, 101,
    0, 0, 0, 0, 0, 10, 80, 108, 97, 121, 101, 114, 115, 58, 10, 0, 0, 0, 0, 0,
    0, 108, 105, 103, 104, 116, 102, 105, 108, 116, 101, 114, 0, 0, 0, 0, 0, 70,
    111, 114, 99, 105, 110, 103, 32, 103, 108, 70, 105, 110, 105, 115, 104, 10,
    0, 0, 0, 0, 0, 0, 0, 115, 105, 108, 101, 110, 116, 0, 0, 107, 98, 0, 0, 0,
    0, 0, 0, 92, 0, 0, 0, 0, 0, 0, 0, 35, 100, 101, 102, 105, 110, 101, 32, 83,
    80, 69, 67, 85, 76, 65, 82, 95, 73, 83, 95, 77, 69, 84, 65, 76, 76, 73, 67,
    10, 0, 0, 0, 95, 115, 117, 110, 115, 104, 97, 100, 111, 119, 109, 97, 112,
    0, 0, 0, 103, 108, 83, 104, 97, 100, 101, 114, 83, 111, 117, 114, 99, 101,
    65, 82, 66, 0, 0, 0, 0, 0, 0, 0, 109, 105, 115, 99, 95, 99, 117, 98, 101,
    109, 97, 112, 0, 0, 0, 0, 72, 65, 67, 75, 58, 32, 114, 105, 118, 97, 49, 50,
    56, 32, 97, 112, 112, 114, 111, 120, 105, 109, 97, 116, 105, 111, 110, 115,
    10, 0, 0, 0, 68, 79, 85, 66, 76, 69, 32, 83, 73, 71, 78, 65, 76, 32, 70, 65,
    85, 76, 84, 58, 32, 82, 101, 99, 101, 105, 118, 101, 100, 32, 115, 105, 103,
    110, 97, 108, 32, 37, 100, 44, 32, 101, 120, 105, 116, 105, 110, 103, 46,
    46, 46, 10, 0, 0, 0, 0, 65, 85, 68, 73, 79, 95, 85, 49, 54, 76, 83, 66, 0,
    0, 0, 0, 37, 45, 50, 52, 115, 0, 0, 0, 78, 97, 109, 101, 58, 32, 32, 32, 32,
    32, 32, 32, 37, 115, 10, 0, 37, 0, 0, 0, 0, 0, 0, 0, 35, 105, 110, 99, 108,
    117, 100, 101, 32, 109, 105, 115, 115, 105, 110, 103, 32, 116, 114, 97, 105,
    108, 105, 110, 103, 32, 62, 0, 0, 0, 0, 0, 72, 65, 67, 75, 58, 32, 114, 97,
    103, 101, 80, 114, 111, 32, 97, 112, 112, 114, 111, 120, 105, 109, 97, 116,
    105, 111, 110, 115, 10, 0, 0, 0, 99, 97, 110, 110, 111, 116, 32, 105, 110,
    116, 101, 114, 98, 114, 101, 101, 100, 32, 119, 101, 105, 103, 104, 116, 32,
    99, 111, 110, 102, 105, 103, 115, 44, 32, 117, 110, 101, 113, 117, 97, 108,
    32, 98, 97, 108, 97, 110, 99, 101, 10, 0, 0, 0, 0, 0, 0, 103, 114, 97, 118,
    105, 116, 121, 0, 49, 48, 0, 0, 0, 0, 0, 0, 105, 110, 102, 111, 95, 99, 97,
    109, 112, 0, 0, 0, 0, 0, 0, 0, 37, 99, 114, 37, 115, 37, 99, 0, 108, 111,
    97, 100, 101, 100, 32, 99, 97, 99, 104, 101, 100, 32, 100, 101, 102, 97,
    117, 108, 116, 32, 115, 107, 105, 108, 108, 32, 37, 102, 32, 102, 114, 111,
    109, 32, 37, 115, 10, 0, 116, 101, 108, 101, 112, 111, 114, 116, 101, 114,
    32, 100, 101, 115, 116, 105, 110, 97, 116, 105, 111, 110, 32, 40, 37, 115,
    41, 32, 105, 110, 32, 115, 111, 108, 105, 100, 10, 0, 0, 0, 112, 104, 121,
    115, 95, 109, 97, 120, 98, 97, 114, 114, 105, 101, 114, 0, 37, 115, 10, 0,
    0, 0, 0, 0, 70, 97, 105, 108, 101, 100, 32, 108, 111, 97, 100, 105, 110,
    103, 32, 100, 108, 108, 44, 32, 116, 114, 121, 105, 110, 103, 32, 110, 101,
    120, 116, 10, 0, 0, 0, 0, 0, 0, 0, 0, 99, 111, 117, 108, 100, 110, 39, 116,
    32, 111, 112, 101, 110, 32, 37, 115, 0, 0, 0, 0, 0, 0, 0, 0, 83, 101, 114,
    118, 101, 114, 32, 115, 101, 116, 116, 105, 110, 103, 115, 58, 10, 0, 0, 0,
    0, 0, 0, 0, 72, 65, 67, 75, 58, 32, 117, 115, 105, 110, 103, 32, 118, 101,
    114, 116, 101, 120, 32, 108, 105, 103, 104, 116, 109, 97, 112, 32, 97, 112,
    112, 114, 111, 120, 105, 109, 97, 116, 105, 111, 110, 10, 0, 0, 0, 0, 0, 0,
    109, 97, 112, 110, 97, 109, 101, 0, 56, 0, 0, 0, 0, 0, 0, 0, 112, 114, 105,
    110, 116, 10, 83, 101, 114, 118, 101, 114, 32, 105, 115, 32, 102, 117, 108,
    108, 46, 10, 0, 0, 65, 108, 108, 32, 98, 97, 110, 115, 32, 97, 110, 100, 32,
    101, 120, 99, 101, 112, 116, 105, 111, 110, 115, 32, 104, 97, 118, 101, 32,
    98, 101, 101, 110, 32, 100, 101, 108, 101, 116, 101, 100, 46, 10, 0, 0, 0,
    0, 0, 98, 111, 116, 95, 110, 111, 99, 104, 97, 116, 0, 0, 0, 0, 0, 0, 70,
    97, 105, 108, 101, 100, 32, 116, 111, 32, 111, 112, 101, 110, 32, 79, 112,
    101, 110, 65, 76, 32, 100, 101, 118, 105, 99, 101, 32, 39, 37, 115, 39, 44,
    32, 116, 114, 121, 105, 110, 103, 32, 100, 101, 102, 97, 117, 108, 116, 46,
    10, 0, 0, 0, 0, 0, 114, 97, 116, 101, 58, 32, 37, 102, 44, 32, 97, 99, 99,
    101, 108, 83, 101, 110, 115, 105, 116, 105, 118, 105, 116, 121, 58, 32, 37,
    102, 10, 0, 83, 111, 117, 110, 100, 32, 105, 110, 105, 116, 105, 97, 108,
    105, 122, 97, 116, 105, 111, 110, 32, 115, 117, 99, 99, 101, 115, 115, 102,
    117, 108, 46, 10, 0, 0, 0, 0, 0, 0, 0, 83, 95, 66, 97, 115, 101, 95, 82, 97,
    119, 83, 97, 109, 112, 108, 101, 115, 58, 32, 111, 118, 101, 114, 102, 108,
    111, 119, 101, 100, 32, 37, 105, 32, 62, 32, 37, 105, 10, 0, 0, 79, 112,
    101, 110, 105, 110, 103, 32, 99, 111, 110, 110, 101, 99, 116, 105, 111, 110,
    32, 116, 111, 32, 83, 79, 67, 75, 83, 32, 115, 101, 114, 118, 101, 114, 46,
    10, 0, 0, 0, 0, 99, 111, 109, 112, 114, 101, 115, 115, 101, 100, 32, 116,
    101, 120, 116, 117, 114, 101, 115, 58, 32, 37, 115, 10, 0, 0, 0, 0, 0, 0, 0,
    0, 119, 101, 97, 112, 111, 110, 0, 0, 70, 49, 52, 0, 0, 0, 0, 0, 46, 115,
    104, 97, 100, 101, 114, 0, 94, 51, 87, 65, 82, 78, 73, 78, 71, 58, 32, 118,
    97, 108, 117, 101, 32, 111, 102, 32, 118, 97, 114, 105, 97, 98, 108, 101,
    32, 34, 37, 115, 34, 32, 116, 111, 111, 32, 108, 111, 110, 103, 32, 116,
    111, 32, 119, 114, 105, 116, 101, 32, 116, 111, 32, 102, 105, 108, 101, 10,
    0, 0, 0, 0, 103, 101, 116, 115, 116, 97, 116, 117, 115, 0, 0, 0, 0, 0, 0, 0,
    116, 101, 120, 101, 110, 118, 32, 97, 100, 100, 58, 32, 37, 115, 10, 0, 115,
    110, 100, 95, 114, 101, 115, 116, 97, 114, 116, 0, 0, 0, 0, 0, 37, 115, 58,
    32, 37, 115, 0, 0, 99, 103, 97, 109, 101, 0, 0, 0, 45, 98, 97, 99, 107, 0,
    0, 0, 99, 111, 109, 112, 105, 108, 101, 100, 32, 118, 101, 114, 116, 101,
    120, 32, 97, 114, 114, 97, 121, 115, 58, 32, 37, 115, 10, 0, 0, 0, 0, 0, 90,
    95, 70, 114, 101, 101, 58, 32, 78, 85, 76, 76, 32, 112, 111, 105, 110, 116,
    101, 114, 0, 0, 0, 0, 77, 65, 88, 95, 79, 84, 72, 69, 82, 95, 83, 69, 82,
    86, 69, 82, 83, 32, 104, 105, 116, 44, 32, 100, 114, 111, 112, 112, 105,
    110, 103, 32, 105, 110, 102, 111, 82, 101, 115, 112, 111, 110, 115, 101, 10,
    0, 0, 0, 109, 117, 108, 116, 105, 116, 101, 120, 116, 117, 114, 101, 58, 32,
    37, 115, 10, 0, 0, 0, 0, 0, 0, 0, 37, 100, 0, 0, 0, 0, 0, 0, 103, 108, 67,
    114, 101, 97, 116, 101, 80, 114, 111, 103, 114, 97, 109, 79, 98, 106, 101,
    99, 116, 0, 0, 0, 116, 101, 120, 116, 117, 114, 101, 32, 98, 105, 116, 115,
    58, 32, 37, 100, 10, 0, 0, 0, 0, 0, 0, 0, 70, 97, 105, 108, 101, 100, 32,
    116, 111, 32, 119, 114, 105, 116, 101, 32, 97, 118, 105, 32, 102, 105, 108,
    101, 0, 0, 0, 0, 0, 0, 0, 0, 103, 95, 104, 117, 109, 97, 110, 112, 108, 97,
    121, 101, 114, 115, 0, 0, 48, 0, 0, 0, 0, 0, 0, 0, 110, 101, 116, 116, 121,
    112, 101, 0, 103, 108, 71, 101, 116, 84, 101, 120, 80, 97, 114, 97, 109,
    101, 116, 101, 114, 105, 118, 0, 0, 0, 0, 0, 112, 105, 99, 109, 105, 112,
    58, 32, 37, 100, 10, 0, 0, 0, 0, 0, 67, 67, 73, 82, 54, 48, 49, 32, 115, 97,
    109, 112, 108, 105, 110, 103, 32, 110, 111, 116, 32, 105, 109, 112, 108,
    101, 109, 101, 110, 116, 101, 100, 32, 121, 101, 116, 0, 0, 0, 0, 115, 118,
    95, 114, 101, 102, 101, 114, 101, 110, 99, 101, 100, 80, 97, 107, 115, 0, 0,
    0, 0, 0, 0, 0, 114, 95, 97, 118, 97, 105, 108, 97, 98, 108, 101, 77, 111,
    100, 101, 115, 0, 0, 0, 0, 0, 0, 0, 0, 115, 101, 99, 116, 111, 114, 32, 37,
    105, 58, 32, 37, 105, 32, 101, 110, 116, 105, 116, 105, 101, 115, 10, 0,
    112, 105, 110, 103, 32, 116, 105, 109, 101, 32, 37, 100, 109, 115, 32, 102,
    114, 111, 109, 32, 37, 115, 10, 0, 102, 111, 103, 0, 0, 0, 0, 0, 109, 100,
    51, 0, 0, 0, 0, 0, 116, 101, 120, 116, 117, 114, 101, 109, 111, 100, 101,
    58, 32, 37, 115, 10, 0, 0, 0, 0, 0, 0, 0, 0, 108, 101, 118, 101, 108, 115,
    104, 111, 116, 0, 0, 0, 0, 0, 0, 0, 98, 32, 0, 0, 0, 0, 0, 0, 68, 105, 102,
    102, 101, 114, 101, 110, 116, 32, 112, 114, 111, 116, 111, 99, 111, 108, 32,
    105, 110, 102, 111, 32, 112, 97, 99, 107, 101, 116, 58, 32, 37, 115, 10, 0,
    0, 0, 0, 0, 35, 100, 101, 102, 105, 110, 101, 32, 114, 95, 100, 101, 108,
    117, 120, 101, 83, 112, 101, 99, 117, 108, 97, 114, 32, 37, 102, 10, 0, 0,
    0, 0, 95, 115, 104, 97, 100, 111, 119, 109, 97, 112, 37, 100, 0, 0, 0, 0,
    103, 108, 67, 114, 101, 97, 116, 101, 83, 104, 97, 100, 101, 114, 79, 98,
    106, 101, 99, 116, 65, 82, 66, 0, 82, 69, 95, 76, 111, 97, 100, 87, 111,
    114, 108, 100, 77, 97, 112, 58, 32, 37, 115, 32, 104, 97, 115, 32, 119, 114,
    111, 110, 103, 32, 118, 101, 114, 115, 105, 111, 110, 32, 110, 117, 109, 98,
    101, 114, 32, 40, 37, 105, 32, 115, 104, 111, 117, 108, 100, 32, 98, 101,
    32, 37, 105, 41, 0, 0, 71, 65, 77, 77, 65, 58, 32, 115, 111, 102, 116, 119,
    97, 114, 101, 32, 119, 47, 32, 37, 100, 32, 111, 118, 101, 114, 98, 114,
    105, 103, 104, 116, 32, 98, 105, 116, 115, 10, 0, 0, 87, 65, 82, 78, 73, 78,
    71, 58, 32, 109, 115, 103, 32, 111, 118, 101, 114, 102, 108, 111, 119, 101,
    100, 32, 102, 111, 114, 32, 37, 115, 10, 0, 77, 65, 88, 95, 65, 76, 76, 79,
    67, 95, 67, 72, 85, 78, 75, 32, 105, 115, 32, 119, 114, 111, 110, 103, 44,
    32, 112, 108, 101, 97, 115, 101, 32, 102, 105, 120, 0, 0, 0, 0, 105, 111,
    113, 51, 32, 49, 46, 51, 54, 95, 71, 73, 84, 95, 52, 102, 55, 100, 55, 98,
    102, 45, 50, 48, 49, 52, 45, 48, 50, 45, 48, 49, 32, 99, 108, 105, 101, 110,
    116, 32, 40, 37, 115, 41, 10, 0, 0, 0, 65, 85, 68, 73, 79, 95, 83, 56, 0, 0,
    0, 0, 0, 0, 0, 0, 71, 97, 109, 101, 32, 109, 105, 115, 109, 97, 116, 99,
    104, 32, 105, 110, 32, 105, 110, 102, 111, 32, 112, 97, 99, 107, 101, 116,
    58, 32, 37, 115, 10, 0, 0, 0, 0, 0, 0, 0, 74, 111, 121, 115, 116, 105, 99,
    107, 32, 37, 100, 32, 111, 112, 101, 110, 101, 100, 10, 0, 0, 0, 0, 0, 47,
    0, 0, 0, 0, 0, 0, 0, 35, 105, 110, 99, 108, 117, 100, 101, 32, 119, 105,
    116, 104, 111, 117, 116, 32, 102, 105, 108, 101, 32, 110, 97, 109, 101, 0,
    0, 0, 0, 0, 0, 71, 65, 77, 77, 65, 58, 32, 104, 97, 114, 100, 119, 97, 114,
    101, 32, 119, 47, 32, 37, 100, 32, 111, 118, 101, 114, 98, 114, 105, 103,
    104, 116, 32, 98, 105, 116, 115, 10, 0, 0, 99, 97, 110, 110, 111, 116, 32,
    105, 110, 116, 101, 114, 98, 114, 101, 101, 100, 32, 119, 101, 105, 103,
    104, 116, 32, 99, 111, 110, 102, 105, 103, 115, 44, 32, 117, 110, 101, 113,
    117, 97, 108, 32, 99, 104, 105, 108, 100, 10, 0, 0, 0, 0, 0, 0, 0, 0, 102,
    108, 97, 103, 115, 0, 0, 0, 119, 101, 97, 112, 105, 110, 100, 101, 120, 95,
    103, 114, 97, 112, 112, 108, 101, 0, 0, 0, 0, 0, 0, 0, 109, 101, 115, 115,
    97, 103, 101, 0, 35, 52, 54, 50, 32, 78, 101, 116, 99, 104, 97, 110, 95, 84,
    114, 97, 110, 115, 109, 105, 116, 78, 101, 120, 116, 70, 114, 97, 103, 109,
    101, 110, 116, 58, 32, 112, 111, 112, 112, 105, 110, 103, 32, 97, 32, 113,
    117, 101, 117, 101, 100, 32, 109, 101, 115, 115, 97, 103, 101, 32, 102, 111,
    114, 32, 116, 114, 97, 110, 115, 109, 105, 116, 10, 0, 0, 0, 0, 0, 0, 0, 37,
    99, 118, 37, 108, 100, 37, 99, 0, 0, 0, 0, 0, 0, 0, 0, 108, 111, 97, 100,
    101, 100, 32, 115, 107, 105, 108, 108, 32, 37, 102, 32, 102, 114, 111, 109,
    32, 37, 115, 10, 0, 0, 0, 0, 0, 0, 0, 0, 116, 101, 108, 101, 112, 111, 114,
    116, 101, 114, 32, 100, 101, 115, 116, 105, 110, 97, 116, 105, 111, 110, 32,
    40, 37, 115, 41, 32, 119, 105, 116, 104, 111, 117, 116, 32, 111, 114, 105,
    103, 105, 110, 10, 0, 0, 0, 0, 0, 49, 56, 0, 0, 0, 0, 0, 0, 103, 97, 109,
    101, 110, 97, 109, 101, 0, 0, 0, 0, 0, 0, 0, 0, 84, 114, 121, 32, 108, 111,
    97, 100, 105, 110, 103, 32, 100, 108, 108, 32, 102, 105, 108, 101, 32, 37,
    115, 10, 0, 0, 0, 0, 0, 0, 0, 0, 80, 114, 111, 116, 111, 99, 111, 108, 32,
    37, 100, 32, 110, 111, 116, 32, 115, 117, 112, 112, 111, 114, 116, 101, 100,
    32, 102, 111, 114, 32, 100, 101, 109, 111, 115, 10, 0, 0, 0, 0, 78, 47, 65,
    10, 0, 0, 0, 0, 104, 111, 115, 116, 110, 97, 109, 101, 0, 0, 0, 0, 0, 0, 0,
    0, 115, 118, 95, 109, 97, 120, 99, 108, 105, 101, 110, 116, 115, 0, 0, 0,
    115, 101, 114, 118, 101, 114, 32, 105, 115, 32, 102, 117, 108, 108, 32, 111,
    110, 32, 108, 111, 99, 97, 108, 32, 99, 111, 110, 110, 101, 99, 116, 0, 67,
    97, 110, 110, 111, 116, 32, 101, 115, 116, 105, 109, 97, 116, 101, 32, 100,
    105, 115, 112, 108, 97, 121, 32, 97, 115, 112, 101, 99, 116, 44, 32, 97,
    115, 115, 117, 109, 105, 110, 103, 32, 49, 46, 51, 51, 51, 10, 0, 83, 101,
    114, 118, 101, 114, 32, 105, 115, 32, 110, 111, 116, 32, 114, 117, 110, 110,
    105, 110, 103, 46, 10, 0, 98, 111, 116, 95, 102, 97, 115, 116, 99, 104, 97,
    116, 0, 0, 0, 0, 82, 95, 80, 111, 105, 110, 116, 73, 110, 76, 101, 97, 102,
    58, 32, 98, 97, 100, 32, 109, 111, 100, 101, 108, 0, 0, 0, 0, 0, 0, 0, 0,
    115, 95, 97, 108, 65, 118, 97, 105, 108, 97, 98, 108, 101, 68, 101, 118,
    105, 99, 101, 115, 0, 0, 0, 0, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45,
    45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 10, 0, 0, 0, 0, 0, 0, 0, 0,
    83, 111, 117, 110, 100, 32, 105, 110, 116, 101, 114, 102, 97, 99, 101, 32,
    105, 110, 118, 97, 108, 105, 100, 0, 83, 95, 66, 97, 115, 101, 95, 82, 97,
    119, 83, 97, 109, 112, 108, 101, 115, 58, 32, 114, 101, 115, 101, 116, 116,
    105, 110, 103, 32, 109, 105, 110, 105, 109, 117, 109, 58, 32, 37, 105, 32,
    60, 32, 37, 105, 10, 0, 0, 78, 69, 84, 95, 74, 111, 105, 110, 77, 117, 108,
    116, 105, 99, 97, 115, 116, 54, 58, 32, 67, 111, 117, 108, 100, 110, 39,
    116, 32, 106, 111, 105, 110, 32, 109, 117, 108, 116, 105, 99, 97, 115, 116,
    32, 103, 114, 111, 117, 112, 58, 32, 37, 115, 10, 0, 0, 37, 100, 10, 0, 0,
    0, 0, 0, 82, 95, 67, 114, 101, 97, 116, 101, 86, 66, 79, 58, 32, 77, 65, 88,
    95, 86, 66, 79, 83, 32, 104, 105, 116, 0, 0, 0, 0, 0, 0, 0, 111, 116, 104,
    101, 114, 69, 110, 116, 105, 116, 121, 78, 117, 109, 0, 0, 45, 45, 45, 32,
    82, 66, 95, 73, 110, 115, 116, 97, 110, 116, 81, 117, 97, 100, 50, 32, 45,
    45, 45, 10, 0, 0, 0, 0, 0, 0, 0, 0, 70, 49, 51, 0, 0, 0, 0, 0, 113, 51, 107,
    101, 121, 0, 0, 0, 83, 72, 65, 68, 69, 82, 95, 77, 65, 88, 95, 86, 69, 82,
    84, 69, 88, 69, 83, 32, 104, 105, 116, 32, 105, 110, 32, 70, 105, 108, 108,
    67, 108, 111, 117, 100, 121, 83, 107, 121, 83, 105, 100, 101, 40, 41, 0, 0,
    99, 108, 95, 99, 100, 107, 101, 121, 0, 0, 0, 0, 0, 0, 0, 0, 87, 65, 82, 78,
    73, 78, 71, 58, 32, 82, 101, 99, 117, 114, 115, 105, 118, 101, 32, 115, 104,
    117, 116, 100, 111, 119, 110, 10, 0, 0, 0, 0, 115, 118, 99, 95, 103, 97,
    109, 101, 115, 116, 97, 116, 101, 0, 0, 0, 77, 79, 68, 69, 58, 32, 37, 100,
    44, 32, 37, 100, 32, 120, 32, 37, 100, 32, 37, 115, 32, 104, 122, 58, 0, 0,
    0, 0, 0, 0, 0, 0, 45, 45, 45, 45, 45, 32, 67, 108, 105, 101, 110, 116, 32,
    83, 104, 117, 116, 100, 111, 119, 110, 32, 40, 37, 115, 41, 32, 45, 45, 45,
    45, 45, 10, 0, 0, 0, 0, 0, 0, 0, 118, 109, 95, 99, 103, 97, 109, 101, 0, 0,
    0, 0, 0, 0, 0, 0, 10, 80, 73, 88, 69, 76, 70, 79, 82, 77, 65, 84, 58, 32,
    99, 111, 108, 111, 114, 40, 37, 100, 45, 98, 105, 116, 115, 41, 32, 90, 40,
    37, 100, 45, 98, 105, 116, 41, 32, 115, 116, 101, 110, 99, 105, 108, 40, 37,
    100, 45, 98, 105, 116, 115, 41, 10, 0, 0, 0, 0, 0, 0, 0, 0, 43, 98, 97, 99,
    107, 0, 0, 0, 37, 115, 10, 0, 0, 0, 0, 0, 45, 45, 45, 45, 45, 32, 67, 108,
    105, 101, 110, 116, 32, 73, 110, 105, 116, 105, 97, 108, 105, 122, 97, 116,
    105, 111, 110, 32, 67, 111, 109, 112, 108, 101, 116, 101, 32, 45, 45, 45,
    45, 45, 10, 0, 0, 0, 0, 0, 119, 97, 105, 116, 0, 0, 0, 0, 87, 65, 82, 78,
    73, 78, 71, 58, 32, 105, 110, 118, 97, 108, 105, 100, 32, 97, 108, 112, 104,
    97, 70, 117, 110, 99, 32, 110, 97, 109, 101, 32, 39, 37, 115, 39, 32, 105,
    110, 32, 115, 104, 97, 100, 101, 114, 32, 39, 37, 115, 39, 10, 0, 0, 0, 0,
    71, 76, 95, 77, 65, 88, 95, 84, 69, 88, 84, 85, 82, 69, 95, 85, 78, 73, 84,
    83, 95, 65, 82, 66, 58, 32, 37, 100, 10, 0, 0, 0, 87, 65, 82, 78, 73, 78,
    71, 58, 32, 109, 105, 115, 115, 105, 110, 103, 32, 115, 111, 114, 116, 32,
    112, 97, 114, 97, 109, 101, 116, 101, 114, 32, 105, 110, 32, 115, 104, 97,
    100, 101, 114, 32, 39, 37, 115, 39, 10, 0, 65, 117, 116, 111, 115, 112, 114,
    105, 116, 101, 32, 115, 104, 97, 100, 101, 114, 32, 37, 115, 32, 104, 97,
    100, 32, 111, 100, 100, 32, 118, 101, 114, 116, 101, 120, 32, 99, 111, 117,
    110, 116, 10, 0, 0, 0, 0, 0, 0, 82, 66, 95, 69, 110, 100, 83, 117, 114, 102,
    97, 99, 101, 40, 41, 32, 45, 32, 83, 72, 65, 68, 69, 82, 95, 77, 65, 88, 95,
    86, 69, 82, 84, 69, 88, 69, 83, 32, 104, 105, 116, 0, 0, 0, 0, 0, 0, 0, 99,
    108, 95, 103, 117, 105, 100, 0, 82, 69, 95, 65, 100, 100, 82, 101, 102, 69,
    110, 116, 105, 116, 121, 84, 111, 83, 99, 101, 110, 101, 32, 112, 97, 115,
    115, 101, 100, 32, 97, 32, 114, 101, 102, 69, 110, 116, 105, 116, 121, 32,
    119, 104, 105, 99, 104, 32, 104, 97, 115, 32, 97, 110, 32, 111, 114, 105,
    103, 105, 110, 32, 119, 105, 116, 104, 32, 97, 32, 78, 97, 78, 32, 99, 111,
    109, 112, 111, 110, 101, 110, 116, 10, 0, 0, 0, 0, 0, 67, 77, 95, 76, 101,
    97, 102, 65, 114, 101, 97, 58, 32, 98, 97, 100, 32, 110, 117, 109, 98, 101,
    114, 0, 82, 95, 76, 111, 97, 100, 73, 81, 77, 58, 32, 37, 115, 32, 104, 97,
    115, 32, 109, 111, 114, 101, 32, 116, 104, 97, 110, 32, 37, 100, 32, 106,
    111, 105, 110, 116, 115, 32, 40, 37, 100, 41, 46, 10, 0, 0, 0, 0, 71, 69,
    49, 50, 56, 0, 0, 0, 71, 76, 95, 77, 65, 88, 95, 84, 69, 88, 84, 85, 82, 69,
    95, 83, 73, 90, 69, 58, 32, 37, 100, 10, 0, 0, 0, 0, 0, 0, 0, 0, 37, 115,
    95, 0, 0, 0, 0, 0, 103, 95, 110, 101, 101, 100, 112, 97, 115, 115, 0, 0, 0,
    0, 0, 0, 82, 95, 82, 101, 103, 105, 115, 116, 101, 114, 77, 68, 51, 58, 32,
    117, 110, 107, 110, 111, 119, 110, 32, 102, 105, 108, 101, 105, 100, 32,
    102, 111, 114, 32, 37, 115, 10, 0, 0, 0, 87, 65, 82, 78, 73, 78, 71, 58, 32,
    115, 104, 97, 100, 101, 114, 32, 37, 115, 32, 105, 110, 32, 115, 107, 105,
    110, 32, 37, 115, 32, 110, 111, 116, 32, 102, 111, 117, 110, 100, 10, 0, 0,
    0, 0, 0, 0, 0, 0, 99, 108, 95, 114, 117, 110, 110, 105, 110, 103, 0, 0, 0,
    0, 0, 0, 99, 117, 98, 101, 109, 97, 112, 32, 37, 100, 32, 40, 37, 102, 44,
    32, 37, 102, 44, 32, 37, 102, 41, 32, 105, 115, 32, 111, 117, 116, 115, 105,
    100, 101, 32, 116, 104, 101, 32, 108, 105, 103, 104, 116, 103, 114, 105,
    100, 33, 10, 0, 0, 0, 0, 0, 0, 103, 108, 71, 101, 116, 84, 101, 120, 80, 97,
    114, 97, 109, 101, 116, 101, 114, 102, 118, 0, 0, 0, 0, 0, 76, 84, 49, 50,
    56, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 83, 117, 115, 112, 101, 110, 115, 105,
    111, 110, 32, 110, 111, 116, 32, 97, 108, 108, 111, 119, 101, 100, 32, 104,
    101, 114, 101, 0, 0, 0, 0, 0, 115, 118, 95, 112, 97, 107, 78, 97, 109, 101,
    115, 0, 0, 0, 0, 0, 71, 76, 105, 109, 112, 95, 73, 110, 105, 116, 40, 41,
    32, 45, 32, 99, 111, 117, 108, 100, 32, 110, 111, 116, 32, 108, 111, 97,
    100, 32, 79, 112, 101, 110, 71, 76, 32, 115, 117, 98, 115, 121, 115, 116,
    101, 109, 0, 0, 115, 116, 111, 112, 118, 105, 100, 101, 111, 0, 0, 0, 0, 0,
    0, 0, 100, 111, 110, 111, 116, 101, 110, 116, 101, 114, 0, 0, 0, 0, 0, 0,
    109, 100, 114, 0, 0, 0, 0, 0, 71, 84, 48, 0, 0, 0, 0, 0, 71, 76, 95, 69, 88,
    84, 69, 78, 83, 73, 79, 78, 83, 58, 32, 0, 87, 114, 111, 116, 101, 32, 37,
    115, 10, 0, 0, 0, 0, 0, 0, 0, 115, 76, 65, 32, 32, 0, 0, 0, 118, 105, 100,
    101, 111, 0, 0, 0, 67, 111, 117, 108, 100, 32, 110, 111, 116, 32, 108, 111,
    97, 100, 32, 100, 108, 105, 103, 104, 116, 32, 115, 104, 97, 100, 101, 114,
    33, 0, 0, 0, 95, 115, 117, 110, 82, 97, 121, 115, 0, 0, 0, 0, 0, 0, 0, 0,
    103, 108, 68, 101, 116, 97, 99, 104, 79, 98, 106, 101, 99, 116, 65, 82, 66,
    0, 0, 0, 0, 0, 0, 0, 82, 69, 95, 76, 111, 97, 100, 87, 111, 114, 108, 100,
    77, 97, 112, 58, 32, 37, 115, 32, 110, 111, 116, 32, 102, 111, 117, 110,
    100, 0, 0, 0, 71, 76, 95, 83, 82, 67, 95, 65, 76, 80, 72, 65, 95, 83, 65,
    84, 85, 82, 65, 84, 69, 0, 0, 0, 102, 115, 95, 114, 101, 102, 101, 114, 101,
    110, 99, 101, 100, 76, 105, 115, 116, 0, 0, 0, 0, 0, 0, 0, 71, 76, 95, 86,
    69, 82, 83, 73, 79, 78, 58, 32, 37, 115, 10, 0, 70, 101, 98, 32, 50, 51, 32,
    50, 48, 49, 52, 0, 0, 0, 0, 0, 65, 85, 68, 73, 79, 95, 85, 56, 0, 0, 0, 0,
    0, 0, 0, 0, 67, 108, 105, 101, 110, 116, 32, 99, 111, 109, 109, 97, 110,
    100, 32, 111, 118, 101, 114, 102, 108, 111, 119, 0, 78, 111, 32, 106, 111,
    121, 115, 116, 105, 99, 107, 32, 111, 112, 101, 110, 101, 100, 46, 10, 0, 0,
    0, 0, 42, 0, 0, 0, 0, 0, 0, 0, 99, 97, 110, 39, 116, 32, 109, 101, 114, 103,
    101, 32, 37, 115, 32, 119, 105, 116, 104, 32, 37, 115, 0, 0, 71, 76, 95, 79,
    78, 69, 95, 77, 73, 78, 85, 83, 95, 68, 83, 84, 95, 67, 79, 76, 79, 82, 0,
    0, 102, 115, 95, 111, 112, 101, 110, 101, 100, 76, 105, 115, 116, 0, 0, 0,
    71, 76, 95, 82, 69, 78, 68, 69, 82, 69, 82, 58, 32, 37, 115, 10, 0, 0, 0, 0,
    0, 0, 0, 0, 108, 111, 97, 100, 101, 100, 32, 37, 115, 10, 0, 0, 0, 0, 0, 0,
    109, 111, 100, 101, 108, 0, 0, 0, 57, 0, 0, 0, 0, 0, 0, 0, 111, 114, 105,
    103, 105, 110, 0, 0, 99, 104, 97, 116, 32, 109, 101, 115, 115, 97, 103, 101,
    32, 116, 111, 111, 32, 108, 111, 110, 103, 0, 0, 0, 108, 111, 97, 100, 101,
    100, 32, 100, 101, 102, 97, 117, 108, 116, 32, 115, 107, 105, 108, 108, 32,
    37, 100, 32, 102, 114, 111, 109, 32, 37, 115, 10, 0, 0, 0, 0, 0, 0, 0, 0,
    116, 101, 108, 101, 112, 111, 114, 116, 101, 114, 32, 119, 105, 116, 104,
    111, 117, 116, 32, 109, 105, 115, 99, 95, 116, 101, 108, 101, 112, 111, 114,
    116, 101, 114, 95, 100, 101, 115, 116, 32, 40, 37, 115, 41, 10, 0, 0, 0,
    112, 104, 121, 115, 95, 109, 97, 120, 119, 97, 116, 101, 114, 106, 117, 109,
    112, 0, 0, 0, 0, 0, 0, 0, 116, 111, 103, 103, 108, 101, 109, 101, 110, 117,
    0, 0, 0, 0, 0, 0, 86, 77, 95, 67, 114, 101, 97, 116, 101, 58, 32, 110, 111,
    32, 102, 114, 101, 101, 32, 118, 109, 95, 116, 0, 100, 101, 109, 111, 115,
    47, 37, 115, 0, 0, 0, 0, 0, 0, 0, 0, 71, 76, 95, 68, 83, 84, 95, 67, 79, 76,
    79, 82, 0, 0, 0, 0, 115, 104, 111, 119, 105, 112, 0, 0, 10, 71, 76, 95, 86,
    69, 78, 68, 79, 82, 58, 32, 37, 115, 10, 0, 37, 105, 0, 0, 0, 0, 0, 0, 71,
    76, 95, 73, 78, 86, 65, 76, 73, 68, 95, 79, 80, 69, 82, 65, 84, 73, 79, 78,
    0, 0, 0, 0, 110, 111, 110, 97, 109, 101, 0, 0, 80, 67, 88, 32, 102, 105,
    108, 101, 32, 116, 114, 117, 110, 99, 97, 116, 101, 100, 58, 32, 37, 115,
    10, 0, 111, 110, 108, 121, 32, 98, 111, 116, 115, 32, 111, 110, 32, 115,
    101, 114, 118, 101, 114, 0, 0, 0, 0, 0, 76, 111, 97, 100, 84, 71, 65, 58,
    32, 99, 111, 108, 111, 114, 109, 97, 112, 115, 32, 110, 111, 116, 32, 115,
    117, 112, 112, 111, 114, 116, 101, 100, 0, 0, 0, 0, 0, 0, 0, 0, 102, 108,
    117, 115, 104, 98, 97, 110, 115, 0, 0, 0, 0, 0, 0, 0, 98, 111, 116, 95, 116,
    101, 115, 116, 99, 108, 117, 115, 116, 101, 114, 115, 0, 0, 0, 0, 0, 0, 0,
    0, 76, 111, 97, 100, 66, 77, 80, 58, 32, 111, 110, 108, 121, 32, 87, 105,
    110, 100, 111, 119, 115, 45, 115, 116, 121, 108, 101, 32, 66, 77, 80, 32,
    102, 105, 108, 101, 115, 32, 115, 117, 112, 112, 111, 114, 116, 101, 100,
    32, 40, 37, 115, 41, 0, 0, 0, 0, 37, 115, 10, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0,
    0, 0, 0, 116, 111, 103, 103, 108, 101, 99, 111, 110, 115, 111, 108, 101, 0,
    0, 0, 98, 97, 115, 101, 0, 0, 0, 0, 94, 51, 83, 95, 65, 100, 100, 82, 101,
    97, 108, 76, 111, 111, 112, 105, 110, 103, 83, 111, 117, 110, 100, 58, 32,
    104, 97, 110, 100, 108, 101, 32, 37, 105, 32, 111, 117, 116, 32, 111, 102,
    32, 114, 97, 110, 103, 101, 10, 0, 0, 0, 0, 0, 0, 0, 0, 78, 69, 84, 95, 74,
    111, 105, 110, 77, 117, 108, 116, 105, 99, 97, 115, 116, 54, 58, 32, 67,
    111, 117, 108, 100, 110, 39, 116, 32, 115, 101, 116, 32, 115, 99, 111, 112,
    101, 32, 111, 110, 32, 109, 117, 108, 116, 105, 99, 97, 115, 116, 32, 115,
    111, 99, 107, 101, 116, 58, 32, 37, 115, 10, 0, 87, 65, 82, 78, 73, 78, 71,
    58, 32, 117, 110, 107, 110, 111, 119, 110, 32, 98, 108, 101, 110, 100, 32,
    109, 111, 100, 101, 32, 39, 37, 115, 39, 32, 105, 110, 32, 115, 104, 97,
    100, 101, 114, 32, 39, 37, 115, 39, 44, 32, 115, 117, 98, 115, 116, 105,
    116, 117, 116, 105, 110, 103, 32, 71, 76, 95, 79, 78, 69, 10, 0, 0, 0, 115,
    101, 114, 118, 101, 114, 115, 116, 97, 116, 117, 115, 0, 0, 0, 0, 102, 117,
    108, 108, 115, 99, 114, 101, 101, 110, 0, 0, 0, 0, 0, 0, 101, 70, 108, 97,
    103, 115, 0, 0, 70, 49, 50, 0, 0, 0, 0, 0, 70, 83, 95, 70, 79, 112, 101,
    110, 70, 105, 108, 101, 82, 101, 97, 100, 58, 32, 78, 85, 76, 76, 32, 39,
    102, 105, 108, 101, 110, 97, 109, 101, 39, 32, 112, 97, 114, 97, 109, 101,
    116, 101, 114, 32, 112, 97, 115, 115, 101, 100, 0, 0, 0, 0, 0, 0, 117, 115,
    97, 103, 101, 58, 32, 114, 101, 115, 101, 116, 32, 60, 118, 97, 114, 105,
    97, 98, 108, 101, 62, 10, 0, 0, 0, 0, 0, 0, 0, 0, 71, 76, 95, 78, 69, 65,
    82, 69, 83, 84, 95, 77, 73, 80, 77, 65, 80, 95, 78, 69, 65, 82, 69, 83, 84,
    0, 0, 0, 0, 0, 0, 0, 67, 111, 117, 108, 100, 110, 39, 116, 32, 119, 114,
    105, 116, 101, 32, 37, 115, 46, 10, 0, 0, 0, 0, 0, 71, 76, 95, 79, 78, 69,
    95, 77, 73, 78, 85, 83, 95, 83, 82, 67, 95, 67, 79, 76, 79, 82, 0, 0, 112,
    105, 110, 103, 0, 0, 0, 0, 119, 105, 110, 100, 111, 119, 101, 100, 0, 0, 0,
    0, 0, 0, 0, 0, 37, 100, 32, 37, 100, 32, 37, 100, 32, 37, 115, 32, 0, 0, 0,
    0, 109, 97, 112, 115, 47, 37, 115, 46, 98, 115, 112, 0, 0, 0, 0, 0, 71, 76,
    95, 83, 82, 67, 95, 67, 79, 76, 79, 82, 0, 0, 0, 0, 114, 99, 111, 110, 0, 0,
    0, 0, 101, 110, 97, 98, 108, 101, 100, 0, 77, 73, 83, 83, 73, 78, 71, 32,
    86, 65, 76, 85, 69, 10, 0, 0, 45, 102, 111, 114, 119, 97, 114, 100, 0, 0, 0,
    0, 0, 0, 0, 0, 71, 76, 83, 76, 95, 83, 101, 116, 85, 110, 105, 102, 111,
    114, 109, 70, 108, 111, 97, 116, 58, 32, 119, 114, 111, 110, 103, 32, 116,
    121, 112, 101, 32, 102, 111, 114, 32, 117, 110, 105, 102, 111, 114, 109, 32,
    37, 105, 32, 105, 110, 32, 112, 114, 111, 103, 114, 97, 109, 32, 37, 115,
    10, 0, 0, 102, 111, 110, 116, 115, 47, 102, 111, 110, 116, 73, 109, 97, 103,
    101, 95, 37, 105, 46, 100, 97, 116, 0, 0, 94, 51, 87, 65, 82, 78, 73, 78,
    71, 58, 32, 112, 114, 111, 98, 97, 98, 108, 101, 32, 99, 111, 114, 114, 117,
    112, 116, 32, 104, 105, 115, 116, 111, 114, 121, 10, 0, 0, 0, 0, 101, 99,
    104, 111, 0, 0, 0, 0, 71, 76, 95, 79, 78, 69, 95, 77, 73, 78, 85, 83, 95,
    68, 83, 84, 95, 65, 76, 80, 72, 65, 0, 0, 103, 108, 111, 98, 97, 108, 115,
    101, 114, 118, 101, 114, 115, 0, 0, 0, 100, 105, 115, 97, 98, 108, 101, 100,
    0, 0, 0, 0, 0, 0, 0, 0, 82, 95, 67, 104, 101, 99, 107, 70, 66, 79, 58, 32,
    40, 37, 115, 41, 32, 70, 114, 97, 109, 101, 98, 117, 102, 102, 101, 114, 32,
    105, 110, 99, 111, 109, 112, 108, 101, 116, 101, 44, 32, 109, 105, 115, 115,
    105, 110, 103, 32, 97, 116, 116, 97, 99, 104, 109, 101, 110, 116, 10, 0, 0,
    0, 0, 67, 111, 117, 108, 100, 110, 39, 116, 32, 114, 101, 97, 100, 32, 37,
    115, 46, 10, 0, 0, 0, 0, 0, 0, 67, 77, 95, 76, 101, 97, 102, 67, 108, 117,
    115, 116, 101, 114, 58, 32, 98, 97, 100, 32, 110, 117, 109, 98, 101, 114, 0,
    0, 0, 0, 0, 0, 71, 76, 95, 68, 83, 84, 95, 65, 76, 80, 72, 65, 0, 0, 0, 0,
    108, 111, 99, 97, 108, 115, 101, 114, 118, 101, 114, 115, 0, 0, 0, 0, 82,
    69, 78, 68, 69, 82, 66, 85, 70, 70, 69, 82, 95, 70, 82, 69, 69, 95, 77, 69,
    77, 79, 82, 89, 95, 65, 84, 73, 58, 32, 37, 105, 107, 98, 32, 116, 111, 116,
    97, 108, 32, 37, 105, 107, 98, 32, 108, 97, 114, 103, 101, 115, 116, 32, 97,
    117, 120, 58, 32, 37, 105, 107, 98, 32, 116, 111, 116, 97, 108, 32, 37, 105,
    107, 98, 32, 108, 97, 114, 103, 101, 115, 116, 10, 0, 0, 0, 0, 0, 61, 61,
    61, 61, 61, 32, 112, 101, 110, 100, 105, 110, 103, 32, 115, 101, 114, 118,
    101, 114, 32, 99, 111, 109, 109, 97, 110, 100, 115, 32, 61, 61, 61, 61, 61,
    10, 0, 0, 0, 0, 87, 114, 111, 116, 101, 32, 37, 100, 58, 37, 100, 32, 102,
    114, 97, 109, 101, 115, 32, 116, 111, 32, 37, 115, 10, 0, 0, 0, 0, 0, 0, 0,
    46, 46, 46, 37, 115, 32, 110, 111, 116, 32, 102, 111, 117, 110, 100, 10, 0,
    0, 0, 0, 0, 0, 0, 0, 112, 117, 110, 107, 98, 117, 115, 116, 101, 114, 0, 0,
    0, 0, 0, 0, 40, 109, 100, 51, 41, 32, 37, 105, 32, 115, 105, 110, 32, 37,
    105, 32, 115, 99, 108, 105, 112, 32, 32, 37, 105, 32, 115, 111, 117, 116,
    32, 37, 105, 32, 98, 105, 110, 32, 37, 105, 32, 98, 99, 108, 105, 112, 32,
    37, 105, 32, 98, 111, 117, 116, 10, 0, 113, 51, 104, 105, 115, 116, 111,
    114, 121, 0, 0, 0, 0, 0, 0, 0, 103, 108, 66, 105, 110, 100, 84, 101, 120,
    116, 117, 114, 101, 0, 0, 0, 71, 76, 95, 79, 78, 69, 95, 77, 73, 78, 85, 83,
    95, 83, 82, 67, 95, 65, 76, 80, 72, 65, 0, 0, 114, 101, 99, 111, 110, 110,
    101, 99, 116, 0, 0, 0, 0, 0, 0, 0, 84, 69, 88, 84, 85, 82, 69, 95, 70, 82,
    69, 69, 95, 77, 69, 77, 79, 82, 89, 95, 65, 84, 73, 58, 32, 37, 105, 107,
    98, 32, 116, 111, 116, 97, 108, 32, 37, 105, 107, 98, 32, 108, 97, 114, 103,
    101, 115, 116, 32, 97, 117, 120, 58, 32, 37, 105, 107, 98, 32, 116, 111,
    116, 97, 108, 32, 37, 105, 107, 98, 32, 108, 97, 114, 103, 101, 115, 116,
    10, 0, 0, 109, 97, 112, 115, 47, 37, 115, 47, 108, 105, 103, 104, 116, 103,
    114, 105, 100, 46, 114, 97, 119, 0, 0, 0, 66, 117, 102, 102, 101, 114, 32,
    112, 97, 115, 115, 101, 100, 32, 116, 111, 32, 74, 80, 69, 71, 32, 108, 105,
    98, 114, 97, 114, 121, 32, 105, 115, 32, 116, 111, 111, 32, 115, 109, 97,
    108, 108, 0, 0, 0, 0, 0, 0, 71, 76, 95, 84, 101, 120, 69, 110, 118, 58, 32,
    105, 110, 118, 97, 108, 105, 100, 32, 101, 110, 118, 32, 39, 37, 100, 39,
    32, 112, 97, 115, 115, 101, 100, 0, 0, 0, 0, 0, 0, 115, 118, 95, 112, 97,
    107, 115, 0, 83, 101, 116, 116, 105, 110, 103, 32, 114, 95, 109, 111, 100,
    101, 32, 37, 100, 32, 102, 97, 105, 108, 101, 100, 44, 32, 102, 97, 108,
    108, 105, 110, 103, 32, 98, 97, 99, 107, 32, 111, 110, 32, 114, 95, 109,
    111, 100, 101, 32, 37, 100, 10, 0, 0, 0, 0, 110, 101, 120, 116, 100, 101,
    109, 111, 0, 0, 0, 0, 0, 0, 0, 0, 69, 82, 82, 79, 82, 58, 32, 99, 111, 117,
    108, 100, 110, 39, 116, 32, 111, 112, 101, 110, 32, 37, 115, 46, 10, 0, 0,
    0, 0, 0, 0, 0, 117, 110, 107, 110, 111, 119, 110, 32, 99, 111, 109, 112,
    114, 101, 115, 115, 105, 111, 110, 32, 109, 101, 116, 104, 111, 100, 0, 0,
    0, 0, 0, 0, 105, 110, 118, 97, 108, 105, 100, 32, 108, 105, 116, 101, 114,
    97, 108, 47, 108, 101, 110, 103, 116, 104, 32, 99, 111, 100, 101, 0, 0, 0,
    0, 0, 99, 108, 117, 115, 116, 101, 114, 112, 111, 114, 116, 97, 108, 0, 0,
    0, 105, 113, 109, 0, 0, 0, 0, 0, 71, 76, 95, 83, 82, 67, 95, 65, 76, 80, 72,
    65, 0, 0, 0, 0, 99, 111, 110, 110, 101, 99, 116, 0, 86, 66, 79, 95, 70, 82,
    69, 69, 95, 77, 69, 77, 79, 82, 89, 95, 65, 84, 73, 58, 32, 37, 105, 107,
    98, 32, 116, 111, 116, 97, 108, 32, 37, 105, 107, 98,
  ],
  "i8",
  ALLOC_NONE,
  Runtime.GLOBAL_BASE + 133124
);
/* memory initializer */ allocate(
  [
    32, 108, 97, 114, 103, 101, 115, 116, 32, 97, 117, 120, 58, 32, 37, 105,
    107, 98, 32, 116, 111, 116, 97, 108, 32, 37, 105, 107, 98, 32, 108, 97, 114,
    103, 101, 115, 116, 10, 0, 0, 0, 0, 0, 0, 108, 101, 118, 101, 108, 115, 104,
    111, 116, 115, 47, 37, 115, 46, 116, 103, 97, 0, 0, 0, 0, 0, 0, 0, 115, 76,
    32, 32, 32, 0, 0, 0, 99, 111, 109, 95, 99, 97, 109, 101, 114, 97, 77, 111,
    100, 101, 0, 0, 100, 108, 105, 103, 104, 116, 0, 0, 95, 109, 115, 97, 97,
    82, 101, 115, 111, 108, 118, 101, 0, 0, 0, 0, 103, 108, 71, 101, 116, 72,
    97, 110, 100, 108, 101, 65, 82, 66, 0, 0, 69, 82, 82, 79, 82, 58, 32, 97,
    116, 116, 101, 109, 112, 116, 101, 100, 32, 116, 111, 32, 114, 101, 100,
    117, 110, 100, 97, 110, 116, 108, 121, 32, 108, 111, 97, 100, 32, 119, 111,
    114, 108, 100, 32, 109, 97, 112, 0, 0, 71, 76, 95, 90, 69, 82, 79, 0, 115,
    116, 111, 112, 114, 101, 99, 111, 114, 100, 0, 0, 0, 0, 0, 0, 71, 80, 85,
    95, 77, 69, 77, 79, 82, 89, 95, 73, 78, 70, 79, 95, 69, 86, 73, 67, 84, 69,
    68, 95, 77, 69, 77, 79, 82, 89, 95, 78, 86, 88, 58, 32, 37, 105, 107, 98,
    10, 0, 0, 0, 0, 0, 0, 0, 45, 118, 0, 0, 0, 0, 0, 0, 32, 32, 67, 104, 97,
    110, 110, 101, 108, 115, 58, 32, 37, 100, 10, 0, 114, 95, 102, 117, 108,
    108, 115, 99, 114, 101, 101, 110, 0, 0, 0, 0, 105, 110, 95, 106, 111, 121,
    115, 116, 105, 99, 107, 85, 115, 101, 65, 110, 97, 108, 111, 103, 0, 0, 0,
    0, 46, 42, 0, 0, 0, 0, 0, 0, 115, 116, 114, 105, 110, 103, 105, 122, 105,
    110, 103, 32, 111, 112, 101, 114, 97, 116, 111, 114, 32, 119, 105, 116, 104,
    111, 117, 116, 32, 100, 101, 102, 105, 110, 101, 32, 112, 97, 114, 97, 109,
    101, 116, 101, 114, 0, 0, 0, 71, 76, 95, 79, 78, 69, 0, 0, 99, 105, 110,
    101, 109, 97, 116, 105, 99, 0, 0, 0, 0, 0, 0, 0, 71, 80, 85, 95, 77, 69, 77,
    79, 82, 89, 95, 73, 78, 70, 79, 95, 69, 86, 73, 67, 84, 73, 79, 78, 95, 67,
    79, 85, 78, 84, 95, 78, 86, 88, 58, 32, 37, 105, 10, 0, 116, 111, 111, 32,
    109, 97, 110, 121, 32, 102, 117, 122, 122, 121, 32, 119, 101, 105, 103, 104,
    116, 115, 0, 0, 110, 97, 109, 101, 0, 0, 0, 0, 119, 101, 97, 112, 105, 110,
    100, 101, 120, 95, 98, 102, 103, 49, 48, 107, 0, 0, 0, 0, 0, 0, 0, 0, 116,
    97, 114, 103, 101, 116, 95, 108, 111, 99, 97, 116, 105, 111, 110, 0, 108,
    111, 97, 100, 101, 100, 32, 37, 115, 10, 0, 0, 0, 0, 0, 0, 108, 111, 97,
    100, 101, 100, 32, 99, 97, 99, 104, 101, 100, 32, 100, 101, 102, 97, 117,
    108, 116, 32, 115, 107, 105, 108, 108, 32, 37, 100, 32, 102, 114, 111, 109,
    32, 37, 115, 10, 0, 116, 114, 105, 103, 103, 101, 114, 95, 116, 101, 108,
    101, 112, 111, 114, 116, 32, 97, 116, 32, 37, 49, 46, 48, 102, 32, 37, 49,
    46, 48, 102, 32, 37, 49, 46, 48, 102, 32, 119, 105, 116, 104, 111, 117, 116,
    32, 116, 97, 114, 103, 101, 116, 10, 0, 0, 0, 48, 46, 55, 0, 0, 0, 0, 0, 37,
    99, 37, 115, 32, 37, 100, 32, 37, 100, 10, 0, 0, 0, 0, 0, 37, 54, 105, 32,
    65, 65, 83, 32, 109, 101, 109, 111, 114, 121, 47, 67, 80, 85, 32, 117, 115,
    97, 103, 101, 32, 40, 116, 104, 101, 32, 108, 111, 119, 101, 114, 32, 116,
    104, 101, 32, 98, 101, 116, 116, 101, 114, 41, 10, 0, 0, 0, 0, 0, 0, 0, 0,
    86, 77, 95, 67, 114, 101, 97, 116, 101, 58, 32, 98, 97, 100, 32, 112, 97,
    114, 109, 115, 0, 0, 0, 0, 50, 0, 0, 0, 0, 0, 0, 0, 87, 65, 82, 78, 73, 78,
    71, 58, 32, 117, 110, 107, 110, 111, 119, 110, 32, 116, 99, 77, 111, 100,
    32, 39, 37, 115, 39, 32, 105, 110, 32, 115, 104, 97, 100, 101, 114, 32, 39,
    37, 115, 39, 10, 0, 0, 0, 0, 0, 100, 101, 109, 111, 0, 0, 0, 0, 71, 80, 85,
    95, 77, 69, 77, 79, 82, 89, 95, 73, 78, 70, 79, 95, 67, 85, 82, 82, 69, 78,
    84, 95, 65, 86, 65, 73, 76, 65, 66, 76, 69, 95, 86, 73, 68, 77, 69, 77, 95,
    78, 86, 88, 58, 32, 37, 105, 107, 98, 10, 0, 0, 0, 0, 0, 112, 114, 111, 116,
    111, 99, 111, 108, 0, 0, 0, 0, 0, 0, 0, 0, 115, 118, 95, 104, 111, 115, 116,
    110, 97, 109, 101, 0, 0, 0, 0, 0, 112, 97, 115, 115, 119, 111, 114, 100, 0,
    0, 0, 0, 0, 0, 0, 0, 101, 120, 99, 101, 112, 116, 100, 101, 108, 0, 0, 0, 0,
    0, 0, 0, 98, 111, 116, 95, 116, 101, 115, 116, 115, 111, 108, 105, 100, 0,
    0, 0, 65, 76, 67, 95, 69, 78, 85, 77, 69, 82, 65, 84, 73, 79, 78, 95, 69,
    88, 84, 0, 0, 0, 0, 0, 98, 105, 110, 100, 108, 105, 115, 116, 0, 0, 0, 0, 0,
    0, 0, 0, 79, 112, 101, 110, 65, 76, 0, 0, 37, 115, 32, 104, 97, 115, 32,
    108, 101, 110, 103, 116, 104, 32, 48, 0, 87, 65, 82, 78, 73, 78, 71, 58, 32,
    78, 69, 84, 95, 74, 111, 105, 110, 77, 117, 108, 116, 105, 99, 97, 115, 116,
    54, 58, 32, 73, 110, 99, 111, 114, 114, 101, 99, 116, 32, 109, 117, 108,
    116, 105, 99, 97, 115, 116, 32, 97, 100, 100, 114, 101, 115, 115, 32, 103,
    105, 118, 101, 110, 44, 32, 112, 108, 101, 97, 115, 101, 32, 115, 101, 116,
    32, 99, 118, 97, 114, 32, 37, 115, 32, 116, 111, 32, 97, 32, 115, 97, 110,
    101, 32, 118, 97, 108, 117, 101, 46, 10, 0, 0, 0, 0, 101, 110, 116, 105,
    116, 121, 84, 114, 97, 110, 115, 108, 97, 116, 101, 0, 114, 101, 99, 111,
    114, 100, 0, 0, 71, 80, 85, 95, 77, 69, 77, 79, 82, 89, 95, 73, 78, 70, 79,
    95, 84, 79, 84, 65, 76, 95, 65, 86, 65, 73, 76, 65, 66, 76, 69, 95, 77, 69,
    77, 79, 82, 89, 95, 78, 86, 88, 58, 32, 37, 105, 107, 98, 10, 0, 0, 0, 0, 0,
    0, 0, 112, 111, 115, 46, 116, 114, 84, 121, 112, 101, 0, 0, 0, 0, 0, 0, 70,
    49, 49, 0, 0, 0, 0, 0, 100, 109, 95, 0, 0, 0, 0, 0, 117, 115, 97, 103, 101,
    58, 32, 37, 115, 32, 60, 118, 97, 114, 105, 97, 98, 108, 101, 62, 32, 60,
    118, 97, 108, 117, 101, 62, 10, 0, 0, 0, 117, 110, 98, 105, 110, 100, 97,
    108, 108, 0, 0, 0, 0, 0, 0, 0, 37, 100, 0, 0, 0, 0, 0, 0, 87, 65, 82, 78,
    73, 78, 71, 58, 32, 109, 105, 115, 115, 105, 110, 103, 32, 116, 99, 77, 111,
    100, 32, 114, 111, 116, 97, 116, 101, 32, 112, 97, 114, 109, 115, 32, 105,
    110, 32, 115, 104, 97, 100, 101, 114, 32, 39, 37, 115, 39, 10, 0, 0, 0, 0,
    0, 118, 105, 100, 95, 114, 101, 115, 116, 97, 114, 116, 0, 0, 0, 0, 0, 71,
    80, 85, 95, 77, 69, 77, 79, 82, 89, 95, 73, 78, 70, 79, 95, 68, 69, 68, 73,
    67, 65, 84, 69, 68, 95, 86, 73, 68, 77, 69, 77, 95, 78, 86, 88, 58, 32, 37,
    105, 107, 98, 10, 0, 0, 0, 0, 0, 115, 95, 115, 100, 108, 83, 112, 101, 101,
    100, 0, 0, 0, 0, 0, 0, 117, 110, 98, 105, 110, 100, 0, 0, 109, 97, 112, 110,
    97, 109, 101, 0, 114, 111, 116, 97, 116, 101, 0, 0, 73, 78, 95, 73, 110,
    105, 116, 32, 99, 97, 108, 108, 101, 100, 32, 98, 101, 102, 111, 114, 101,
    32, 83, 68, 76, 95, 73, 110, 105, 116, 40, 32, 83, 68, 76, 95, 73, 78, 73,
    84, 95, 86, 73, 68, 69, 79, 32, 41, 0, 0, 0, 0, 0, 0, 0, 0, 115, 110, 100,
    95, 114, 101, 115, 116, 97, 114, 116, 0, 0, 0, 0, 0, 78, 111, 32, 101, 120,
    116, 101, 110, 115, 105, 111, 110, 32, 102, 111, 117, 110, 100, 32, 102,
    111, 114, 32, 71, 80, 85, 32, 109, 101, 109, 111, 114, 121, 32, 105, 110,
    102, 111, 46, 10, 0, 0, 0, 0, 0, 0, 0, 0, 37, 115, 32, 0, 0, 0, 0, 0, 117,
    110, 101, 120, 112, 101, 99, 116, 101, 100, 32, 112, 117, 110, 99, 116, 117,
    97, 116, 105, 111, 110, 32, 37, 115, 0, 0, 0, 0, 0, 0, 0, 43, 102, 111, 114,
    119, 97, 114, 100, 0, 0, 0, 0, 0, 0, 0, 0, 98, 105, 110, 100, 0, 0, 0, 0,
    118, 115, 116, 114, 0, 0, 0, 0, 87, 65, 82, 78, 73, 78, 71, 58, 32, 109,
    105, 115, 115, 105, 110, 103, 32, 116, 114, 97, 110, 115, 102, 111, 114,
    109, 32, 112, 97, 114, 109, 115, 32, 105, 110, 32, 115, 104, 97, 100, 101,
    114, 32, 39, 37, 115, 39, 10, 0, 0, 0, 0, 0, 0, 0, 0, 77, 105, 115, 109, 97,
    116, 99, 104, 101, 100, 32, 82, 69, 70, 95, 65, 80, 73, 95, 86, 69, 82, 83,
    73, 79, 78, 58, 32, 101, 120, 112, 101, 99, 116, 101, 100, 32, 37, 105, 44,
    32, 103, 111, 116, 32, 37, 105, 10, 0, 0, 0, 0, 0, 0, 0, 0, 99, 108, 105,
    101, 110, 116, 105, 110, 102, 111, 0, 0, 0, 0, 0, 0, 46, 46, 46, 0, 0, 0, 0,
    0, 37, 115, 32, 34, 37, 115, 34, 10, 0, 0, 0, 0, 0, 0, 0, 0, 67, 77, 95, 73,
    110, 108, 105, 110, 101, 77, 111, 100, 101, 108, 58, 32, 98, 97, 100, 32,
    110, 117, 109, 98, 101, 114, 0, 0, 0, 0, 0, 0, 116, 114, 97, 110, 115, 102,
    111, 114, 109, 0, 0, 0, 0, 0, 0, 0, 99, 111, 100, 101, 47, 114, 101, 110,
    100, 101, 114, 101, 114, 103, 108, 50, 47, 116, 114, 95, 105, 110, 105, 116,
    46, 99, 0, 0, 0, 0, 0, 0, 99, 111, 110, 102, 105, 103, 115, 116, 114, 105,
    110, 103, 115, 0, 0, 0, 97, 100, 100, 114, 0, 0, 0, 0, 83, 86, 95, 83, 101,
    116, 67, 111, 110, 102, 105, 103, 115, 116, 114, 105, 110, 103, 58, 32, 98,
    97, 100, 32, 105, 110, 100, 101, 120, 32, 37, 105, 0, 0, 0, 0, 0, 0, 0, 0,
    98, 105, 110, 100, 32, 37, 115, 32, 34, 37, 115, 34, 10, 0, 0, 0, 103, 108,
    82, 101, 97, 100, 80, 105, 120, 101, 108, 115, 0, 0, 0, 0, 111, 117, 116,
    32, 111, 102, 32, 116, 111, 107, 101, 110, 32, 115, 112, 97, 99, 101, 0, 0,
    0, 0, 0, 0, 87, 65, 82, 78, 73, 78, 71, 58, 32, 109, 105, 115, 115, 105,
    110, 103, 32, 115, 116, 114, 101, 116, 99, 104, 32, 112, 97, 114, 109, 115,
    32, 105, 110, 32, 115, 104, 97, 100, 101, 114, 32, 39, 37, 115, 39, 10, 0,
    0, 115, 104, 97, 100, 101, 114, 115, 116, 97, 116, 101, 0, 0, 0, 0, 0, 99,
    109, 100, 0, 0, 0, 0, 0, 66, 111, 103, 117, 115, 32, 118, 105, 114, 116,
    117, 97, 108, 32, 97, 114, 114, 97, 121, 32, 97, 99, 99, 101, 115, 115, 0,
    0, 0, 0, 0, 0, 111, 112, 101, 110, 108, 111, 103, 32, 60, 102, 105, 108,
    101, 110, 97, 109, 101, 62, 10, 0, 0, 0, 0, 0, 115, 118, 95, 99, 104, 101,
    97, 116, 115, 0, 0, 0, 0, 0, 0, 0, 49, 0, 0, 0, 0, 0, 0, 0, 117, 110, 98,
    105, 110, 100, 97, 108, 108, 10, 0, 0, 0, 0, 0, 0, 37, 115, 58, 32, 98, 111,
    116, 32, 108, 105, 98, 114, 97, 114, 121, 32, 117, 115, 101, 100, 32, 98,
    101, 102, 111, 114, 101, 32, 98, 101, 105, 110, 103, 32, 115, 101, 116, 117,
    112, 10, 0, 0, 0, 0, 0, 0, 0, 0, 97, 114, 101, 97, 112, 111, 114, 116, 97,
    108, 0, 0, 0, 0, 0, 0, 115, 116, 97, 116, 105, 99, 77, 68, 51, 77, 101, 115,
    104, 95, 73, 66, 79, 32, 37, 115, 0, 0, 0, 0, 115, 116, 114, 101, 116, 99,
    104, 0, 82, 69, 95, 83, 104, 117, 116, 100, 111, 119, 110, 40, 32, 37, 105,
    32, 41, 10, 0, 0, 0, 0, 0, 0, 99, 103, 95, 115, 116, 101, 114, 101, 111, 83,
    101, 112, 97, 114, 97, 116, 105, 111, 110, 0, 0, 0, 0, 0, 115, 99, 114, 101,
    101, 110, 115, 104, 111, 116, 115, 47, 115, 104, 111, 116, 37, 105, 37, 105,
    37, 105, 37, 105, 46, 106, 112, 103, 0, 0, 0, 0, 115, 82, 71, 66, 65, 0, 0,
    0, 77, 105, 115, 115, 105, 110, 103, 32, 114, 101, 116, 117, 114, 110, 32,
    118, 97, 108, 117, 101, 0, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 67, 111, 117,
    108, 100, 32, 110, 111, 116, 32, 108, 111, 97, 100, 32, 102, 111, 103, 112,
    97, 115, 115, 32, 115, 104, 97, 100, 101, 114, 33, 0, 0, 95, 114, 101, 110,
    100, 101, 114, 0, 103, 108, 68, 101, 108, 101, 116, 101, 79, 98, 106, 101,
    99, 116, 65, 82, 66, 0, 0, 0, 0, 0, 0, 0, 80, 114, 111, 99, 101, 115, 115,
    101, 100, 32, 37, 100, 32, 115, 117, 114, 102, 97, 99, 101, 115, 32, 105,
    110, 116, 111, 32, 37, 100, 32, 109, 101, 114, 103, 101, 100, 44, 32, 37,
    100, 32, 117, 110, 109, 101, 114, 103, 101, 100, 32, 105, 110, 32, 37, 53,
    46, 50, 102, 32, 115, 101, 99, 111, 110, 100, 115, 10, 0, 0, 0, 0, 0, 87,
    65, 82, 78, 73, 78, 71, 58, 32, 109, 105, 115, 115, 105, 110, 103, 32, 115,
    99, 97, 108, 101, 32, 115, 99, 114, 111, 108, 108, 32, 112, 97, 114, 109,
    115, 32, 105, 110, 32, 115, 104, 97, 100, 101, 114, 32, 39, 37, 115, 39, 10,
    0, 0, 0, 0, 0, 45, 45, 45, 45, 45, 32, 102, 105, 110, 105, 115, 104, 101,
    100, 32, 82, 95, 73, 110, 105, 116, 32, 45, 45, 45, 45, 45, 10, 0, 0, 0, 0,
    99, 103, 95, 118, 105, 101, 119, 115, 105, 122, 101, 0, 0, 0, 0, 0, 105,
    110, 118, 97, 108, 105, 100, 32, 119, 101, 97, 112, 111, 110, 32, 115, 116,
    97, 116, 101, 32, 37, 100, 10, 0, 0, 0, 0, 0, 0, 0, 0, 83, 86, 95, 83, 118,
    69, 110, 116, 105, 116, 121, 70, 111, 114, 71, 101, 110, 116, 105, 116, 121,
    58, 32, 98, 97, 100, 32, 103, 69, 110, 116, 0, 110, 111, 32, 101, 110, 116,
    105, 116, 121, 32, 119, 105, 116, 104, 32, 109, 111, 100, 101, 108, 32, 37,
    100, 10, 0, 0, 0, 0, 0, 0, 0, 0, 45, 45, 118, 101, 114, 115, 105, 111, 110,
    0, 0, 0, 0, 0, 0, 0, 32, 32, 83, 97, 109, 112, 108, 101, 115, 58, 32, 32,
    37, 100, 10, 0, 34, 37, 115, 34, 32, 105, 115, 32, 110, 111, 116, 32, 98,
    111, 117, 110, 100, 10, 0, 0, 0, 0, 0, 0, 105, 110, 95, 106, 111, 121, 115,
    116, 105, 99, 107, 78, 111, 0, 0, 0, 58, 58, 0, 0, 0, 0, 0, 0, 115, 99, 114,
    111, 108, 108, 0, 0, 109, 111, 100, 101, 108, 105, 110, 100, 101, 120, 0, 0,
    0, 0, 0, 0, 103, 108, 71, 101, 116, 69, 114, 114, 111, 114, 40, 41, 32, 61,
    32, 48, 120, 37, 120, 10, 0, 0, 0, 0, 99, 103, 95, 112, 114, 101, 100, 105,
    99, 116, 73, 116, 101, 109, 115, 0, 119, 101, 105, 103, 104, 116, 0, 0, 99,
    111, 117, 108, 100, 110, 39, 116, 32, 108, 111, 97, 100, 32, 116, 104, 101,
    32, 119, 101, 97, 112, 111, 110, 32, 99, 111, 110, 102, 105, 103, 10, 0, 0,
    0, 0, 0, 0, 0, 0, 53, 0, 0, 0, 0, 0, 0, 0, 99, 108, 97, 115, 115, 110, 97,
    109, 101, 0, 0, 0, 0, 0, 0, 0, 109, 105, 115, 115, 105, 110, 103, 32, 125,
    0, 0, 0, 0, 0, 0, 0, 98, 111, 116, 115, 47, 100, 101, 102, 97, 117, 108,
    116, 95, 99, 46, 99, 0, 0, 0, 0, 0, 0, 0, 0, 116, 114, 105, 103, 103, 101,
    114, 95, 116, 101, 108, 101, 112, 111, 114, 116, 32, 109, 111, 100, 101,
    108, 32, 61, 32, 34, 37, 115, 34, 10, 0, 0, 112, 104, 121, 115, 95, 109, 97,
    120, 115, 116, 101, 101, 112, 110, 101, 115, 115, 0, 0, 0, 0, 0, 0, 0, 34,
    37, 115, 34, 32, 61, 32, 34, 37, 115, 34, 10, 0, 0, 0, 0, 37, 54, 105, 32,
    116, 111, 116, 97, 108, 32, 114, 101, 97, 99, 104, 97, 98, 105, 108, 105,
    116, 121, 32, 97, 114, 101, 97, 115, 10, 0, 0, 0, 86, 77, 95, 82, 101, 115,
    116, 97, 114, 116, 32, 102, 97, 105, 108, 101, 100, 0, 0, 0, 0, 0, 0, 0,
    115, 118, 95, 107, 105, 108, 108, 115, 101, 114, 118, 101, 114, 0, 0, 0, 87,
    65, 82, 78, 73, 78, 71, 58, 32, 109, 105, 115, 115, 105, 110, 103, 32, 115,
    99, 97, 108, 101, 32, 112, 97, 114, 109, 115, 32, 105, 110, 32, 115, 104,
    97, 100, 101, 114, 32, 39, 37, 115, 39, 10, 0, 0, 0, 0, 116, 101, 115, 115,
    46, 120, 121, 122, 32, 110, 111, 116, 32, 49, 54, 32, 98, 121, 116, 101, 32,
    97, 108, 105, 103, 110, 101, 100, 10, 0, 0, 0, 112, 97, 115, 115, 119, 111,
    114, 100, 0, 0, 0, 0, 0, 0, 0, 0, 109, 97, 120, 95, 109, 101, 115, 115, 97,
    103, 101, 115, 0, 0, 0, 0, 103, 97, 109, 101, 110, 97, 109, 101, 0, 0, 0, 0,
    0, 0, 0, 0, 115, 118, 95, 112, 114, 105, 118, 97, 116, 101, 67, 108, 105,
    101, 110, 116, 115, 0, 0, 0, 0, 0, 0, 0, 37, 115, 58, 114, 101, 99, 111,
    110, 110, 101, 99, 116, 10, 0, 0, 0, 98, 97, 110, 100, 101, 108, 0, 0, 37,
    115, 10, 0, 0, 0, 0, 0, 98, 111, 116, 95, 116, 101, 115, 116, 114, 99, 104,
    97, 116, 0, 0, 0, 65, 76, 67, 95, 69, 78, 85, 77, 69, 82, 65, 84, 69, 95,
    65, 76, 76, 95, 69, 88, 84, 0, 0, 0, 98, 105, 110, 100, 32, 60, 107, 101,
    121, 62, 32, 91, 99, 111, 109, 109, 97, 110, 100, 93, 32, 58, 32, 97, 116,
    116, 97, 99, 104, 32, 97, 32, 99, 111, 109, 109, 97, 110, 100, 32, 116, 111,
    32, 97, 32, 107, 101, 121, 10, 0, 0, 0, 0, 0, 0, 0, 115, 95, 117, 115, 101,
    79, 112, 101, 110, 65, 76, 0, 0, 0, 0, 0, 94, 51, 83, 95, 65, 100, 100, 76,
    111, 111, 112, 105, 110, 103, 83, 111, 117, 110, 100, 58, 32, 104, 97, 110,
    100, 108, 101, 32, 37, 105, 32, 111, 117, 116, 32, 111, 102, 32, 114, 97,
    110, 103, 101, 10, 0, 0, 0, 0, 87, 65, 82, 78, 73, 78, 71, 58, 32, 78, 69,
    84, 95, 73, 80, 54, 83, 111, 99, 107, 101, 116, 58, 32, 98, 105, 110, 100,
    58, 32, 37, 115, 10, 0, 0, 0, 0, 0, 0, 0, 54, 49, 52, 52, 0, 0, 0, 0, 115,
    99, 97, 108, 101, 0, 0, 0, 45, 45, 45, 45, 45, 32, 82, 95, 73, 110, 105,
    116, 32, 45, 45, 45, 45, 45, 10, 0, 0, 0, 0, 0, 99, 108, 95, 97, 110, 111,
    110, 121, 109, 111, 117, 115, 0, 0, 0, 0, 103, 114, 111, 117, 110, 100, 69,
    110, 116, 105, 116, 121, 78, 117, 109, 0, 37, 100, 32, 98, 121, 116, 101,
    115, 32, 114, 111, 117, 116, 105, 110, 103, 32, 99, 97, 99, 104, 101, 10, 0,
    70, 49, 48, 0, 0, 0, 0, 0, 94, 51, 87, 65, 82, 78, 73, 78, 71, 58, 32, 67,
    111, 117, 108, 100, 32, 110, 111, 116, 32, 99, 114, 101, 97, 116, 101, 32,
    110, 101, 119, 32, 99, 111, 109, 95, 112, 105, 112, 101, 102, 105, 108, 101,
    32, 97, 116, 32, 37, 115, 46, 32, 99, 111, 109, 95, 112, 105, 112, 101, 102,
    105, 108, 101, 32, 119, 105, 108, 108, 32, 110, 111, 116, 32, 98, 101, 32,
    117, 115, 101, 100, 46, 10, 0, 0, 0, 0, 0, 116, 111, 103, 103, 108, 101, 58,
    32, 110, 111, 116, 104, 105, 110, 103, 32, 116, 111, 32, 116, 111, 103, 103,
    108, 101, 32, 116, 111, 10, 0, 0, 0, 34, 37, 115, 34, 32, 105, 115, 110, 39,
    116, 32, 97, 32, 118, 97, 108, 105, 100, 32, 107, 101, 121, 10, 0, 116, 114,
    105, 103, 103, 101, 114, 95, 112, 117, 115, 104, 32, 115, 116, 97, 114, 116,
    32, 115, 111, 108, 105, 100, 10, 0, 0, 0, 0, 0, 0, 0, 87, 65, 82, 78, 73,
    78, 71, 58, 32, 109, 105, 115, 115, 105, 110, 103, 32, 116, 99, 77, 111,
    100, 32, 116, 117, 114, 98, 32, 105, 110, 32, 115, 104, 97, 100, 101, 114,
    32, 39, 37, 115, 39, 10, 0, 0, 0, 0, 0, 103, 102, 120, 109, 101, 109, 105,
    110, 102, 111, 0, 0, 0, 0, 0, 0, 109, 97, 108, 101, 0, 0, 0, 0, 117, 110,
    98, 105, 110, 100, 32, 60, 107, 101, 121, 62, 32, 58, 32, 114, 101, 109,
    111, 118, 101, 32, 99, 111, 109, 109, 97, 110, 100, 115, 32, 102, 114, 111,
    109, 32, 97, 32, 107, 101, 121, 10, 0, 0, 0, 0, 0, 0, 66, 97, 100, 32, 99,
    103, 97, 109, 101, 32, 115, 121, 115, 116, 101, 109, 32, 116, 114, 97, 112,
    58, 32, 37, 108, 100, 0, 0, 0, 0, 0, 0, 112, 104, 121, 115, 95, 115, 116,
    111, 112, 115, 112, 101, 101, 100, 0, 0, 102, 111, 114, 99, 101, 119, 114,
    105, 116, 101, 0, 0, 0, 0, 0, 0, 87, 65, 82, 78, 73, 78, 71, 58, 32, 109,
    105, 115, 115, 105, 110, 103, 32, 116, 99, 77, 111, 100, 32, 116, 117, 114,
    98, 32, 112, 97, 114, 109, 115, 32, 105, 110, 32, 115, 104, 97, 100, 101,
    114, 32, 39, 37, 115, 39, 10, 0, 0, 0, 0, 0, 0, 0, 116, 114, 121, 105, 110,
    103, 32, 116, 111, 32, 108, 111, 97, 100, 32, 37, 115, 10, 0, 0, 0, 0, 0, 0,
    109, 105, 110, 105, 109, 105, 122, 101, 0, 0, 0, 0, 0, 0, 0, 0, 115, 101,
    120, 0, 0, 0, 0, 0, 65, 65, 83, 95, 69, 110, 116, 105, 116, 121, 73, 110,
    102, 111, 58, 32, 101, 110, 116, 110, 117, 109, 32, 37, 100, 32, 111, 117,
    116, 32, 111, 102, 32, 114, 97, 110, 103, 101, 10, 0, 10, 0, 0, 0, 0, 0, 0,
    0, 65, 65, 83, 95, 77, 65, 88, 95, 80, 79, 82, 84, 65, 76, 73, 78, 68, 69,
    88, 83, 73, 90, 69, 10, 0, 0, 0, 0, 0, 0, 0, 0, 45, 114, 105, 103, 104, 116,
    0, 0, 101, 110, 116, 100, 97, 116, 97, 0, 86, 77, 95, 80, 114, 101, 112, 97,
    114, 101, 73, 110, 116, 101, 114, 112, 114, 101, 116, 101, 114, 58, 32, 112,
    99, 32, 62, 32, 104, 101, 97, 100, 101, 114, 45, 62, 99, 111, 100, 101, 76,
    101, 110, 103, 116, 104, 0, 0, 101, 120, 101, 99, 0, 0, 0, 0, 116, 117, 114,
    98, 0, 0, 0, 0, 103, 102, 120, 105, 110, 102, 111, 0, 116, 101, 97, 109,
    116, 97, 115, 107, 0, 0, 0, 0, 0, 0, 0, 0, 118, 109, 95, 103, 97, 109, 101,
    0, 119, 98, 0, 0, 0, 0, 0, 0, 60, 79, 85, 84, 32, 79, 70, 32, 82, 65, 78,
    71, 69, 62, 0, 0, 67, 77, 95, 67, 108, 105, 112, 72, 97, 110, 100, 108, 101,
    84, 111, 77, 111, 100, 101, 108, 58, 32, 98, 97, 100, 32, 104, 97, 110, 100,
    108, 101, 32, 37, 105, 32, 60, 32, 37, 105, 32, 60, 32, 37, 105, 0, 0, 0,
    69, 82, 82, 79, 82, 58, 32, 116, 111, 111, 32, 109, 97, 110, 121, 32, 116,
    99, 77, 111, 100, 32, 115, 116, 97, 103, 101, 115, 32, 105, 110, 32, 115,
    104, 97, 100, 101, 114, 32, 39, 37, 115, 39, 0, 0, 0, 0, 0, 115, 99, 114,
    101, 101, 110, 115, 104, 111, 116, 74, 80, 69, 71, 0, 0, 49, 48, 48, 0, 0,
    0, 0, 0, 94, 51, 87, 65, 82, 78, 73, 78, 71, 58, 32, 65, 117, 100, 105, 111,
    32, 99, 97, 112, 116, 117, 114, 101, 32, 98, 117, 102, 102, 101, 114, 32,
    111, 118, 101, 114, 102, 108, 111, 119, 32, 45, 45, 32, 116, 114, 117, 110,
    99, 97, 116, 105, 110, 103, 10, 0, 110, 101, 116, 116, 121, 112, 101, 0, 60,
    75, 69, 89, 32, 78, 79, 84, 32, 70, 79, 85, 78, 68, 62, 0, 103, 108, 84,
    101, 120, 83, 117, 98, 73, 109, 97, 103, 101, 50, 68, 0, 79, 98, 106, 101,
    99, 116, 32, 37, 105, 32, 116, 111, 117, 99, 104, 105, 110, 103, 32, 51, 32,
    97, 114, 101, 97, 115, 32, 97, 116, 32, 37, 102, 32, 37, 102, 32, 37, 102,
    10, 0, 87, 65, 82, 78, 73, 78, 71, 58, 32, 117, 110, 107, 110, 111, 119,
    110, 32, 112, 97, 114, 97, 109, 101, 116, 101, 114, 32, 39, 37, 115, 39, 32,
    105, 110, 32, 115, 104, 97, 100, 101, 114, 32, 39, 37, 115, 39, 10, 0, 115,
    99, 114, 101, 101, 110, 115, 104, 111, 116, 0, 0, 0, 0, 0, 0, 104, 97, 110,
    100, 105, 99, 97, 112, 0, 0, 0, 0, 0, 0, 0, 0, 37, 115, 58, 32, 68, 101,
    108, 116, 97, 32, 114, 101, 113, 117, 101, 115, 116, 32, 102, 114, 111, 109,
    32, 111, 117, 116, 32, 111, 102, 32, 100, 97, 116, 101, 32, 101, 110, 116,
    105, 116, 105, 101, 115, 46, 10, 0, 0, 0, 74, 80, 69, 71, 32, 112, 97, 114,
    97, 109, 101, 116, 101, 114, 32, 115, 116, 114, 117, 99, 116, 32, 109, 105,
    115, 109, 97, 116, 99, 104, 58, 32, 108, 105, 98, 114, 97, 114, 121, 32,
    116, 104, 105, 110, 107, 115, 32, 115, 105, 122, 101, 32, 105, 115, 32, 37,
    117, 44, 32, 99, 97, 108, 108, 101, 114, 32, 101, 120, 112, 101, 99, 116,
    115, 32, 37, 117, 0, 0, 0, 0, 35, 52, 54, 50, 32, 78, 101, 116, 99, 104, 97,
    110, 95, 84, 114, 97, 110, 115, 109, 105, 116, 78, 101, 120, 116, 70, 114,
    97, 103, 109, 101, 110, 116, 58, 32, 114, 101, 109, 97, 105, 110, 105, 110,
    103, 32, 113, 117, 101, 117, 101, 100, 32, 109, 101, 115, 115, 97, 103, 101,
    10, 0, 0, 0, 0, 115, 118, 95, 115, 101, 114, 118, 101, 114, 105, 100, 0, 0,
    0, 0, 0, 83, 68, 76, 95, 86, 73, 68, 69, 79, 95, 67, 69, 78, 84, 69, 82, 69,
    68, 0, 0, 0, 0, 0, 0, 115, 97, 121, 32, 34, 37, 115, 34, 10, 0, 0, 0, 0, 0,
    0, 0, 115, 116, 114, 117, 99, 116, 117, 114, 97, 108, 0, 0, 0, 0, 0, 0, 115,
    116, 97, 116, 105, 99, 77, 68, 51, 77, 101, 115, 104, 95, 86, 66, 79, 32,
    39, 37, 115, 39, 0, 0, 100, 101, 112, 116, 104, 119, 114, 105, 116, 101, 0,
    0, 0, 0, 0, 0, 83, 116, 111, 112, 112, 101, 100, 32, 100, 101, 109, 111, 46,
    10, 0, 0, 109, 111, 100, 101, 108, 105, 115, 116, 0, 0, 0, 0, 0, 0, 0, 0,
    99, 111, 108, 111, 114, 50, 0, 0, 115, 99, 114, 101, 101, 110, 115, 104,
    111, 116, 115, 47, 115, 104, 111, 116, 57, 57, 57, 57, 46, 106, 112, 103, 0,
    0, 0, 0, 0, 0, 0, 0, 115, 82, 71, 66, 32, 0, 0, 0, 115, 97, 121, 95, 116,
    101, 97, 109, 32, 34, 37, 115, 34, 10, 0, 0, 102, 111, 103, 112, 97, 115,
    115, 0, 114, 95, 101, 120, 116, 95, 102, 114, 97, 109, 101, 98, 117, 102,
    102, 101, 114, 95, 109, 117, 108, 116, 105, 115, 97, 109, 112, 108, 101, 0,
    0, 0, 103, 95, 103, 97, 109, 101, 116, 121, 112, 101, 0, 0, 0, 0, 0, 0, 83,
    101, 114, 118, 101, 114, 32, 99, 111, 109, 109, 97, 110, 100, 32, 111, 118,
    101, 114, 102, 108, 111, 119, 0, 71, 76, 95, 65, 82, 66, 95, 115, 104, 97,
    100, 101, 114, 95, 111, 98, 106, 101, 99, 116, 115, 0, 0, 0, 99, 111, 100,
    101, 47, 114, 101, 110, 100, 101, 114, 101, 114, 103, 108, 50, 47, 116, 114,
    95, 98, 115, 112, 46, 99, 0, 0, 0, 0, 0, 0, 0, 109, 111, 100, 101, 108, 108,
    105, 115, 116, 0, 0, 0, 0, 0, 0, 0, 99, 111, 108, 111, 114, 49, 0, 0, 83,
    121, 115, 95, 76, 111, 97, 100, 71, 97, 109, 101, 68, 108, 108, 40, 37, 115,
    41, 32, 102, 111, 117, 110, 100, 32, 118, 109, 77, 97, 105, 110, 32, 102,
    117, 110, 99, 116, 105, 111, 110, 32, 97, 116, 32, 37, 112, 10, 0, 0, 0, 0,
    0, 0, 0, 0, 32, 32, 70, 114, 101, 113, 58, 32, 32, 32, 32, 32, 37, 100, 10,
    0, 116, 101, 108, 108, 32, 37, 105, 32, 34, 37, 115, 34, 10, 0, 0, 0, 74,
    111, 121, 115, 116, 105, 99, 107, 32, 105, 115, 32, 110, 111, 116, 32, 97,
    99, 116, 105, 118, 101, 46, 10, 0, 0, 0, 0, 0, 0, 0, 0, 45, 62, 0, 0, 0, 0,
    0, 0, 83, 86, 95, 71, 101, 116, 67, 111, 110, 102, 105, 103, 115, 116, 114,
    105, 110, 103, 58, 32, 98, 117, 102, 102, 101, 114, 83, 105, 122, 101, 32,
    61, 61, 32, 37, 105, 0, 0, 0, 0, 37, 100, 0, 0, 0, 0, 0, 0, 116, 99, 77,
    111, 100, 0, 0, 0, 115, 107, 105, 110, 108, 105, 115, 116, 0, 0, 0, 0, 0, 0,
    0, 0, 80, 97, 103, 97, 110, 115, 0, 0, 99, 111, 117, 110, 108, 100, 110, 39,
    116, 32, 108, 111, 97, 100, 32, 37, 115, 10, 0, 0, 0, 0, 0, 0, 119, 101, 97,
    112, 111, 110, 115, 46, 99, 0, 0, 0, 0, 0, 0, 0, 83, 86, 95, 83, 101, 116,
    66, 114, 117, 115, 104, 77, 111, 100, 101, 108, 58, 32, 78, 85, 76, 76, 0,
    0, 119, 101, 97, 112, 105, 110, 100, 101, 120, 95, 114, 111, 99, 107, 101,
    116, 108, 97, 117, 110, 99, 104, 101, 114, 0, 0, 0, 0, 0, 0, 0, 0, 111, 117,
    116, 32, 111, 102, 32, 108, 101, 118, 101, 108, 32, 105, 116, 101, 109, 115,
    10, 0, 0, 0, 0, 0, 117, 110, 101, 120, 112, 101, 99, 116, 101, 100, 32, 37,
    115, 0, 0, 0, 99, 111, 117, 108, 100, 110, 39, 116, 32, 102, 105, 110, 100,
    32, 115, 107, 105, 108, 108, 32, 37, 100, 32, 105, 110, 32, 37, 115, 10, 0,
    0, 0, 116, 114, 105, 103, 103, 101, 114, 95, 116, 101, 108, 101, 112, 111,
    114, 116, 0, 0, 0, 0, 0, 0, 0, 0, 49, 57, 0, 0, 0, 0, 0, 0, 99, 109, 100,
    32, 115, 97, 121, 32, 0, 0, 0, 0, 0, 0, 0, 0, 99, 108, 117, 115, 116, 101,
    114, 32, 37, 100, 32, 104, 97, 115, 32, 37, 100, 32, 114, 101, 97, 99, 104,
    97, 98, 105, 108, 105, 116, 121, 32, 97, 114, 101, 97, 115, 10, 0, 0, 0, 86,
    77, 95, 82, 101, 115, 116, 97, 114, 116, 40, 41, 10, 0, 0, 0, 100, 101, 109,
    111, 32, 60, 100, 101, 109, 111, 110, 97, 109, 101, 62, 10, 0, 0, 0, 0, 0,
    0, 0, 0, 87, 65, 82, 78, 73, 78, 71, 58, 32, 117, 110, 107, 110, 111, 119,
    110, 32, 116, 101, 120, 103, 101, 110, 32, 112, 97, 114, 109, 32, 105, 110,
    32, 115, 104, 97, 100, 101, 114, 32, 39, 37, 115, 39, 10, 0, 0, 0, 0, 115,
    104, 97, 100, 101, 114, 108, 105, 115, 116, 0, 0, 0, 0, 0, 0, 103, 95, 98,
    108, 117, 101, 84, 101, 97, 109, 0, 0, 0, 0, 0, 0, 99, 104, 97, 108, 108,
    101, 110, 103, 101, 0, 0, 0, 0, 0, 0, 0, 83, 86, 95, 71, 101, 116, 67, 104,
    97, 108, 108, 101, 110, 103, 101, 58, 32, 114, 97, 116, 101, 32, 108, 105,
    109, 105, 116, 32, 102, 114, 111, 109, 32, 37, 115, 32, 101, 120, 99, 101,
    101, 100, 101, 100, 44, 32, 100, 114, 111, 112, 112, 105, 110, 103, 32, 114,
    101, 113, 117, 101, 115, 116, 10, 0, 110, 111, 109, 97, 112, 0, 0, 0, 67,
    108, 105, 101, 110, 116, 32, 37, 105, 32, 99, 111, 110, 110, 101, 99, 116,
    105, 110, 103, 32, 119, 105, 116, 104, 32, 37, 105, 32, 99, 104, 97, 108,
    108, 101, 110, 103, 101, 32, 112, 105, 110, 103, 10, 0, 0, 0, 0, 101, 120,
    99, 101, 112, 116, 97, 100, 100, 114, 0, 0, 0, 0, 0, 0, 98, 111, 116, 95,
    116, 101, 115, 116, 105, 99, 104, 97, 116, 0, 0, 0, 70, 97, 105, 108, 101,
    100, 32, 116, 111, 32, 108, 111, 97, 100, 32, 108, 105, 98, 114, 97, 114,
    121, 58, 32, 34, 37, 115, 34, 46, 10, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 115,
    95, 105, 110, 102, 111, 0, 0, 94, 51, 83, 95, 83, 116, 97, 114, 116, 76,
    111, 99, 97, 108, 83, 111, 117, 110, 100, 58, 32, 104, 97, 110, 100, 108,
    101, 32, 37, 105, 32, 111, 117, 116, 32, 111, 102, 32, 114, 97, 110, 103,
    101, 10, 0, 0, 0, 0, 87, 65, 82, 78, 73, 78, 71, 58, 32, 78, 69, 84, 95, 73,
    80, 54, 83, 111, 99, 107, 101, 116, 58, 32, 115, 101, 116, 115, 111, 99,
    107, 111, 112, 116, 32, 73, 80, 86, 54, 95, 86, 54, 79, 78, 76, 89, 58, 32,
    37, 115, 10, 0, 0, 0, 0, 0, 118, 101, 99, 116, 111, 114, 0, 0, 105, 109, 97,
    103, 101, 108, 105, 115, 116, 0, 0, 0, 0, 0, 0, 0, 83, 116, 114, 111, 103,
    103, 115, 0, 108, 101, 103, 115, 65, 110, 105, 109, 0, 0, 0, 0, 0, 0, 0, 0,
    107, 105, 99, 107, 98, 111, 116, 115, 0, 0, 0, 0, 0, 0, 0, 0, 70, 83, 95,
    70, 67, 114, 101, 97, 116, 101, 79, 112, 101, 110, 80, 105, 112, 101, 70,
    105, 108, 101, 58, 32, 37, 115, 10, 0, 0, 0, 0, 0, 70, 57, 0, 0, 0, 0, 0, 0,
    37, 100, 0, 0, 0, 0, 0, 0, 93, 37, 115, 10, 0, 0, 0, 0, 48, 0, 0, 0, 0, 0,
    0, 0, 98, 97, 115, 101, 0, 0, 0, 0, 114, 95, 109, 97, 120, 112, 111, 108,
    121, 118, 101, 114, 116, 115, 0, 0, 103, 95, 114, 101, 100, 84, 101, 97,
    109, 0, 0, 0, 0, 0, 0, 0, 115, 95, 97, 108, 71, 97, 105, 110, 0, 0, 0, 0, 0,
    0, 0, 0, 79, 110, 108, 121, 32, 109, 111, 110, 111, 32, 97, 110, 100, 32,
    115, 116, 101, 114, 101, 111, 32, 79, 103, 103, 32, 79, 112, 117, 115, 32,
    102, 105, 108, 101, 115, 32, 97, 114, 101, 32, 115, 117, 112, 112, 111, 114,
    116, 101, 100, 10, 0, 0, 0, 0, 0, 0, 94, 49, 69, 82, 82, 79, 82, 58, 32, 79,
    117, 116, 32, 111, 102, 32, 109, 101, 109, 111, 114, 121, 32, 114, 101, 97,
    100, 105, 110, 103, 32, 34, 37, 115, 34, 10, 0, 0, 0, 0, 92, 37, 115, 0, 0,
    0, 0, 0, 37, 115, 0, 0, 0, 0, 0, 0, 94, 51, 87, 65, 82, 78, 73, 78, 71, 58,
    32, 37, 115, 32, 110, 111, 116, 32, 112, 114, 101, 115, 101, 110, 116, 44,
    32, 117, 115, 105, 110, 103, 32, 37, 115, 32, 105, 110, 115, 116, 101, 97,
    100, 10, 0, 0, 0, 0, 116, 101, 120, 116, 117, 114, 101, 0, 37, 100, 0, 0, 0,
    0, 0, 0, 42, 106, 97, 109, 101, 115, 0, 0, 115, 101, 116, 0, 0, 0, 0, 0, 45,
    45, 45, 45, 45, 45, 32, 73, 110, 105, 116, 105, 97, 108, 105, 122, 105, 110,
    103, 32, 83, 111, 117, 110, 100, 32, 45, 45, 45, 45, 45, 45, 10, 0, 0, 0, 0,
    0, 0, 0, 43, 114, 105, 103, 104, 116, 0, 0, 99, 108, 101, 97, 114, 10, 0, 0,
    83, 111, 117, 110, 100, 32, 109, 101, 109, 111, 114, 121, 32, 109, 97, 110,
    97, 103, 101, 114, 32, 115, 116, 97, 114, 116, 101, 100, 10, 0, 0, 0, 99,
    109, 100, 108, 105, 115, 116, 0, 108, 105, 103, 104, 116, 109, 97, 112, 0,
    0, 0, 0, 0, 0, 0, 0, 114, 95, 109, 97, 120, 112, 111, 108, 121, 115, 0, 0,
    0, 0, 0, 0, 116, 101, 97, 109, 95, 104, 101, 97, 100, 109, 111, 100, 101,
    108, 0, 0, 37, 53, 100, 32, 115, 116, 101, 114, 101, 111, 10, 0, 0, 0, 0, 0,
    100, 114, 97, 119, 76, 101, 110, 32, 62, 61, 32, 77, 65, 88, 95, 83, 84, 82,
    73, 78, 71, 95, 67, 72, 65, 82, 83, 0, 0, 0, 0, 0, 67, 77, 95, 67, 108, 105,
    112, 72, 97, 110, 100, 108, 101, 84, 111, 77, 111, 100, 101, 108, 58, 32,
    98, 97, 100, 32, 104, 97, 110, 100, 108, 101, 32, 37, 105, 0, 0, 0, 0, 0,
    101, 110, 118, 105, 114, 111, 110, 109, 101, 110, 116, 0, 0, 0, 0, 0, 114,
    95, 115, 99, 114, 101, 101, 110, 115, 104, 111, 116, 74, 112, 101, 103, 81,
    117, 97, 108, 105, 116, 121, 0, 106, 97, 109, 101, 115, 0, 0, 0, 103, 97,
    109, 101, 116, 121, 112, 101, 0, 0, 0, 0, 0, 0, 0, 0, 98, 111, 116, 0, 0, 0,
    0, 0, 85, 78, 68, 79, 0, 0, 0, 0, 103, 108, 84, 101, 120, 73, 109, 97, 103,
    101, 50, 68, 0, 0, 0, 0, 115, 104, 111, 119, 100, 114, 111, 112, 0, 0, 0, 0,
    0, 0, 0, 0, 87, 65, 82, 78, 73, 78, 71, 58, 32, 109, 105, 115, 115, 105,
    110, 103, 32, 116, 101, 120, 103, 101, 110, 32, 112, 97, 114, 109, 32, 105,
    110, 32, 115, 104, 97, 100, 101, 114, 32, 39, 37, 115, 39, 10, 0, 0, 0, 0,
    57, 48, 0, 0, 0, 0, 0, 0, 116, 101, 97, 109, 95, 109, 111, 100, 101, 108, 0,
    0, 0, 0, 0, 0, 105, 111, 113, 51, 32, 49, 46, 51, 54, 95, 71, 73, 84, 95,
    52, 102, 55, 100, 55, 98, 102, 45, 50, 48, 49, 52, 45, 48, 50, 45, 48, 49,
    0, 0, 0, 0, 0, 0, 0, 0, 73, 109, 112, 114, 111, 112, 101, 114, 32, 99, 97,
    108, 108, 32, 116, 111, 32, 74, 80, 69, 71, 32, 108, 105, 98, 114, 97, 114,
    121, 32, 105, 110, 32, 115, 116, 97, 116, 101, 32, 37, 100, 0, 0, 0, 0, 0,
    0, 0, 32, 32, 32, 115, 110, 97, 112, 115, 104, 111, 116, 58, 37, 105, 32,
    32, 100, 101, 108, 116, 97, 58, 37, 105, 32, 32, 112, 105, 110, 103, 58, 37,
    105, 10, 0, 0, 0, 0, 0, 0, 114, 95, 102, 117, 108, 108, 115, 99, 114, 101,
    101, 110, 0, 0, 0, 0, 69, 85, 82, 79, 0, 0, 0, 0, 100, 101, 116, 97, 105,
    108, 0, 0, 82, 95, 76, 111, 97, 100, 77, 68, 51, 58, 32, 37, 115, 32, 104,
    97, 115, 32, 109, 111, 114, 101, 32, 116, 104, 97, 110, 32, 37, 105, 32,
    116, 114, 105, 97, 110, 103, 108, 101, 115, 32, 111, 110, 32, 37, 115, 32,
    40, 37, 105, 41, 46, 10, 0, 0, 0, 116, 99, 71, 101, 110, 0, 0, 0, 114, 95,
    97, 118, 105, 77, 111, 116, 105, 111, 110, 74, 112, 101, 103, 81, 117, 97,
    108, 105, 116, 121, 0, 0, 115, 97, 114, 103, 101, 0, 0, 0, 115, 99, 114,
    101, 101, 110, 115, 104, 111, 116, 115, 47, 115, 104, 111, 116, 37, 105, 37,
    105, 37, 105, 37, 105, 46, 116, 103, 97, 0, 0, 0, 0, 99, 97, 110, 39, 116,
    32, 119, 114, 105, 116, 101, 32, 37, 100, 32, 98, 105, 116, 115, 0, 0, 0, 0,
    0, 76, 65, 32, 32, 32, 0, 0, 0, 80, 79, 87, 69, 82, 0, 0, 0, 67, 111, 117,
    108, 100, 32, 110, 111, 116, 32, 108, 111, 97, 100, 32, 116, 101, 120, 116,
    117, 114, 101, 99, 111, 108, 111, 114, 32, 115, 104, 97, 100, 101, 114, 33,
    0, 0, 0, 0, 0, 99, 111, 100, 101, 47, 114, 101, 110, 100, 101, 114, 101,
    114, 103, 108, 50, 47, 116, 114, 95, 102, 98, 111, 46, 99, 0, 0, 0, 0, 0, 0,
    0, 103, 108, 71, 101, 116, 66, 117, 102, 102, 101, 114, 80, 111, 105, 110,
    116, 101, 114, 118, 65, 82, 66, 0, 0, 115, 116, 97, 116, 105, 99, 87, 111,
    114, 108, 100, 77, 101, 115, 104, 95, 73, 66, 79, 95, 109, 101, 114, 103,
    101, 100, 83, 117, 114, 102, 115, 37, 105, 0, 0, 0, 0, 0, 0, 0, 116, 101,
    120, 103, 101, 110, 0, 0, 114, 95, 109, 97, 114, 107, 115, 79, 110, 84, 114,
    105, 97, 110, 103, 108, 101, 77, 101, 115, 104, 101, 115, 0, 50, 48, 0, 0,
    0, 0, 0, 0, 104, 101, 97, 114, 116, 98, 101, 97, 116, 0, 0, 0, 0, 0, 0, 0,
    83, 121, 115, 95, 76, 111, 97, 100, 71, 97, 109, 101, 68, 108, 108, 40, 37,
    115, 41, 32, 102, 97, 105, 108, 101, 100, 32, 116, 111, 32, 102, 105, 110,
    100, 32, 118, 109, 77, 97, 105, 110, 32, 102, 117, 110, 99, 116, 105, 111,
    110, 58, 10, 34, 37, 115, 34, 32, 33, 10, 0, 0, 0, 0, 0, 32, 32, 70, 111,
    114, 109, 97, 116, 58, 32, 32, 32, 94, 49, 85, 78, 75, 78, 79, 87, 78, 10,
    0, 0, 77, 69, 78, 85, 0, 0, 0, 0, 105, 110, 95, 97, 118, 97, 105, 108, 97,
    98, 108, 101, 74, 111, 121, 115, 116, 105, 99, 107, 115, 0, 0, 0, 60, 60, 0,
    0, 0, 0, 0, 0, 77, 105, 115, 109, 97, 116, 99, 104, 101, 100, 32, 66, 79,
    84, 76, 73, 66, 95, 65, 80, 73, 95, 86, 69, 82, 83, 73, 79, 78, 58, 32, 101,
    120, 112, 101, 99, 116, 101, 100, 32, 37, 105, 44, 32, 103, 111, 116, 32,
    37, 105, 10, 0, 0, 0, 0, 0, 87, 65, 82, 78, 73, 78, 71, 58, 32, 117, 110,
    107, 110, 111, 119, 110, 32, 97, 108, 112, 104, 97, 71, 101, 110, 32, 112,
    97, 114, 97, 109, 101, 116, 101, 114, 32, 39, 37, 115, 39, 32, 105, 110, 32,
    115, 104, 97, 100, 101, 114, 32, 39, 37, 115, 39, 10, 0, 0, 0, 0, 0, 0, 0,
    0, 99, 103, 95, 115, 104, 97, 100, 111, 119, 115, 0, 0, 0, 0, 0, 0, 115,
    110, 97, 112, 115, 0, 0, 0, 98, 111, 116, 102, 105, 108, 101, 115, 0, 0, 0,
    0, 0, 0, 0, 0, 119, 101, 97, 112, 111, 110, 99, 111, 110, 102, 105, 103, 0,
    0, 0, 0, 56, 48, 48, 0, 0, 0, 0, 0, 109, 97, 120, 95, 108, 101, 118, 101,
    108, 105, 116, 101, 109, 115, 0, 0, 115, 121, 110, 111, 110, 121, 109, 32,
    109, 117, 115, 116, 32, 104, 97, 118, 101, 32, 97, 116, 32, 108, 101, 97,
    115, 116, 32, 116, 119, 111, 32, 101, 110, 116, 114, 105, 101, 115, 0, 0,
    108, 111, 97, 100, 101, 100, 32, 115, 107, 105, 108, 108, 32, 37, 100, 32,
    102, 114, 111, 109, 32, 37, 115, 10, 0, 0, 0, 0, 0, 0, 0, 0, 46, 112, 107,
    51, 0, 0, 0, 0, 116, 97, 114, 103, 101, 116, 95, 116, 101, 108, 101, 112,
    111, 114, 116, 101, 114, 32, 119, 105, 116, 104, 111, 117, 116, 32, 116, 97,
    114, 103, 101, 116, 10, 0, 0, 0, 0, 0, 0, 0, 112, 104, 121, 115, 95, 109,
    97, 120, 115, 116, 101, 112, 0, 0, 0, 0, 66, 82, 69, 65, 75, 0, 0, 0, 37,
    54, 100, 32, 99, 108, 117, 115, 116, 101, 114, 115, 32, 99, 114, 101, 97,
    116, 101, 100, 10, 0, 0, 0, 94, 51, 87, 97, 114, 110, 105, 110, 103, 58, 32,
    74, 117, 109, 112, 32, 116, 97, 98, 108, 101, 32, 115, 105, 122, 101, 32,
    111, 102, 32, 37, 115, 32, 110, 111, 116, 32, 109, 97, 116, 99, 104, 105,
    110, 103, 32, 97, 102, 116, 101, 114, 32, 86, 77, 95, 82, 101, 115, 116, 97,
    114, 116, 40, 41, 10, 0, 0, 0, 0, 0, 0, 0, 68, 101, 109, 111, 32, 102, 105,
    108, 101, 32, 119, 97, 115, 32, 116, 114, 117, 110, 99, 97, 116, 101, 100,
    46, 10, 0, 0, 0, 0, 0, 0, 0, 66, 73, 71, 32, 73, 110, 102, 111, 32, 115,
    116, 114, 105, 110, 103, 32, 108, 101, 110, 103, 116, 104, 32, 101, 120, 99,
    101, 101, 100, 101, 100, 10, 0, 0, 0, 0, 0, 0, 0, 0, 87, 65, 82, 78, 73, 78,
    71, 58, 32, 109, 105, 115, 115, 105, 110, 103, 32, 114, 97, 110, 103, 101,
    32, 112, 97, 114, 97, 109, 101, 116, 101, 114, 32, 102, 111, 114, 32, 97,
    108, 112, 104, 97, 71, 101, 110, 32, 112, 111, 114, 116, 97, 108, 32, 105,
    110, 32, 115, 104, 97, 100, 101, 114, 32, 39, 37, 115, 39, 44, 32, 100, 101,
    102, 97, 117, 108, 116, 105, 110, 103, 32, 116, 111, 32, 50, 53, 54, 10, 0,
    114, 95, 110, 111, 112, 111, 114, 116, 97, 108, 115, 0, 0, 0, 0, 0, 50, 53,
    48, 48, 48, 0, 0, 0, 83, 86, 67, 95, 73, 110, 102, 111, 58, 32, 114, 97,
    116, 101, 32, 108, 105, 109, 105, 116, 32, 101, 120, 99, 101, 101, 100, 101,
    100, 44, 32, 100, 114, 111, 112, 112, 105, 110, 103, 32, 114, 101, 113, 117,
    101, 115, 116, 10, 0, 0, 0, 0, 0, 0, 0, 0, 115, 118, 95, 107, 101, 121, 119,
    111, 114, 100, 115, 0, 0, 0, 0, 0, 67, 108, 105, 101, 110, 116, 32, 37, 105,
    32, 114, 101, 106, 101, 99, 116, 101, 100, 32, 111, 110, 32, 97, 32, 116,
    111, 111, 32, 104, 105, 103, 104, 32, 112, 105, 110, 103, 10, 0, 0, 98, 97,
    110, 97, 100, 100, 114, 0, 98, 111, 116, 95, 114, 101, 108, 111, 97, 100,
    99, 104, 97, 114, 97, 99, 116, 101, 114, 115, 0, 0, 0, 0, 115, 95, 97, 108,
    68, 101, 118, 105, 99, 101, 0, 0, 0, 0, 0, 0, 83, 67, 82, 79, 76, 76, 79,
    67, 75, 0, 0, 0, 0, 0, 0, 0, 115, 95, 115, 116, 111, 112, 0, 0, 105, 110,
    118, 97, 108, 105, 100, 32, 99, 118, 97, 114, 32, 110, 97, 109, 101, 32,
    115, 116, 114, 105, 110, 103, 58, 32, 37, 115, 10, 0, 0, 0, 115, 111, 117,
    110, 100, 47, 102, 101, 101, 100, 98, 97, 99, 107, 47, 104, 105, 116, 46,
    119, 97, 118, 0, 0, 87, 65, 82, 78, 73, 78, 71, 58, 32, 78, 69, 84, 95, 73,
    80, 54, 83, 111, 99, 107, 101, 116, 58, 32, 105, 111, 99, 116, 108, 32, 70,
    73, 79, 78, 66, 73, 79, 58, 32, 37, 115, 10, 0, 0, 0, 0, 0, 0, 108, 105,
    103, 104, 116, 105, 110, 103, 83, 112, 101, 99, 117, 108, 97, 114, 0, 0, 0,
    0, 0, 0, 0, 0, 114, 95, 108, 111, 99, 107, 112, 118, 115, 0, 0, 0, 0, 0, 0,
    0, 101, 118, 101, 110, 116, 80, 97, 114, 109, 0, 0, 0, 0, 0, 0, 0, 114, 97,
    116, 101, 0, 0, 0, 0, 97, 98, 0, 0, 0, 0, 0, 0, 70, 56, 0, 0, 0, 0, 0, 0,
    69, 83, 67, 65, 80, 69, 0, 0, 117, 115, 97, 103, 101, 58, 32, 116, 111, 103,
    103, 108, 101, 32, 60, 118, 97, 114, 105, 97, 98, 108, 101, 62, 32, 91, 118,
    97, 108, 117, 101, 49, 44, 32, 118, 97, 108, 117, 101, 50, 44, 32, 46, 46,
    46, 93, 10, 0, 83, 89, 83, 82, 69, 81, 0, 0, 87, 65, 82, 78, 73, 78, 71, 58,
    32, 109, 105, 115, 115, 105, 110, 103, 32, 112, 97, 114, 97, 109, 101, 116,
    101, 114, 115, 32, 102, 111, 114, 32, 97, 108, 112, 104, 97, 71, 101, 110,
    32, 105, 110, 32, 115, 104, 97, 100, 101, 114, 32, 39, 37, 115, 39, 10, 0,
    0, 0, 0, 0, 0, 0, 0, 71, 76, 95, 66, 65, 67, 75, 0, 85, 110, 110, 97, 109,
    101, 100, 80, 108, 97, 121, 101, 114, 0, 0, 0, 80, 82, 73, 78, 84, 0, 0, 0,
    119, 97, 105, 116, 32, 59, 32, 119, 97, 105, 116, 32, 59, 32, 119, 97, 105,
    116, 32, 59, 32, 119, 97, 105, 116, 32, 59, 32, 115, 99, 114, 101, 101, 110,
    115, 104, 111, 116, 32, 108, 101, 118, 101, 108, 115, 104, 111, 116, 10, 0,
    0, 0, 0, 0, 0, 0, 97, 108, 112, 104, 97, 71, 101, 110, 0, 0, 0, 0, 0, 0, 0,
    0, 114, 95, 100, 114, 97, 119, 66, 117, 102, 102, 101, 114, 0, 0, 0, 0, 110,
    97, 109, 101, 0, 0, 0, 0, 83, 86, 95, 66, 111, 116, 70, 114, 101, 101, 67,
    108, 105, 101, 110, 116, 58, 32, 98, 97, 100, 32, 99, 108, 105, 101, 110,
    116, 78, 117, 109, 58, 32, 37, 105, 0, 0, 0, 0, 0, 99, 118, 97, 114, 95,
    114, 101, 115, 116, 97, 114, 116, 0, 0, 0, 0, 45, 108, 101, 102, 116, 0, 0,
    0, 72, 69, 76, 80, 0, 0, 0, 0, 99, 102, 103, 0, 0, 0, 0, 0, 87, 65, 82, 78,
    73, 78, 71, 58, 32, 117, 110, 107, 110, 111, 119, 110, 32, 114, 103, 98, 71,
    101, 110, 32, 112, 97, 114, 97, 109, 101, 116, 101, 114, 32, 39, 37, 115,
    39, 32, 105, 110, 32, 115, 104, 97, 100, 101, 114, 32, 39, 37, 115, 39, 10,
    0, 0, 114, 95, 111, 102, 102, 115, 101, 116, 117, 110, 105, 116, 115, 0, 0,
    0, 126, 32, 96, 32, 48, 120, 55, 101, 32, 48, 120, 54, 48, 0, 0, 0, 77, 79,
    68, 69, 0, 0, 0, 0, 67, 77, 95, 76, 111, 97, 100, 77, 97, 112, 58, 32, 37,
    115, 32, 104, 97, 115, 32, 119, 114, 111, 110, 103, 32, 118, 101, 114, 115,
    105, 111, 110, 32, 110, 117, 109, 98, 101, 114, 32, 40, 37, 105, 32, 115,
    104, 111, 117, 108, 100, 32, 98, 101, 32, 37, 105, 41, 0, 0, 0, 0, 0, 0, 0,
    111, 110, 101, 77, 105, 110, 117, 115, 86, 101, 114, 116, 101, 120, 0, 0,
    45, 49, 0, 0, 0, 0, 0, 0, 99, 108, 95, 99, 111, 110, 115, 111, 108, 101, 75,
    101, 121, 115, 0, 0, 103, 97, 109, 101, 0, 0, 0, 0, 67, 79, 77, 80, 79, 83,
    69, 0, 103, 108, 67, 111, 109, 112, 114, 101, 115, 115, 101, 100, 84, 101,
    120, 83, 117, 98, 73, 109, 97, 103, 101, 50, 68, 0, 0, 0, 0, 0, 0, 0, 108,
    105, 103, 104, 116, 105, 110, 103, 68, 105, 102, 102, 117, 115, 101, 0, 114,
    95, 111, 102, 102, 115, 101, 116, 102, 97, 99, 116, 111, 114, 0, 0, 99, 108,
    95, 103, 117, 105, 100, 83, 101, 114, 118, 101, 114, 85, 110, 105, 113, 0,
    0, 0, 0, 0, 0, 0, 73, 110, 118, 97, 108, 105, 100, 32, 115, 99, 97, 110, 32,
    115, 99, 114, 105, 112, 116, 32, 97, 116, 32, 101, 110, 116, 114, 121, 32,
    37, 100, 0, 115, 97, 121, 58, 0, 0, 0, 0, 112, 97, 99, 107, 101, 116, 32,
    101, 110, 116, 105, 116, 105, 101, 115, 0, 37, 100, 0, 0, 0, 0, 0, 0, 87,
    73, 78, 68, 79, 87, 83, 0, 116, 114, 97, 110, 115, 0, 0, 0, 82, 95, 76, 111,
    97, 100, 77, 68, 51, 58, 32, 37, 115, 32, 104, 97, 115, 32, 109, 111, 114,
    101, 32, 116, 104, 97, 110, 32, 37, 105, 32, 118, 101, 114, 116, 115, 32,
    111, 110, 32, 37, 115, 32, 40, 37, 105, 41, 46, 10, 0, 0, 0, 0, 0, 0, 0,
    101, 120, 97, 99, 116, 86, 101, 114, 116, 101, 120, 76, 105, 116, 0, 0, 114,
    95, 99, 108, 101, 97, 114, 0, 99, 108, 95, 108, 97, 110, 70, 111, 114, 99,
    101, 80, 97, 99, 107, 101, 116, 115, 0, 0, 0, 0, 0, 0, 115, 99, 114, 101,
    101, 110, 115, 104, 111, 116, 115, 47, 115, 104, 111, 116, 57, 57, 57, 57,
    46, 116, 103, 97, 0, 0, 0, 0, 0, 0, 0, 0, 82, 71, 66, 32, 32, 0, 0, 0, 87,
    79, 82, 76, 68, 95, 57, 53, 0, 0, 0, 0, 0, 0, 0, 0, 116, 101, 120, 116, 117,
    114, 101, 99, 111, 108, 111, 114, 0, 0, 0, 0, 45, 45, 45, 45, 45, 45, 45,
    32, 70, 66, 79, 95, 73, 110, 105, 116, 32, 45, 45, 45, 45, 45, 45, 45, 10,
    0, 0, 0, 0, 0, 0, 0, 103, 108, 71, 101, 116, 66, 117, 102, 102, 101, 114,
    80, 97, 114, 97, 109, 101, 116, 101, 114, 105, 118, 65, 82, 66, 0, 0, 0, 0,
    0, 0, 0, 42, 99, 117, 98, 101, 77, 97, 112, 37, 100, 0, 0, 0, 0, 0, 0, 118,
    101, 114, 116, 101, 120, 76, 105, 116, 0, 0, 0, 0, 0, 0, 0, 114, 95, 115,
    104, 111, 119, 110, 111, 114, 109, 97, 108, 115, 0, 0, 0, 56, 48, 48, 0, 0,
    0, 0, 0, 118, 109, 77, 97, 105, 110, 0, 0, 32, 32, 70, 111, 114, 109, 97,
    116, 58, 32, 32, 32, 37, 115, 10, 0, 87, 79, 82, 76, 68, 95, 57, 52, 0, 0,
    0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 62, 62, 0, 0, 0, 0, 0, 0, 66,
    111, 116, 85, 112, 100, 97, 116, 101, 69, 110, 116, 105, 116, 121, 0, 101,
    120, 97, 99, 116, 86, 101, 114, 116, 101, 120, 0, 0, 0, 0, 0, 114, 95, 115,
    104, 111, 119, 115, 107, 121, 0, 0, 0, 0, 0, 0, 0, 119, 101, 105, 103, 104,
    116, 70, 105, 108, 101, 76, 105, 115, 116, 32, 119, 97, 115, 32, 102, 117,
    108, 108, 32, 116, 114, 121, 105, 110, 103, 32, 116, 111, 32, 108, 111, 97,
    100, 32, 37, 115, 10, 0, 0, 0, 0, 0, 0, 99, 108, 95, 109, 97, 120, 80, 105,
    110, 103, 0, 0, 0, 0, 0, 0, 99, 111, 117, 108, 100, 110, 39, 116, 32, 108,
    111, 97, 100, 32, 119, 101, 97, 112, 111, 110, 32, 99, 111, 110, 102, 105,
    103, 32, 37, 115, 10, 0, 115, 118, 95, 103, 114, 97, 118, 105, 116, 121, 0,
    0, 0, 0, 0, 0, 105, 116, 101, 109, 32, 105, 110, 102, 111, 32, 37, 100, 32,
    34, 37, 115, 34, 32, 104, 97, 115, 32, 110, 111, 32, 102, 117, 122, 122,
    121, 32, 119, 101, 105, 103, 104, 116, 13, 10, 0, 93, 0, 0, 0, 0, 0, 0, 0,
    108, 111, 97, 100, 101, 100, 32, 99, 97, 99, 104, 101, 100, 32, 115, 107,
    105, 108, 108, 32, 37, 102, 32, 102, 114, 111, 109, 32, 37, 115, 10, 0, 116,
    97, 114, 103, 101, 116, 95, 116, 101, 108, 101, 112, 111, 114, 116, 101,
    114, 0, 0, 0, 0, 0, 0, 0, 52, 0, 0, 0, 0, 0, 0, 0, 87, 79, 82, 76, 68, 95,
    57, 51, 0, 0, 0, 0, 0, 0, 0, 0, 37, 54, 100, 32, 112, 111, 114, 116, 97,
    108, 115, 32, 99, 114, 101, 97, 116, 101, 100, 10, 0, 0, 0, 0, 76, 111, 97,
    100, 105, 110, 103, 32, 37, 100, 32, 106, 117, 109, 112, 32, 116, 97, 98,
    108, 101, 32, 116, 97, 114, 103, 101, 116, 115, 10, 0, 0, 67, 76, 95, 82,
    101, 97, 100, 68, 101, 109, 111, 77, 101, 115, 115, 97, 103, 101, 58, 32,
    100, 101, 109, 111, 77, 115, 103, 108, 101, 110, 32, 62, 32, 77, 65, 88, 95,
    77, 83, 71, 76, 69, 78, 0, 0, 0, 0, 0, 73, 110, 102, 111, 32, 115, 116, 114,
    105, 110, 103, 32, 108, 101, 110, 103, 116, 104, 32, 101, 120, 99, 101, 101,
    100, 101, 100, 10, 0, 0, 0, 0, 118, 101, 114, 116, 101, 120, 0, 0, 114, 95,
    115, 104, 111, 119, 116, 114, 105, 115, 0, 0, 0, 0, 0, 0, 99, 108, 95, 109,
    111, 116, 100, 83, 116, 114, 105, 110, 103, 0, 0, 0, 83, 86, 67, 95, 73,
    110, 102, 111, 58, 32, 114, 97, 116, 101, 32, 108, 105, 109, 105, 116, 32,
    102, 114, 111, 109, 32, 37, 115, 32, 101, 120, 99, 101, 101, 100, 101, 100,
    44, 32, 100, 114, 111, 112, 112, 105, 110, 103, 32, 114, 101, 113, 117, 101,
    115, 116, 10, 0, 0, 0, 0, 0, 0, 0, 0, 103, 95, 103, 97, 109, 101, 116, 121,
    112, 101, 0, 0, 0, 0, 0, 0, 112, 114, 105, 110, 116, 10, 83, 101, 114, 118,
    101, 114, 32, 105, 115, 32, 102, 111, 114, 32, 108, 111, 119, 32, 112, 105,
    110, 103, 115, 32, 111, 110, 108, 121, 10, 0, 0, 0, 0, 0, 108, 105, 115,
    116, 98, 97, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 49, 48, 48, 0, 0, 0, 0, 0,
    87, 79, 82, 76, 68, 95, 57, 50, 0, 0, 0, 0, 0, 0, 0, 0, 115, 95, 108, 105,
    115, 116, 0, 0, 94, 51, 87, 65, 82, 78, 73, 78, 71, 58, 32, 99, 111, 117,
    108, 100, 32, 110, 111, 116, 32, 102, 105, 110, 100, 32, 37, 115, 32, 45,
    32, 117, 115, 105, 110, 103, 32, 100, 101, 102, 97, 117, 108, 116, 10, 0, 0,
    0, 87, 65, 82, 78,
  ],
  "i8",
  ALLOC_NONE,
  Runtime.GLOBAL_BASE + 143364
);
/* memory initializer */ allocate(
  [
    73, 78, 71, 58, 32, 78, 69, 84, 95, 73, 80, 54, 83, 111, 99, 107, 101, 116,
    58, 32, 115, 111, 99, 107, 101, 116, 58, 32, 37, 115, 10, 0, 0, 0, 0, 0,
    115, 95, 97, 108, 80, 114, 101, 99, 97, 99, 104, 101, 0, 0, 0, 0, 111, 110,
    101, 77, 105, 110, 117, 115, 69, 110, 116, 105, 116, 121, 0, 0, 114, 95,
    110, 111, 98, 105, 110, 100, 0, 0, 0, 0, 0, 0, 0, 0, 116, 111, 114, 115,
    111, 65, 110, 105, 109, 0, 0, 0, 0, 0, 0, 0, 106, 95, 117, 112, 95, 97, 120,
    105, 115, 0, 0, 0, 0, 0, 0, 0, 70, 83, 95, 70, 79, 112, 101, 110, 70, 105,
    108, 101, 65, 112, 112, 101, 110, 100, 58, 32, 37, 115, 10, 0, 70, 55, 0, 0,
    0, 0, 0, 0, 67, 118, 97, 114, 32, 37, 115, 32, 100, 111, 101, 115, 32, 110,
    111, 116, 32, 101, 120, 105, 115, 116, 46, 10, 0, 0, 0, 0, 0, 0, 0, 0, 111,
    112, 117, 115, 0, 0, 0, 0, 87, 79, 82, 76, 68, 95, 57, 49, 0, 0, 0, 0, 0, 0,
    0, 0, 101, 110, 116, 105, 116, 121, 0, 0, 114, 95, 100, 101, 98, 117, 103,
    83, 117, 114, 102, 97, 99, 101, 0, 0, 106, 95, 115, 105, 100, 101, 95, 97,
    120, 105, 115, 0, 0, 0, 0, 0, 119, 97, 118, 0, 0, 0, 0, 0, 87, 79, 82, 76,
    68, 95, 57, 48, 0, 0, 0, 0, 0, 0, 0, 0, 99, 108, 105, 101, 110, 116, 76,
    101, 118, 101, 108, 83, 104, 111, 116, 0, 67, 76, 95, 71, 101, 116, 83, 110,
    97, 112, 115, 104, 111, 116, 58, 32, 115, 110, 97, 112, 115, 104, 111, 116,
    78, 117, 109, 98, 101, 114, 32, 62, 32, 99, 108, 46, 115, 110, 97, 112, 115,
    104, 111, 116, 46, 109, 101, 115, 115, 97, 103, 101, 78, 117, 109, 0, 105,
    100, 101, 110, 116, 105, 116, 121, 76, 105, 103, 104, 116, 105, 110, 103, 0,
    0, 0, 0, 0, 0, 0, 0, 114, 95, 108, 111, 103, 70, 105, 108, 101, 0, 0, 0, 0,
    0, 0, 0, 106, 95, 102, 111, 114, 119, 97, 114, 100, 95, 97, 120, 105, 115,
    0, 0, 115, 97, 102, 101, 0, 0, 0, 0, 87, 79, 82, 76, 68, 95, 56, 57, 0, 0,
    0, 0, 0, 0, 0, 0, 43, 108, 101, 102, 116, 0, 0, 0, 37, 105, 32, 99, 111,
    109, 109, 97, 110, 100, 115, 10, 0, 0, 0, 0, 105, 100, 101, 110, 116, 105,
    116, 121, 0, 0, 0, 0, 0, 0, 0, 0, 114, 95, 118, 101, 114, 98, 111, 115, 101,
    0, 0, 0, 0, 0, 0, 0, 52, 0, 0, 0, 0, 0, 0, 0, 67, 97, 110, 39, 116, 32, 114,
    101, 97, 100, 32, 115, 111, 117, 110, 100, 32, 102, 105, 108, 101, 32, 37,
    115, 10, 0, 0, 0, 0, 0, 0, 0, 87, 79, 82, 76, 68, 95, 56, 56, 0, 0, 0, 0, 0,
    0, 0, 0, 67, 111, 117, 108, 100, 110, 39, 116, 32, 108, 111, 97, 100, 32,
    37, 115, 0, 0, 0, 0, 0, 0, 0, 0, 99, 111, 110, 115, 116, 0, 0, 0, 114, 95,
    115, 112, 101, 101, 100, 115, 0, 0, 0, 0, 0, 0, 0, 0, 106, 95, 121, 97, 119,
    95, 97, 120, 105, 115, 0, 0, 0, 0, 0, 0, 94, 51, 87, 65, 82, 78, 73, 78, 71,
    58, 32, 65, 117, 100, 105, 111, 32, 99, 97, 112, 116, 117, 114, 101, 32,
    105, 115, 32, 110, 111, 116, 32, 115, 117, 112, 112, 111, 114, 116, 101,
    100, 32, 119, 105, 116, 104, 32, 79, 112, 101, 110, 65, 76, 46, 32, 83, 101,
    116, 32, 115, 95, 117, 115, 101, 79, 112, 101, 110, 65, 76, 32, 116, 111,
    32, 48, 32, 102, 111, 114, 32, 97, 117, 100, 105, 111, 32, 99, 97, 112, 116,
    117, 114, 101, 10, 0, 0, 109, 97, 120, 112, 105, 110, 103, 0, 87, 79, 82,
    76, 68, 95, 56, 55, 0, 0, 0, 0, 0, 0, 0, 0, 103, 108, 67, 111, 109, 112,
    114, 101, 115, 115, 101, 100, 84, 101, 120, 73, 109, 97, 103, 101, 50, 68,
    0, 0, 87, 65, 82, 78, 73, 78, 71, 58, 32, 109, 105, 115, 115, 105, 110, 103,
    32, 112, 97, 114, 97, 109, 101, 116, 101, 114, 115, 32, 102, 111, 114, 32,
    114, 103, 98, 71, 101, 110, 32, 105, 110, 32, 115, 104, 97, 100, 101, 114,
    32, 39, 37, 115, 39, 10, 0, 0, 114, 95, 115, 104, 111, 119, 99, 108, 117,
    115, 116, 101, 114, 0, 0, 0, 51, 0, 0, 0, 0, 0, 0, 0, 66, 111, 103, 117,
    115, 32, 115, 97, 109, 112, 108, 105, 110, 103, 32, 102, 97, 99, 116, 111,
    114, 115, 0, 0, 115, 97, 121, 95, 116, 101, 97, 109, 58, 0, 0, 0, 0, 0, 0,
    0, 114, 95, 109, 111, 100, 101, 0, 0, 112, 108, 97, 121, 101, 114, 115, 116,
    97, 116, 101, 0, 0, 0, 0, 0, 45, 45, 45, 45, 45, 45, 45, 32, 82, 95, 83,
    104, 117, 116, 100, 111, 119, 110, 86, 66, 79, 115, 32, 45, 45, 45, 45, 45,
    45, 45, 10, 0, 87, 79, 82, 76, 68, 95, 56, 54, 0, 0, 0, 0, 0, 0, 0, 0, 111,
    114, 105, 103, 105, 110, 0, 0, 82, 95, 76, 111, 97, 100, 77, 68, 51, 58, 32,
    37, 115, 32, 104, 97, 115, 32, 110, 111, 32, 102, 114, 97, 109, 101, 115,
    10, 0, 0, 0, 0, 114, 103, 98, 71, 101, 110, 0, 0, 114, 95, 110, 111, 118,
    105, 115, 0, 106, 95, 112, 105, 116, 99, 104, 95, 97, 120, 105, 115, 0, 0,
    0, 0, 77, 111, 100, 101, 32, 49, 49, 58, 32, 56, 53, 54, 120, 52, 56, 48,
    32, 40, 119, 105, 100, 101, 41, 0, 76, 32, 32, 32, 32, 0, 0, 0, 87, 79, 82,
    76, 68, 95, 56, 53, 0, 0, 0, 0, 0, 0, 0, 0, 67, 111, 117, 108, 100, 32, 110,
    111, 116, 32, 108, 111, 97, 100, 32, 103, 101, 110, 101, 114, 105, 99, 32,
    115, 104, 97, 100, 101, 114, 33, 0, 0, 45, 45, 45, 32, 70, 66, 79, 95, 66,
    105, 110, 100, 32, 40, 32, 78, 85, 76, 76, 32, 41, 32, 45, 45, 45, 10, 0, 0,
    0, 0, 0, 0, 103, 108, 71, 101, 116, 66, 117, 102, 102, 101, 114, 83, 117,
    98, 68, 97, 116, 97, 65, 82, 66, 0, 0, 0, 111, 114, 105, 103, 105, 110, 0,
    0, 87, 65, 82, 78, 73, 78, 71, 58, 32, 109, 105, 115, 115, 105, 110, 103,
    32, 112, 97, 114, 97, 109, 101, 116, 101, 114, 32, 102, 111, 114, 32, 103,
    108, 111, 115, 115, 32, 105, 110, 32, 115, 104, 97, 100, 101, 114, 32, 39,
    37, 115, 39, 10, 0, 0, 0, 0, 114, 95, 110, 111, 99, 117, 108, 108, 0, 0, 0,
    0, 0, 0, 0, 0, 106, 95, 117, 112, 0, 0, 0, 0, 100, 108, 108, 69, 110, 116,
    114, 121, 0, 0, 0, 0, 0, 0, 0, 0, 37, 115, 58, 10, 0, 0, 0, 0, 87, 79, 82,
    76, 68, 95, 56, 52, 0, 0, 0, 0, 0, 0, 0, 0, 37, 100, 32, 112, 111, 115, 115,
    105, 98, 108, 101, 32, 106, 111, 121, 115, 116, 105, 99, 107, 115, 10, 0, 0,
    94, 61, 0, 0, 0, 0, 0, 0, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45,
    45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45,
    45, 45, 45, 45, 45, 45, 10, 0, 0, 103, 108, 111, 115, 115, 0, 0, 0, 114, 95,
    105, 103, 110, 111, 114, 101, 0, 0, 0, 0, 0, 0, 0, 0, 115, 119, 105, 116,
    99, 104, 32, 119, 105, 116, 104, 111, 117, 116, 32, 100, 101, 102, 97, 117,
    108, 116, 0, 0, 106, 95, 115, 105, 100, 101, 0, 0, 108, 111, 97, 100, 101,
    100, 32, 37, 115, 10, 0, 0, 0, 0, 0, 0, 51, 50, 0, 0, 0, 0, 0, 0, 108, 111,
    97, 100, 101, 100, 32, 37, 115, 10, 0, 0, 0, 0, 0, 0, 41, 0, 0, 0, 0, 0, 0,
    0, 117, 110, 107, 110, 111, 119, 110, 32, 100, 101, 102, 105, 110, 105, 116,
    105, 111, 110, 32, 37, 115, 0, 0, 0, 116, 114, 105, 103, 103, 101, 114, 95,
    109, 117, 108, 116, 105, 112, 108, 101, 32, 97, 116, 32, 37, 49, 46, 48,
    102, 32, 37, 49, 46, 48, 102, 32, 37, 49, 46, 48, 102, 32, 119, 105, 116,
    104, 111, 117, 116, 32, 116, 97, 114, 103, 101, 116, 10, 0, 0, 0, 112, 104,
    121, 115, 95, 115, 119, 105, 109, 97, 99, 99, 101, 108, 101, 114, 97, 116,
    101, 0, 0, 0, 0, 0, 87, 79, 82, 76, 68, 95, 56, 51, 0, 0, 0, 0, 0, 0, 0, 0,
    112, 111, 114, 116, 97, 108, 32, 37, 100, 58, 32, 97, 114, 101, 97, 32, 37,
    100, 13, 10, 0, 0, 0, 0, 94, 51, 87, 97, 114, 110, 105, 110, 103, 58, 32,
    68, 97, 116, 97, 32, 114, 101, 103, 105, 111, 110, 32, 115, 105, 122, 101,
    32, 111, 102, 32, 37, 115, 32, 110, 111, 116, 32, 109, 97, 116, 99, 104,
    105, 110, 103, 32, 97, 102, 116, 101, 114, 32, 86, 77, 95, 82, 101, 115,
    116, 97, 114, 116, 40, 41, 10, 0, 0, 0, 0, 0, 0, 67, 111, 117, 108, 100,
    110, 39, 116, 32, 111, 112, 101, 110, 32, 37, 115, 32, 102, 111, 114, 32,
    119, 114, 105, 116, 105, 110, 103, 10, 0, 0, 0, 92, 37, 115, 92, 37, 115, 0,
    0, 87, 65, 82, 78, 73, 78, 71, 58, 32, 109, 105, 115, 115, 105, 110, 103,
    32, 112, 97, 114, 97, 109, 101, 116, 101, 114, 32, 102, 111, 114, 32, 115,
    112, 101, 99, 117, 108, 97, 114, 32, 101, 120, 112, 111, 110, 101, 110, 116,
    32, 105, 110, 32, 115, 104, 97, 100, 101, 114, 32, 39, 37, 115, 39, 10, 0,
    0, 0, 0, 0, 0, 0, 0, 114, 95, 100, 114, 97, 119, 101, 110, 116, 105, 116,
    105, 101, 115, 0, 0, 117, 105, 95, 115, 105, 110, 103, 108, 101, 80, 108,
    97, 121, 101, 114, 65, 99, 116, 105, 118, 101, 0, 0, 0, 45, 48, 46, 50, 53,
    0, 0, 0, 116, 105, 109, 101, 108, 105, 109, 105, 116, 0, 0, 0, 0, 0, 0, 0,
    108, 111, 103, 102, 105, 108, 101, 32, 111, 112, 101, 110, 101, 100, 32,
    111, 110, 32, 37, 115, 10, 0, 0, 0, 67, 108, 105, 101, 110, 116, 32, 37,
    105, 32, 114, 101, 106, 101, 99, 116, 101, 100, 32, 111, 110, 32, 97, 32,
    116, 111, 111, 32, 108, 111, 119, 32, 112, 105, 110, 103, 10, 0, 0, 0, 114,
    101, 104, 97, 115, 104, 98, 97, 110, 115, 0, 0, 0, 0, 0, 0, 98, 111, 116,
    95, 116, 104, 105, 110, 107, 116, 105, 109, 101, 0, 0, 0, 115, 95, 97, 108,
    73, 110, 112, 117, 116, 68, 101, 118, 105, 99, 101, 0, 87, 79, 82, 76, 68,
    95, 56, 50, 0, 0, 0, 0, 0, 0, 0, 0, 115, 116, 111, 112, 109, 117, 115, 105,
    99, 0, 0, 0, 0, 0, 0, 0, 67, 104, 97, 110, 110, 101, 108, 32, 109, 101, 109,
    111, 114, 121, 32, 109, 97, 110, 97, 103, 101, 114, 32, 115, 116, 97, 114,
    116, 101, 100, 10, 0, 79, 112, 101, 110, 105, 110, 103, 32, 73, 80, 54, 32,
    115, 111, 99, 107, 101, 116, 58, 32, 91, 58, 58, 93, 58, 37, 105, 10, 0, 0,
    0, 0, 115, 112, 101, 99, 117, 108, 97, 114, 101, 120, 112, 111, 110, 101,
    110, 116, 0, 0, 0, 0, 0, 0, 0, 0, 114, 95, 110, 111, 114, 101, 102, 114,
    101, 115, 104, 0, 0, 0, 0, 0, 101, 84, 121, 112, 101, 0, 0, 0, 106, 95, 102,
    111, 114, 119, 97, 114, 100, 0, 0, 0, 0, 0, 0, 0, 70, 83, 95, 70, 79, 112,
    101, 110, 70, 105, 108, 101, 87, 114, 105, 116, 101, 58, 32, 37, 115, 10, 0,
    0, 70, 54, 0, 0, 0, 0, 0, 0, 117, 115, 97, 103, 101, 58, 32, 112, 114, 105,
    110, 116, 32, 60, 118, 97, 114, 105, 97, 98, 108, 101, 62, 10, 0, 0, 0, 0,
    0, 0, 0, 0, 87, 79, 82, 76, 68, 95, 56, 49, 0, 0, 0, 0, 0, 0, 0, 0, 85, 115,
    97, 103, 101, 58, 32, 112, 108, 97, 121, 32, 60, 115, 111, 117, 110, 100,
    32, 102, 105, 108, 101, 110, 97, 109, 101, 62, 32, 91, 115, 111, 117, 110,
    100, 32, 102, 105, 108, 101, 110, 97, 109, 101, 93, 32, 91, 115, 111, 117,
    110, 100, 32, 102, 105, 108, 101, 110, 97, 109, 101, 93, 32, 46, 46, 46, 10,
    0, 0, 0, 0, 0, 87, 65, 82, 78, 73, 78, 71, 58, 32, 109, 105, 115, 115, 105,
    110, 103, 32, 112, 97, 114, 97, 109, 101, 116, 101, 114, 32, 102, 111, 114,
    32, 115, 112, 101, 99, 117, 108, 97, 114, 32, 114, 101, 102, 108, 101, 99,
    116, 97, 110, 99, 101, 32, 105, 110, 32, 115, 104, 97, 100, 101, 114, 32,
    39, 37, 115, 39, 10, 0, 0, 0, 0, 0, 53, 0, 0, 0, 0, 0, 0, 0, 45, 48, 46, 48,
    50, 50, 0, 0, 87, 79, 82, 76, 68, 95, 56, 48, 0, 0, 0, 0, 0, 0, 0, 0, 109,
    97, 112, 95, 114, 101, 115, 116, 97, 114, 116, 0, 0, 0, 0, 0, 115, 112, 101,
    99, 117, 108, 97, 114, 114, 101, 102, 108, 101, 99, 116, 97, 110, 99, 101,
    0, 0, 0, 0, 0, 114, 95, 108, 111, 100, 115, 99, 97, 108, 101, 0, 0, 0, 0, 0,
    0, 106, 95, 121, 97, 119, 0, 0, 0, 67, 108, 105, 101, 110, 116, 32, 113,
    117, 105, 116, 0, 0, 0, 0, 0, 87, 79, 82, 76, 68, 95, 55, 57, 0, 0, 0, 0, 0,
    0, 0, 0, 45, 109, 111, 118, 101, 100, 111, 119, 110, 0, 0, 0, 0, 0, 0, 0,
    82, 101, 115, 116, 114, 105, 99, 116, 101, 100, 32, 115, 111, 117, 114, 99,
    101, 32, 116, 114, 105, 101, 100, 32, 116, 111, 32, 114, 101, 109, 111, 118,
    101, 32, 115, 121, 115, 116, 101, 109, 32, 99, 111, 109, 109, 97, 110, 100,
    32, 34, 37, 115, 34, 0, 0, 0, 87, 65, 82, 78, 73, 78, 71, 58, 32, 117, 110,
    107, 110, 111, 119, 110, 32, 115, 116, 97, 103, 101, 32, 112, 97, 114, 97,
    109, 101, 116, 101, 114, 32, 39, 37, 115, 39, 32, 105, 110, 32, 115, 104,
    97, 100, 101, 114, 32, 39, 37, 115, 39, 10, 0, 0, 0, 114, 95, 109, 101, 97,
    115, 117, 114, 101, 79, 118, 101, 114, 100, 114, 97, 119, 0, 0, 0, 0, 0, 0,
    0, 106, 95, 112, 105, 116, 99, 104, 0, 99, 111, 109, 95, 115, 111, 117, 110,
    100, 77, 101, 103, 115, 0, 0, 0, 87, 65, 82, 78, 73, 78, 71, 58, 32, 67, 77,
    95, 71, 114, 105, 100, 80, 108, 97, 110, 101, 32, 117, 110, 114, 101, 115,
    111, 108, 118, 97, 98, 108, 101, 10, 0, 0, 0, 0, 0, 87, 79, 82, 76, 68, 95,
    55, 56, 0, 0, 0, 0, 0, 0, 0, 0, 67, 77, 95, 76, 111, 97, 100, 77, 97, 112,
    40, 32, 37, 115, 44, 32, 37, 105, 32, 41, 10, 0, 0, 0, 115, 112, 101, 99,
    117, 108, 97, 114, 77, 97, 112, 0, 0, 0, 0, 0, 114, 95, 115, 107, 105, 112,
    66, 97, 99, 107, 69, 110, 100, 0, 0, 0, 117, 95, 80, 114, 105, 109, 97, 114,
    121, 76, 105, 103, 104, 116, 82, 97, 100, 105, 117, 115, 0, 0, 0, 0, 109,
    95, 102, 105, 108, 116, 101, 114, 0, 0, 0, 0, 0, 0, 0, 0, 94, 51, 87, 65,
    82, 78, 73, 78, 71, 58, 32, 65, 117, 100, 105, 111, 32, 102, 111, 114, 109,
    97, 116, 32, 111, 102, 32, 37, 100, 32, 98, 105, 116, 47, 37, 100, 32, 99,
    104, 97, 110, 110, 101, 108, 115, 32, 110, 111, 116, 32, 115, 117, 112, 112,
    111, 114, 116, 101, 100, 0, 0, 0, 0, 0, 109, 105, 110, 112, 105, 110, 103,
    0, 87, 79, 82, 76, 68, 95, 55, 55, 0, 0, 0, 0, 0, 0, 0, 0, 103, 108, 68,
    101, 108, 101, 116, 101, 84, 101, 120, 116, 117, 114, 101, 115, 0, 0, 0, 0,
    0, 0, 0, 0, 98, 117, 109, 112, 80, 97, 114, 97, 108, 108, 97, 120, 77, 97,
    112, 0, 49, 53, 48, 0, 0, 0, 0, 0, 117, 95, 80, 114, 105, 109, 97, 114, 121,
    76, 105, 103, 104, 116, 65, 109, 98, 105, 101, 110, 116, 0, 0, 0, 109, 95,
    115, 105, 100, 101, 0, 0, 73, 110, 118, 97, 108, 105, 100, 32, 112, 114,
    111, 103, 114, 101, 115, 115, 105, 118, 101, 32, 112, 97, 114, 97, 109, 101,
    116, 101, 114, 115, 32, 97, 116, 32, 115, 99, 97, 110, 32, 115, 99, 114,
    105, 112, 116, 32, 101, 110, 116, 114, 121, 32, 37, 100, 0, 0, 99, 111, 109,
    95, 97, 98, 110, 111, 114, 109, 97, 108, 69, 120, 105, 116, 0, 0, 0, 0, 0,
    0, 0, 0, 67, 76, 95, 80, 97, 114, 115, 101, 83, 110, 97, 112, 115, 104, 111,
    116, 58, 32, 73, 110, 118, 97, 108, 105, 100, 32, 115, 105, 122, 101, 32,
    37, 100, 32, 102, 111, 114, 32, 97, 114, 101, 97, 109, 97, 115, 107, 0, 0,
    91, 115, 107, 105, 112, 110, 111, 116, 105, 102, 121, 93, 0, 0, 0, 0, 116,
    101, 115, 115, 86, 101, 114, 116, 101, 120, 65, 114, 114, 97, 121, 95, 73,
    66, 79, 0, 0, 0, 0, 0, 84, 101, 115, 116, 105, 110, 103, 32, 102, 97, 116,
    97, 108, 32, 101, 114, 114, 111, 114, 0, 0, 0, 0, 0, 67, 98, 117, 102, 95,
    73, 110, 115, 101, 114, 116, 84, 101, 120, 116, 32, 111, 118, 101, 114, 102,
    108, 111, 119, 101, 100, 10, 0, 0, 0, 0, 0, 87, 79, 82, 76, 68, 95, 55, 54,
    0, 0, 0, 0, 0, 0, 0, 0, 110, 111, 110, 115, 111, 108, 105, 100, 0, 0, 0, 0,
    0, 0, 0, 0, 82, 95, 76, 111, 97, 100, 77, 68, 51, 58, 32, 37, 115, 32, 104,
    97, 115, 32, 119, 114, 111, 110, 103, 32, 118, 101, 114, 115, 105, 111, 110,
    32, 40, 37, 105, 32, 115, 104, 111, 117, 108, 100, 32, 98, 101, 32, 37, 105,
    41, 10, 0, 0, 0, 0, 0, 0, 110, 111, 114, 109, 97, 108, 80, 97, 114, 97, 108,
    108, 97, 120, 77, 97, 112, 0, 0, 0, 0, 0, 0, 0, 114, 95, 102, 108, 97, 114,
    101, 67, 111, 101, 102, 102, 0, 0, 0, 0, 117, 95, 80, 114, 105, 109, 97,
    114, 121, 76, 105, 103, 104, 116, 67, 111, 108, 111, 114, 0, 0, 0, 0, 0, 48,
    46, 50, 53, 0, 0, 0, 0, 77, 111, 100, 101, 32, 49, 48, 58, 32, 50, 48, 52,
    56, 120, 49, 53, 51, 54, 0, 0, 0, 0, 0, 0, 82, 71, 66, 65, 32, 0, 0, 0, 84,
    101, 115, 116, 105, 110, 103, 32, 100, 114, 111, 112, 32, 101, 114, 114,
    111, 114, 0, 0, 0, 0, 0, 0, 87, 79, 82, 76, 68, 95, 55, 53, 0, 0, 0, 0, 0,
    0, 0, 0, 103, 101, 110, 101, 114, 105, 99, 0, 45, 45, 45, 32, 70, 66, 79,
    95, 66, 105, 110, 100, 40, 32, 37, 115, 32, 41, 32, 45, 45, 45, 10, 0, 103,
    108, 66, 117, 102, 102, 101, 114, 83, 117, 98, 68, 97, 116, 97, 65, 82, 66,
    0, 0, 0, 0, 0, 0, 99, 108, 97, 115, 115, 110, 97, 109, 101, 0, 0, 0, 0, 0,
    0, 0, 98, 117, 109, 112, 77, 97, 112, 0, 55, 0, 0, 0, 0, 0, 0, 0, 117, 95,
    80, 114, 105, 109, 97, 114, 121, 76, 105, 103, 104, 116, 79, 114, 105, 103,
    105, 110, 0, 0, 0, 0, 109, 95, 102, 111, 114, 119, 97, 114, 100, 0, 0, 0, 0,
    0, 0, 0, 67, 77, 95, 67, 104, 97, 110, 103, 101, 65, 114, 101, 97, 80, 111,
    114, 116, 97, 108, 83, 116, 97, 116, 101, 58, 32, 98, 97, 100, 32, 97, 114,
    101, 97, 32, 110, 117, 109, 98, 101, 114, 0, 0, 0, 0, 0, 0, 0, 102, 114,
    101, 101, 122, 101, 32, 60, 115, 101, 99, 111, 110, 100, 115, 62, 10, 0, 0,
    0, 0, 0, 0, 0, 83, 121, 115, 95, 76, 111, 97, 100, 71, 97, 109, 101, 68,
    108, 108, 40, 37, 115, 41, 32, 102, 97, 105, 108, 101, 100, 58, 10, 34, 37,
    115, 34, 10, 0, 0, 0, 0, 0, 0, 0, 83, 68, 76, 32, 97, 117, 100, 105, 111,
    32, 100, 101, 118, 105, 99, 101, 32, 115, 104, 117, 116, 32, 100, 111, 119,
    110, 46, 10, 0, 0, 0, 0, 87, 79, 82, 76, 68, 95, 55, 52, 0, 0, 0, 0, 0, 0,
    0, 0, 83, 68, 76, 95, 73, 110, 105, 116, 40, 83, 68, 76, 95, 73, 78, 73, 84,
    95, 74, 79, 89, 83, 84, 73, 67, 75, 41, 32, 112, 97, 115, 115, 101, 100, 46,
    10, 0, 0, 0, 0, 124, 61, 0, 0, 0, 0, 0, 0, 45, 45, 45, 45, 45, 45, 45, 45,
    45, 45, 45, 45, 32, 77, 97, 112, 32, 76, 111, 97, 100, 105, 110, 103, 32,
    45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 10, 0, 0, 110, 111, 114,
    109, 97, 108, 77, 97, 112, 0, 0, 0, 0, 0, 0, 0, 114, 95, 102, 108, 97, 114,
    101, 70, 97, 100, 101, 0, 0, 0, 0, 0, 125, 0, 0, 0, 0, 0, 0, 0, 117, 95, 84,
    111, 110, 101, 77, 105, 110, 65, 118, 103, 77, 97, 120, 76, 105, 110, 101,
    97, 114, 0, 0, 0, 109, 95, 121, 97, 119, 0, 0, 0, 110, 111, 32, 119, 101,
    97, 112, 111, 110, 32, 105, 110, 102, 111, 32, 108, 111, 97, 100, 101, 100,
    10, 0, 0, 115, 118, 95, 109, 97, 120, 98, 97, 114, 114, 105, 101, 114, 0, 0,
    0, 110, 111, 32, 105, 116, 101, 109, 32, 105, 110, 102, 111, 32, 108, 111,
    97, 100, 101, 100, 10, 0, 0, 0, 0, 44, 0, 0, 0, 0, 0, 0, 0, 101, 120, 112,
    101, 99, 116, 101, 100, 32, 105, 110, 116, 101, 103, 101, 114, 44, 32, 102,
    108, 111, 97, 116, 32, 111, 114, 32, 115, 116, 114, 105, 110, 103, 44, 32,
    102, 111, 117, 110, 100, 32, 37, 115, 0, 0, 0, 0, 0, 45, 45, 45, 32, 67,
    111, 109, 109, 111, 110, 32, 73, 110, 105, 116, 105, 97, 108, 105, 122, 97,
    116, 105, 111, 110, 32, 67, 111, 109, 112, 108, 101, 116, 101, 32, 45, 45,
    45, 10, 0, 116, 114, 105, 103, 103, 101, 114, 95, 109, 117, 108, 116, 105,
    112, 108, 101, 32, 109, 111, 100, 101, 108, 32, 61, 32, 34, 37, 115, 34, 10,
    0, 0, 112, 104, 121, 115, 95, 97, 105, 114, 97, 99, 99, 101, 108, 101, 114,
    97, 116, 101, 0, 0, 0, 0, 0, 0, 87, 79, 82, 76, 68, 95, 55, 51, 0, 0, 0, 0,
    0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 94, 51, 87, 97, 114, 110, 105, 110,
    103, 58, 32, 37, 115, 32, 100, 111, 101, 115, 32, 110, 111, 116, 32, 104,
    97, 118, 101, 32, 97, 32, 114, 101, 99, 111, 103, 110, 105, 115, 97, 98,
    108, 101, 32, 109, 97, 103, 105, 99, 32, 110, 117, 109, 98, 101, 114, 32,
    105, 110, 32, 105, 116, 115, 32, 104, 101, 97, 100, 101, 114, 10, 0, 0, 37,
    115, 32, 119, 114, 105, 116, 116, 101, 110, 10, 0, 0, 0, 0, 0, 94, 51, 67,
    97, 110, 39, 116, 32, 117, 115, 101, 32, 107, 101, 121, 115, 32, 111, 114,
    32, 118, 97, 108, 117, 101, 115, 32, 119, 105, 116, 104, 32, 97, 32, 39, 37,
    99, 39, 58, 32, 37, 115, 32, 61, 32, 37, 115, 10, 0, 0, 0, 0, 0, 0, 0, 0,
    100, 105, 102, 102, 117, 115, 101, 77, 97, 112, 0, 0, 0, 0, 0, 0, 52, 48, 0,
    0, 0, 0, 0, 0, 117, 95, 65, 117, 116, 111, 69, 120, 112, 111, 115, 117, 114,
    101, 77, 105, 110, 77, 97, 120, 0, 0, 0, 0, 103, 95, 103, 97, 109, 101, 116,
    121, 112, 101, 0, 0, 0, 0, 0, 0, 48, 46, 48, 50, 50, 0, 0, 0, 50, 48, 0, 0,
    0, 0, 0, 0, 112, 114, 105, 110, 116, 10, 83, 101, 114, 118, 101, 114, 32,
    105, 115, 32, 102, 111, 114, 32, 104, 105, 103, 104, 32, 112, 105, 110, 103,
    115, 32, 111, 110, 108, 121, 10, 0, 0, 0, 0, 45, 45, 45, 45, 45, 32, 83,
    111, 117, 110, 100, 32, 73, 110, 102, 111, 32, 45, 45, 45, 45, 45, 10, 0,
    116, 101, 108, 108, 0, 0, 0, 0, 98, 111, 116, 95, 115, 97, 118, 101, 114,
    111, 117, 116, 105, 110, 103, 99, 97, 99, 104, 101, 0, 0, 0, 0, 99, 111,
    109, 95, 112, 105, 112, 101, 102, 105, 108, 101, 0, 0, 0, 0, 70, 114, 101,
    101, 87, 105, 110, 100, 105, 110, 103, 58, 32, 102, 114, 101, 101, 100, 32,
    97, 32, 102, 114, 101, 101, 100, 32, 119, 105, 110, 100, 105, 110, 103, 0,
    0, 0, 0, 0, 0, 108, 105, 98, 111, 112, 101, 110, 97, 108, 46, 115, 111, 46,
    49, 0, 0, 87, 79, 82, 76, 68, 95, 55, 50, 0, 0, 0, 0, 0, 0, 0, 0, 109, 117,
    115, 105, 99, 0, 0, 0, 84, 111, 116, 97, 108, 32, 114, 101, 115, 105, 100,
    101, 110, 116, 58, 32, 37, 105, 10, 0, 0, 0, 0, 0, 79, 112, 101, 110, 105,
    110, 103, 32, 73, 80, 54, 32, 115, 111, 99, 107, 101, 116, 58, 32, 37, 115,
    58, 37, 105, 10, 0, 0, 0, 0, 0, 0, 115, 101, 114, 118, 101, 114, 0, 0, 87,
    65, 82, 78, 73, 78, 71, 58, 32, 109, 105, 115, 115, 105, 110, 103, 32, 112,
    97, 114, 97, 109, 101, 116, 101, 114, 115, 32, 102, 111, 114, 32, 115, 116,
    97, 103, 101, 32, 105, 110, 32, 115, 104, 97, 100, 101, 114, 32, 39, 37,
    115, 39, 10, 0, 0, 0, 114, 95, 102, 108, 97, 114, 101, 83, 105, 122, 101, 0,
    0, 0, 0, 0, 97, 110, 103, 108, 101, 115, 50, 91, 49, 93, 0, 0, 0, 0, 0, 0,
    117, 95, 73, 110, 118, 84, 101, 120, 82, 101, 115, 0, 0, 0, 0, 0, 109, 95,
    112, 105, 116, 99, 104, 0, 70, 53, 0, 0, 0, 0, 0, 0, 37, 102, 0, 0, 0, 0, 0,
    0, 117, 105, 95, 115, 105, 110, 103, 108, 101, 80, 108, 97, 121, 101, 114,
    65, 99, 116, 105, 118, 101, 0, 0, 0, 87, 79, 82, 76, 68, 95, 55, 49, 0, 0,
    0, 0, 0, 0, 0, 0, 115, 116, 97, 103, 101, 0, 0, 0, 114, 95, 112, 111, 114,
    116, 97, 108, 79, 110, 108, 121, 0, 0, 0, 0, 117, 95, 86, 105, 101, 119, 85,
    112, 0, 0, 0, 0, 0, 0, 0, 0, 99, 103, 95, 97, 117, 116, 111, 115, 119, 105,
    116, 99, 104, 0, 0, 0, 114, 95, 117, 105, 70, 117, 108, 108, 83, 99, 114,
    101, 101, 110, 0, 0, 87, 79, 82, 76, 68, 95, 55, 48, 0, 0, 0, 0, 0, 0, 0, 0,
    99, 115, 0, 0, 0, 0, 0, 0, 98, 108, 101, 110, 100, 0, 0, 0, 69, 82, 82, 79,
    82, 58, 32, 116, 111, 111, 32, 109, 97, 110, 121, 32, 98, 101, 118, 101,
    108, 115, 10, 0, 114, 95, 108, 105, 103, 104, 116, 109, 97, 112, 0, 0, 0, 0,
    0, 0, 117, 95, 86, 105, 101, 119, 76, 101, 102, 116, 0, 0, 0, 0, 0, 0, 55,
    53, 48, 0, 0, 0, 0, 0, 83, 101, 114, 118, 101, 114, 32, 113, 117, 105, 116,
    0, 0, 0, 0, 0, 99, 105, 110, 101, 109, 97, 116, 105, 99, 32, 105, 110, 116,
    114, 111, 46, 82, 111, 81, 0, 0, 0, 0, 0, 87, 79, 82, 76, 68, 95, 54, 57, 0,
    0, 0, 0, 0, 0, 0, 0, 67, 109, 100, 95, 65, 100, 100, 67, 111, 109, 109, 97,
    110, 100, 58, 32, 37, 115, 32, 97, 108, 114, 101, 97, 100, 121, 32, 100,
    101, 102, 105, 110, 101, 100, 10, 0, 0, 0, 0, 0, 43, 109, 111, 118, 101,
    100, 111, 119, 110, 0, 0, 0, 0, 0, 0, 0, 102, 105, 108, 116, 101, 114, 0, 0,
    114, 95, 100, 114, 97, 119, 119, 111, 114, 108, 100, 0, 0, 0, 0, 0, 117, 95,
    86, 105, 101, 119, 70, 111, 114, 119, 97, 114, 100, 0, 0, 0, 99, 108, 95,
    115, 101, 114, 118, 101, 114, 83, 116, 97, 116, 117, 115, 82, 101, 115, 101,
    110, 100, 84, 105, 109, 101, 0, 0, 0, 0, 0, 0, 0, 110, 101, 120, 116, 109,
    97, 112, 0, 87, 79, 82, 76, 68, 95, 54, 56, 0, 0, 0, 0, 0, 0, 0, 0, 49, 0,
    0, 0, 0, 0, 0, 0, 97, 100, 100, 0, 0, 0, 0, 0, 114, 95, 110, 111, 99, 117,
    114, 118, 101, 115, 0, 0, 0, 0, 0, 0, 117, 95, 76, 111, 99, 97, 108, 86,
    105, 101, 119, 79, 114, 105, 103, 105, 110, 0, 0, 0, 0, 0, 0, 0, 114, 95,
    105, 110, 71, 97, 109, 101, 86, 105, 100, 101, 111, 0, 0, 0, 79, 112, 101,
    110, 65, 76, 0, 0, 112, 105, 110, 103, 0, 0, 0, 0, 99, 105, 110, 101, 109,
    97, 116, 105, 99, 32, 105, 100, 108, 111, 103, 111, 46, 82, 111, 81, 10, 0,
    0, 0, 87, 79, 82, 76, 68, 95, 54, 55, 0, 0, 0, 0, 0, 0, 0, 0, 110, 97, 110,
    0, 0, 0, 0, 0, 103, 108, 71, 101, 110, 84, 101, 120, 116, 117, 114, 101,
    115, 0, 0, 0, 87, 65, 82, 78, 73, 78, 71, 58, 32, 109, 105, 115, 115, 105,
    110, 103, 32, 112, 97, 114, 109, 32, 102, 111, 114, 32, 98, 108, 101, 110,
    100, 70, 117, 110, 99, 32, 105, 110, 32, 115, 104, 97, 100, 101, 114, 32,
    39, 37, 115, 39, 10, 0, 0, 0, 0, 0, 114, 95, 115, 97, 118, 101, 70, 111,
    110, 116, 68, 97, 116, 97, 0, 0, 117, 95, 86, 105, 101, 119, 79, 114, 105,
    103, 105, 110, 0, 0, 0, 0, 99, 108, 95, 99, 111, 110, 88, 79, 102, 102, 115,
    101, 116, 0, 0, 0, 73, 110, 118, 97, 108, 105, 100, 32, 112, 114, 111, 103,
    114, 101, 115, 115, 105, 118, 101, 32, 112, 97, 114, 97, 109, 101, 116, 101,
    114, 115, 32, 83, 115, 61, 37, 100, 32, 83, 101, 61, 37, 100, 32, 65, 104,
    61, 37, 100, 32, 65, 108, 61, 37, 100, 0, 0, 114, 95, 99, 101, 110, 116,
    101, 114, 87, 105, 110, 100, 111, 119, 0, 0, 68, 101, 108, 116, 97, 32, 112,
    97, 114, 115, 101, 69, 110, 116, 105, 116, 105, 101, 115, 78, 117, 109, 32,
    116, 111, 111, 32, 111, 108, 100, 46, 10, 0, 0, 0, 0, 0, 0, 0, 0, 116, 101,
    115, 115, 86, 101, 114, 116, 101, 120, 65, 114, 114, 97, 121, 95, 86, 66,
    79, 0, 0, 0, 0, 0, 65, 98, 110, 111, 114, 109, 97, 108, 32, 69, 120, 105,
    116, 0, 0, 0, 99, 111, 110, 100, 117, 109, 112, 0, 77, 97, 112, 32, 119,
    105, 116, 104, 32, 110, 111, 32, 115, 104, 97, 100, 101, 114, 115, 0, 0, 0,
    0, 0, 87, 79, 82, 76, 68, 95, 54, 54, 0, 0, 0, 0, 0, 0, 0, 0, 110, 111, 100,
    114, 111, 112, 0, 0, 82, 95, 76, 111, 97, 100, 77, 68, 82, 58, 32, 37, 115,
    32, 104, 97, 115, 32, 109, 111, 114, 101, 32, 116, 104, 97, 110, 32, 37,
    105, 32, 116, 114, 105, 97, 110, 103, 108, 101, 115, 32, 111, 110, 32, 37,
    115, 32, 40, 37, 105, 41, 46, 10, 0, 0, 0, 98, 108, 101, 110, 100, 102, 117,
    110, 99, 0, 0, 0, 0, 0, 0, 0, 114, 95, 112, 114, 105, 110, 116, 83, 104, 97,
    100, 101, 114, 115, 0, 0, 117, 95, 86, 105, 101, 119, 73, 110, 102, 111, 0,
    0, 0, 0, 0, 0, 99, 108, 95, 97, 108, 108, 111, 119, 68, 111, 119, 110, 108,
    111, 97, 100, 0, 0, 0, 0, 0, 0, 0, 0, 77, 111, 100, 101, 32, 32, 57, 58, 32,
    49, 54, 48, 48, 120, 49, 50, 48, 48, 0, 0, 0, 0, 0, 0, 83, 51, 84, 67, 32,
    0, 0, 0, 84, 104, 101, 32, 108, 97, 115, 116, 32, 116, 105, 109, 101, 32,
    113, 117, 97, 107, 101, 106, 115, 32, 114, 97, 110, 44, 32, 105, 116, 32,
    100, 105, 100, 110, 39, 116, 32, 101, 120, 105, 116, 32, 112, 114, 111, 112,
    101, 114, 108, 121, 46, 32, 84, 104, 105, 115, 32, 109, 97, 121, 32, 98,
    101, 32, 100, 117, 101, 32, 116, 111, 32, 105, 110, 97, 112, 112, 114, 111,
    112, 114, 105, 97, 116, 101, 32, 118, 105, 100, 101, 111, 32, 115, 101, 116,
    116, 105, 110, 103, 115, 46, 32, 87, 111, 117, 108, 100, 32, 121, 111, 117,
    32, 108, 105, 107, 101, 32, 116, 111, 32, 115, 116, 97, 114, 116, 32, 119,
    105, 116, 104, 32, 34, 115, 97, 102, 101, 34, 32, 118, 105, 100, 101, 111,
    32, 115, 101, 116, 116, 105, 110, 103, 115, 63, 0, 0, 0, 0, 0, 0, 0, 0, 87,
    79, 82, 76, 68, 95, 54, 53, 0, 0, 0, 0, 0, 0, 0, 0, 35, 100, 101, 102, 105,
    110, 101, 32, 82, 71, 66, 77, 95, 76, 73, 71, 72, 84, 77, 65, 80, 10, 0, 0,
    70, 66, 79, 58, 32, 97, 116, 116, 101, 109, 112, 116, 101, 100, 32, 116,
    111, 32, 97, 116, 116, 97, 99, 104, 32, 97, 32, 116, 101, 120, 116, 117,
    114, 101, 32, 105, 109, 97, 103, 101, 32, 119, 105, 116, 104, 32, 110, 111,
    32, 70, 66, 79, 32, 98, 111, 117, 110, 100, 33, 10, 0, 0, 0, 0, 103, 108,
    66, 117, 102, 102, 101, 114, 68, 97, 116, 97, 65, 82, 66, 0, 98, 97, 100,
    32, 110, 97, 109, 101, 32, 105, 110, 32, 103, 101, 116, 80, 114, 111, 99,
    65, 100, 100, 114, 101, 115, 115, 58, 32, 37, 115, 32, 124, 32, 37, 115, 10,
    0, 0, 0, 0, 82, 95, 80, 97, 114, 115, 101, 83, 112, 97, 119, 110, 86, 97,
    114, 115, 58, 32, 77, 65, 88, 95, 83, 80, 65, 87, 78, 95, 86, 65, 82, 95,
    67, 72, 65, 82, 83, 0, 0, 0, 87, 65, 82, 78, 73, 78, 71, 58, 32, 117, 110,
    107, 110, 111, 119, 110, 32, 100, 101, 112, 116, 104, 102, 117, 110, 99, 32,
    39, 37, 115, 39, 32, 105, 110, 32, 115, 104, 97, 100, 101, 114, 32, 39, 37,
    115, 39, 10, 0, 114, 95, 100, 101, 98, 117, 103, 83, 111, 114, 116, 0, 0, 0,
    0, 0, 117, 95, 77, 97, 116, 101, 114, 105, 97, 108, 73, 110, 102, 111, 0, 0,
    99, 108, 95, 115, 104, 111, 119, 109, 111, 117, 115, 101, 114, 97, 116, 101,
    0, 0, 0, 0, 0, 0, 0, 0, 112, 114, 111, 116, 111, 99, 111, 108, 0, 0, 0, 0,
    0, 0, 0, 0, 76, 111, 97, 100, 105, 110, 103, 32, 68, 76, 76, 32, 102, 105,
    108, 101, 58, 32, 37, 115, 10, 0, 0, 0, 67, 108, 111, 115, 105, 110, 103,
    32, 83, 68, 76, 32, 97, 117, 100, 105, 111, 32, 100, 101, 118, 105, 99, 101,
    46, 46, 46, 10, 0, 0, 0, 0, 87, 79, 82, 76, 68, 95, 54, 52, 0, 0, 0, 0, 0,
    0, 0, 0, 83, 68, 76, 95, 73, 110, 105, 116, 40, 83, 68, 76, 95, 73, 78, 73,
    84, 95, 74, 79, 89, 83, 84, 73, 67, 75, 41, 32, 102, 97, 105, 108, 101, 100,
    58, 32, 37, 115, 10, 0, 38, 61, 0, 0, 0, 0, 0, 0, 103, 108, 67, 111, 112,
    121, 84, 101, 120, 83, 117, 98, 73, 109, 97, 103, 101, 50, 68, 0, 0, 0, 0,
    0, 66, 111, 116, 76, 111, 97, 100, 77, 97, 112, 0, 0, 0, 0, 0, 0, 101, 113,
    117, 97, 108, 0, 0, 0, 114, 95, 100, 101, 98, 117, 103, 108, 105, 103, 104,
    116, 0, 0, 0, 0, 105, 110, 118, 97, 108, 105, 100, 32, 110, 97, 109, 101,
    32, 37, 115, 0, 117, 95, 86, 101, 114, 116, 101, 120, 76, 101, 114, 112, 0,
    0, 0, 0, 119, 101, 97, 112, 111, 110, 32, 37, 115, 32, 117, 115, 101, 115,
    32, 117, 110, 100, 101, 102, 105, 110, 101, 100, 32, 112, 114, 111, 106,
    101, 99, 116, 105, 108, 101, 32, 105, 110, 32, 37, 115, 10, 0, 0, 0, 0, 0,
    0, 99, 108, 95, 109, 111, 117, 115, 101, 65, 99, 99, 101, 108, 79, 102, 102,
    115, 101, 116, 0, 0, 0, 0, 0, 49, 56, 0, 0, 0, 0, 0, 0, 117, 110, 107, 110,
    111, 119, 110, 32, 100, 101, 102, 105, 110, 105, 116, 105, 111, 110, 32, 37,
    115, 0, 0, 0, 101, 109, 112, 116, 121, 32, 115, 116, 114, 105, 110, 103, 0,
    0, 0, 0, 99, 104, 97, 114, 97, 99, 116, 101, 114, 105, 115, 116, 105, 99,
    32, 37, 100, 32, 97, 108, 114, 101, 97, 100, 121, 32, 105, 110, 105, 116,
    105, 97, 108, 105, 122, 101, 100, 0, 0, 0, 37, 115, 10, 0, 0, 0, 0, 0, 65,
    65, 83, 95, 78, 101, 120, 116, 65, 114, 101, 97, 82, 101, 97, 99, 104, 97,
    98, 105, 108, 105, 116, 121, 58, 32, 114, 101, 97, 99, 104, 110, 117, 109,
    32, 60, 32, 115, 101, 116, 116, 105, 110, 103, 115, 45, 62, 102, 105, 114,
    115, 116, 114, 101, 97, 99, 104, 97, 98, 108, 101, 97, 114, 97, 0, 0, 0, 0,
    0, 0, 0, 0, 99, 111, 109, 95, 112, 114, 111, 116, 111, 99, 111, 108, 0, 0,
    0, 0, 116, 114, 105, 103, 103, 101, 114, 95, 109, 117, 108, 116, 105, 112,
    108, 101, 0, 0, 0, 0, 0, 0, 0, 0, 49, 48, 0, 0, 0, 0, 0, 0, 87, 79, 82, 76,
    68, 95, 54, 51, 0, 0, 0, 0, 0, 0, 0, 0, 65, 65, 83, 32, 115, 104, 117, 116,
    100, 111, 119, 110, 46, 10, 0, 0, 13, 37, 54, 100, 0, 0, 0, 0, 94, 51, 87,
    97, 114, 110, 105, 110, 103, 58, 32, 37, 115, 32, 104, 97, 115, 32, 98, 97,
    100, 32, 104, 101, 97, 100, 101, 114, 10, 0, 0, 0, 37, 100, 10, 0, 0, 0, 0,
    0, 73, 110, 102, 111, 95, 83, 101, 116, 86, 97, 108, 117, 101, 70, 111, 114,
    75, 101, 121, 58, 32, 111, 118, 101, 114, 115, 105, 122, 101, 32, 105, 110,
    102, 111, 115, 116, 114, 105, 110, 103, 0, 0, 0, 0, 0, 0, 0, 0, 103, 108,
    67, 111, 112, 121, 84, 101, 120, 73, 109, 97, 103, 101, 50, 68, 0, 0, 0, 0,
    0, 0, 0, 0, 108, 101, 113, 117, 97, 108, 0, 0, 114, 95, 115, 104, 111, 119,
    73, 109, 97, 103, 101, 115, 0, 0, 0, 0, 117, 95, 84, 105, 109, 101, 0, 0,
    68, 97, 114, 107, 80, 108, 97, 99, 101, 115, 0, 0, 0, 0, 0, 0, 99, 108, 95,
    109, 111, 117, 115, 101, 65, 99, 99, 101, 108, 83, 116, 121, 108, 101, 0, 0,
    0, 0, 0, 0, 102, 114, 97, 103, 108, 105, 109, 105, 116, 0, 0, 0, 0, 0, 0, 0,
    112, 114, 105, 110, 116, 10, 78, 111, 32, 111, 114, 32, 98, 97, 100, 32, 99,
    104, 97, 108, 108, 101, 110, 103, 101, 32, 102, 111, 114, 32, 121, 111, 117,
    114, 32, 97, 100, 100, 114, 101, 115, 115, 46, 10, 0, 0, 0, 0, 115, 97, 121,
    0, 0, 0, 0, 0, 98, 111, 116, 95, 97, 97, 115, 111, 112, 116, 105, 109, 105,
    122, 101, 0, 81, 117, 97, 107, 101, 51, 65, 114, 101, 110, 97, 0, 0, 0, 0,
    0, 115, 95, 97, 108, 68, 114, 105, 118, 101, 114, 0, 0, 0, 0, 0, 0, 87, 79,
    82, 76, 68, 95, 54, 50, 0, 0, 0, 0, 0, 0, 0, 0, 112, 108, 97, 121, 0, 0, 0,
    0, 37, 54, 105, 91, 37, 115, 93, 32, 58, 32, 37, 115, 91, 37, 115, 93, 10,
    0, 0, 0, 0, 0, 0, 0, 79, 112, 101, 110, 105, 110, 103, 32, 73, 80, 54, 32,
    115, 111, 99, 107, 101, 116, 58, 32, 91, 37, 115, 93, 58, 37, 105, 10, 0, 0,
    0, 0, 103, 108, 86, 101, 114, 116, 101, 120, 65, 116, 116, 114, 105, 98, 52,
    102, 0, 0, 0, 0, 0, 0, 0, 0, 99, 108, 105, 101, 110, 116, 0, 0, 87, 65, 82,
    78, 73, 78, 71, 58, 32, 109, 105, 115, 115, 105, 110, 103, 32, 112, 97, 114,
    97, 109, 101, 116, 101, 114, 32, 102, 111, 114, 32, 39, 100, 101, 112, 116,
    104, 102, 117, 110, 99, 39, 32, 107, 101, 121, 119, 111, 114, 100, 32, 105,
    110, 32, 115, 104, 97, 100, 101, 114, 32, 39, 37, 115, 39, 10, 0, 0, 0, 0,
    0, 0, 78, 69, 84, 95, 67, 111, 109, 112, 97, 114, 101, 66, 97, 115, 101, 65,
    100, 114, 58, 32, 98, 97, 100, 32, 97, 100, 100, 114, 101, 115, 115, 32,
    116, 121, 112, 101, 10, 0, 0, 0, 114, 95, 109, 101, 114, 103, 101, 76, 101,
    97, 102, 83, 117, 114, 102, 97, 99, 101, 115, 0, 0, 0, 0, 0, 101, 118, 101,
    110, 116, 0, 0, 0, 117, 95, 77, 111, 100, 101, 108, 86, 105, 101, 119, 80,
    114, 111, 106, 101, 99, 116, 105, 111, 110, 77, 97, 116, 114, 105, 120, 0,
    0, 0, 0, 0, 99, 108, 95, 102, 114, 101, 101, 108, 111, 111, 107, 0, 0, 0, 0,
    0, 70, 83, 95, 83, 86, 95, 82, 101, 110, 97, 109, 101, 58, 32, 37, 115, 32,
    45, 45, 62, 32, 37, 115, 10, 0, 0, 0, 0, 0, 0, 0, 0, 70, 52, 0, 0, 0, 0, 0,
    0, 37, 105, 0, 0, 0, 0, 0, 0, 87, 79, 82, 76, 68, 95, 54, 49, 0, 0, 0, 0, 0,
    0, 0, 0, 99, 111, 109, 95, 103, 97, 109, 101, 110, 97, 109, 101, 0, 0, 0, 0,
    67, 76, 95, 74, 111, 121, 115, 116, 105, 99, 107, 69, 118, 101, 110, 116,
    58, 32, 98, 97, 100, 32, 97, 120, 105, 115, 32, 37, 105, 0, 0, 0, 103, 108,
    83, 116, 101, 110, 99, 105, 108, 79, 112, 83, 101, 112, 97, 114, 97, 116,
    101, 0, 0, 0, 0, 0, 100, 101, 112, 116, 104, 102, 117, 110, 99, 0, 0, 0, 0,
    0, 0, 0, 114, 95, 109, 101, 114, 103, 101, 77, 117, 108, 116, 105, 100, 114,
    97, 119, 115, 0, 0, 0, 0, 0, 0, 0, 117, 95, 77, 111, 100, 101, 108, 77, 97,
    116, 114, 105, 120, 0, 0, 0, 99, 108, 95, 109, 111, 117, 115, 101, 65, 99,
    99, 101, 108, 0, 0, 0, 37, 115, 0, 0, 0, 0, 0, 0, 118, 101, 114, 115, 105,
    111, 110, 0, 87, 79, 82, 76, 68, 95, 54, 48, 0, 0, 0, 0, 0, 0, 0, 0, 116,
    114, 70, 77, 86, 58, 58, 115, 116, 111, 112, 40, 41, 44, 32, 99, 108, 111,
    115, 105, 110, 103, 32, 37, 115, 10, 0, 0, 0, 0, 0, 0, 103, 108, 83, 116,
    101, 110, 99, 105, 108, 70, 117, 110, 99, 83, 101, 112, 97, 114, 97, 116,
    101, 0, 0, 0, 87, 65, 82, 78, 73, 78, 71, 58, 32, 109, 105, 115, 115, 105,
    110, 103, 32, 112, 97, 114, 97, 109, 101, 116, 101, 114, 32, 102, 111, 114,
    32, 39, 97, 108, 112, 104, 97, 70, 117, 110, 99, 39, 32, 107, 101, 121, 119,
    111, 114, 100, 32, 105, 110, 32, 115, 104, 97, 100, 101, 114, 32, 39, 37,
    115, 39, 10, 0, 0, 0, 0, 0, 0, 114, 95, 97, 110, 97, 103, 108, 121, 112,
    104, 77, 111, 100, 101, 0, 0, 117, 95, 70, 111, 103, 67, 111, 108, 111, 114,
    77, 97, 115, 107, 0, 0, 53, 0, 0, 0, 0, 0, 0, 0, 83, 101, 114, 118, 101,
    114, 32, 102, 97, 116, 97, 108, 32, 99, 114, 97, 115, 104, 101, 100, 58, 32,
    37, 115, 0, 0, 0, 0, 0, 0, 0, 0, 37, 115, 32, 37, 115, 32, 37, 115, 0, 0, 0,
    0, 0, 0, 0, 0, 87, 79, 82, 76, 68, 95, 53, 57, 0, 0, 0, 0, 0, 0, 0, 0, 10,
    13, 59, 0, 0, 0, 0, 0, 103, 108, 66, 108, 101, 110, 100, 67, 111, 108, 111,
    114, 0, 0, 0, 0, 97, 108, 112, 104, 97, 70, 117, 110, 99, 0, 0, 0, 0, 0, 0,
    0, 45, 109, 111, 118, 101, 117, 112, 0, 114, 95, 100, 105, 114, 101, 99,
    116, 101, 100, 83, 99, 97, 108, 101, 0, 117, 95, 70, 111, 103, 69, 121, 101,
    84, 0, 0, 0, 0, 0, 0, 0, 115, 101, 110, 115, 105, 116, 105, 118, 105, 116,
    121, 0, 0, 0, 0, 0, 87, 65, 82, 78, 73, 78, 71, 58, 32, 67, 77, 95, 83, 101,
    116, 66, 111, 114, 100, 101, 114, 73, 110, 119, 97, 114, 100, 58, 32, 109,
    105, 120, 101, 100, 32, 112, 108, 97, 110, 101, 32, 115, 105, 100, 101, 115,
    10, 0, 99, 111, 109, 95, 105, 110, 116, 114, 111, 112, 108, 97, 121, 101,
    100, 0, 87, 79, 82, 76, 68, 95, 53, 56, 0, 0, 0, 0, 0, 0, 0, 0, 65, 82, 66,
    0, 0, 0, 0, 0, 99, 109, 95, 112, 108, 97, 121, 101, 114, 67, 117, 114, 118,
    101, 67, 108, 105, 112, 0, 0, 0, 0, 0, 0, 103, 108, 66, 108, 101, 110, 100,
    70, 117, 110, 99, 83, 101, 112, 97, 114, 97, 116, 101, 0, 0, 0, 0, 0, 87,
    65, 82, 78, 73, 78, 71, 58, 32, 109, 105, 115, 115, 105, 110, 103, 32, 112,
    97, 114, 97, 109, 101, 116, 101, 114, 32, 102, 111, 114, 32, 39, 118, 105,
    100, 101, 111, 77, 109, 97, 112, 39, 32, 107, 101, 121, 119, 111, 114, 100,
    32, 105, 110, 32, 115, 104, 97, 100, 101, 114, 32, 39, 37, 115, 39, 10, 0,
    0, 0, 0, 0, 0, 48, 46, 54, 0, 0, 0, 0, 0, 117, 95, 70, 111, 103, 68, 101,
    112, 116, 104, 0, 0, 0, 0, 0, 0, 115, 104, 111, 119, 112, 97, 99, 107, 101,
    116, 115, 0, 0, 0, 0, 0, 99, 108, 95, 114, 117, 110, 0, 0, 115, 95, 98, 97,
    99, 107, 101, 110, 100, 0, 0, 0, 0, 0, 0, 0, 115, 118, 95, 109, 97, 120, 99,
    108, 105, 101, 110, 116, 115, 0, 0, 0, 99, 111, 109, 95, 98, 117, 115, 121,
    87, 97, 105, 116, 0, 0, 0, 0, 116, 105, 109, 101, 103, 114, 97, 112, 104, 0,
    0, 0, 0, 0, 0, 0, 37, 108, 100, 37, 99, 0, 0, 0, 87, 79, 82, 76, 68, 95, 53,
    55, 0, 0, 0, 0, 0, 0, 0, 0, 103, 108, 71, 101, 116, 66, 111, 111, 108, 101,
    97, 110, 118, 0, 0, 0, 103, 108, 82, 101, 110, 100, 101, 114, 98, 117, 102,
    102, 101, 114, 83, 116, 111, 114, 97, 103, 101, 0, 0, 0, 118, 105, 100, 101,
    111, 77, 97, 112, 0, 0, 0, 0, 0, 0, 0, 0, 114, 95, 97, 109, 98, 105, 101,
    110, 116, 83, 99, 97, 108, 101, 0, 0, 117, 95, 70, 111, 103, 68, 105, 115,
    116, 97, 110, 99, 101, 0, 0, 0, 85, 110, 115, 117, 112, 112, 111, 114, 116,
    101, 100, 32, 74, 80, 69, 71, 32, 100, 97, 116, 97, 32, 112, 114, 101, 99,
    105, 115, 105, 111, 110, 32, 37, 100, 0, 0, 0, 0, 0, 0, 99, 108, 95, 112,
    97, 99, 107, 101, 116, 100, 117, 112, 0, 0, 0, 0, 114, 95, 97, 108, 108,
    111, 119, 82, 101, 115, 105, 122, 101, 0, 0, 0, 68, 101, 108, 116, 97, 32,
    102, 114, 97, 109, 101, 32, 116, 111, 111, 32, 111, 108, 100, 46, 10, 0, 0,
    0, 45, 45, 45, 45, 45, 45, 45, 32, 82, 95, 73, 110, 105, 116, 86, 66, 79,
    115, 32, 45, 45, 45, 45, 45, 45, 45, 10, 0, 0, 0, 0, 0, 99, 111, 109, 95,
    97, 98, 110, 111, 114, 109, 97, 108, 69, 120, 105, 116, 0, 0, 0, 0, 0, 0, 0,
    0, 99, 108, 101, 97, 114, 0, 0, 0, 87, 79, 82, 76, 68, 95, 53, 54, 0, 0, 0,
    0, 0, 0, 0, 0, 109, 111, 110, 115, 116, 101, 114, 99, 108, 105, 112, 0, 0,
    0, 0, 0, 97, 32, 115, 117, 114, 102, 97, 99, 101, 0, 0, 0, 0, 0, 0, 0, 103,
    108, 67, 111, 108, 111, 114, 77, 97, 115, 107, 0, 0, 0, 0, 0, 87, 65, 82,
    78, 73, 78, 71, 58, 32, 109, 105, 115, 115, 105, 110, 103, 32, 112, 97, 114,
    97, 109, 101, 116, 101, 114, 32, 102, 111, 114, 32, 39, 97, 110, 105, 109,
    77, 109, 97, 112, 39, 32, 107, 101, 121, 119, 111, 114, 100, 32, 105, 110,
    32, 115, 104, 97, 100, 101, 114, 32, 39, 37, 115, 39, 10, 0, 0, 0, 0, 0, 0,
    0, 51, 50, 0, 0, 0, 0, 0, 0, 117, 95, 80, 111, 114, 116, 97, 108, 82, 97,
    110, 103, 101, 0, 0, 0, 51, 48, 0, 0, 0, 0, 0, 0, 77, 111, 100, 101, 32, 32,
    56, 58, 32, 49, 50, 56, 48, 120, 49, 48, 50, 52, 0, 0, 0, 0, 0, 0, 66, 80,
    84, 67, 32, 0, 0, 0, 99, 111, 109, 95, 109, 97, 120, 102, 112, 115, 77, 105,
    110, 105, 109, 105, 122, 101, 100, 0, 0, 0, 0, 0, 87, 79, 82, 76, 68, 95,
    53, 53, 0, 0, 0, 0, 0, 0, 0, 0, 35, 100, 101, 102, 105, 110, 101, 32, 85,
    83, 69, 95, 76, 73, 71, 72, 84, 77, 65, 80, 10, 0, 0, 0, 103, 108, 73, 115,
    66, 117, 102, 102, 101, 114, 65, 82, 66, 0, 0, 0, 103, 108, 86, 101, 114,
    116, 101, 120, 65, 116, 116, 114, 105, 98, 51, 102, 0, 0, 0, 0, 0, 0, 0, 0,
    82, 95, 80, 97, 114, 115, 101, 83, 112, 97, 119, 110, 86, 97, 114, 115, 58,
    32, 77, 65, 88, 95, 83, 80, 65, 87, 78, 95, 86, 65, 82, 83, 0, 0, 0, 0, 0,
    0, 0, 0, 97, 110, 105, 109, 77, 97, 112, 0, 114, 95, 114, 97, 105, 108, 83,
    101, 103, 109, 101, 110, 116, 76, 101, 110, 103, 116, 104, 0, 0, 0, 0, 0,
    117, 95, 68, 105, 114, 101, 99, 116, 101, 100, 76, 105, 103, 104, 116, 0,
    99, 108, 95, 109, 97, 120, 112, 97, 99, 107, 101, 116, 115, 0, 0, 0, 65, 76,
    73, 71, 78, 95, 84, 89, 80, 69, 32, 105, 115, 32, 119, 114, 111, 110, 103,
    44, 32, 112, 108, 101, 97, 115, 101, 32, 102, 105, 120, 0, 99, 111, 109, 95,
    109, 105, 110, 105, 109, 105, 122, 101, 100, 0, 0, 0, 83, 68, 76, 32, 97,
    117, 100, 105, 111, 32, 105, 110, 105, 116, 105, 97, 108, 105, 122, 101,
    100, 46, 10, 0, 87, 79, 82, 76, 68, 95, 53, 52, 0, 0, 0, 0, 0, 0, 0, 0, 67,
    97, 108, 108, 105, 110, 103, 32, 83, 68, 76, 95, 73, 110, 105, 116, 40, 83,
    68, 76, 95, 73, 78, 73, 84, 95, 74, 79, 89, 83, 84, 73, 67, 75, 41, 46, 46,
    46, 10, 0, 45, 45, 0, 0, 0, 0, 0, 0, 103, 108, 83, 99, 105, 115, 115, 111,
    114, 0, 0, 0, 0, 0, 0, 0, 66, 111, 116, 83, 116, 97, 114, 116, 70, 114, 97,
    109, 101, 0, 0, 0, 87, 65, 82, 78, 73, 78, 71, 58, 32, 109, 105, 115, 115,
    105, 110, 103, 32, 112, 97, 114, 97, 109, 101, 116, 101, 114, 32, 102, 111,
    114, 32, 39, 99, 108, 97, 109, 112, 109, 97, 112, 39, 32, 107, 101, 121,
    119, 111, 114, 100, 32, 105, 110, 32, 115, 104, 97, 100, 101, 114, 32, 39,
    37, 115, 39, 10, 0, 0, 0, 0, 0, 0, 0, 54, 0, 0, 0, 0, 0, 0, 0, 115, 119,
    105, 116, 99, 104, 0, 0, 117, 95, 65, 109, 98, 105, 101, 110, 116, 76, 105,
    103, 104, 116, 0, 0, 119, 101, 97, 112, 111, 110, 32, 37, 115, 32, 104, 97,
    115, 32, 110, 111, 32, 112, 114, 111, 106, 101, 99, 116, 105, 108, 101, 32,
    105, 110, 32, 37, 115, 10, 0, 0, 0, 0, 0, 0, 49, 46, 53, 0, 0, 0, 0, 0, 115,
    118, 95, 115, 116, 101, 112, 0, 109, 111, 114, 101, 32, 116, 104, 97, 110,
    32, 37, 100, 32, 105, 116, 101, 109, 32, 105, 110, 102, 111, 32, 100, 101,
    102, 105, 110, 101, 100, 0, 0, 40, 0, 0, 0, 0, 0, 0, 0, 99, 104, 97, 114,
    97, 99, 116, 101, 114, 105, 115, 116, 105, 99, 32, 105, 110, 100, 101, 120,
    32, 111, 117, 116, 32, 111, 102, 32, 114, 97, 110, 103, 101, 32, 91, 48, 44,
    32, 37, 100, 93, 0, 0, 0, 0, 0, 0, 0, 65, 65, 83, 95, 78, 101, 120, 116, 65,
    114, 101, 97, 82, 101, 97, 99, 104, 97, 98, 105, 108, 105, 116, 121, 58, 32,
    97, 114, 101, 97, 110, 117, 109, 32, 37, 100, 32, 111, 117, 116, 32, 111,
    102, 32, 114, 97, 110, 103, 101, 10, 0, 0, 0, 0, 0, 0, 99, 111, 109, 95,
    109, 97, 120, 102, 112, 115, 85, 110, 102, 111, 99, 117, 115, 101, 100, 0,
    0, 0, 0, 0, 110, 101, 120, 116, 109, 97, 112, 0, 98, 111, 116, 95, 110, 111,
    116, 116, 101, 97, 109, 0, 0, 0, 0, 0, 112, 104, 121, 115, 95, 119, 97, 108,
    107, 97, 99, 99, 101, 108, 101, 114, 97, 116, 101, 0, 0, 0, 0, 0, 87, 79,
    82, 76, 68, 95, 53, 51, 0, 0, 0, 0, 0, 0, 0, 0, 49, 48, 50, 52, 0, 0, 0, 0,
    13, 37, 54, 100, 32, 114, 101, 109, 111, 118, 101, 100, 32, 112, 111, 114,
    116, 97, 108, 32, 97, 114, 101, 97, 115, 0, 0, 0, 0, 0, 0, 0, 46, 46, 46,
    119, 104, 105, 99, 104, 32, 104, 97, 115, 32, 118, 109, 77, 97, 103, 105,
    99, 32, 86, 77, 95, 77, 65, 71, 73, 67, 95, 86, 69, 82, 50, 10, 0, 0, 0, 0,
    0, 35, 32, 37, 115, 0, 0, 0, 0, 92, 59, 34, 0, 0, 0, 0, 0, 103, 108, 67,
    108, 101, 97, 114, 67, 111, 108, 111, 114, 0, 0, 0, 0, 99, 108, 97, 109,
    112, 109, 97, 112, 0, 0, 0, 0, 0, 0, 0, 0, 114, 95, 114, 97, 105, 108, 67,
    111, 114, 101, 87, 105, 100, 116, 104, 0, 117, 95, 76, 105, 103, 104, 116,
    82, 97, 100, 105, 117, 115, 0, 0, 0, 104, 101, 97, 114, 116, 98, 101, 97,
    116, 32, 37, 115, 10, 0, 0, 0, 99, 108, 95, 97, 110, 103, 108, 101, 115,
    112, 101, 101, 100, 107, 101, 121, 0, 0, 0, 0, 0, 0, 0, 0, 100, 109, 102,
    108, 97, 103, 115, 0, 105, 112, 0, 0, 0, 0, 0, 0, 69, 115, 116, 105, 109,
    97, 116, 101, 100, 32, 100, 105, 115, 112, 108, 97, 121, 32, 97, 115, 112,
    101, 99, 116, 58, 32, 37, 46, 51, 102, 10, 0, 107, 105, 108, 108, 115, 101,
    114, 118, 101, 114, 0, 0, 0, 0, 0, 0, 98, 111, 116, 95, 102, 111, 114, 99,
    101, 119, 114, 105, 116, 101, 0, 0, 99, 111, 109, 95, 117, 110, 102, 111,
    99, 117, 115, 101, 100, 0, 0, 0, 99, 108, 117, 115, 116, 101, 114, 58, 37,
    105, 32, 32, 97, 114, 101, 97, 58, 37, 105, 10, 0, 0, 0, 0, 53, 49, 50, 0,
    0, 0, 0, 0, 87, 79, 82, 76, 68, 95, 53, 50, 0, 0, 0, 0, 0, 0, 0, 0, 83, 111,
    117, 110, 100, 32, 100, 105, 115, 97, 98, 108, 101, 100, 46, 10, 0, 0, 0, 0,
    0, 0, 0, 0, 114, 101, 115, 105, 100, 101, 110, 116, 32, 0, 0, 0, 0, 0, 0, 0,
    87, 65, 82, 78, 73, 78, 71, 58, 32, 78, 69, 84, 95, 73, 80, 83, 111, 99,
    107, 101, 116, 58, 32, 98, 105, 110, 100, 58, 32, 37, 115, 10, 0, 0, 0, 0,
    0, 0, 0, 0, 103, 108, 86, 105, 101, 119, 112, 111, 114, 116, 0, 0, 0, 0, 0,
    0, 108, 111, 99, 97, 108, 104, 111, 115, 116, 0, 0, 0, 0, 0, 0, 0, 87, 65,
    82, 78, 73, 78, 71, 58, 32, 82, 95, 70, 105, 110, 100, 73, 109, 97, 103,
    101, 70, 105, 108, 101, 32, 99, 111, 117, 108, 100, 32, 110, 111, 116, 32,
    102, 105, 110, 100, 32, 39, 37, 115, 39, 32, 105, 110, 32, 115, 104, 97,
    100, 101, 114, 32, 39, 37, 115, 39, 10, 0, 0, 0, 0, 49, 54, 0, 0, 0, 0, 0,
    0, 82, 95, 67, 114, 101, 97, 116, 101, 86, 66, 79, 58, 32, 34, 37, 115, 34,
    32, 105, 115, 32, 116, 111, 111, 32, 108, 111, 110, 103, 0, 0, 0, 97, 112,
    111, 115, 46, 116, 114, 66, 97, 115, 101, 91, 48, 93, 0, 0, 117, 95, 77,
    111, 100, 101, 108, 76, 105, 103, 104, 116, 68, 105, 114, 0, 99, 108, 95,
    112, 105, 116, 99, 104, 115, 112, 101, 101, 100, 0, 0, 0, 82, 66, 95, 67,
    104, 101, 99, 107, 79, 118, 101, 114, 102, 108, 111, 119, 58, 32, 105, 110,
    100, 105, 99, 101, 115, 32, 62, 32, 77, 65, 88, 32, 40, 37, 100, 32, 62, 32,
    37, 100, 41, 0, 0, 0, 0, 0, 0, 0, 70, 83, 95, 83, 86, 95, 70, 79, 112, 101,
    110, 70, 105, 108, 101, 82, 101, 97, 100, 32, 40, 102, 115, 95, 98, 97, 115,
    101, 112, 97, 116, 104, 41, 58, 32, 37, 115, 10, 0, 0, 83, 72, 65, 68, 69,
    82, 95, 77, 65, 88, 95, 73, 78, 68, 69, 88, 69, 83, 32, 104, 105, 116, 32,
    105, 110, 32, 68, 114, 97, 119, 83, 107, 121, 83, 105, 100,
  ],
  "i8",
  ALLOC_NONE,
  Runtime.GLOBAL_BASE + 153604
);
/* memory initializer */ allocate(
  [
    101, 86, 66, 79, 40, 41, 0, 0, 0, 0, 0, 0, 70, 51, 0, 0, 0, 0, 0, 0, 82,
    101, 115, 116, 114, 105, 99, 116, 101, 100, 32, 115, 111, 117, 114, 99, 101,
    32, 116, 114, 105, 101, 100, 32, 116, 111, 32, 109, 111, 100, 105, 102, 121,
    32, 34, 37, 115, 34, 0, 0, 99, 111, 109, 95, 97, 110, 115, 105, 67, 111,
    108, 111, 114, 0, 0, 0, 87, 79, 82, 76, 68, 95, 53, 49, 0, 0, 0, 0, 0, 0, 0,
    0, 103, 108, 83, 116, 101, 110, 99, 105, 108, 79, 112, 0, 0, 0, 0, 0, 87,
    65, 82, 78, 73, 78, 71, 58, 32, 115, 104, 97, 100, 101, 114, 32, 39, 37,
    115, 39, 32, 119, 97, 110, 116, 115, 32, 97, 32, 100, 101, 108, 117, 120,
    101, 32, 109, 97, 112, 32, 105, 110, 32, 97, 32, 109, 97, 112, 32, 99, 111,
    109, 112, 105, 108, 101, 100, 32, 119, 105, 116, 104, 111, 117, 116, 32,
    116, 104, 101, 109, 10, 0, 114, 95, 114, 97, 105, 108, 87, 105, 100, 116,
    104, 0, 0, 0, 0, 0, 117, 95, 76, 105, 103, 104, 116, 79, 114, 105, 103, 105,
    110, 0, 0, 0, 115, 118, 99, 95, 110, 111, 112, 0, 49, 52, 48, 0, 0, 0, 0, 0,
    99, 111, 109, 95, 98, 117, 105, 108, 100, 83, 99, 114, 105, 112, 116, 0, 87,
    79, 82, 76, 68, 95, 53, 48, 0, 0, 0, 0, 0, 0, 0, 0, 98, 99, 115, 50, 0, 0,
    0, 0, 103, 108, 83, 116, 101, 110, 99, 105, 108, 70, 117, 110, 99, 0, 0, 0,
    36, 100, 101, 108, 117, 120, 101, 109, 97, 112, 0, 0, 0, 0, 0, 0, 114, 95,
    102, 97, 99, 101, 80, 108, 97, 110, 101, 67, 117, 108, 108, 0, 117, 95, 76,
    105, 103, 104, 116, 82, 105, 103, 104, 116, 0, 0, 0, 0, 99, 108, 95, 121,
    97, 119, 115, 112, 101, 101, 100, 0, 0, 0, 0, 0, 67, 108, 105, 101, 110,
    116, 32, 102, 97, 116, 97, 108, 32, 99, 114, 97, 115, 104, 101, 100, 58, 32,
    37, 115, 0, 0, 0, 0, 0, 0, 0, 0, 99, 108, 95, 114, 117, 110, 110, 105, 110,
    103, 0, 0, 0, 0, 0, 0, 87, 79, 82, 76, 68, 95, 52, 57, 0, 0, 0, 0, 0, 0, 0,
    0, 103, 108, 86, 101, 114, 116, 101, 120, 65, 116, 116, 114, 105, 98, 50,
    102, 0, 0, 0, 0, 0, 0, 0, 0, 36, 108, 105, 103, 104, 116, 109, 97, 112, 0,
    0, 0, 0, 0, 0, 0, 114, 95, 103, 97, 109, 109, 97, 0, 117, 95, 76, 105, 103,
    104, 116, 85, 112, 0, 0, 0, 0, 0, 0, 0, 87, 65, 82, 78, 73, 78, 71, 58, 32,
    82, 95, 82, 101, 109, 97, 112, 83, 104, 97, 100, 101, 114, 58, 32, 110, 101,
    119, 32, 115, 104, 97, 100, 101, 114, 32, 37, 115, 32, 110, 111, 116, 32,
    102, 111, 117, 110, 100, 10, 0, 0, 0, 0, 0, 0, 0, 0, 43, 109, 111, 118, 101,
    117, 112, 0, 114, 99, 111, 110, 65, 100, 100, 114, 101, 115, 115, 0, 0, 0,
    0, 0, 65, 117, 116, 111, 115, 112, 114, 105, 116, 101, 50, 32, 115, 104, 97,
    100, 101, 114, 32, 37, 115, 32, 104, 97, 100, 32, 111, 100, 100, 32, 105,
    110, 100, 101, 120, 32, 99, 111, 117, 110, 116, 10, 0, 0, 0, 0, 0, 0, 82,
    66, 95, 69, 110, 100, 83, 117, 114, 102, 97, 99, 101, 40, 41, 32, 45, 32,
    83, 72, 65, 68, 69, 82, 95, 77, 65, 88, 95, 73, 78, 68, 69, 88, 69, 83, 32,
    104, 105, 116, 0, 0, 0, 0, 0, 0, 0, 0, 115, 118, 95, 114, 117, 110, 110,
    105, 110, 103, 0, 0, 0, 0, 0, 0, 67, 77, 95, 83, 101, 116, 66, 111, 114,
    100, 101, 114, 73, 110, 119, 97, 114, 100, 58, 32, 98, 97, 100, 32, 112, 97,
    114, 97, 109, 101, 116, 101, 114, 0, 0, 0, 0, 0, 0, 0, 87, 79, 82, 76, 68,
    95, 52, 56, 0, 0, 0, 0, 0, 0, 0, 0, 82, 69, 95, 65, 100, 100, 82, 101, 102,
    69, 110, 116, 105, 116, 121, 84, 111, 83, 99, 101, 110, 101, 58, 32, 68,
    114, 111, 112, 112, 105, 110, 103, 32, 114, 101, 102, 69, 110, 116, 105,
    116, 121, 44, 32, 114, 101, 97, 99, 104, 101, 100, 32, 77, 65, 88, 95, 82,
    69, 70, 69, 78, 84, 73, 84, 73, 69, 83, 10, 0, 0, 0, 0, 99, 109, 95, 110,
    111, 67, 117, 114, 118, 101, 115, 0, 0, 0, 0, 0, 103, 108, 84, 101, 120, 80,
    97, 114, 97, 109, 101, 116, 101, 114, 102, 0, 82, 95, 76, 111, 97, 100, 73,
    81, 77, 58, 32, 37, 115, 32, 105, 115, 32, 97, 32, 117, 110, 115, 117, 112,
    112, 111, 114, 116, 101, 100, 32, 73, 81, 77, 32, 118, 101, 114, 115, 105,
    111, 110, 32, 40, 37, 100, 41, 44, 32, 111, 110, 108, 121, 32, 118, 101,
    114, 115, 105, 111, 110, 32, 37, 100, 32, 105, 115, 32, 115, 117, 112, 112,
    111, 114, 116, 101, 100, 46, 10, 0, 36, 119, 104, 105, 116, 101, 105, 109,
    97, 103, 101, 0, 0, 0, 0, 0, 114, 95, 115, 119, 97, 112, 73, 110, 116, 101,
    114, 118, 97, 108, 0, 0, 117, 95, 76, 105, 103, 104, 116, 70, 111, 114, 119,
    97, 114, 100, 0, 0, 99, 108, 95, 102, 111, 114, 99, 101, 97, 118, 105, 100,
    101, 109, 111, 0, 115, 95, 105, 110, 105, 116, 115, 111, 117, 110, 100, 0,
    0, 0, 0, 0, 37, 115, 46, 37, 115, 0, 0, 0, 37, 105, 0, 0, 0, 0, 0, 0, 87,
    65, 82, 78, 73, 78, 71, 58, 32, 110, 111, 32, 115, 104, 97, 100, 101, 114,
    32, 102, 111, 114, 32, 115, 117, 114, 102, 97, 99, 101, 32, 37, 115, 32,
    105, 110, 32, 115, 107, 105, 110, 32, 37, 115, 10, 0, 0, 0, 115, 118, 95,
    112, 97, 99, 107, 101, 116, 100, 101, 108, 97, 121, 0, 0, 87, 79, 82, 76,
    68, 95, 52, 55, 0, 0, 0, 0, 0, 0, 0, 0, 83, 104, 97, 100, 101, 114, 32, 39,
    37, 115, 39, 119, 105, 116, 104, 32, 115, 111, 114, 116, 32, 61, 61, 32, 83,
    83, 95, 66, 65, 68, 0, 0, 103, 108, 71, 101, 116, 70, 108, 111, 97, 116,
    118, 0, 0, 0, 0, 0, 103, 108, 84, 101, 120, 80, 97, 114, 97, 109, 101, 116,
    101, 114, 105, 0, 87, 65, 82, 78, 73, 78, 71, 58, 32, 109, 105, 115, 115,
    105, 110, 103, 32, 112, 97, 114, 97, 109, 101, 116, 101, 114, 32, 102, 111,
    114, 32, 39, 109, 97, 112, 39, 32, 107, 101, 121, 119, 111, 114, 100, 32,
    105, 110, 32, 115, 104, 97, 100, 101, 114, 32, 39, 37, 115, 39, 10, 0, 0, 0,
    0, 71, 76, 95, 76, 73, 78, 69, 65, 82, 95, 77, 73, 80, 77, 65, 80, 95, 78,
    69, 65, 82, 69, 83, 84, 0, 0, 0, 0, 0, 0, 0, 0, 117, 95, 68, 108, 105, 103,
    104, 116, 73, 110, 102, 111, 0, 0, 0, 0, 73, 110, 118, 97, 108, 105, 100,
    32, 109, 101, 109, 111, 114, 121, 32, 112, 111, 111, 108, 32, 99, 111, 100,
    101, 32, 37, 100, 0, 0, 0, 0, 0, 99, 108, 95, 97, 118, 105, 77, 111, 116,
    105, 111, 110, 74, 112, 101, 103, 0, 0, 0, 0, 0, 0, 0, 0, 68, 101, 108, 116,
    97, 32, 102, 114, 111, 109, 32, 105, 110, 118, 97, 108, 105, 100, 32, 102,
    114, 97, 109, 101, 32, 40, 110, 111, 116, 32, 115, 117, 112, 112, 111, 115,
    101, 100, 32, 116, 111, 32, 104, 97, 112, 112, 101, 110, 33, 41, 46, 10, 0,
    0, 0, 0, 45, 45, 45, 32, 82, 95, 66, 105, 110, 100, 78, 117, 108, 108, 73,
    66, 79, 32, 45, 45, 45, 10, 0, 0, 99, 108, 95, 112, 97, 99, 107, 101, 116,
    100, 101, 108, 97, 121, 0, 0, 87, 79, 82, 76, 68, 95, 52, 54, 0, 0, 0, 0, 0,
    0, 0, 0, 109, 101, 115, 115, 97, 103, 101, 109, 111, 100, 101, 52, 0, 0, 0,
    0, 112, 108, 97, 121, 101, 114, 99, 108, 105, 112, 0, 0, 0, 0, 0, 0, 82, 95,
    76, 111, 97, 100, 77, 68, 82, 58, 32, 37, 115, 32, 104, 97, 115, 32, 109,
    111, 114, 101, 32, 116, 104, 97, 110, 32, 37, 105, 32, 118, 101, 114, 116,
    115, 32, 111, 110, 32, 37, 115, 32, 40, 37, 105, 41, 46, 10, 0, 0, 0, 0, 0,
    0, 0, 103, 108, 83, 97, 109, 112, 108, 101, 67, 111, 118, 101, 114, 97, 103,
    101, 0, 0, 0, 0, 0, 0, 0, 0, 109, 97, 112, 0, 0, 0, 0, 0, 114, 95, 116, 101,
    120, 116, 117, 114, 101, 77, 111, 100, 101, 0, 0, 0, 117, 95, 86, 101, 114,
    116, 67, 111, 108, 111, 114, 0, 0, 0, 0, 0, 50, 53, 0, 0, 0, 0, 0, 0, 77,
    111, 100, 101, 32, 32, 55, 58, 32, 49, 49, 53, 50, 120, 56, 54, 52, 0, 0, 0,
    0, 0, 0, 0, 68, 88, 84, 53, 32, 0, 0, 0, 115, 118, 95, 112, 97, 117, 115,
    101, 100, 0, 0, 0, 0, 0, 0, 0, 87, 79, 82, 76, 68, 95, 52, 53, 0, 0, 0, 0,
    0, 0, 0, 0, 35, 100, 101, 102, 105, 110, 101, 32, 85, 83, 69, 95, 82, 71,
    66, 65, 71, 69, 78, 10, 0, 0, 0, 0, 82, 95, 65, 116, 116, 97, 99, 104, 70,
    66, 79, 84, 101, 120, 116, 117, 114, 101, 50, 68, 58, 32, 105, 110, 118, 97,
    108, 105, 100, 32, 97, 116, 116, 97, 99, 104, 109, 101, 110, 116, 32, 105,
    110, 100, 101, 120, 32, 37, 105, 10, 0, 0, 0, 0, 0, 0, 103, 108, 71, 101,
    110, 66, 117, 102, 102, 101, 114, 115, 65, 82, 66, 0, 103, 108, 86, 101,
    114, 116, 101, 120, 65, 116, 116, 114, 105, 98, 49, 102, 0, 0, 0, 0, 0, 0,
    0, 0, 82, 95, 80, 97, 114, 115, 101, 83, 112, 97, 119, 110, 86, 97, 114,
    115, 58, 32, 99, 108, 111, 115, 105, 110, 103, 32, 98, 114, 97, 99, 101, 32,
    119, 105, 116, 104, 111, 117, 116, 32, 100, 97, 116, 97, 0, 0, 0, 0, 87, 65,
    82, 78, 73, 78, 71, 58, 32, 110, 111, 32, 109, 97, 116, 99, 104, 105, 110,
    103, 32, 39, 125, 39, 32, 102, 111, 117, 110, 100, 10, 0, 114, 95, 102, 105,
    110, 105, 115, 104, 0, 0, 0, 0, 0, 0, 0, 0, 117, 95, 66, 97, 115, 101, 67,
    111, 108, 111, 114, 0, 0, 0, 0, 0, 99, 108, 95, 97, 118, 105, 70, 114, 97,
    109, 101, 82, 97, 116, 101, 0, 99, 108, 95, 112, 97, 117, 115, 101, 100, 0,
    0, 0, 0, 0, 0, 0, 83, 116, 97, 114, 116, 105, 110, 103, 32, 83, 68, 76, 32,
    97, 117, 100, 105, 111, 32, 99, 97, 108, 108, 98, 97, 99, 107, 46, 46, 46,
    10, 0, 87, 79, 82, 76, 68, 95, 52, 52, 0, 0, 0, 0, 0, 0, 0, 0, 45, 45, 45,
    45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45,
    45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 10, 0, 0, 0, 43, 43,
    0, 0, 0, 0, 0, 0, 103, 108, 80, 111, 108, 121, 103, 111, 110, 79, 102, 102,
    115, 101, 116, 0, 66, 111, 116, 76, 105, 98, 83, 104, 117, 116, 100, 111,
    119, 110, 0, 0, 87, 65, 82, 78, 73, 78, 71, 58, 32, 105, 110, 118, 97, 108,
    105, 100, 32, 103, 101, 110, 102, 117, 110, 99, 32, 110, 97, 109, 101, 32,
    39, 37, 115, 39, 32, 105, 110, 32, 115, 104, 97, 100, 101, 114, 32, 39, 37,
    115, 39, 10, 0, 0, 0, 0, 0, 0, 114, 95, 100, 108, 105, 103, 104, 116, 66,
    97, 99, 107, 115, 0, 0, 0, 114, 101, 116, 117, 114, 110, 0, 0, 117, 95, 67,
    111, 108, 111, 114, 0, 119, 101, 97, 112, 111, 110, 32, 37, 100, 32, 104,
    97, 115, 32, 110, 111, 32, 110, 97, 109, 101, 32, 105, 110, 32, 37, 115, 10,
    0, 0, 0, 0, 40, 108, 97, 115, 116, 41, 32, 116, 114, 97, 118, 101, 108, 32,
    116, 121, 112, 101, 32, 37, 100, 32, 110, 111, 116, 32, 105, 109, 112, 108,
    101, 109, 101, 110, 116, 101, 100, 32, 121, 101, 116, 10, 0, 0, 0, 0, 0, 0,
    99, 108, 95, 97, 117, 116, 111, 82, 101, 99, 111, 114, 100, 68, 101, 109,
    111, 0, 0, 0, 0, 0, 0, 0, 105, 116, 101, 109, 105, 110, 102, 111, 0, 0, 0,
    0, 0, 0, 0, 0, 91, 0, 0, 0, 0, 0, 0, 0, 101, 120, 112, 101, 99, 116, 101,
    100, 32, 105, 110, 116, 101, 103, 101, 114, 32, 105, 110, 100, 101, 120, 44,
    32, 102, 111, 117, 110, 100, 32, 37, 115, 0, 0, 0, 0, 0, 0, 0, 0, 65, 65,
    83, 95, 65, 114, 101, 97, 84, 114, 97, 118, 101, 108, 84, 105, 109, 101, 84,
    111, 71, 111, 97, 108, 65, 114, 101, 97, 58, 32, 103, 111, 97, 108, 97, 114,
    101, 97, 110, 117, 109, 32, 37, 100, 32, 111, 117, 116, 32, 111, 102, 32,
    114, 97, 110, 103, 101, 10, 0, 0, 0, 0, 0, 0, 99, 111, 109, 95, 99, 97, 109,
    101, 114, 97, 77, 111, 100, 101, 0, 0, 65, 65, 83, 95, 65, 114, 101, 97, 82,
    101, 97, 99, 104, 97, 98, 105, 108, 105, 116, 121, 58, 32, 97, 114, 101, 97,
    110, 117, 109, 32, 37, 100, 32, 111, 117, 116, 32, 111, 102, 32, 114, 97,
    110, 103, 101, 10, 0, 0, 49, 53, 48, 0, 0, 0, 0, 0, 102, 105, 110, 105, 115,
    104, 101, 100, 32, 99, 105, 110, 101, 109, 97, 116, 105, 99, 10, 0, 0, 0, 0,
    0, 87, 79, 82, 76, 68, 95, 52, 51, 0, 0, 0, 0, 0, 0, 0, 0, 109, 97, 120,
    101, 110, 116, 105, 116, 105, 101, 115, 0, 0, 0, 0, 0, 102, 111, 114, 99,
    101, 114, 101, 97, 99, 104, 97, 98, 105, 108, 105, 116, 121, 0, 0, 0, 0, 0,
    0, 0, 94, 51, 87, 97, 114, 110, 105, 110, 103, 58, 32, 67, 111, 117, 108,
    100, 110, 39, 116, 32, 111, 112, 101, 110, 32, 86, 77, 32, 102, 105, 108,
    101, 32, 37, 115, 10, 0, 0, 0, 0, 73, 110, 102, 111, 95, 82, 101, 109, 111,
    118, 101, 75, 101, 121, 95, 66, 105, 103, 58, 32, 111, 118, 101, 114, 115,
    105, 122, 101, 32, 105, 110, 102, 111, 115, 116, 114, 105, 110, 103, 0, 37,
    115, 0, 0, 0, 0, 0, 0, 103, 108, 72, 105, 110, 116, 0, 0, 110, 111, 105,
    115, 101, 0, 0, 0, 114, 95, 100, 121, 110, 97, 109, 105, 99, 108, 105, 103,
    104, 116, 0, 0, 117, 95, 65, 108, 112, 104, 97, 84, 101, 115, 116, 0, 0, 0,
    0, 0, 83, 101, 110, 100, 105, 110, 103, 32, 104, 101, 97, 114, 116, 98, 101,
    97, 116, 32, 116, 111, 32, 37, 115, 10, 0, 0, 0, 0, 0, 0, 0, 0, 71, 76, 95,
    73, 78, 86, 65, 76, 73, 68, 95, 86, 65, 76, 85, 69, 0, 0, 0, 0, 0, 0, 0, 0,
    99, 108, 95, 116, 105, 109, 101, 100, 101, 109, 111, 76, 111, 103, 0, 0,
    109, 97, 112, 110, 97, 109, 101, 0, 66, 97, 100, 32, 111, 114, 32, 117, 110,
    115, 117, 112, 112, 111, 114, 116, 101, 100, 32, 112, 99, 120, 32, 102, 105,
    108, 101, 32, 37, 115, 32, 40, 37, 100, 120, 37, 100, 64, 37, 100, 41, 10,
    0, 0, 0, 0, 0, 0, 112, 114, 105, 110, 116, 10, 85, 115, 101, 114, 105, 110,
    102, 111, 32, 115, 116, 114, 105, 110, 103, 32, 108, 101, 110, 103, 116,
    104, 32, 101, 120, 99, 101, 101, 100, 101, 100, 46, 32, 32, 84, 114, 121,
    32, 114, 101, 109, 111, 118, 105, 110, 103, 32, 115, 101, 116, 117, 32, 99,
    118, 97, 114, 115, 32, 102, 114, 111, 109, 32, 121, 111, 117, 114, 32, 99,
    111, 110, 102, 105, 103, 46, 10, 0, 0, 0, 0, 0, 0, 76, 111, 97, 100, 84, 71,
    65, 58, 32, 79, 110, 108, 121, 32, 116, 121, 112, 101, 32, 50, 32, 40, 82,
    71, 66, 41, 44, 32, 51, 32, 40, 103, 114, 97, 121, 41, 44, 32, 97, 110, 100,
    32, 49, 48, 32, 40, 82, 71, 66, 41, 32, 84, 71, 65, 32, 105, 109, 97, 103,
    101, 115, 32, 115, 117, 112, 112, 111, 114, 116, 101, 100, 0, 115, 112, 100,
    101, 118, 109, 97, 112, 0, 0, 0, 0, 0, 0, 0, 0, 98, 111, 116, 95, 102, 111,
    114, 99, 101, 114, 101, 97, 99, 104, 97, 98, 105, 108, 105, 116, 121, 0, 0,
    0, 116, 105, 109, 101, 100, 101, 109, 111, 0, 0, 0, 0, 0, 0, 0, 0, 76, 111,
    97, 100, 66, 77, 80, 58, 32, 105, 110, 118, 97, 108, 105, 100, 32, 111, 102,
    102, 115, 101, 116, 32, 118, 97, 108, 117, 101, 32, 105, 110, 32, 104, 101,
    97, 100, 101, 114, 32, 40, 37, 115, 41, 0, 0, 0, 0, 77, 83, 71, 95, 67, 111,
    112, 121, 58, 32, 99, 97, 110, 39, 116, 32, 99, 111, 112, 121, 32, 105, 110,
    116, 111, 32, 97, 32, 115, 109, 97, 108, 108, 101, 114, 32, 109, 115, 103,
    95, 116, 32, 98, 117, 102, 102, 101, 114, 0, 0, 0, 0, 0, 0, 0, 0, 79, 117,
    116, 112, 117, 116, 32, 98, 117, 102, 102, 101, 114, 32, 102, 111, 114, 32,
    101, 110, 99, 111, 100, 101, 100, 32, 74, 80, 69, 71, 32, 105, 109, 97, 103,
    101, 32, 104, 97, 115, 32, 105, 110, 115, 117, 102, 102, 105, 99, 105, 101,
    110, 116, 32, 115, 105, 122, 101, 32, 111, 102, 32, 37, 100, 32, 98, 121,
    116, 101, 115, 0, 0, 115, 95, 97, 108, 71, 114, 97, 99, 101, 68, 105, 115,
    116, 97, 110, 99, 101, 0, 0, 0, 0, 0, 0, 0, 37, 115, 58, 32, 105, 110, 118,
    97, 108, 105, 100, 32, 105, 109, 97, 103, 101, 32, 115, 105, 122, 101, 10,
    0, 87, 79, 82, 76, 68, 95, 52, 50, 0, 0, 0, 0, 0, 0, 0, 0, 115, 95, 105,
    110, 105, 116, 115, 111, 117, 110, 100, 0, 0, 0, 0, 0, 112, 97, 103, 101,
    100, 32, 111, 117, 116, 0, 0, 0, 0, 0, 0, 0, 87, 65, 82, 78, 73, 78, 71, 58,
    32, 78, 69, 84, 95, 73, 80, 83, 111, 99, 107, 101, 116, 58, 32, 115, 101,
    116, 115, 111, 99, 107, 111, 112, 116, 32, 83, 79, 95, 66, 82, 79, 65, 68,
    67, 65, 83, 84, 58, 32, 37, 115, 10, 0, 0, 0, 0, 0, 103, 108, 83, 116, 101,
    110, 99, 105, 108, 77, 97, 115, 107, 83, 101, 112, 97, 114, 97, 116, 101, 0,
    0, 0, 115, 101, 110, 100, 32, 112, 97, 99, 107, 101, 116, 32, 37, 52, 105,
    10, 0, 0, 0, 0, 0, 0, 0, 0, 105, 110, 118, 101, 114, 115, 101, 115, 97, 119,
    116, 111, 111, 116, 104, 0, 114, 95, 100, 114, 97, 119, 83, 117, 110, 0, 0,
    0, 0, 0, 0, 0, 112, 111, 115, 46, 116, 114, 68, 101, 108, 116, 97, 91, 50,
    93, 0, 0, 117, 95, 65, 108, 112, 104, 97, 71, 101, 110, 0, 0, 0, 0, 0, 0,
    116, 105, 109, 101, 100, 101, 109, 111, 0, 0, 0, 0, 0, 0, 0, 0, 70, 83, 95,
    83, 86, 95, 70, 79, 112, 101, 110, 70, 105, 108, 101, 82, 101, 97, 100, 32,
    40, 102, 115, 95, 104, 111, 109, 101, 112, 97, 116, 104, 41, 58, 32, 37,
    115, 10, 0, 0, 70, 50, 0, 0, 0, 0, 0, 0, 82, 101, 115, 116, 114, 105, 99,
    116, 101, 100, 32, 115, 111, 117, 114, 99, 101, 32, 116, 114, 105, 101, 100,
    32, 116, 111, 32, 115, 101, 116, 32, 34, 37, 115, 34, 32, 116, 111, 32, 34,
    37, 115, 34, 0, 0, 0, 0, 0, 99, 111, 109, 95, 115, 112, 101, 101, 100, 115,
    0, 0, 0, 0, 0, 0, 71, 76, 95, 76, 73, 78, 69, 65, 82, 0, 0, 0, 0, 0, 0, 0,
    87, 79, 82, 76, 68, 95, 52, 49, 0, 0, 0, 0, 0, 0, 0, 0, 103, 108, 68, 101,
    112, 116, 104, 82, 97, 110, 103, 101, 102, 0, 0, 0, 115, 97, 119, 116, 111,
    111, 116, 104, 0, 0, 0, 0, 0, 0, 0, 0, 114, 95, 105, 110, 71, 97, 109, 101,
    86, 105, 100, 101, 111, 0, 0, 0, 117, 95, 67, 111, 108, 111, 114, 71, 101,
    110, 0, 0, 0, 0, 0, 0, 97, 99, 116, 105, 118, 101, 65, 99, 116, 105, 111,
    110, 0, 0, 0, 0, 99, 111, 109, 95, 115, 104, 111, 119, 116, 114, 97, 99,
    101, 0, 0, 0, 87, 79, 82, 76, 68, 95, 52, 48, 0, 0, 0, 0, 0, 0, 0, 0, 98,
    99, 115, 32, 101, 120, 99, 101, 101, 100, 101, 100, 32, 66, 73, 71, 95, 73,
    78, 70, 79, 95, 83, 84, 82, 73, 78, 71, 0, 0, 0, 0, 103, 108, 68, 101, 112,
    116, 104, 82, 97, 110, 103, 101, 0, 0, 0, 0, 116, 114, 105, 97, 110, 103,
    108, 101, 0, 0, 0, 0, 0, 0, 0, 0, 114, 95, 102, 97, 115, 116, 115, 107, 121,
    0, 0, 0, 0, 0, 0, 0, 117, 95, 68, 101, 102, 111, 114, 109, 80, 97, 114, 97,
    109, 115, 0, 0, 114, 99, 111, 110, 80, 97, 115, 115, 119, 111, 114, 100, 0,
    0, 0, 0, 83, 101, 114, 118, 101, 114, 32, 100, 105, 100, 110, 39, 116, 32,
    104, 97, 118, 101, 32, 67, 68, 10, 0, 0, 102, 105, 120, 101, 100, 116, 105,
    109, 101, 0, 0, 0, 0, 0, 0, 0, 71, 76, 83, 76, 95, 83, 101, 116, 85, 110,
    105, 102, 111, 114, 109, 73, 110, 116, 58, 32, 119, 114, 111, 110, 103, 32,
    116, 121, 112, 101, 32, 102, 111, 114, 32, 117, 110, 105, 102, 111, 114,
    109, 32, 37, 105, 32, 105, 110, 32, 112, 114, 111, 103, 114, 97, 109, 32,
    37, 115, 10, 0, 0, 0, 0, 82, 69, 95, 82, 101, 103, 105, 115, 116, 101, 114,
    70, 111, 110, 116, 58, 32, 84, 111, 111, 32, 109, 97, 110, 121, 32, 102,
    111, 110, 116, 115, 32, 114, 101, 103, 105, 115, 116, 101, 114, 101, 100,
    32, 97, 108, 114, 101, 97, 100, 121, 46, 10, 0, 0, 0, 0, 87, 79, 82, 76, 68,
    95, 51, 57, 0, 0, 0, 0, 0, 0, 0, 0, 37, 115, 10, 0, 0, 0, 0, 0, 103, 108,
    66, 108, 101, 110, 100, 69, 113, 117, 97, 116, 105, 111, 110, 83, 101, 112,
    97, 114, 97, 116, 101, 0, 115, 113, 117, 97, 114, 101, 0, 0, 114, 95, 105,
    103, 110, 111, 114, 101, 71, 76, 69, 114, 114, 111, 114, 115, 0, 0, 0, 0, 0,
    0, 0, 0, 117, 95, 68, 101, 102, 111, 114, 109, 71, 101, 110, 0, 0, 0, 0, 0,
    82, 95, 67, 104, 101, 99, 107, 70, 66, 79, 58, 32, 40, 37, 115, 41, 32, 70,
    114, 97, 109, 101, 98, 117, 102, 102, 101, 114, 32, 105, 110, 99, 111, 109,
    112, 108, 101, 116, 101, 32, 97, 116, 116, 97, 99, 104, 109, 101, 110, 116,
    10, 0, 0, 0, 0, 0, 99, 108, 95, 102, 114, 101, 101, 122, 101, 68, 101, 109,
    111, 0, 0, 0, 99, 101, 110, 116, 101, 114, 118, 105, 101, 119, 0, 0, 0, 0,
    0, 0, 116, 105, 109, 101, 115, 99, 97, 108, 101, 0, 0, 0, 0, 0, 0, 0, 77,
    65, 88, 95, 70, 65, 67, 69, 84, 83, 0, 0, 0, 0, 0, 0, 87, 79, 82, 76, 68,
    95, 51, 56, 0, 0, 0, 0, 0, 0, 0, 0, 48, 0, 0, 0, 0, 0, 0, 0, 103, 108, 66,
    108, 101, 110, 100, 70, 117, 110, 99, 0, 0, 0, 0, 0, 115, 105, 110, 0, 0, 0,
    0, 0, 114, 95, 115, 116, 101, 114, 101, 111, 83, 101, 112, 97, 114, 97, 116,
    105, 111, 110, 0, 0, 0, 0, 0, 0, 117, 95, 84, 67, 71, 101, 110, 48, 86, 101,
    99, 116, 111, 114, 49, 0, 99, 108, 95, 115, 104, 111, 119, 84, 105, 109,
    101, 68, 101, 108, 116, 97, 0, 0, 0, 0, 0, 0, 0, 0, 46, 46, 46, 117, 115,
    105, 110, 103, 32, 37, 115, 10, 0, 0, 0, 0, 94, 51, 87, 65, 82, 78, 73, 78,
    71, 58, 32, 99, 108, 95, 97, 118, 105, 70, 114, 97, 109, 101, 82, 97, 116,
    101, 32, 105, 115, 32, 110, 111, 116, 32, 97, 32, 100, 105, 118, 105, 115,
    111, 114, 32, 111, 102, 32, 116, 104, 101, 32, 97, 117, 100, 105, 111, 32,
    114, 97, 116, 101, 44, 32, 115, 117, 103, 103, 101, 115, 116, 32, 37, 100,
    10, 0, 0, 0, 0, 0, 0, 99, 108, 105, 101, 110, 116, 115, 0, 99, 111, 109, 95,
    98, 108, 111, 111, 100, 0, 0, 0, 0, 0, 0, 0, 40, 112, 97, 116, 99, 104, 41,
    32, 37, 105, 32, 115, 105, 110, 32, 37, 105, 32, 115, 99, 108, 105, 112, 32,
    32, 37, 105, 32, 115, 111, 117, 116, 32, 37, 105, 32, 98, 105, 110, 32, 37,
    105, 32, 98, 99, 108, 105, 112, 32, 37, 105, 32, 98, 111, 117, 116, 10, 0,
    0, 0, 0, 0, 0, 0, 87, 79, 82, 76, 68, 95, 51, 55, 0, 0, 0, 0, 0, 0, 0, 0,
    103, 108, 71, 101, 116, 73, 110, 116, 101, 103, 101, 114, 118, 0, 0, 0, 103,
    108, 73, 115, 69, 110, 97, 98, 108, 101, 100, 0, 0, 0, 0, 0, 87, 65, 82, 78,
    73, 78, 71, 58, 32, 109, 105, 115, 115, 105, 110, 103, 32, 119, 97, 118,
    101, 102, 111, 114, 109, 32, 112, 97, 114, 109, 32, 105, 110, 32, 115, 104,
    97, 100, 101, 114, 32, 39, 37, 115, 39, 10, 0, 0, 54, 52, 0, 0, 0, 0, 0, 0,
    117, 95, 84, 67, 71, 101, 110, 48, 86, 101, 99, 116, 111, 114, 48, 0, 87,
    65, 82, 78, 73, 78, 71, 58, 32, 108, 105, 103, 104, 116, 32, 103, 114, 105,
    100, 32, 109, 105, 115, 109, 97, 116, 99, 104, 10, 0, 0, 0, 83, 97, 109,
    112, 108, 105, 110, 103, 32, 102, 97, 99, 116, 111, 114, 115, 32, 116, 111,
    111, 32, 108, 97, 114, 103, 101, 32, 102, 111, 114, 32, 105, 110, 116, 101,
    114, 108, 101, 97, 118, 101, 100, 32, 115, 99, 97, 110, 0, 99, 108, 95, 115,
    104, 111, 119, 83, 101, 110, 100, 0, 0, 0, 0, 0, 71, 76, 95, 83, 101, 108,
    101, 99, 116, 84, 101, 120, 116, 117, 114, 101, 58, 32, 117, 110, 105, 116,
    32, 61, 32, 37, 105, 0, 0, 0, 0, 0, 114, 95, 115, 100, 108, 68, 114, 105,
    118, 101, 114, 0, 0, 0, 0, 0, 37, 51, 105, 58, 32, 32, 98, 97, 115, 101,
    108, 105, 110, 101, 58, 32, 37, 105, 10, 0, 0, 0, 0, 0, 45, 45, 45, 32, 82,
    95, 66, 105, 110, 100, 73, 66, 79, 40, 32, 37, 115, 32, 41, 32, 45, 45, 45,
    10, 0, 0, 0, 0, 0, 0, 0, 0, 56, 53, 0, 0, 0, 0, 0, 0, 87, 79, 82, 76, 68,
    95, 51, 54, 0, 0, 0, 0, 0, 0, 0, 0, 105, 110, 99, 111, 114, 114, 101, 99,
    116, 32, 104, 101, 97, 100, 101, 114, 32, 99, 104, 101, 99, 107, 0, 0, 105,
    110, 118, 97, 108, 105, 100, 32, 100, 105, 115, 116, 97, 110, 99, 101, 32,
    99, 111, 100, 101, 0, 0, 0, 108, 97, 118, 97, 0, 0, 0, 0, 109, 101, 115,
    115, 97, 103, 101, 109, 111, 100, 101, 51, 0, 0, 0, 0, 82, 95, 76, 111, 97,
    100, 77, 68, 82, 58, 32, 37, 115, 32, 104, 97, 115, 32, 110, 111, 32, 102,
    114, 97, 109, 101, 115, 10, 0, 0, 0, 0, 103, 108, 66, 108, 101, 110, 100,
    69, 113, 117, 97, 116, 105, 111, 110, 0, 87, 65, 82, 78, 73, 78, 71, 58, 32,
    117, 110, 107, 110, 111, 119, 110, 32, 100, 101, 102, 111, 114, 109, 86,
    101, 114, 116, 101, 120, 101, 115, 32, 115, 117, 98, 116, 121, 112, 101, 32,
    39, 37, 115, 39, 32, 102, 111, 117, 110, 100, 32, 105, 110, 32, 115, 104,
    97, 100, 101, 114, 32, 39, 37, 115, 39, 10, 0, 0, 0, 0, 0, 0, 114, 95, 122,
    112, 114, 111, 106, 0, 117, 95, 84, 67, 71, 101, 110, 48, 0, 0, 0, 0, 0, 0,
    0, 0, 79, 112, 117, 115, 84, 97, 103, 115, 0, 0, 0, 0, 0, 0, 0, 0, 99, 108,
    95, 115, 104, 111, 119, 110, 101, 116, 0, 0, 0, 0, 0, 0, 77, 111, 100, 101,
    32, 32, 54, 58, 32, 49, 48, 50, 52, 120, 55, 54, 56, 0, 0, 0, 0, 0, 0, 0,
    87, 79, 82, 76, 68, 95, 51, 53, 0, 0, 0, 0, 0, 0, 0, 0, 68, 88, 84, 49, 32,
    0, 0, 0, 99, 111, 109, 95, 109, 97, 120, 102, 112, 115, 0, 0, 0, 0, 0, 0,
    46, 116, 120, 116, 0, 0, 0, 0, 35, 100, 101, 102, 105, 110, 101, 32, 85, 83,
    69, 95, 70, 79, 71, 10, 0, 0, 0, 0, 0, 0, 0, 0, 103, 108, 68, 101, 108, 101,
    116, 101, 66, 117, 102, 102, 101, 114, 115, 65, 82, 66, 0, 0, 0, 0, 0, 0,
    82, 69, 95, 66, 101, 103, 105, 110, 70, 114, 97, 109, 101, 40, 41, 32, 45,
    32, 103, 108, 71, 101, 116, 69, 114, 114, 111, 114, 40, 41, 32, 102, 97,
    105, 108, 101, 100, 32, 40, 48, 120, 37, 120, 41, 33, 0, 0, 0, 103, 108, 65,
    99, 116, 105, 118, 101, 84, 101, 120, 116, 117, 114, 101, 0, 82, 95, 80, 97,
    114, 115, 101, 83, 112, 97, 119, 110, 86, 97, 114, 115, 58, 32, 69, 79, 70,
    32, 119, 105, 116, 104, 111, 117, 116, 32, 99, 108, 111, 115, 105, 110, 103,
    32, 98, 114, 97, 99, 101, 0, 0, 0, 0, 0, 105, 110, 99, 111, 114, 114, 101,
    99, 116, 32, 100, 97, 116, 97, 32, 99, 104, 101, 99, 107, 0, 0, 0, 0, 109,
    111, 118, 101, 0, 0, 0, 0, 114, 95, 122, 110, 101, 97, 114, 0, 117, 95, 84,
    101, 120, 116, 117, 114, 101, 49, 69, 110, 118, 0, 0, 0, 99, 108, 95, 116,
    105, 109, 101, 78, 117, 100, 103, 101, 0, 0, 0, 0, 49, 0, 0, 0, 0, 0, 0, 0,
    83, 68, 76, 95, 65, 117, 100, 105, 111, 83, 112, 101, 99, 0, 0, 0, 87, 79,
    82, 76, 68, 95, 51, 52, 0, 0, 0, 0, 0, 0, 0, 0, 99, 111, 109, 95, 109, 105,
    110, 105, 109, 105, 122, 101, 100, 0, 0, 0, 45, 61, 0, 0, 0, 0, 0, 0, 103,
    108, 71, 101, 110, 101, 114, 97, 116, 101, 77, 105, 112, 109, 97, 112, 0, 0,
    0, 0, 0, 0, 0, 0, 34, 0, 0, 0, 0, 0, 0, 0, 49, 48, 50, 52, 0, 0, 0, 0, 110,
    111, 114, 109, 97, 108, 0, 0, 114, 95, 102, 108, 97, 114, 101, 115, 0, 0, 0,
    0, 0, 0, 0, 0, 58, 0, 0, 0, 0, 0, 0, 0, 117, 95, 68, 105, 102, 102, 117,
    115, 101, 84, 101, 120, 79, 102, 102, 84, 117, 114, 98, 0, 0, 0, 0, 0, 117,
    110, 107, 110, 111, 119, 110, 32, 100, 101, 102, 105, 110, 105, 116, 105,
    111, 110, 32, 37, 115, 32, 105, 110, 32, 37, 115, 10, 0, 0, 0, 0, 99, 108,
    105, 101, 110, 116, 32, 37, 100, 32, 100, 105, 100, 110, 39, 116, 32, 102,
    105, 110, 100, 32, 106, 117, 109, 112, 112, 97, 100, 32, 114, 101, 97, 99,
    104, 97, 98, 105, 108, 105, 116, 121, 10, 0, 0, 0, 0, 0, 50, 48, 48, 0, 0,
    0, 0, 0, 99, 111, 117, 110, 108, 100, 110, 39, 116, 32, 108, 111, 97, 100,
    32, 37, 115, 10, 0, 0, 0, 0, 0, 0, 116, 111, 111, 32, 109, 97, 110, 121, 32,
    125, 0, 0, 0, 0, 0, 0, 125, 0, 0, 0, 0, 0, 0, 0, 65, 65, 83, 95, 65, 114,
    101, 97, 84, 114, 97, 118, 101, 108, 84, 105, 109, 101, 84, 111, 71, 111,
    97, 108, 65, 114, 101, 97, 58, 32, 97, 114, 101, 97, 110, 117, 109, 32, 37,
    100, 32, 111, 117, 116, 32, 111, 102, 32, 114, 97, 110, 103, 101, 10, 0, 0,
    103, 97, 109, 101, 95, 114, 101, 115, 116, 97, 114, 116, 0, 0, 0, 0, 65, 65,
    83, 95, 77, 65, 88, 95, 82, 69, 65, 67, 72, 65, 66, 73, 76, 73, 84, 89, 83,
    73, 90, 69, 10, 0, 0, 0, 0, 0, 0, 0, 112, 104, 121, 115, 95, 109, 97, 120,
    115, 119, 105, 109, 118, 101, 108, 111, 99, 105, 116, 121, 0, 0, 0, 0, 87,
    79, 82, 76, 68, 95, 51, 51, 0, 0, 0, 0, 0, 0, 0, 0, 49, 50, 56, 0, 0, 0, 0,
    0, 102, 111, 114, 99, 101, 99, 108, 117, 115, 116, 101, 114, 105, 110, 103,
    0, 72, 65, 67, 75, 58, 32, 97, 112, 112, 114, 111, 120, 109, 105, 109, 97,
    116, 105, 110, 103, 32, 99, 105, 110, 101, 109, 97, 116, 105, 99, 32, 102,
    111, 114, 32, 82, 97, 103, 101, 32, 80, 114, 111, 32, 111, 114, 32, 86, 111,
    111, 100, 111, 111, 10, 0, 0, 70, 97, 105, 108, 101, 100, 46, 10, 0, 0, 0,
    0, 0, 0, 0, 0, 73, 110, 102, 111, 95, 82, 101, 109, 111, 118, 101, 75, 101,
    121, 58, 32, 111, 118, 101, 114, 115, 105, 122, 101, 32, 105, 110, 102, 111,
    115, 116, 114, 105, 110, 103, 0, 0, 0, 0, 0, 37, 105, 32, 102, 114, 97, 109,
    101, 115, 32, 37, 51, 46, 49, 102, 32, 115, 101, 99, 111, 110, 100, 115, 32,
    37, 51, 46, 49, 102, 32, 102, 112, 115, 32, 37, 100, 46, 48, 47, 37, 46, 49,
    102, 47, 37, 100, 46, 48, 47, 37, 46, 49, 102, 32, 109, 115, 10, 0, 0, 0, 0,
    0, 0, 0, 103, 108, 67, 104, 101, 99, 107, 70, 114, 97, 109, 101, 98, 117,
    102, 102, 101, 114, 83, 116, 97, 116, 117, 115, 0, 0, 0, 0, 0, 0, 0, 0, 87,
    65, 82, 78, 73, 78, 71, 58, 32, 105, 108, 108, 101, 103, 97, 108, 32, 100,
    105, 118, 32, 118, 97, 108, 117, 101, 32, 111, 102, 32, 48, 32, 105, 110,
    32, 100, 101, 102, 111, 114, 109, 86, 101, 114, 116, 101, 120, 101, 115, 32,
    99, 111, 109, 109, 97, 110, 100, 32, 102, 111, 114, 32, 115, 104, 97, 100,
    101, 114, 32, 39, 37, 115, 39, 10, 0, 0, 0, 0, 0, 0, 114, 95, 108, 111, 100,
    98, 105, 97, 115, 0, 0, 0, 0, 0, 0, 0, 117, 95, 68, 105, 102, 102, 117, 115,
    101, 84, 101, 120, 77, 97, 116, 114, 105, 120, 0, 0, 0, 0, 0, 0, 99, 108,
    95, 116, 105, 109, 101, 111, 117, 116, 0, 0, 0, 0, 0, 0, 48, 0, 0, 0, 0, 0,
    0, 0, 108, 111, 99, 97, 108, 104, 111, 115, 116, 0, 0, 0, 0, 0, 0, 0, 115,
    112, 109, 97, 112, 0, 0, 0, 98, 111, 116, 95, 102, 111, 114, 99, 101, 99,
    108, 117, 115, 116, 101, 114, 105, 110, 103, 0, 0, 0, 0, 0, 119, 114, 105,
    116, 101, 99, 111, 110, 102, 105, 103, 0, 0, 0, 0, 0, 50, 0, 0, 0, 0, 0, 0,
    0, 87, 79, 82, 76, 68, 95, 51, 50, 0, 0, 0, 0, 0, 0, 0, 0, 115, 95, 109,
    117, 116, 101, 87, 104, 101, 110, 85, 110, 102, 111, 99, 117, 115, 101, 100,
    0, 0, 0, 0, 0, 109, 117, 108, 97, 119, 0, 0, 0, 87, 65, 82, 78, 73, 78, 71,
    58, 32, 78, 69, 84, 95, 73, 80, 83, 111, 99, 107, 101, 116, 58, 32, 105,
    111, 99, 116, 108, 32, 70, 73, 79, 78, 66, 73, 79, 58, 32, 37, 115, 10, 0,
    0, 0, 0, 0, 0, 0, 103, 108, 83, 116, 101, 110, 99, 105, 108, 77, 97, 115,
    107, 0, 0, 0, 37, 115, 58, 102, 114, 97, 103, 109, 101, 110, 116, 76, 101,
    110, 103, 116, 104, 32, 37, 105, 32, 62, 32, 109, 115, 103, 45, 62, 109, 97,
    120, 115, 105, 122, 101, 10, 0, 0, 0, 0, 87, 65, 82, 78, 73, 78, 71, 58, 32,
    109, 105, 115, 115, 105, 110, 103, 32, 100, 101, 102, 111, 114, 109, 86,
    101, 114, 116, 101, 120, 101, 115, 32, 112, 97, 114, 109, 32, 105, 110, 32,
    115, 104, 97, 100, 101, 114, 32, 39, 37, 115, 39, 10, 0, 0, 0, 0, 50, 53,
    48, 0, 0, 0, 0, 0, 97, 112, 111, 115, 46, 116, 114, 66, 97, 115, 101, 91,
    49, 93, 0, 0, 117, 95, 69, 110, 97, 98, 108, 101, 84, 101, 120, 116, 117,
    114, 101, 115, 0, 0, 0, 0, 0, 0, 0, 0, 99, 108, 95, 110, 111, 112, 114, 105,
    110, 116, 0, 0, 0, 0, 0, 0, 119, 98, 0, 0, 0, 0, 0, 0, 70, 49, 0, 0, 0, 0,
    0, 0, 37, 115, 32, 105, 115, 32, 99, 104, 101, 97, 116, 32, 112, 114, 111,
    116, 101, 99, 116, 101, 100, 46, 10, 0, 99, 104, 97, 110, 103, 101, 86, 101,
    99, 116, 111, 114, 115, 0, 0, 0, 87, 79, 82, 76, 68, 95, 51, 49, 0, 0, 0, 0,
    0, 0, 0, 0, 103, 108, 68, 101, 112, 116, 104, 77, 97, 115, 107, 0, 0, 0, 0,
    0, 119, 0, 0, 0, 0, 0, 0, 0, 119, 97, 118, 101, 0, 0, 0, 0, 114, 95, 108,
    111, 100, 67, 117, 114, 118, 101, 69, 114, 114, 111, 114, 0, 117, 95, 83,
    104, 97, 100, 111, 119, 77, 118, 112, 51, 0, 0, 0, 0, 45, 45, 45, 45, 45,
    32, 67, 108, 105, 101, 110, 116, 32, 73, 110, 105, 116, 105, 97, 108, 105,
    122, 97, 116, 105, 111, 110, 32, 45, 45, 45, 45, 45, 10, 0, 0, 0, 0, 0, 0,
    49, 54, 0, 0, 0, 0, 0, 0, 113, 117, 105, 116, 0, 0, 0, 0, 87, 79, 82, 76,
    68, 95, 51, 48, 0, 0, 0, 0, 0, 0, 0, 0, 98, 99, 115, 49, 0, 0, 0, 0, 103,
    108, 67, 108, 101, 97, 114, 83, 116, 101, 110, 99, 105, 108, 0, 0, 87, 65,
    82, 78, 73, 78, 71, 58, 32, 109, 105, 115, 115, 105, 110, 103, 32, 100, 101,
    102, 111, 114, 109, 86, 101, 114, 116, 101, 120, 101, 115, 32, 98, 117, 108,
    103, 101, 32, 112, 97, 114, 109, 32, 105, 110, 32, 115, 104, 97, 100, 101,
    114, 32, 39, 37, 115, 39, 10, 0, 0, 0, 0, 0, 0, 118, 105, 100, 95, 114, 101,
    115, 116, 97, 114, 116, 32, 102, 97, 115, 116, 10, 0, 0, 0, 0, 0, 0, 0, 114,
    95, 115, 105, 110, 103, 108, 101, 83, 104, 97, 100, 101, 114, 0, 0, 117, 95,
    83, 104, 97, 100, 111, 119, 77, 118, 112, 50, 0, 0, 0, 0, 94, 49, 69, 82,
    82, 79, 82, 58, 32, 110, 111, 32, 102, 114, 101, 101, 32, 102, 105, 108,
    101, 32, 110, 97, 109, 101, 115, 32, 116, 111, 32, 99, 114, 101, 97, 116,
    101, 32, 118, 105, 100, 101, 111, 10, 0, 0, 0, 0, 83, 101, 114, 118, 101,
    114, 32, 100, 105, 100, 110, 39, 116, 32, 104, 97, 118, 101, 32, 67, 68, 0,
    0, 0, 45, 0, 0, 0, 0, 0, 0, 0, 102, 114, 101, 101, 122, 101, 0, 0, 87, 79,
    82, 76, 68, 95, 50, 57, 0, 0, 0, 0, 0, 0, 0, 0, 118, 115, 116, 114, 32, 60,
    118, 97, 114, 105, 97, 98, 108, 101, 110, 97, 109, 101, 62, 32, 58, 32, 101,
    120, 101, 99, 117, 116, 101, 32, 97, 32, 118, 97, 114, 105, 97, 98, 108,
    101, 32, 99, 111, 109, 109, 97, 110, 100, 10, 0, 0, 0, 0, 0, 0, 0, 103, 108,
    76, 105, 110, 101, 87, 105, 100, 116, 104, 0, 0, 0, 0, 0, 98, 117, 108, 103,
    101, 0, 0, 0, 114, 95, 105, 110, 116, 101, 110, 115, 105, 116, 121, 0, 0, 0,
    0, 0, 117, 95, 83, 104, 97, 100, 111, 119, 77, 118, 112, 0, 0, 0, 0, 0, 118,
    105, 100, 101, 111, 115, 47, 118, 105, 100, 101, 111, 37, 100, 37, 100, 37,
    100, 37, 100, 46, 97, 118, 105, 0, 0, 0, 0, 0, 0, 0, 0, 46, 32, 0, 0, 0, 0,
    0, 0, 60, 60, 61, 0, 0, 0, 0, 0, 99, 114, 97, 115, 104, 0, 0, 0, 119, 105,
    110, 100, 105, 110, 103, 32, 99, 104, 111, 112, 112, 101, 100, 32, 97, 119,
    97, 121, 32, 98, 121, 32, 98, 111, 114, 100, 101, 114, 32, 112, 108, 97,
    110, 101, 115, 10, 0, 0, 87, 79, 82, 76, 68, 95, 50, 56, 0, 0, 0, 0, 0, 0,
    0, 0, 99, 109, 95, 110, 111, 65, 114, 101, 97, 115, 0, 0, 0, 0, 0, 0, 103,
    108, 67, 108, 101, 97, 114, 0, 116, 101, 120, 116, 0, 0, 0, 0, 114, 95, 109,
    97, 112, 79, 118, 101, 114, 66, 114, 105, 103, 104, 116, 66, 105, 116, 115,
    0, 0, 0, 0, 0, 117, 95, 83, 104, 97, 100, 111, 119, 77, 97, 112, 51, 0, 0,
    0, 0, 118, 105, 100, 101, 111, 115, 47, 37, 115, 46, 97, 118, 105, 0, 0, 0,
    37, 115, 46, 105, 110, 100, 101, 120, 46, 100, 97, 116, 0, 0, 0, 0, 109, 97,
    112, 110, 97, 109, 101, 0, 101, 114, 114, 111, 114, 0, 0, 0, 87, 79, 82, 76,
    68, 95, 50, 55, 0, 0, 0, 0, 0, 0, 0, 0, 103, 108, 71, 101, 116, 83, 116,
    114, 105, 110, 103, 0, 0, 0, 0, 0, 103, 108, 67, 117, 108, 108, 70, 97, 99,
    101, 0, 0, 0, 0, 0, 0, 37, 115, 32, 114, 101, 99, 117, 114, 115, 105, 118,
    101, 108, 121, 32, 105, 110, 99, 108, 117, 100, 101, 100, 0, 97, 117, 116,
    111, 115, 112, 114, 105, 116, 101, 50, 0, 0, 0, 0, 0, 114, 95, 102, 117,
    108, 108, 98, 114, 105, 103, 104, 116, 0, 0, 0, 0, 117, 95, 83, 104, 97,
    100, 111, 119, 77, 97, 112, 50, 0, 0, 0, 0, 87, 114, 111, 110, 103, 32, 74,
    80, 69, 71, 32, 108, 105, 98, 114, 97, 114, 121, 32, 118, 101, 114, 115,
    105, 111, 110, 58, 32, 108, 105, 98, 114, 97, 114, 121, 32, 105, 115, 32,
    37, 100, 44, 32, 99, 97, 108, 108, 101, 114, 32, 101, 120, 112, 101, 99,
    116, 115, 32, 37, 100, 0, 0, 0, 0, 84, 104, 101, 32, 118, 105, 100, 101,
    111, 32, 99, 111, 109, 109, 97, 110, 100, 32, 99, 97, 110, 32, 111, 110,
    108, 121, 32, 98, 101, 32, 117, 115, 101, 100, 32, 119, 104, 101, 110, 32,
    112, 108, 97, 121, 105, 110, 103, 32, 98, 97, 99, 107, 32, 100, 101, 109,
    111, 115, 10, 0, 0, 0, 0, 0, 48, 0, 0, 0, 0, 0, 0, 0, 48, 0, 0, 0, 0, 0, 0,
    0, 37, 51, 105, 58, 32, 32, 100, 101, 108, 116, 97, 58, 32, 37, 105, 10, 0,
    0, 0, 0, 0, 0, 0, 0, 82, 95, 66, 105, 110, 100, 73, 66, 79, 58, 32, 78, 85,
    76, 76, 32, 105, 98, 111, 0, 0, 0, 0, 0, 115, 101, 116, 101, 110, 118, 0, 0,
    87, 79, 82, 76, 68, 95, 50, 54, 0, 0, 0, 0, 0, 0, 0, 0, 37, 115, 58, 32,
    105, 110, 118, 97, 108, 105, 100, 32, 101, 110, 116, 105, 116, 121, 32, 110,
    117, 109, 98, 101, 114, 32, 37, 100, 44, 32, 91, 48, 44, 32, 37, 100, 93,
    10, 0, 0, 115, 108, 105, 109, 101, 0, 0, 0, 82, 95, 76, 111, 97, 100, 77,
    68, 82, 58, 32, 37, 115, 32, 104, 97, 115, 32, 98, 114, 111, 107, 101, 110,
    32, 115, 116, 114, 117, 99, 116, 117, 114, 101, 46, 10, 0, 0, 0, 0, 109,
    101, 115, 115, 97, 103, 101, 109, 111, 100, 101, 50, 0, 0, 0, 0, 103, 108,
    70, 114, 111, 110, 116, 70, 97, 99, 101, 0, 0, 0, 0, 0, 97, 117, 116, 111,
    115, 112, 114, 105, 116, 101, 0, 0, 0, 0, 0, 0, 115, 97, 121, 95, 116, 101,
    97, 109, 32, 37, 115, 0, 0, 0, 0, 0, 114, 95, 105, 103, 110, 111, 114, 101,
    68, 115, 116, 65, 108, 112, 104, 97, 0, 0, 0, 0, 0, 0, 0, 0, 117, 95, 83,
    104, 97, 100, 111, 119, 77, 97, 112, 0, 0, 0, 0, 0, 109, 111, 100, 101, 108,
    32, 105, 115, 32, 115, 101, 116, 32, 116, 111, 32, 37, 115, 10, 0, 0, 0, 0,
    0, 77, 111, 100, 101, 32, 32, 53, 58, 32, 57, 54, 48, 120, 55, 50, 48, 0, 0,
    0, 0, 0, 0, 0, 0, 76, 65, 84, 67, 32, 0, 0, 0, 110, 101, 103, 97, 116, 105,
    118, 101, 32, 118, 97, 108, 117, 101, 32, 115, 101, 116, 32, 116, 111, 32,
    122, 101, 114, 111, 0, 0, 0, 0, 0, 0, 99, 111, 109, 95, 97, 108, 116, 105,
    118, 101, 99, 0, 0, 0, 0, 0, 87, 79, 82, 76, 68, 95, 50, 53, 0, 0, 0, 0, 0,
    0, 0, 0, 35, 100, 101, 102, 105, 110, 101, 32, 85, 83, 69, 95, 86, 69, 82,
    84, 69, 88, 95, 65, 78, 73, 77, 65, 84, 73, 79, 78, 10, 0, 0, 0, 103, 108,
    66, 105, 110, 100, 66, 117, 102, 102, 101, 114, 65, 82, 66, 0, 87, 97, 114,
    110, 105, 110, 103, 58, 32, 115, 116, 101, 110, 99, 105, 108, 32, 115, 104,
    97, 100, 111, 119, 115, 32, 97, 110, 100, 32, 111, 118, 101, 114, 100, 114,
    97, 119, 32, 109, 101, 97, 115, 117, 114, 101, 109, 101, 110, 116, 32, 97,
    114, 101, 32, 109, 117, 116, 117, 97, 108, 108, 121, 32, 101, 120, 99, 108,
    117, 115, 105, 118, 101, 10, 0, 0, 0, 0, 0, 0, 0, 103, 108, 68, 105, 115,
    97, 98, 108, 101, 0, 0, 0, 0, 0, 0, 0, 82, 95, 80, 97, 114, 115, 101, 83,
    112, 97, 119, 110, 86, 97, 114, 115, 58, 32, 102, 111, 117, 110, 100, 32,
    37, 115, 32, 119, 104, 101, 110, 32, 101, 120, 112, 101, 99, 116, 105, 110,
    103, 32, 123, 0, 0, 0, 0, 0, 105, 110, 118, 97, 108, 105, 100, 32, 100, 105,
    115, 116, 97, 110, 99, 101, 32, 116, 111, 111, 32, 102, 97, 114, 32, 98, 97,
    99, 107, 0, 0, 0, 87, 65, 82, 78, 73, 78, 71, 58, 32, 77, 65, 88, 95, 83,
    72, 65, 68, 69, 82, 95, 68, 69, 70, 79, 82, 77, 83, 32, 105, 110, 32, 39,
    37, 115, 39, 10, 0, 0, 0, 0, 45, 51, 50, 48, 0, 0, 0, 0, 119, 101, 97, 112,
    111, 110, 32, 115, 116, 97, 116, 101, 32, 104, 97, 110, 100, 108, 101, 32,
    37, 100, 32, 111, 117, 116, 32, 111, 102, 32, 114, 97, 110, 103, 101, 10, 0,
    0, 0, 0, 117, 95, 83, 99, 114, 101, 101, 110, 68, 101, 112, 116, 104, 77,
    97, 112, 0, 0, 0, 0, 0, 0, 0, 0, 104, 101, 97, 100, 109, 111, 100, 101, 108,
    0, 0, 0, 0, 0, 0, 0, 105, 110, 118, 97, 108, 105, 100, 32, 109, 111, 118,
    101, 32, 115, 116, 97, 116, 101, 32, 37, 100, 10, 0, 0, 93, 37, 115, 10, 0,
    0, 0, 0, 83, 68, 76, 95, 79, 112, 101, 110, 65, 117, 100, 105, 111, 40, 41,
    32, 102, 97, 105, 108, 101, 100, 58, 32, 37, 115, 10, 0, 0, 0, 0, 0, 87, 79,
    82, 76, 68, 95, 50, 52, 0, 0, 0, 0, 0, 0, 0, 0, 99, 111, 109, 95, 117, 110,
    102, 111, 99, 117, 115, 101, 100, 0, 0, 0, 101, 120, 112, 101, 99, 116, 101,
    100, 32, 97, 32, 99, 111, 109, 109, 97, 44, 32, 102, 111, 117, 110, 100, 32,
    37, 115, 0, 0, 0, 0, 0, 0, 43, 61, 0, 0, 0, 0, 0, 0, 103, 108, 69, 110, 97,
    98, 108, 101, 0, 0, 0, 0, 0, 0, 0, 0, 116, 111, 111, 32, 102, 101, 119, 32,
    100, 101, 102, 105, 110, 101, 32, 112, 97, 114, 109, 115, 0, 0, 0, 0, 109,
    97, 120, 101, 110, 116, 105, 116, 105, 101, 115, 0, 0, 0, 0, 0, 87, 65, 82,
    78, 73, 78, 71, 58, 32, 109, 105, 115, 115, 105, 110, 103, 32, 100, 101,
    102, 111, 114, 109, 32, 112, 97, 114, 109, 32, 105, 110, 32, 115, 104, 97,
    100, 101, 114, 32, 39, 37, 115, 39, 10, 0, 0, 0, 0, 109, 111, 100, 101, 108,
    0, 0, 0, 114, 95, 115, 104, 97, 100, 111, 119, 67, 97, 115, 99, 97, 100,
    101, 90, 66, 105, 97, 115, 0, 0, 0, 0, 71, 101, 110, 101, 116, 105, 99, 80,
    97, 114, 101, 110, 116, 115, 65, 110, 100, 67, 104, 105, 108, 100, 83, 101,
    108, 101, 99, 116, 105, 111, 110, 58, 32, 116, 111, 111, 32, 102, 101, 119,
    32, 118, 97, 108, 105, 100, 32, 98, 111, 116, 115, 10, 0, 0, 0, 0, 115, 119,
    105, 116, 99, 104, 32, 97, 108, 114, 101, 97, 100, 121, 32, 104, 97, 115,
    32, 97, 32, 100, 101, 102, 97, 117, 108, 116, 0, 0, 0, 0, 117, 95, 83, 99,
    114, 101, 101, 110, 73, 109, 97, 103, 101, 77, 97, 112, 0, 0, 0, 0, 0, 0, 0,
    0, 109, 111, 114, 101, 32, 116, 104, 97, 110, 32, 37, 100, 32, 112, 114,
    111, 106, 101, 99, 116, 105, 108, 101, 115, 32, 100, 101, 102, 105, 110,
    101, 100, 32, 105, 110, 32, 37, 115, 10, 0, 99, 108, 105, 101, 110, 116, 32,
    37, 100, 58, 32, 111, 110, 32, 102, 117, 110, 99, 95, 98, 111, 98, 98, 105,
    110, 103, 32, 119, 105, 116, 104, 111, 117, 116, 32, 114, 101, 97, 99, 104,
    97, 98, 105, 108, 105, 116, 121, 10, 0, 0, 0, 0, 0, 0, 0, 0, 109, 111, 100,
    101, 108, 0, 0, 0, 98, 111, 116, 102, 105, 108, 101, 115, 0, 0, 0, 0, 0, 0,
    0, 0, 125, 0, 0, 0, 0, 0, 0, 0, 123, 0, 0, 0, 0, 0, 0, 0, 52, 48, 57, 54, 0,
    0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 65, 65, 83, 95, 66, 101, 115, 116, 82,
    101, 97, 99, 104, 97, 98, 108, 101, 65, 114, 101, 97, 58, 32, 97, 97, 115,
    32, 110, 111, 116, 32, 108, 111, 97, 100, 101, 100, 10, 0, 0, 112, 104, 121,
    115, 95, 109, 97, 120, 99, 114, 111, 117, 99, 104, 118, 101, 108, 111, 99,
    105, 116, 121, 0, 0, 87, 79, 82, 76, 68, 95, 50, 51, 0, 0, 0, 0, 0, 0, 0, 0,
    109, 97, 120, 99, 108, 105, 101, 110, 116, 115, 0, 0, 0, 0, 0, 0, 37, 54,
    100, 32, 102, 111, 114, 99, 101, 100, 32, 112, 111, 114, 116, 97, 108, 32,
    97, 114, 101, 97, 115, 10, 0, 0, 0, 0, 0, 0, 0, 0, 76, 111, 97, 100, 105,
    110, 103, 32, 118, 109, 32, 102, 105, 108, 101, 32, 37, 115, 46, 46, 46, 10,
    0, 0, 114, 111, 113, 95, 115, 105, 122, 101, 62, 54, 53, 53, 51, 54, 124,
    124, 114, 111, 113, 95, 105, 100, 61, 61, 48, 120, 49, 48, 56, 52, 10, 0,
    73, 110, 102, 111, 95, 86, 97, 108, 117, 101, 70, 111, 114, 75, 101, 121,
    58, 32, 111, 118, 101, 114, 115, 105, 122, 101, 32, 105, 110, 102, 111, 115,
    116, 114, 105, 110, 103, 0, 0, 0, 103, 108, 68, 101, 112, 116, 104, 70, 117,
    110, 99, 0, 0, 0, 0, 0, 117, 105, 95, 114, 101, 99, 111, 114, 100, 83, 80,
    68, 101, 109, 111, 0, 41, 0, 0, 0, 0, 0, 0, 0, 51, 48, 55, 50, 0, 0, 0, 0,
    105, 110, 118, 97, 108, 105, 100, 32, 99, 104, 97, 116, 32, 115, 116, 97,
    116, 101, 32, 37, 100, 10, 0, 0, 117, 95, 67, 117, 98, 101, 77, 97, 112, 0,
    0, 0, 0, 0, 0, 0, 67, 111, 117, 108, 100, 110, 39, 116, 32, 114, 101, 115,
    111, 108, 118, 101, 32, 97, 100, 100, 114, 101, 115, 115, 58, 32, 37, 115,
    10, 0, 0, 0, 67, 111, 117, 108, 100, 110, 39, 116, 32, 105, 110, 105, 116,
    105, 97, 108, 105, 122, 101, 32, 114, 101, 102, 114, 101, 115, 104, 0, 0, 0,
    0, 0, 99, 108, 95, 112, 97, 117, 115, 101, 100, 0, 0, 0, 0, 0, 0, 0, 37,
    115, 58, 114, 101, 99, 111, 110, 110, 101, 99, 116, 32, 114, 101, 106, 101,
    99, 116, 101, 100, 32, 58, 32, 116, 111, 111, 32, 115, 111, 111, 110, 10, 0,
    0, 0, 0, 0, 0, 0, 100, 101, 118, 109, 97, 112, 0, 0, 105, 110, 118, 97, 108,
    105, 100, 32, 99, 104, 97, 114, 97, 99, 116, 101, 114, 32, 37, 100, 10, 0,
    0, 0, 98, 111, 116, 95, 118, 105, 115, 117, 97, 108, 105, 122, 101, 106,
    117, 109, 112, 112, 97, 100, 115, 0, 0, 0, 32, 32, 32, 32, 37, 115, 10, 0,
    115, 95, 97, 108, 82, 111, 108, 108, 111, 102, 102, 0, 0, 0, 0, 0, 87, 79,
    82, 76, 68, 95, 50, 50, 0, 0, 0, 0, 0, 0, 0, 0, 115, 95, 109, 117, 116, 101,
    87, 104, 101, 110, 77, 105, 110, 105, 109, 105, 122, 101, 100, 0, 0, 0, 0,
    0, 100, 97, 117, 98, 52, 0, 0, 0, 87, 65, 82, 78, 73, 78, 71, 58, 32, 78,
    69, 84, 95, 73, 80, 83, 111, 99, 107, 101, 116, 58, 32, 115, 111, 99, 107,
    101, 116, 58, 32, 37, 115, 10, 0, 0, 0, 0, 0, 0, 109, 97, 120, 95, 97, 97,
    115, 108, 105, 110, 107, 115, 0, 0, 0, 0, 103, 108, 67, 108, 101, 97, 114,
    68, 101, 112, 116, 104, 102, 0, 0, 0, 37, 115, 58, 105, 108, 108, 101, 103,
    97, 108, 32, 102, 114, 97, 103, 109, 101, 110, 116, 32, 108, 101, 110, 103,
    116, 104, 10, 0, 0, 0, 0, 0, 87, 65, 82, 78, 73, 78, 71, 58, 32, 109, 105,
    115, 115, 105, 110, 103, 32, 118, 101, 99, 116, 111, 114, 32, 101, 108, 101,
    109, 101, 110, 116, 32, 105, 110, 32, 115, 104, 97, 100, 101, 114, 32, 39,
    37, 115, 39, 10, 0, 114, 95, 115, 104, 97, 100, 111, 119, 67, 97, 115, 99,
    97, 100, 101, 90, 70, 97, 114, 0, 0, 0, 0, 0, 112, 111, 115, 46, 116, 114,
    66, 97, 115, 101, 91, 50, 93, 0, 0, 0, 117, 95, 76, 101, 118, 101, 108, 115,
    77, 97, 112, 0, 0, 0, 0, 0, 37, 100, 32, 112, 111, 114, 116, 97, 108, 32,
    99, 97, 99, 104, 101, 32, 117, 112, 100, 97, 116, 101, 115, 10, 0, 0, 0, 0,
    0, 0, 0, 0, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45,
    45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 10, 0, 0, 0, 0,
    0, 0, 0, 0, 119, 114, 105, 116, 105, 110, 103, 32, 116, 111, 58, 32, 37,
    115, 10, 0, 67, 65, 80, 83, 76, 79, 67, 75, 0, 0, 0, 0, 0, 0, 0, 0, 37, 115,
    32, 119, 105, 108, 108, 32, 98, 101, 32, 99, 104, 97, 110, 103, 101, 100,
    32, 117, 112, 111, 110, 32, 114, 101, 115, 116, 97, 114, 116, 105, 110, 103,
    46, 10, 0, 0, 0, 0, 32, 32, 32, 32, 37, 115, 32, 61, 32, 34, 37, 115, 34,
    10, 0, 0, 87, 79, 82, 76, 68, 95, 50, 49, 0, 0, 0, 0, 0, 0, 0, 0, 37, 115,
    47, 37, 115, 0, 0, 0, 103, 108, 67, 108, 101, 97, 114, 68, 101, 112, 116,
    104, 0, 0, 0, 0, 109, 111, 100, 101, 108, 0, 0, 0, 87, 65, 82, 78, 73, 78,
    71, 58, 32, 109, 105, 115, 115, 105, 110, 103, 32, 112, 97, 114, 101, 110,
    116, 104, 101, 115, 105, 115, 32, 105, 110, 32, 115, 104, 97, 100, 101, 114,
    32, 39, 37, 115, 39, 10, 0, 0, 0, 0, 114, 95, 115, 104, 97, 100, 111, 119,
    67, 97, 115, 99, 97, 100, 101, 90, 78, 101, 97, 114, 0, 0, 0, 0, 117, 95,
    84, 101, 120, 116, 117, 114, 101, 77, 97, 112, 0, 0, 0, 0, 45, 45, 45, 45,
    45, 32, 73, 110, 105, 116, 105, 97, 108, 105, 122, 105, 110, 103, 32, 82,
    101, 110, 100, 101, 114, 101, 114, 32, 45, 45, 45, 45, 10, 0, 0, 0, 0, 0, 0,
    0, 102, 115, 95, 109, 97, 110, 105, 102, 101, 115, 116, 0, 0, 0, 0, 0, 87,
    79, 82, 76, 68, 95, 50, 48, 0, 0, 0, 0, 0, 0, 0, 0, 99, 115, 32, 37, 115,
    32, 34, 37, 115, 0, 0, 0, 0, 0, 0, 0, 54, 0, 0, 0, 0, 0, 0, 0, 65, 65, 83,
    32, 105, 110, 105, 116, 105, 97, 108, 105, 122, 101, 100, 46, 10, 0, 0, 0,
    0, 0, 0, 0, 103, 108, 70, 108, 117, 115, 104, 0, 40, 0, 0, 0, 0, 0, 0, 0,
    99, 97, 110, 39, 116, 32, 115, 101, 101, 107, 32, 116, 111, 32, 97, 97, 115,
    32, 108, 117, 109, 112, 10, 0, 114, 95, 115, 104, 97, 100, 111, 119, 77, 97,
    112, 83, 105, 122, 101, 0, 117, 95, 83, 112, 101, 99, 117, 108, 97, 114, 77,
    97, 112, 0, 0, 0, 65, 65, 83, 95, 69, 110, 116, 105, 116, 121, 73, 110, 102,
    111, 58, 32, 97, 97, 115, 119, 111, 114, 108, 100, 32, 110, 111, 116, 32,
    105, 110, 105, 116, 105, 97, 108, 105, 122, 101, 100, 10, 0, 0, 0, 0, 0, 0,
    0, 99, 111, 110, 115, 111, 108, 101, 0, 83, 101, 114, 118, 101, 114, 32, 99,
    114, 97, 115, 104, 101, 100, 58, 32, 37, 115, 0, 0, 0, 0, 0, 0, 112, 111,
    114, 116, 97, 108, 32, 97, 114, 101, 97, 32, 37, 100, 32, 105, 115, 32, 115,
    101,
  ],
  "i8",
  ALLOC_NONE,
  Runtime.GLOBAL_BASE + 163844
);
/* memory initializer */ allocate(
  [
    112, 101, 114, 97, 116, 105, 110, 103, 32, 109, 111, 114, 101, 32, 116, 104,
    97, 110, 32, 116, 119, 111, 32, 99, 108, 117, 115, 116, 101, 114, 115, 13,
    10, 0, 0, 0, 37, 108, 102, 32, 37, 108, 102, 32, 37, 108, 102, 0, 0, 0, 0,
    0, 102, 115, 95, 99, 100, 110, 0, 0, 87, 79, 82, 76, 68, 95, 49, 57, 0, 0,
    0, 0, 0, 0, 0, 0, 101, 120, 101, 99, 105, 110, 103, 32, 37, 115, 10, 0, 0,
    0, 0, 0, 103, 108, 70, 105, 110, 105, 115, 104, 0, 0, 0, 0, 0, 0, 0, 0, 37,
    115, 95, 37, 115, 46, 116, 103, 97, 0, 0, 0, 0, 0, 0, 0, 114, 95, 115, 104,
    97, 100, 111, 119, 70, 105, 108, 116, 101, 114, 0, 0, 117, 95, 68, 101, 108,
    117, 120, 101, 77, 97, 112, 0, 0, 0, 0, 0, 119, 104, 105, 116, 101, 0, 0, 0,
    50, 0, 0, 0, 0, 0, 0, 0, 37, 105, 32, 0, 0, 0, 0, 0, 114, 43, 98, 0, 0, 0,
    0, 0, 67, 111, 109, 95, 82, 97, 110, 100, 111, 109, 66, 121, 116, 101, 115,
    58, 32, 117, 115, 105, 110, 103, 32, 119, 101, 97, 107, 32, 114, 97, 110,
    100, 111, 109, 105, 122, 97, 116, 105, 111, 110, 10, 0, 0, 0, 0, 0, 0, 50,
    0, 0, 0, 0, 0, 0, 0, 87, 79, 82, 76, 68, 95, 49, 56, 0, 0, 0, 0, 0, 0, 0, 0,
    67, 77, 95, 76, 111, 97, 100, 77, 97, 112, 58, 32, 78, 85, 76, 76, 32, 110,
    97, 109, 101, 0, 0, 0, 103, 108, 68, 114, 97, 119, 69, 108, 101, 109, 101,
    110, 116, 115, 73, 110, 115, 116, 97, 110, 99, 101, 100, 0, 37, 115, 10, 0,
    0, 0, 0, 0, 45, 0, 0, 0, 0, 0, 0, 0, 114, 95, 115, 117, 110, 83, 104, 97,
    100, 111, 119, 115, 0, 0, 0, 0, 117, 95, 78, 111, 114, 109, 97, 108, 77, 97,
    112, 0, 0, 0, 0, 0, 103, 102, 120, 47, 50, 100, 47, 98, 105, 103, 99, 104,
    97, 114, 115, 0, 94, 49, 99, 108, 95, 97, 118, 105, 70, 114, 97, 109, 101,
    82, 97, 116, 101, 32, 109, 117, 115, 116, 32, 98, 101, 32, 62, 61, 32, 49,
    10, 0, 37, 115, 0, 0, 0, 0, 0, 0, 104, 111, 115, 116, 110, 97, 109, 101, 0,
    0, 0, 0, 0, 0, 0, 0, 32, 34, 0, 0, 0, 0, 0, 0, 87, 79, 82, 76, 68, 95, 49,
    55, 0, 0, 0, 0, 0, 0, 0, 0, 103, 108, 80, 105, 120, 101, 108, 83, 116, 111,
    114, 101, 105, 0, 0, 0, 103, 108, 68, 114, 97, 119, 65, 114, 114, 97, 121,
    115, 73, 110, 115, 116, 97, 110, 99, 101, 100, 0, 0, 0, 65, 112, 112, 108,
    105, 99, 97, 116, 105, 111, 110, 32, 116, 114, 97, 110, 115, 102, 101, 114,
    114, 101, 100, 32, 116, 111, 111, 32, 109, 97, 110, 121, 32, 115, 99, 97,
    110, 108, 105, 110, 101, 115, 0, 0, 0, 0, 0, 0, 87, 65, 82, 78, 73, 78, 71,
    58, 32, 83, 86, 95, 85, 110, 108, 105, 110, 107, 69, 110, 116, 105, 116,
    121, 58, 32, 110, 111, 116, 32, 102, 111, 117, 110, 100, 32, 105, 110, 32,
    119, 111, 114, 108, 100, 83, 101, 99, 116, 111, 114, 10, 0, 0, 0, 0, 0, 87,
    65, 82, 78, 73, 78, 71, 58, 32, 39, 115, 107, 121, 80, 97, 114, 109, 115,
    39, 32, 109, 105, 115, 115, 105, 110, 103, 32, 112, 97, 114, 97, 109, 101,
    116, 101, 114, 32, 105, 110, 32, 115, 104, 97, 100, 101, 114, 32, 39, 37,
    115, 39, 10, 0, 0, 0, 114, 95, 115, 117, 110, 108, 105, 103, 104, 116, 77,
    111, 100, 101, 0, 0, 117, 95, 76, 105, 103, 104, 116, 77, 97, 112, 0, 0, 0,
    0, 0, 0, 37, 115, 58, 32, 68, 101, 108, 116, 97, 32, 114, 101, 113, 117,
    101, 115, 116, 32, 102, 114, 111, 109, 32, 111, 117, 116, 32, 111, 102, 32,
    100, 97, 116, 101, 32, 112, 97, 99, 107, 101, 116, 46, 10, 0, 0, 0, 0, 0,
    66, 111, 103, 117, 115, 32, 109, 97, 114, 107, 101, 114, 32, 108, 101, 110,
    103, 116, 104, 0, 0, 0, 0, 0, 114, 101, 99, 111, 114, 100, 32, 37, 115, 45,
    37, 115, 45, 37, 115, 0, 35, 52, 54, 50, 32, 78, 101, 116, 99, 104, 97, 110,
    95, 84, 114, 97, 110, 115, 109, 105, 116, 78, 101, 120, 116, 70, 114, 97,
    103, 109, 101, 110, 116, 58, 32, 101, 109, 112, 116, 105, 101, 100, 32, 113,
    117, 101, 117, 101, 10, 0, 0, 0, 0, 0, 0, 0, 114, 95, 97, 108, 108, 111,
    119, 83, 111, 102, 116, 119, 97, 114, 101, 71, 76, 0, 0, 0, 0, 0, 0, 0, 45,
    45, 45, 32, 82, 95, 66, 105, 110, 100, 78, 117, 108, 108, 86, 66, 79, 32,
    45, 45, 45, 10, 0, 0, 37, 51, 105, 58, 32, 32, 117, 110, 99, 104, 97, 110,
    103, 101, 100, 58, 32, 37, 105, 10, 0, 0, 0, 0, 37, 52, 105, 32, 116, 114,
    97, 99, 101, 115, 32, 32, 40, 37, 105, 98, 32, 37, 105, 112, 41, 32, 37, 52,
    105, 32, 112, 111, 105, 110, 116, 115, 10, 0, 0, 0, 0, 0, 0, 0, 87, 79, 82,
    76, 68, 95, 49, 54, 0, 0, 0, 0, 0, 0, 0, 0, 119, 97, 116, 101, 114, 0, 0, 0,
    82, 95, 76, 111, 97, 100, 77, 68, 82, 58, 32, 72, 101, 97, 100, 101, 114,
    32, 111, 102, 32, 37, 115, 32, 105, 115, 32, 98, 114, 111, 107, 101, 110,
    46, 32, 87, 114, 111, 110, 103, 32, 102, 105, 108, 101, 115, 105, 122, 101,
    32, 100, 101, 99, 108, 97, 114, 101, 100, 33, 10, 0, 0, 0, 0, 103, 108, 86,
    101, 114, 116, 101, 120, 65, 116, 116, 114, 105, 98, 68, 105, 118, 105, 115,
    111, 114, 0, 0, 0, 73, 110, 118, 97, 108, 105, 100, 32, 83, 79, 83, 32, 112,
    97, 114, 97, 109, 101, 116, 101, 114, 115, 32, 102, 111, 114, 32, 115, 101,
    113, 117, 101, 110, 116, 105, 97, 108, 32, 74, 80, 69, 71, 0, 0, 0, 0, 0, 0,
    109, 101, 115, 115, 97, 103, 101, 109, 111, 100, 101, 0, 0, 0, 0, 0, 100,
    110, 0, 0, 0, 0, 0, 0, 114, 95, 100, 114, 97, 119, 83, 117, 110, 82, 97,
    121, 115, 0, 0, 0, 117, 95, 68, 105, 102, 102, 117, 115, 101, 77, 97, 112,
    0, 0, 0, 0, 78, 111, 116, 32, 114, 101, 99, 111, 114, 100, 105, 110, 103,
    32, 97, 32, 100, 101, 109, 111, 46, 10, 0, 0, 102, 105, 108, 101, 32, 37,
    115, 32, 115, 116, 105, 108, 108, 32, 111, 112, 101, 110, 32, 105, 110, 32,
    112, 114, 101, 99, 111, 109, 112, 105, 108, 101, 114, 10, 0, 0, 0, 0, 0, 0,
    77, 111, 100, 101, 32, 32, 52, 58, 32, 56, 48, 48, 120, 54, 48, 48, 0, 0, 0,
    0, 0, 0, 0, 0, 115, 66, 80, 84, 67, 0, 0, 0, 102, 114, 97, 109, 101, 58, 37,
    105, 32, 97, 108, 108, 58, 37, 51, 105, 32, 115, 118, 58, 37, 51, 105, 32,
    101, 118, 58, 37, 51, 105, 32, 99, 108, 58, 37, 51, 105, 32, 103, 109, 58,
    37, 51, 105, 32, 114, 102, 58, 37, 51, 105, 32, 98, 107, 58, 37, 51, 105,
    10, 0, 0, 0, 0, 0, 87, 79, 82, 76, 68, 95, 49, 53, 0, 0, 0, 0, 0, 0, 0, 0,
    35, 100, 101, 102, 105, 110, 101, 32, 85, 83, 69, 95, 84, 67, 77, 79, 68,
    10, 0, 0, 0, 0, 0, 0, 70, 66, 79, 95, 67, 114, 101, 97, 116, 101, 66, 117,
    102, 102, 101, 114, 58, 32, 105, 110, 118, 97, 108, 105, 100, 32, 102, 111,
    114, 109, 97, 116, 32, 37, 100, 10, 0, 0, 0, 0, 99, 109, 100, 32, 37, 53,
    100, 58, 32, 37, 115, 10, 0, 0, 0, 0, 71, 76, 95, 65, 82, 66, 95, 118, 101,
    114, 116, 101, 120, 95, 98, 117, 102, 102, 101, 114, 95, 111, 98, 106, 101,
    99, 116, 0, 0, 0, 0, 0, 48, 0, 0, 0, 0, 0, 0, 0, 103, 108, 71, 101, 116, 69,
    114, 114, 111, 114, 0, 0, 0, 0, 0, 0, 37, 102, 32, 37, 102, 0, 0, 0, 67,
    111, 114, 114, 117, 112, 116, 32, 74, 80, 69, 71, 32, 100, 97, 116, 97, 58,
    32, 102, 111, 117, 110, 100, 32, 109, 97, 114, 107, 101, 114, 32, 48, 120,
    37, 48, 50, 120, 32, 105, 110, 115, 116, 101, 97, 100, 32, 111, 102, 32, 82,
    83, 84, 37, 100, 0, 105, 110, 118, 97, 108, 105, 100, 32, 100, 105, 115,
    116, 97, 110, 99, 101, 32, 99, 111, 100, 101, 0, 0, 0, 117, 112, 0, 0, 0, 0,
    0, 0, 48, 46, 53, 0, 0, 0, 0, 0, 97, 99, 116, 105, 118, 101, 32, 117, 110,
    105, 102, 111, 114, 109, 58, 32, 39, 37, 115, 39, 10, 0, 0, 0, 37, 48, 52,
    100, 37, 48, 50, 100, 37, 48, 50, 100, 37, 48, 50, 100, 37, 48, 50, 100, 37,
    48, 50, 100, 0, 0, 0, 0, 0, 0, 0, 0, 70, 83, 95, 70, 105, 108, 101, 70, 111,
    114, 72, 97, 110, 100, 108, 101, 58, 32, 78, 85, 76, 76, 0, 0, 100, 101,
    100, 105, 99, 97, 116, 101, 100, 32, 115, 101, 116, 32, 116, 111, 32, 48, 0,
    0, 0, 0, 0, 0, 83, 68, 76, 32, 97, 117, 100, 105, 111, 32, 100, 114, 105,
    118, 101, 114, 32, 105, 115, 32, 34, 37, 115, 34, 46, 10, 0, 0, 0, 0, 0, 0,
    87, 79, 82, 76, 68, 95, 49, 52, 0, 0, 0, 0, 0, 0, 0, 0, 48, 46, 49, 53, 0,
    0, 0, 0, 44, 0, 0, 0, 0, 0, 0, 0, 37, 61, 0, 0, 0, 0, 0, 0, 103, 108, 82,
    101, 108, 101, 97, 115, 101, 83, 104, 97, 100, 101, 114, 67, 111, 109, 112,
    105, 108, 101, 114, 0, 41, 0, 0, 0, 0, 0, 0, 0, 80, 114, 101, 109, 97, 116,
    117, 114, 101, 32, 101, 110, 100, 32, 111, 102, 32, 74, 80, 69, 71, 32, 102,
    105, 108, 101, 0, 0, 0, 0, 0, 0, 49, 50, 56, 0, 0, 0, 0, 0, 102, 116, 0, 0,
    0, 0, 0, 0, 114, 95, 102, 111, 114, 99, 101, 83, 117, 110, 65, 109, 98, 105,
    101, 110, 116, 83, 99, 97, 108, 101, 0, 0, 99, 97, 115, 101, 0, 0, 0, 0,
    100, 101, 118, 101, 108, 111, 112, 101, 114, 0, 0, 0, 0, 0, 0, 0, 112, 114,
    111, 106, 101, 99, 116, 105, 108, 101, 105, 110, 102, 111, 0, 0, 37, 115, 0,
    0, 0, 0, 0, 0, 99, 108, 105, 101, 110, 116, 32, 37, 100, 58, 32, 111, 110,
    32, 102, 117, 110, 99, 95, 112, 108, 97, 116, 32, 119, 105, 116, 104, 111,
    117, 116, 32, 114, 101, 97, 99, 104, 97, 98, 105, 108, 105, 116, 121, 10, 0,
    0, 0, 117, 115, 101, 114, 105, 110, 102, 111, 32, 34, 37, 115, 34, 0, 0, 0,
    102, 111, 117, 110, 100, 32, 37, 115, 0, 0, 0, 0, 0, 0, 0, 0, 109, 97, 120,
    95, 105, 116, 101, 109, 105, 110, 102, 111, 32, 61, 32, 37, 100, 10, 0, 0,
    0, 0, 0, 0, 123, 0, 0, 0, 0, 0, 0, 0, 115, 107, 105, 108, 108, 0, 0, 0, 109,
    97, 120, 95, 114, 111, 117, 116, 105, 110, 103, 99, 97, 99, 104, 101, 0, 0,
    0, 0, 0, 0, 0, 0, 70, 83, 95, 70, 105, 108, 101, 70, 111, 114, 72, 97, 110,
    100, 108, 101, 58, 32, 99, 97, 110, 39, 116, 32, 103, 101, 116, 32, 70, 73,
    76, 69, 32, 111, 110, 32, 122, 105, 112, 32, 102, 105, 108, 101, 0, 0, 0, 0,
    100, 101, 100, 105, 99, 97, 116, 101, 100, 0, 0, 0, 0, 0, 0, 0, 116, 114,
    105, 103, 103, 101, 114, 95, 112, 117, 115, 104, 32, 110, 111, 116, 32, 105,
    110, 32, 97, 110, 121, 32, 106, 117, 109, 112, 32, 112, 97, 100, 32, 97,
    114, 101, 97, 10, 0, 0, 112, 104, 121, 115, 95, 109, 97, 120, 119, 97, 108,
    107, 118, 101, 108, 111, 99, 105, 116, 121, 0, 0, 0, 0, 87, 79, 82, 76, 68,
    95, 49, 51, 0, 0, 0, 0, 0, 0, 0, 0, 108, 111, 97, 100, 101, 100, 32, 37,
    115, 10, 0, 0, 0, 0, 0, 0, 97, 114, 101, 97, 32, 37, 100, 32, 105, 115, 32,
    97, 32, 102, 111, 114, 99, 101, 100, 32, 112, 111, 114, 116, 97, 108, 32,
    97, 114, 101, 97, 13, 10, 0, 0, 0, 0, 0, 0, 0, 118, 109, 47, 37, 115, 46,
    113, 118, 109, 0, 0, 0, 0, 0, 0, 0, 32, 46, 46, 46, 32, 0, 0, 0, 67, 73, 78,
    95, 72, 97, 110, 100, 108, 101, 70, 111, 114, 86, 105, 100, 101, 111, 58,
    32, 110, 111, 110, 101, 32, 102, 114, 101, 101, 0, 0, 0, 103, 108, 83, 104,
    97, 100, 101, 114, 66, 105, 110, 97, 114, 121, 0, 0, 69, 82, 82, 79, 82, 58,
    32, 99, 111, 117, 108, 100, 110, 39, 116, 32, 111, 112, 101, 110, 46, 10, 0,
    0, 87, 97, 114, 110, 105, 110, 103, 58, 32, 117, 110, 107, 110, 111, 119,
    110, 32, 74, 70, 73, 70, 32, 114, 101, 118, 105, 115, 105, 111, 110, 32,
    110, 117, 109, 98, 101, 114, 32, 37, 100, 46, 37, 48, 50, 100, 0, 0, 0, 108,
    102, 0, 0, 0, 0, 0, 0, 114, 95, 102, 111, 114, 99, 101, 83, 117, 110, 76,
    105, 103, 104, 116, 83, 99, 97, 108, 101, 0, 0, 0, 0, 35, 108, 105, 110,
    101, 32, 48, 10, 0, 0, 0, 0, 0, 0, 0, 0, 37, 115, 32, 104, 97, 115, 32, 110,
    111, 32, 73, 80, 118, 54, 32, 97, 100, 100, 114, 101, 115, 115, 46, 10, 0,
    0, 0, 0, 0, 0, 0, 0, 117, 105, 95, 115, 105, 110, 103, 108, 101, 80, 108,
    97, 121, 101, 114, 65, 99, 116, 105, 118, 101, 0, 0, 0, 109, 97, 112, 95,
    114, 101, 115, 116, 97, 114, 116, 32, 48, 0, 0, 0, 10, 83, 101, 114, 118,
    101, 114, 32, 99, 111, 110, 110, 101, 99, 116, 105, 111, 110, 32, 116, 105,
    109, 101, 100, 32, 111, 117, 116, 46, 10, 0, 0, 32, 105, 110, 116, 101, 103,
    101, 114, 0, 0, 0, 0, 0, 0, 0, 0, 86, 77, 95, 67, 114, 101, 97, 116, 101,
    32, 111, 110, 32, 103, 97, 109, 101, 32, 102, 97, 105, 108, 101, 100, 0, 0,
    0, 0, 0, 0, 0, 0, 113, 112, 111, 114, 116, 0, 0, 0, 109, 97, 112, 0, 0, 0,
    0, 0, 70, 83, 95, 70, 105, 108, 101, 70, 111, 114, 72, 97, 110, 100, 108,
    101, 58, 32, 111, 117, 116, 32, 111, 102, 32, 114, 97, 110, 103, 101, 0, 0,
    50, 0, 0, 0, 0, 0, 0, 0, 72, 105, 116, 99, 104, 32, 119, 97, 114, 110, 105,
    110, 103, 58, 32, 37, 105, 32, 109, 115, 101, 99, 32, 102, 114, 97, 109,
    101, 32, 116, 105, 109, 101, 10, 0, 0, 0, 0, 0, 0, 49, 48, 50, 52, 0, 0, 0,
    0, 87, 79, 82, 76, 68, 95, 49, 50, 0, 0, 0, 0, 0, 0, 0, 0, 97, 100, 112, 99,
    109, 0, 0, 0, 79, 112, 101, 110, 105, 110, 103, 32, 73, 80, 32, 115, 111,
    99, 107, 101, 116, 58, 32, 48, 46, 48, 46, 48, 46, 48, 58, 37, 105, 10, 0,
    0, 103, 108, 68, 114, 97, 119, 69, 108, 101, 109, 101, 110, 116, 115, 0, 0,
    37, 115, 58, 68, 114, 111, 112, 112, 101, 100, 32, 97, 32, 109, 101, 115,
    115, 97, 103, 101, 32, 102, 114, 97, 103, 109, 101, 110, 116, 10, 0, 0, 67,
    111, 114, 114, 117, 112, 116, 32, 74, 80, 69, 71, 32, 100, 97, 116, 97, 58,
    32, 98, 97, 100, 32, 72, 117, 102, 102, 109, 97, 110, 32, 99, 111, 100, 101,
    0, 0, 0, 0, 0, 98, 107, 0, 0, 0, 0, 0, 0, 49, 46, 48, 0, 0, 0, 0, 0, 112,
    111, 115, 46, 116, 114, 68, 101, 108, 116, 97, 91, 49, 93, 0, 0, 35, 105,
    102, 110, 100, 101, 102, 32, 114, 95, 70, 66, 117, 102, 83, 99, 97, 108,
    101, 10, 35, 100, 101, 102, 105, 110, 101, 32, 114, 95, 70, 66, 117, 102,
    83, 99, 97, 108, 101, 32, 118, 101, 99, 50, 40, 37, 102, 44, 32, 37, 102,
    41, 10, 35, 101, 110, 100, 105, 102, 10, 0, 0, 0, 0, 107, 105, 99, 107, 0,
    0, 0, 0, 37, 115, 58, 115, 101, 113, 117, 101, 110, 99, 101, 100, 32, 112,
    97, 99, 107, 101, 116, 32, 119, 105, 116, 104, 111, 117, 116, 32, 99, 111,
    110, 110, 101, 99, 116, 105, 111, 110, 10, 0, 32, 102, 108, 111, 97, 116, 0,
    0, 70, 83, 95, 83, 86, 95, 70, 79, 112, 101, 110, 70, 105, 108, 101, 87,
    114, 105, 116, 101, 58, 32, 37, 115, 10, 0, 0, 0, 0, 0, 0, 0, 67, 79, 77,
    77, 65, 78, 68, 0, 37, 115, 32, 105, 115, 32, 119, 114, 105, 116, 101, 32,
    112, 114, 111, 116, 101, 99, 116, 101, 100, 46, 10, 0, 37, 115, 58, 32, 78,
    111, 116, 32, 97, 108, 108, 111, 119, 101, 100, 32, 116, 111, 32, 109, 97,
    110, 105, 112, 117, 108, 97, 116, 101, 32, 39, 37, 115, 39, 32, 100, 117,
    101, 32, 116, 111, 32, 37, 115, 32, 101, 120, 116, 101, 110, 115, 105, 111,
    110, 0, 0, 87, 114, 105, 116, 105, 110, 103, 32, 37, 115, 46, 10, 0, 0, 0,
    0, 87, 79, 82, 76, 68, 95, 49, 49, 0, 0, 0, 0, 0, 0, 0, 0, 98, 111, 116, 95,
    100, 101, 98, 117, 103, 0, 0, 0, 0, 0, 0, 0, 103, 108, 68, 114, 97, 119, 65,
    114, 114, 97, 121, 115, 0, 0, 0, 0, 67, 111, 114, 114, 117, 112, 116, 32,
    74, 80, 69, 71, 32, 100, 97, 116, 97, 58, 32, 112, 114, 101, 109, 97, 116,
    117, 114, 101, 32, 101, 110, 100, 32, 111, 102, 32, 100, 97, 116, 97, 32,
    115, 101, 103, 109, 101, 110, 116, 0, 0, 0, 0, 0, 0, 0, 0, 114, 116, 0, 0,
    0, 0, 0, 0, 114, 95, 102, 111, 114, 99, 101, 83, 117, 110, 77, 97, 112, 76,
    105, 103, 104, 116, 83, 99, 97, 108, 101, 0, 35, 105, 102, 110, 100, 101,
    102, 32, 116, 101, 120, 101, 110, 118, 95, 116, 10, 35, 100, 101, 102, 105,
    110, 101, 32, 116, 101, 120, 101, 110, 118, 95, 116, 10, 35, 100, 101, 102,
    105, 110, 101, 32, 84, 69, 88, 69, 78, 86, 95, 77, 79, 68, 85, 76, 65, 84,
    69, 32, 37, 105, 10, 35, 100, 101, 102, 105, 110, 101, 32, 84, 69, 88, 69,
    78, 86, 95, 65, 68, 68, 32, 37, 105, 10, 35, 100, 101, 102, 105, 110, 101,
    32, 84, 69, 88, 69, 78, 86, 95, 82, 69, 80, 76, 65, 67, 69, 32, 37, 105, 10,
    35, 101, 110, 100, 105, 102, 10, 0, 0, 0, 0, 37, 115, 58, 32, 82, 117, 110,
    116, 32, 112, 97, 99, 107, 101, 116, 10, 0, 0, 0, 0, 0, 0, 0, 0, 32, 117,
    110, 115, 105, 103, 110, 101, 100, 0, 0, 0, 0, 0, 0, 0, 49, 0, 0, 0, 0, 0,
    0, 0, 79, 110, 108, 121, 32, 79, 103, 103, 32, 79, 112, 117, 115, 32, 102,
    105, 108, 101, 115, 32, 119, 105, 116, 104, 32, 111, 110, 101, 32, 115, 116,
    114, 101, 97, 109, 32, 97, 114, 101, 32, 115, 117, 112, 112, 111, 114, 116,
    10, 0, 0, 0, 0, 0, 0, 0, 0, 46, 113, 118, 109, 0, 0, 0, 0, 46, 99, 102, 103,
    0, 0, 0, 0, 94, 49, 69, 82, 82, 79, 82, 58, 32, 73, 110, 99, 111, 114, 114,
    101, 99, 116, 47, 117, 110, 115, 117, 112, 112, 111, 114, 116, 101, 100, 32,
    102, 111, 114, 109, 97, 116, 32, 105, 110, 32, 34, 37, 115, 34, 10, 0, 0,
    87, 79, 82, 76, 68, 95, 49, 48, 0, 0, 0, 0, 0, 0, 0, 0, 98, 99, 115, 48, 0,
    0, 0, 0, 37, 115, 46, 37, 115, 0, 0, 0, 103, 108, 68, 105, 115, 97, 98, 108,
    101, 86, 101, 114, 116, 101, 120, 65, 116, 116, 114, 105, 98, 65, 114, 114,
    97, 121, 0, 0, 0, 0, 0, 0, 67, 111, 114, 114, 117, 112, 116, 32, 74, 80, 69,
    71, 32, 100, 97, 116, 97, 58, 32, 37, 117, 32, 101, 120, 116, 114, 97, 110,
    101, 111, 117, 115, 32, 98, 121, 116, 101, 115, 32, 98, 101, 102, 111, 114,
    101, 32, 109, 97, 114, 107, 101, 114, 32, 48, 120, 37, 48, 50, 120, 0, 0, 0,
    0, 0, 87, 65, 82, 78, 73, 78, 71, 58, 32, 117, 110, 107, 110, 111, 119, 110,
    32, 103, 101, 110, 101, 114, 97, 108, 32, 115, 104, 97, 100, 101, 114, 32,
    112, 97, 114, 97, 109, 101, 116, 101, 114, 32, 39, 37, 115, 39, 32, 105,
    110, 32, 39, 37, 115, 39, 10, 0, 114, 95, 102, 111, 114, 99, 101, 83, 117,
    110, 0, 0, 0, 0, 0, 0, 35, 105, 102, 110, 100, 101, 102, 32, 97, 108, 112,
    104, 97, 84, 101, 115, 116, 95, 116, 10, 35, 100, 101, 102, 105, 110, 101,
    32, 97, 108, 112, 104, 97, 84, 101, 115, 116, 95, 116, 10, 35, 100, 101,
    102, 105, 110, 101, 32, 65, 84, 69, 83, 84, 95, 71, 84, 95, 48, 32, 37, 105,
    10, 35, 100, 101, 102, 105, 110, 101, 32, 65, 84, 69, 83, 84, 95, 76, 84,
    95, 56, 48, 32, 37, 105, 10, 35, 100, 101, 102, 105, 110, 101, 32, 65, 84,
    69, 83, 84, 95, 71, 69, 95, 56, 48, 32, 37, 105, 10, 35, 101, 110, 100, 105,
    102, 10, 0, 0, 0, 0, 0, 32, 108, 111, 110, 103, 0, 0, 0, 85, 110, 107, 110,
    111, 119, 110, 32, 99, 111, 110, 110, 101, 99, 116, 105, 111, 110, 108, 101,
    115, 115, 32, 112, 97, 99, 107, 101, 116, 32, 99, 111, 109, 109, 97, 110,
    100, 46, 10, 0, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42,
    42, 42, 42, 42, 42, 10, 69, 82, 82, 79, 82, 58, 32, 37, 115, 10, 42, 42, 42,
    42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 10, 0,
    0, 0, 0, 46, 106, 115, 0, 0, 0, 0, 0, 85, 115, 97, 103, 101, 58, 32, 119,
    114, 105, 116, 101, 99, 111, 110, 102, 105, 103, 32, 60, 102, 105, 108, 101,
    110, 97, 109, 101, 62, 10, 0, 0, 85, 115, 97, 103, 101, 58, 32, 109, 117,
    115, 105, 99, 32, 60, 109, 117, 115, 105, 99, 102, 105, 108, 101, 62, 32,
    91, 108, 111, 111, 112, 102, 105, 108, 101, 93, 10, 0, 0, 0, 0, 87, 79, 82,
    76, 68, 95, 57, 0, 56, 0, 0, 0, 0, 0, 0, 0, 99, 111, 117, 108, 100, 110, 39,
    116, 32, 101, 120, 101, 99, 32, 37, 115, 10, 0, 0, 0, 0, 0, 0, 0, 103, 108,
    69, 110, 97, 98, 108, 101, 86, 101, 114, 116, 101, 120, 65, 116, 116, 114,
    105, 98, 65, 114, 114, 97, 121, 0, 0, 0, 0, 0, 0, 0, 73, 110, 99, 111, 110,
    115, 105, 115, 116, 101, 110, 116, 32, 112, 114, 111, 103, 114, 101, 115,
    115, 105, 111, 110, 32, 115, 101, 113, 117, 101, 110, 99, 101, 32, 102, 111,
    114, 32, 99, 111, 109, 112, 111, 110, 101, 110, 116, 32, 37, 100, 32, 99,
    111, 101, 102, 102, 105, 99, 105, 101, 110, 116, 32, 37, 100, 0, 0, 0, 0, 0,
    0, 0, 115, 111, 114, 116, 0, 0, 0, 0, 114, 95, 103, 101, 110, 78, 111, 114,
    109, 97, 108, 77, 97, 112, 115, 0, 35, 105, 102, 110, 100, 101, 102, 32, 97,
    108, 112, 104, 97, 71, 101, 110, 95, 116, 10, 35, 100, 101, 102, 105, 110,
    101, 32, 97, 108, 112, 104, 97, 71, 101, 110, 95, 116, 10, 35, 100, 101,
    102, 105, 110, 101, 32, 65, 71, 69, 78, 95, 76, 73, 71, 72, 84, 73, 78, 71,
    95, 83, 80, 69, 67, 85, 76, 65, 82, 32, 37, 105, 10, 35, 100, 101, 102, 105,
    110, 101, 32, 65, 71, 69, 78, 95, 80, 79, 82, 84, 65, 76, 32, 37, 105, 10,
    35, 101, 110, 100, 105, 102, 10, 0, 0, 98, 105, 110, 97, 114, 121, 0, 0,
    103, 101, 116, 115, 101, 114, 118, 101, 114, 115, 69, 120, 116, 82, 101,
    115, 112, 111, 110, 115, 101, 0, 0, 0, 115, 111, 117, 110, 100, 32, 115,
    121, 115, 116, 101, 109, 32, 110, 111, 116, 32, 115, 116, 97, 114, 116, 101,
    100, 10, 0, 0, 0, 0, 0, 0, 0, 70, 83, 95, 72, 97, 110, 100, 108, 101, 70,
    111, 114, 70, 105, 108, 101, 58, 32, 110, 111, 110, 101, 32, 102, 114, 101,
    101, 0, 0, 0, 0, 0, 113, 51, 99, 111, 110, 102, 105, 103, 46, 99, 102, 103,
    0, 0, 0, 0, 40, 37, 105, 41, 0, 0, 0, 0, 99, 109, 95, 100, 101, 98, 117,
    103, 83, 105, 122, 101, 0, 0, 0, 0, 87, 79, 82, 76, 68, 95, 56, 0, 80, 97,
    114, 115, 101, 77, 101, 115, 104, 58, 32, 77, 65, 88, 95, 80, 65, 84, 67,
    72, 95, 86, 69, 82, 84, 83, 0, 0, 0, 0, 0, 0, 103, 108, 86, 101, 114, 116,
    101, 120, 65, 116, 116, 114, 105, 98, 80, 111, 105, 110, 116, 101, 114, 0,
    0, 0, 67, 111, 114, 114, 117, 112, 116, 32, 74, 80, 69, 71, 32, 100, 97,
    116, 97, 58, 32, 98, 97, 100, 32, 97, 114, 105, 116, 104, 109, 101, 116,
    105, 99, 32, 99, 111, 100, 101, 0, 0, 87, 65, 82, 78, 73, 78, 71, 58, 32,
    105, 110, 118, 97, 108, 105, 100, 32, 99, 117, 108, 108, 32, 112, 97, 114,
    109, 32, 39, 37, 115, 39, 32, 105, 110, 32, 115, 104, 97, 100, 101, 114, 32,
    39, 37, 115, 39, 10, 0, 114, 95, 105, 109, 97, 103, 101, 85, 112, 115, 97,
    109, 112, 108, 101, 84, 121, 112, 101, 0, 0, 0, 0, 0, 35, 105, 102, 110,
    100, 101, 102, 32, 99, 111, 108, 111, 114, 71, 101, 110, 95, 116, 10, 35,
    100, 101, 102, 105, 110, 101, 32, 99, 111, 108, 111, 114, 71, 101, 110, 95,
    116, 10, 35, 100, 101, 102, 105, 110, 101, 32, 67, 71, 69, 78, 95, 76, 73,
    71, 72, 84, 73, 78, 71, 95, 68, 73, 70, 70, 85, 83, 69, 32, 37, 105, 10, 35,
    101, 110, 100, 105, 102, 10, 0, 0, 111, 99, 116, 97, 108, 0, 0, 0, 103, 101,
    116, 115, 101, 114, 118, 101, 114, 115, 82, 101, 115, 112, 111, 110, 115,
    101, 0, 0, 0, 0, 0, 0, 108, 111, 111, 112, 98, 97, 99, 107, 0, 0, 0, 0, 0,
    0, 0, 0, 85, 115, 101, 114, 32, 73, 110, 116, 101, 114, 102, 97, 99, 101,
    32, 105, 115, 32, 118, 101, 114, 115, 105, 111, 110, 32, 37, 100, 44, 32,
    101, 120, 112, 101, 99, 116, 101, 100, 32, 37, 100, 0, 0, 0, 0, 0, 0, 0, 37,
    100, 32, 102, 105, 108, 101, 115, 32, 105, 110, 32, 112, 107, 51, 32, 102,
    105, 108, 101, 115, 10, 0, 0, 47, 47, 32, 103, 101, 110, 101, 114, 97, 116,
    101, 100, 32, 98, 121, 32, 113, 117, 97, 107, 101, 44, 32, 100, 111, 32,
    110, 111, 116, 32, 109, 111, 100, 105, 102, 121, 10, 0, 0, 0, 87, 79, 82,
    76, 68, 95, 55, 0, 114, 95, 97, 110, 97, 103, 108, 121, 112, 104, 77, 111,
    100, 101, 0, 0, 103, 108, 68, 101, 116, 97, 99, 104, 83, 104, 97, 100, 101,
    114, 0, 0, 48, 0, 0, 0, 0, 0, 0, 0, 103, 108, 82, 111, 116, 97, 116, 101,
    102, 0, 0, 0, 0, 0, 0, 0, 85, 110, 107, 110, 111, 119, 110, 32, 65, 100,
    111, 98, 101, 32, 99, 111, 108, 111, 114, 32, 116, 114, 97, 110, 115, 102,
    111, 114, 109, 32, 99, 111, 100, 101, 32, 37, 100, 0, 0, 0, 98, 97, 99, 107,
    115, 105, 100, 101, 100, 0, 0, 0, 0, 0, 0, 0, 114, 95, 105, 109, 97, 103,
    101, 85, 112, 115, 97, 109, 112, 108, 101, 77, 97, 120, 83, 105, 122, 101,
    0, 0, 35, 105, 102, 110, 100, 101, 102, 32, 116, 99, 71, 101, 110, 95, 116,
    10, 35, 100, 101, 102, 105, 110, 101, 32, 116, 99, 71, 101, 110, 95, 116,
    10, 35, 100, 101, 102, 105, 110, 101, 32, 84, 67, 71, 69, 78, 95, 76, 73,
    71, 72, 84, 77, 65, 80, 32, 37, 105, 10, 35, 100, 101, 102, 105, 110, 101,
    32, 84, 67, 71, 69, 78, 95, 84, 69, 88, 84, 85, 82, 69, 32, 37, 105, 10, 35,
    100, 101, 102, 105, 110, 101, 32, 84, 67, 71, 69, 78, 95, 69, 78, 86, 73,
    82, 79, 78, 77, 69, 78, 84, 95, 77, 65, 80, 80, 69, 68, 32, 37, 105, 10, 35,
    100, 101, 102, 105, 110, 101, 32, 84, 67, 71, 69, 78, 95, 70, 79, 71, 32,
    37, 105, 10, 35, 100, 101, 102, 105, 110, 101, 32, 84, 67, 71, 69, 78, 95,
    86, 69, 67, 84, 79, 82, 32, 37, 105, 10, 35, 101, 110, 100, 105, 102, 10, 0,
    0, 0, 0, 0, 66, 111, 103, 117, 115, 32, 74, 80, 69, 71, 32, 99, 111, 108,
    111, 114, 115, 112, 97, 99, 101, 0, 0, 0, 112, 114, 105, 110, 116, 0, 0, 0,
    71, 76, 95, 82, 69, 78, 68, 69, 82, 69, 82, 58, 32, 37, 115, 10, 0, 0, 0, 0,
    0, 0, 0, 0, 45, 45, 45, 32, 82, 95, 66, 105, 110, 100, 86, 66, 79, 40, 32,
    37, 115, 32, 41, 32, 45, 45, 45, 10, 0, 0, 0, 0, 0, 0, 0, 0, 67, 76, 95, 80,
    97, 114, 115, 101, 80, 97, 99, 107, 101, 116, 69, 110, 116, 105, 116, 105,
    101, 115, 58, 32, 101, 110, 100, 32, 111, 102, 32, 109, 101, 115, 115, 97,
    103, 101, 0, 0, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45,
    45, 45, 45, 45, 45, 45, 45, 10, 0, 67, 111, 117, 108, 100, 110, 39, 116, 32,
    119, 114, 105, 116, 101, 32, 37, 115, 46, 10, 0, 0, 0, 0, 0, 87, 79, 82, 76,
    68, 95, 54, 0, 117, 110, 100, 101, 114, 119, 97, 116, 101, 114, 0, 0, 0, 0,
    0, 0, 82, 95, 76, 111, 97, 100, 77, 68, 82, 58, 32, 37, 115, 32, 104, 97,
    115, 32, 119, 114, 111, 110, 103, 32, 118, 101, 114, 115, 105, 111, 110, 32,
    40, 37, 105, 32, 115, 104, 111, 117, 108, 100, 32, 98, 101, 32, 37, 105, 41,
    10, 0, 0, 0, 0, 0, 0, 103, 108, 70, 114, 117, 115, 116, 117, 109, 0, 0, 0,
    0, 0, 0, 0, 79, 98, 116, 97, 105, 110, 101, 100, 32, 88, 77, 83, 32, 104,
    97, 110, 100, 108, 101, 32, 37, 117, 0, 0, 98, 97, 99, 107, 115, 105, 100,
    101, 0, 0, 0, 0, 0, 0, 0, 0, 114, 95, 105, 109, 97, 103, 101, 85, 112, 115,
    97, 109, 112, 108, 101, 0, 35, 105, 102, 110, 100, 101, 102, 32, 100, 101,
    102, 111, 114, 109, 71, 101, 110, 95, 116, 10, 35, 100, 101, 102, 105, 110,
    101, 32, 100, 101, 102, 111, 114, 109, 71, 101, 110, 95, 116, 10, 35, 100,
    101, 102, 105, 110, 101, 32, 68, 71, 69, 78, 95, 87, 65, 86, 69, 95, 83, 73,
    78, 32, 37, 105, 10, 35, 100, 101, 102, 105, 110, 101, 32, 68, 71, 69, 78,
    95, 87, 65, 86, 69, 95, 83, 81, 85, 65, 82, 69, 32, 37, 105, 10, 35, 100,
    101, 102, 105, 110, 101, 32, 68, 71, 69, 78, 95, 87, 65, 86, 69, 95, 84, 82,
    73, 65, 78, 71, 76, 69, 32, 37, 105, 10, 35, 100, 101, 102, 105, 110, 101,
    32, 68, 71, 69, 78, 95, 87, 65, 86, 69, 95, 83, 65, 87, 84, 79, 79, 84, 72,
    32, 37, 105, 10, 35, 100, 101, 102, 105, 110, 101, 32, 68, 71, 69, 78, 95,
    87, 65, 86, 69, 95, 73, 78, 86, 69, 82, 83, 69, 95, 83, 65, 87, 84, 79, 79,
    84, 72, 32, 37, 105, 10, 35, 100, 101, 102, 105, 110, 101, 32, 68, 71, 69,
    78, 95, 66, 85, 76, 71, 69, 32, 37, 105, 10, 35, 100, 101, 102, 105, 110,
    101, 32, 68, 71, 69, 78, 95, 77, 79, 86, 69, 32, 37, 105, 10, 35, 101, 110,
    100, 105, 102, 10, 0, 0, 0, 0, 0, 0, 0, 116, 111, 103, 103, 108, 101, 109,
    101, 110, 117, 0, 0, 0, 0, 0, 0, 109, 111, 116, 100, 0, 0, 0, 0, 77, 111,
    100, 101, 32, 32, 51, 58, 32, 54, 52, 48, 120, 52, 56, 48, 0, 0, 0, 0, 0, 0,
    0, 0, 77, 83, 71, 95, 87, 114, 105, 116, 101, 66, 105, 116, 115, 58, 32, 98,
    97, 100, 32, 98, 105, 116, 115, 32, 37, 105, 0, 0, 0, 0, 0, 0, 37, 48, 50,
    88, 0, 0, 0, 0, 102, 115, 95, 98, 97, 115, 101, 103, 97, 109, 101, 0, 0, 0,
    0, 0, 115, 68, 88, 84, 53, 0, 0, 0, 99, 111, 109, 95, 104, 111, 109, 101,
    112, 97, 116, 104, 0, 0, 0, 0, 87, 79, 82, 76, 68, 95, 53, 0, 35, 100, 101,
    102, 105, 110, 101, 32, 85, 83, 69, 95, 84, 67, 71, 69, 78, 10, 0, 0, 0, 0,
    0, 0, 70, 66, 79, 95, 67, 114, 101, 97, 116, 101, 58, 32, 77, 65, 88, 95,
    70, 66, 79, 83, 32, 104, 105, 116, 0, 0, 0, 0, 0, 0, 0, 0, 103, 108, 68,
    105, 115, 97, 98, 108, 101, 86, 101, 114, 116, 101, 120, 65, 116, 116, 114,
    105, 98, 65, 114, 114, 97, 121, 65, 82, 66, 0, 0, 0, 114, 95, 109, 101, 97,
    115, 117, 114, 101, 79, 118, 101, 114, 100, 114, 97, 119, 0, 0, 0, 0, 0, 0,
    0, 103, 108, 76, 111, 97, 100, 77, 97, 116, 114, 105, 120, 102, 0, 0, 0, 97,
    117, 116, 111, 69, 120, 112, 111, 115, 117, 114, 101, 77, 105, 110, 77, 97,
    120, 0, 0, 0, 0, 0, 0, 70, 114, 101, 101, 100, 32, 88, 77, 83, 32, 104, 97,
    110, 100, 108, 101, 32, 37, 117, 0, 0, 0, 0, 0, 105, 110, 118, 97, 108, 105,
    100, 32, 108, 105, 116, 101, 114, 97, 108, 47, 108, 101, 110, 103, 116, 104,
    32, 99, 111, 100, 101, 0, 0, 0, 0, 0, 98, 97, 99, 107, 0, 0, 0, 0, 114, 95,
    109, 101, 114, 103, 101, 76, 105, 103, 104, 116, 109, 97, 112, 115, 0, 0, 0,
    0, 0, 0, 0, 0, 35, 105, 102, 110, 100, 101, 102, 32, 77, 95, 80, 73, 10, 35,
    100, 101, 102, 105, 110, 101, 32, 77, 95, 80, 73, 32, 51, 46, 49, 52, 49,
    53, 57, 50, 54, 53, 51, 53, 56, 57, 55, 57, 51, 50, 51, 56, 52, 54, 10, 35,
    101, 110, 100, 105, 102, 10, 0, 0, 0, 0, 0, 0, 0, 0, 101, 120, 112, 101, 99,
    116, 101, 100, 32, 97, 32, 37, 115, 44, 32, 102, 111, 117, 110, 100, 32, 37,
    115, 0, 107, 101, 121, 65, 117, 116, 104, 111, 114, 105, 122, 101, 0, 0, 0,
    0, 102, 115, 95, 99, 111, 109, 112, 108, 101, 116, 101, 77, 97, 110, 105,
    102, 101, 115, 116, 0, 0, 0, 0, 0, 98, 97, 115, 101, 113, 51, 0, 0, 40, 85,
    78, 75, 78, 79, 87, 78, 41, 0, 0, 0, 0, 0, 0, 0, 87, 79, 82, 76, 68, 95, 52,
    0, 106, 111, 121, 95, 116, 104, 114, 101, 115, 104, 111, 108, 100, 0, 0, 0,
    66, 85, 71, 58, 32, 110, 111, 32, 115, 117, 98, 32, 115, 116, 114, 117, 99,
    116, 117, 114, 101, 32, 100, 101, 102, 105, 110, 101, 100, 0, 0, 0, 47, 61,
    0, 0, 0, 0, 0, 0, 103, 108, 76, 111, 97, 100, 73, 100, 101, 110, 116, 105,
    116, 121, 0, 0, 116, 111, 111, 32, 109, 97, 110, 121, 32, 99, 111, 109, 109,
    97, 39, 115, 0, 0, 0, 0, 0, 0, 0, 0, 85, 110, 114, 101, 99, 111, 103, 110,
    105, 122, 101, 100, 32, 99, 111, 109, 112, 111, 110, 101, 110, 116, 32, 73,
    68, 115, 32, 37, 100, 32, 37, 100, 32, 37, 100, 44, 32, 97, 115, 115, 117,
    109, 105, 110, 103, 32, 89, 67, 98, 67, 114, 0, 0, 0, 0, 0, 109, 97, 120,
    99, 108, 105, 101, 110, 116, 115, 0, 0, 0, 0, 0, 0, 100, 105, 115, 97, 98,
    108, 101, 0, 114, 95, 114, 101, 99, 97, 108, 99, 77, 68, 51, 78, 111, 114,
    109, 97, 108, 115, 0, 0, 0, 0, 0, 0, 100, 101, 102, 97, 117, 108, 116, 0,
    99, 111, 117, 108, 100, 110, 39, 116, 32, 108, 111, 97, 100, 33, 10, 0, 119,
    101, 97, 112, 111, 110, 32, 105, 110, 102, 111, 32, 110, 117, 109, 98, 101,
    114, 32, 37, 100, 32, 111, 117, 116, 32, 111, 102, 32, 114, 97, 110, 103,
    101, 32, 105, 110, 32, 37, 115, 10, 0, 0, 0, 0, 0, 0, 0, 116, 114, 97, 118,
    101, 108, 32, 116, 121, 112, 101, 32, 37, 100, 32, 110, 111, 116, 32, 105,
    109, 112, 108, 101, 109, 101, 110, 116, 101, 100, 32, 121, 101, 116, 10, 0,
    0, 0, 0, 0, 112, 117, 110, 99, 116, 117, 97, 116, 105, 111, 110, 0, 0, 0, 0,
    0, 101, 99, 104, 111, 0, 0, 0, 0, 50, 53, 54, 0, 0, 0, 0, 0, 109, 111, 114,
    101, 32, 116, 104, 97, 110, 32, 51, 50, 32, 99, 111, 110, 116, 101, 120,
    116, 32, 108, 101, 118, 101, 108, 115, 0, 0, 0, 0, 0, 99, 111, 117, 110,
    108, 100, 110, 39, 116, 32, 108, 111, 97, 100, 32, 37, 115, 10, 0, 0, 0, 0,
    0, 0, 65, 65, 83, 95, 65, 114, 101, 97, 73, 110, 102, 111, 58, 32, 97, 114,
    101, 97, 110, 117, 109, 32, 37, 100, 32, 111, 117, 116, 32, 111, 102, 32,
    114, 97, 110, 103, 101, 10, 0, 0, 114, 111, 117, 116, 101, 32, 99, 97, 99,
    104, 101, 32, 100, 117, 109, 112, 32, 104, 97, 115, 32, 119, 114, 111, 110,
    103, 32, 118, 101, 114, 115, 105, 111, 110, 32, 37, 100, 44, 32, 115, 104,
    111, 117, 108, 100, 32, 98, 101, 32, 37, 100, 10, 0, 0, 0, 0, 102, 115, 95,
    109, 97, 110, 105, 102, 101, 115, 116, 0, 0, 0, 0, 0, 99, 111, 109, 95, 98,
    97, 115, 101, 103, 97, 109, 101, 0, 0, 0, 0, 98, 97, 115, 101, 113, 51, 0,
    0, 116, 114, 105, 103, 103, 101, 114, 95, 112, 117, 115, 104, 0, 0, 0, 0,
    51, 50, 48, 0, 0, 0, 0, 0, 87, 79, 82, 76, 68, 95, 51, 0, 109, 97, 112, 115,
    47, 37, 115, 46, 97, 97, 115, 0, 0, 0, 0, 0, 112, 111, 114, 116, 97, 108,
    32, 97, 114, 101, 97, 32, 37, 100, 32, 104, 97, 115, 32, 110, 111, 32, 98,
    97, 99, 107, 32, 99, 108, 117, 115, 116, 101, 114, 13, 10, 0, 0, 0, 0, 37,
    105, 32, 115, 121, 109, 98, 111, 108, 115, 32, 112, 97, 114, 115, 101, 100,
    32, 102, 114, 111, 109, 32, 37, 115, 10, 0, 0, 0, 0, 0, 0, 67, 111, 109, 95,
    115, 112, 114, 105, 110, 116, 102, 58, 32, 79, 117, 116, 112, 117, 116, 32,
    108, 101, 110, 103, 116, 104, 32, 37, 100, 32, 116, 111, 111, 32, 115, 104,
    111, 114, 116, 44, 32, 114, 101, 113, 117, 105, 114, 101, 32, 37, 100, 32,
    98, 121, 116, 101, 115, 46, 10, 0, 0, 0, 0, 0, 103, 108, 77, 97, 116, 114,
    105, 120, 77, 111, 100, 101, 0, 0, 0, 0, 74, 70, 73, 70, 32, 101, 120, 116,
    101, 110, 115, 105, 111, 110, 32, 109, 97, 114, 107, 101, 114, 58, 32, 82,
    71, 66, 32, 116, 104, 117, 109, 98, 110, 97, 105, 108, 32, 105, 109, 97,
    103, 101, 44, 32, 108, 101, 110, 103, 116, 104, 32, 37, 117, 0, 0, 0, 114,
    101, 99, 111, 114, 100, 105, 110, 103, 32, 116, 111, 32, 37, 115, 46, 10, 0,
    0, 0, 0, 0, 0, 0, 101, 110, 100, 46, 114, 111, 113, 0, 116, 119, 111, 115,
    105, 100, 101, 100, 0, 0, 0, 0, 0, 0, 0, 0, 49, 50, 56, 0, 0, 0, 0, 0, 99,
    111, 117, 108, 100, 110, 39, 116, 32, 108, 111, 97, 100, 44, 32, 117, 115,
    105, 110, 103, 32, 102, 97, 108, 108, 98, 97, 99, 107, 10, 0, 0, 82, 101,
    115, 111, 108, 118, 105, 110, 103, 32, 37, 115, 32, 40, 73, 80, 118, 54, 41,
    10, 0, 0, 0, 0, 110, 101, 120, 116, 109, 97, 112, 0, 110, 97, 109, 101, 0,
    0, 0, 0, 115, 116, 97, 116, 117, 115, 82, 101, 115, 112, 111, 110, 115, 101,
    0, 0, 118, 109, 95, 103, 97, 109, 101, 0, 99, 104, 97, 108, 108, 101, 110,
    103, 101, 0, 0, 0, 0, 0, 0, 0, 115, 101, 99, 116, 111, 114, 108, 105, 115,
    116, 0, 0, 0, 0, 0, 0, 99, 111, 110, 116, 101, 110, 116, 46, 113, 117, 97,
    107, 101, 106, 115, 46, 99, 111, 109, 0, 0, 0, 0, 0, 98, 111, 116, 95, 109,
    97, 120, 100, 101, 98, 117, 103, 112, 111, 108, 121, 115, 0, 0, 0, 0, 0, 0,
    0, 99, 111, 109, 95, 115, 116, 97, 110, 100, 97, 108, 111, 110, 101, 0, 0,
    115, 95, 97, 108, 77, 97, 120, 68, 105, 115, 116, 97, 110, 99, 101, 0, 87,
    79, 82, 76, 68, 95, 50, 0, 115, 95, 98, 97, 99, 107, 101, 110, 100, 0, 0, 0,
    0, 0, 0, 0, 67, 118, 97, 114, 95, 71, 101, 116, 58, 32, 78, 85, 76, 76, 32,
    112, 97, 114, 97, 109, 101, 116, 101, 114, 0, 0, 0, 0, 0, 0, 0, 0, 49, 54,
    98, 105, 116, 0, 0, 0, 79, 112, 101, 110, 105, 110, 103, 32, 73, 80, 32,
    115, 111, 99, 107, 101, 116, 58, 32, 37, 115, 58, 37, 105, 10, 0, 0, 0, 0,
    0, 0, 0, 103, 108, 66, 105, 110, 100, 86, 101, 114, 116, 101, 120, 65, 114,
    114, 97, 121, 0, 0, 0, 0, 0, 0, 0, 37, 115, 58, 68, 114, 111, 112, 112, 101,
    100, 32, 37, 105, 32, 112, 97, 99, 107, 101, 116, 115, 32, 97, 116, 32, 37,
    105, 10, 0, 0, 0, 0, 74, 70, 73, 70, 32, 101, 120, 116, 101, 110, 115, 105,
    111, 110, 32, 109, 97, 114, 107, 101, 114, 58, 32, 112, 97, 108, 101, 116,
    116, 101, 32, 116, 104, 117, 109, 98, 110, 97, 105, 108, 32, 105, 109, 97,
    103, 101, 44, 32, 108, 101, 110, 103, 116, 104, 32, 37, 117, 0, 0, 0, 0, 0,
    0, 0, 110, 111, 110, 101, 0, 0, 0, 0, 114, 95, 112, 115, 104, 97, 100, 111,
    119, 68, 105, 115, 116, 0, 0, 0, 112, 111, 115, 46, 116, 114, 68, 101, 108,
    116, 97, 91, 48, 93, 0, 0, 46, 46, 46, 108, 111, 97, 100, 105, 110, 103, 32,
    39, 37, 115, 39, 10, 0, 0, 0, 0, 0, 0, 0, 0, 110, 117, 109, 98, 101, 114, 0,
    0, 105, 110, 102, 111, 82, 101, 115, 112, 111, 110, 115, 101, 0, 0, 0, 0,
    70, 105, 108, 101, 115, 121, 115, 116, 101, 109, 32, 99, 97, 108, 108, 32,
    109, 97, 100, 101, 32, 119, 105, 116, 104, 111, 117, 116, 32, 105, 110, 105,
    116, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 0, 0, 0, 0, 0, 83, 72,
    73, 70, 84, 0, 0, 0, 37, 115, 32, 105, 115, 32, 114, 101, 97, 100, 32, 111,
    110, 108, 121, 46, 10, 0, 0, 0, 0, 0, 0, 0, 69, 78, 84, 69, 82, 0, 0, 0, 87,
    79, 82, 76, 68, 95, 49, 0, 102, 115, 95, 99, 100, 110, 0, 0, 100, 101, 118,
    101, 108, 111, 112, 101, 114, 0, 0, 0, 0, 0, 0, 0, 84, 65, 66, 0, 0, 0, 0,
    0, 103, 108, 68, 101, 108, 101, 116, 101, 86, 101, 114, 116, 101, 120, 65,
    114, 114, 97, 121, 115, 0, 0, 0, 0, 74, 70, 73, 70, 32, 101, 120, 116, 101,
    110, 115, 105, 111, 110, 32, 109, 97, 114, 107, 101, 114, 58, 32, 74, 80,
    69, 71, 45, 99, 111, 109, 112, 114, 101, 115, 115, 101, 100, 32, 116, 104,
    117, 109, 98, 110, 97, 105, 108, 32, 105, 109, 97, 103, 101, 44, 32, 108,
    101, 110, 103, 116, 104, 32, 37, 117, 0, 0, 0, 0, 0, 0, 0, 87, 65, 82, 78,
    73, 78, 71, 58, 32, 109, 105, 115, 115, 105, 110, 103, 32, 99, 117, 108,
    108, 32, 112, 97, 114, 109, 115, 32, 105, 110, 32, 115, 104, 97, 100, 101,
    114, 32, 39, 37, 115, 39, 10, 0, 0, 0, 0, 0, 114, 95, 100, 108, 105, 103,
    104, 116, 77, 111, 100, 101, 0, 0, 0, 0, 103, 108, 115, 108, 47, 37, 115,
    95, 102, 112, 46, 103, 108, 115, 108, 0, 67, 111, 110, 110, 101, 99, 116,
    82, 101, 115, 112, 111, 110, 115, 101, 32, 119, 105, 116, 104, 32, 98, 97,
    100, 32, 99, 104, 97, 108, 108, 101, 110, 103, 101, 32, 114, 101, 99, 101,
    105, 118, 101, 100, 46, 32, 73, 103, 110, 111, 114, 101, 100, 46, 10, 0, 0,
    80, 83, 95, 80, 79, 87, 69, 82, 85, 80, 83, 0, 0, 0, 0, 0, 48, 0, 0, 0, 0,
    0, 0, 0, 69, 114, 114, 111, 114, 32, 100, 117, 114, 105, 110, 103, 32, 105,
    110, 105, 116, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 0, 0, 0, 0,
    0, 87, 79, 82, 76, 68, 95, 48, 0, 83, 101, 114, 118, 101, 114, 32, 100, 105,
    115, 99, 111, 110, 110, 101, 99, 116, 101, 100, 0, 0, 0, 0, 0, 103, 108, 71,
    101, 110, 86, 101, 114, 116, 101, 120, 65, 114, 114, 97, 121, 115, 0, 0, 0,
    0, 0, 0, 0, 79, 112, 101, 110, 101, 100, 32, 116, 101, 109, 112, 111, 114,
    97, 114, 121, 32, 102, 105, 108, 101, 32, 37, 115, 0, 0, 0, 0, 0, 0, 0, 0,
    99, 117, 108, 108, 0, 0, 0, 0, 114, 95, 98, 97, 115, 101, 71, 108, 111, 115,
    115, 0, 0, 0, 0, 0, 103, 108, 115, 108, 47, 37, 115, 95, 118, 112, 46, 103,
    108, 115, 108, 0, 115, 116, 114, 105, 110, 103, 0, 0, 66, 97, 100, 32, 99,
    111, 110, 110, 101, 99, 116, 82, 101, 115, 112, 111, 110, 115, 101, 32, 114,
    101, 99, 101, 105, 118, 101, 100, 46, 32, 73, 103, 110, 111, 114, 101, 100,
    46, 10, 0, 80, 83, 95, 65, 77, 77, 79, 0, 102, 115, 95, 100, 101, 98, 117,
    103, 0, 0, 0, 0, 0, 0, 0, 0, 70, 101, 98, 32, 50, 51, 32, 50, 48, 49, 52, 0,
    0, 0, 0, 0, 83, 69, 77, 73, 67, 79, 76, 79, 78, 0, 0, 0, 0, 0, 0, 0, 103,
    108, 67, 108, 105, 101, 110, 116, 65, 99, 116, 105, 118, 101, 84, 101, 120,
    116, 117, 114, 101, 0, 0, 0, 46, 99, 102, 103, 0, 0, 0, 0, 67, 108, 111,
    115, 101, 100, 32, 116, 101, 109, 112, 111, 114, 97, 114, 121, 32, 102, 105,
    108, 101, 32, 37, 115, 0, 0, 0, 0, 0, 0, 0, 0, 108, 105, 103, 104, 116, 0,
    0, 0, 48, 46, 48, 52, 0, 0, 0, 0, 67, 111, 117, 108, 100, 110, 39, 116, 32,
    99, 111, 109, 112, 105, 108, 101, 32, 115, 104, 97, 100, 101, 114, 0, 99,
    111, 117, 108, 100, 110, 39, 116, 32, 114, 101, 97, 100, 32, 101, 120, 112,
    101, 99, 116, 101, 100, 32, 116, 111, 107, 101, 110, 0, 0, 0, 0, 99, 111,
    110, 110, 101, 99, 116, 82, 101, 115, 112, 111, 110, 115, 101, 32, 102, 114,
    111, 109, 32, 119, 114, 111, 110, 103, 32, 97, 100, 100, 114, 101, 115, 115,
    46, 32, 73, 103, 110, 111, 114, 101, 100, 46, 10, 0, 0, 0, 80, 83, 95, 80,
    69, 82, 83, 73, 83, 84, 65, 78, 84, 0, 0, 0, 45, 45, 45, 45, 45, 32, 70, 83,
    95, 83, 116, 97, 114, 116, 117, 112, 32, 45, 45, 45, 45, 45, 10, 0, 101,
    109, 115, 99, 114, 105, 112, 116, 101, 110, 45, 0, 0, 0, 0, 0, 48, 0, 0, 0,
    0, 0, 0, 0, 77, 65, 88, 95, 80, 65, 67, 75, 69, 84, 95, 85, 83, 69, 82, 67,
    77, 68, 83, 10, 0, 0, 0, 0, 80, 65, 85, 83, 69, 0, 0, 0, 103, 108, 67, 111,
    108, 111, 114, 80, 111, 105, 110, 116, 101, 114, 0, 0, 67, 77, 111, 100, 95,
    76, 111, 97, 100, 66, 114, 117, 115, 104, 83, 105, 100, 101, 115, 58, 32,
    98, 97, 100, 32, 115, 104, 97, 100, 101, 114, 78, 117, 109, 58, 32, 37, 105,
    0, 0, 32, 32, 83, 115, 61, 37, 100, 44, 32, 83, 101, 61, 37, 100, 44, 32,
    65, 104, 61, 37, 100, 44, 32, 65, 108, 61, 37, 100, 0, 0, 0, 0, 115, 107,
    121, 112, 97, 114, 109, 115, 0, 0, 0, 0, 0, 0, 0, 0, 114, 95, 98, 97, 115,
    101, 83, 112, 101, 99, 117, 108, 97, 114, 0, 0, 37, 115, 10, 0, 0, 0, 0, 0,
    101, 120, 112, 101, 99, 116, 101, 100, 32, 37, 115, 44, 32, 102, 111, 117,
    110, 100, 32, 37, 115, 0, 0, 0, 99, 111, 110, 110, 101, 99, 116, 82, 101,
    115, 112, 111, 110, 115, 101, 32, 112, 97, 99, 107, 101, 116, 32, 119, 104,
    105, 108, 101, 32, 110, 111, 116, 32, 99, 111, 110, 110, 101, 99, 116, 105,
    110, 103, 46, 32, 73, 103, 110, 111, 114, 101, 100, 46, 10, 0, 0, 80, 83,
    95, 83, 84, 65, 84, 83, 0, 0, 0, 0, 0, 0, 0, 0, 73, 110, 118, 97, 108, 105,
    100, 32, 103, 97, 109, 101, 32, 102, 111, 108, 100, 101, 114, 0, 0, 0, 0, 0,
    86, 77, 95, 67, 114, 101, 97, 116, 101, 32, 111, 110, 32, 85, 73, 32, 102,
    97, 105, 108, 101, 100, 0, 0, 105, 111, 113, 51, 32, 49, 46, 51, 54, 95, 71,
    73, 84, 95, 52, 102, 55, 100, 55, 98, 102, 45, 50, 48, 49, 52, 45, 48, 50,
    45, 48, 49, 0, 0, 0, 0, 0, 0, 0, 0, 75, 80, 95, 69, 81, 85, 65, 76, 83, 0,
    0, 0, 0, 0, 0, 0, 83, 67, 82, 95, 85, 112, 100, 97, 116, 101, 83, 99, 114,
    101, 101, 110, 58, 32, 114, 101, 99, 117, 114, 115, 105, 118, 101, 108, 121,
    32, 99, 97, 108, 108, 101, 100, 0, 0, 0, 0, 103, 108, 68, 101, 116, 97, 99,
    104, 79, 98, 106, 101, 99, 116, 0, 0, 103, 108, 78, 111, 114, 109, 97, 108,
    80, 111, 105, 110, 116, 101, 114, 0, 32, 32, 32, 32, 67, 111, 109, 112, 111,
    110, 101, 110, 116, 32, 37, 100, 58, 32, 100, 99, 61, 37, 100, 32, 97, 99,
    61, 37, 100, 0, 0, 0, 87, 65, 82, 78, 73, 78, 71, 58, 32, 109, 105, 115,
    115, 105, 110, 103, 32, 112, 97, 114, 109, 32, 102, 111, 114, 32, 39, 102,
    111, 103, 80, 97, 114, 109, 115, 39, 32, 107, 101, 121, 119, 111, 114, 100,
    32, 105, 110, 32, 115, 104, 97, 100, 101, 114, 32, 39, 37, 115, 39, 10, 0,
    0, 0, 0, 114, 95, 115, 112, 101, 99, 117, 108, 97, 114, 73, 115, 77, 101,
    116, 97, 108, 108, 105, 99, 0, 0, 0, 0, 99, 111, 109, 112, 105, 108, 101,
    32, 108, 111, 103, 58, 10, 0, 0, 0, 66, 111, 103, 117, 115, 32, 105, 110,
    112, 117, 116, 32, 99, 111, 108, 111, 114, 115, 112, 97, 99, 101, 0, 0, 99,
    111, 117, 108, 100, 110, 39, 116, 32, 102, 105, 110, 100, 32, 101, 120, 112,
    101, 99, 116, 101, 100, 32, 37, 115, 0, 0, 0, 0, 0, 0, 0, 68, 117, 112, 32,
    99, 111, 110, 110, 101, 99, 116, 32, 114, 101, 99, 101, 105, 118, 101, 100,
    46, 32, 73, 103, 110, 111, 114, 101, 100, 46, 10, 0, 67, 111, 117, 108, 100,
    110, 39, 116, 32, 103, 101, 116, 32, 97, 32, 118, 105, 115, 117, 97, 108,
    10, 0, 0, 82, 95, 66, 105, 110, 100, 78, 117, 108, 108, 86, 66, 79, 58, 32,
    78, 85, 76, 76, 32, 118, 98, 111, 0, 37, 115, 32, 0, 0, 0, 0, 0, 101, 120,
    101, 99, 32, 113, 51, 99, 111, 110, 102, 105, 103, 46, 99, 102, 103, 10, 0,
    0, 0, 0, 0, 0, 37, 51, 105, 58, 37, 115, 10, 0, 37, 115, 32, 37, 115, 32,
    37, 115, 10, 0, 0, 0, 0, 0, 0, 0, 75, 80, 95, 83, 84, 65, 82, 0, 110, 101,
    97, 114, 101, 115, 116, 0, 37, 56, 105, 32, 58, 32, 84, 111, 116, 97, 108,
    32, 109, 111, 100, 101, 108, 115, 10, 0, 0, 0, 0, 0, 103, 108, 84, 101, 120,
    67, 111, 111, 114, 100, 80, 111, 105, 110, 116, 101, 114, 0, 0, 0, 0, 0, 0,
    0, 83, 116, 97, 114, 116, 32, 79, 102, 32, 83, 99, 97, 110, 58, 32, 37, 100,
    32, 99, 111, 109, 112, 111, 110, 101, 110, 116, 115, 0, 0, 0, 0, 102, 111,
    103, 80, 97, 114, 109, 115, 0, 0, 0, 0, 0, 0, 0, 0, 48, 46, 51, 0, 0, 0, 0,
    0, 78, 111, 32, 99, 111, 109, 112, 105, 108, 101, 32, 108, 111, 103, 46, 10,
    0, 0, 0, 0, 0, 0, 0, 0, 116, 111, 103, 103, 108, 101, 99, 111, 110, 115,
    111, 108, 101, 0, 0, 0, 115, 116, 114, 105, 110, 103, 32, 108, 111, 110,
    103, 101, 114, 32, 116, 104, 97, 110, 32, 77, 65, 88, 95, 84, 79, 75, 69,
    78, 32, 37, 100, 0, 99, 111, 110, 110, 101, 99, 116, 82, 101, 115, 112, 111,
    110, 115, 101, 0, 77, 111, 100, 101, 32, 32, 50, 58, 32, 53, 49, 50, 120,
    51, 56, 52, 0, 0, 0, 0, 0, 0, 0, 0, 105, 110, 118, 97, 108, 105, 100, 32,
    112, 108, 97, 121, 101, 114, 83, 116, 97, 116, 101, 32, 102, 105, 101, 108,
    100, 32, 99, 111, 117, 110, 116, 0, 70, 83, 95, 70, 79, 112, 101, 110, 70,
    105, 108, 101, 66, 121, 77, 111, 100, 101, 58, 32, 98, 97, 100, 32, 109,
    111, 100, 101, 0, 0, 0, 0, 115, 68, 88, 84, 49, 0, 0, 0, 102, 115, 95, 103,
    97, 109, 101, 0, 75, 80, 95, 78, 85, 77, 76, 79, 67, 75, 0, 0, 0, 0, 0, 0,
    35, 100, 101, 102, 105, 110, 101, 32, 85, 83, 69, 95, 68, 69, 70, 79, 82,
    77, 95, 86, 69, 82, 84, 69, 88, 69, 83, 10, 0, 0, 0, 0, 70, 66, 79, 95, 67,
    114, 101, 97, 116, 101, 58, 32, 98, 97, 100, 32, 104, 101, 105, 103, 104,
    116, 32, 37, 105, 0, 0, 0, 0, 0, 0, 0, 103, 108, 69, 110, 97, 98, 108, 101,
    86, 101, 114, 116, 101, 120, 65, 116, 116, 114, 105, 98, 65, 114, 114, 97,
    121, 65, 82, 66, 0, 0, 0, 0, 87, 97, 114, 110, 105, 110, 103, 58, 32, 110,
    111, 116, 32, 101, 110, 111, 117, 103, 104, 32, 115, 116, 101, 110, 99, 105,
    108, 32, 98, 105, 116, 115, 32, 116, 111, 32, 109, 101, 97, 115, 117, 114,
    101, 32, 111, 118, 101, 114, 100, 114, 97, 119, 58, 32, 37, 100, 10, 0, 0,
    0, 0, 0, 0, 0, 103, 108, 86, 101, 114, 116, 101, 120, 80, 111, 105, 110,
    116, 101, 114, 0, 37, 102, 32, 37, 102, 32, 37, 102, 0, 0, 0, 0, 0, 0, 0, 0,
    83, 116, 97, 114, 116, 32, 111, 102, 32, 73, 109, 97, 103, 101, 0, 0, 105,
    110, 118, 97, 108, 105, 100, 32, 100, 105, 115, 116, 97, 110, 99, 101, 115,
    32, 115, 101, 116, 0, 0, 0, 101, 110, 116, 105, 116, 121, 77, 101, 114, 103,
    97, 98, 108, 101, 0, 0, 114, 95, 100, 101, 108, 117, 120, 101, 83, 112, 101,
    99, 117, 108, 97, 114, 0, 0, 0, 0, 0, 0, 0, 0, 115, 104, 97, 100, 101, 114,
    115, 32, 102, 97, 105, 108, 101, 100, 32, 116, 111, 32, 108, 105, 110, 107,
    0, 0, 102, 111, 117, 110, 100, 32, 36, 32, 97, 116, 32, 101, 110, 100, 32,
    111, 102, 32, 108, 105, 110, 101, 0, 0, 99, 104, 97, 108, 108, 101, 110,
    103, 101, 82, 101, 115, 112, 111, 110, 115, 101, 58, 32, 37, 100, 10, 0, 0,
    114, 99, 104, 97, 116, 46, 99, 0, 37, 51, 105, 58, 32, 112, 108, 97, 121,
    101, 114, 115, 116, 97, 116, 101, 32, 0, 0, 0, 0, 0, 0, 0, 102, 115, 95,
    103, 97, 109, 101, 0, 71, 97, 109, 101, 32, 100, 105, 114, 101, 99, 116,
    111, 114, 121, 32, 99, 104, 97, 110, 103, 101, 100, 0, 0, 83, 121, 115, 95,
    85, 110, 108, 111, 97, 100, 68, 108, 108, 40, 78, 85, 76, 76, 41, 10, 0, 0,
    0, 0, 79, 75, 10, 0, 0, 0, 0, 0, 75, 80, 95, 80, 76, 85, 83, 0, 105, 110,
    95, 106, 111, 121, 115, 116, 105, 99, 107, 68, 101, 98, 117, 103, 0, 0, 0,
    0, 0, 0, 0, 0, 117, 110, 107, 110, 111, 119, 110, 32, 115, 116, 114, 117,
    99, 116, 117, 114, 101, 32, 102, 105, 101, 108, 100, 32, 37, 115, 0, 0, 0,
    0, 0, 0, 42, 61, 0, 0, 0, 0, 0, 0, 103, 108, 69, 110, 97, 98, 108, 101, 67,
    108, 105, 101, 110, 116, 83, 116, 97, 116, 101, 0, 0, 0, 0, 0, 44, 0, 0, 0,
    0, 0, 0, 0, 32, 32, 32, 32, 67, 111, 109, 112, 111, 110, 101, 110, 116, 32,
    37, 100, 58, 32, 37, 100, 104, 120, 37, 100, 118, 32, 113, 61, 37, 100, 0,
    0, 45, 45, 45, 45, 45, 45, 45, 32, 66, 111, 116, 76,
  ],
  "i8",
  ALLOC_NONE,
  Runtime.GLOBAL_BASE + 174084
);
/* memory initializer */ allocate(
  [
    105, 98, 32, 73, 110, 105, 116, 105, 97, 108, 105, 122, 97, 116, 105, 111,
    110, 32, 45, 45, 45, 45, 45, 45, 45, 10, 0, 0, 112, 111, 108, 121, 103, 111,
    110, 79, 102, 102, 115, 101, 116, 0, 0, 0, 114, 95, 99, 117, 98, 101, 77,
    97, 112, 112, 105, 110, 103, 0, 0, 0, 123, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0,
    0, 0, 0, 0, 119, 101, 97, 112, 111, 110, 105, 110, 102, 111, 0, 0, 0, 0, 0,
    0, 66, 111, 116, 70, 117, 110, 99, 66, 111, 98, 83, 116, 97, 114, 116, 69,
    110, 100, 58, 32, 110, 111, 32, 101, 110, 116, 105, 116, 121, 32, 119, 105,
    116, 104, 32, 109, 111, 100, 101, 108, 32, 37, 100, 10, 0, 0, 0, 0, 102,
    111, 117, 110, 100, 32, 36, 32, 119, 105, 116, 104, 111, 117, 116, 32, 110,
    97, 109, 101, 0, 0, 0, 0, 109, 97, 120, 95, 105, 116, 101, 109, 105, 110,
    102, 111, 0, 0, 0, 0, 66, 97, 100, 32, 99, 104, 97, 108, 108, 101, 110, 103,
    101, 32, 102, 111, 114, 32, 99, 104, 97, 108, 108, 101, 110, 103, 101, 82,
    101, 115, 112, 111, 110, 115, 101, 46, 32, 73, 103, 110, 111, 114, 101, 100,
    46, 10, 0, 0, 114, 99, 104, 97, 116, 102, 105, 108, 101, 0, 0, 0, 0, 0, 0,
    0, 99, 111, 117, 110, 108, 100, 110, 39, 116, 32, 108, 111, 97, 100, 32, 37,
    115, 10, 0, 0, 0, 0, 0, 0, 98, 111, 116, 102, 105, 108, 101, 115, 0, 0, 0,
    0, 0, 0, 0, 0, 65, 65, 83, 95, 76, 105, 110, 107, 69, 110, 116, 105, 116,
    121, 58, 32, 115, 116, 97, 99, 107, 32, 111, 118, 101, 114, 102, 108, 111,
    119, 10, 0, 106, 117, 109, 112, 112, 97, 100, 95, 101, 110, 116, 0, 0, 0, 0,
    0, 37, 115, 32, 105, 115, 32, 110, 111, 116, 32, 97, 32, 114, 111, 117, 116,
    101, 32, 99, 97, 99, 104, 101, 32, 100, 117, 109, 112, 10, 0, 0, 0, 102,
    115, 95, 104, 111, 109, 101, 112, 97, 116, 104, 0, 0, 0, 0, 0, 101, 120,
    101, 99, 32, 97, 117, 116, 111, 101, 120, 101, 99, 46, 99, 102, 103, 10, 0,
    0, 0, 0, 0, 0, 99, 108, 97, 115, 115, 110, 97, 109, 101, 0, 0, 0, 0, 0, 0,
    0, 112, 104, 121, 115, 95, 109, 97, 120, 118, 101, 108, 111, 99, 105, 116,
    121, 0, 0, 0, 0, 0, 0, 0, 0, 75, 80, 95, 77, 73, 78, 85, 83, 0, 0, 0, 0, 0,
    0, 0, 0, 115, 97, 118, 101, 114, 111, 117, 116, 105, 110, 103, 99, 97, 99,
    104, 101, 0, 0, 0, 0, 0, 0, 0, 0, 112, 111, 114, 116, 97, 108, 32, 97, 114,
    101, 97, 32, 37, 100, 32, 104, 97, 115, 32, 110, 111, 32, 102, 114, 111,
    110, 116, 32, 99, 108, 117, 115, 116, 101, 114, 13, 10, 0, 0, 0, 87, 65, 82,
    78, 73, 78, 71, 58, 32, 105, 110, 99, 111, 109, 112, 108, 101, 116, 101, 32,
    108, 105, 110, 101, 32, 97, 116, 32, 101, 110, 100, 32, 111, 102, 32, 102,
    105, 108, 101, 10, 0, 0, 0, 0, 0, 0, 0, 0, 81, 95, 115, 116, 114, 99, 97,
    116, 58, 32, 97, 108, 114, 101, 97, 100, 121, 32, 111, 118, 101, 114, 102,
    108, 111, 119, 101, 100, 0, 0, 0, 0, 103, 108, 68, 114, 97, 119, 82, 97,
    110, 103, 101, 69, 108, 101, 109, 101, 110, 116, 115, 0, 0, 0, 0, 0, 83,
    116, 97, 114, 116, 32, 79, 102, 32, 70, 114, 97, 109, 101, 32, 48, 120, 37,
    48, 50, 120, 58, 32, 119, 105, 100, 116, 104, 61, 37, 117, 44, 32, 104, 101,
    105, 103, 104, 116, 61, 37, 117, 44, 32, 99, 111, 109, 112, 111, 110, 101,
    110, 116, 115, 61, 37, 100, 0, 0, 0, 0, 0, 0, 0, 100, 109, 95, 0, 0, 0, 0,
    0, 110, 111, 112, 105, 99, 109, 105, 112, 0, 0, 0, 0, 0, 0, 0, 0, 114, 95,
    112, 97, 114, 97, 108, 108, 97, 120, 77, 97, 112, 112, 105, 110, 103, 0, 0,
    0, 0, 0, 0, 0, 97, 116, 116, 114, 95, 84, 97, 110, 103, 101, 110, 116, 50,
    0, 0, 0, 100, 101, 109, 111, 101, 110, 100, 46, 114, 111, 113, 0, 0, 0, 0,
    0, 37, 115, 32, 104, 97, 115, 32, 110, 111, 32, 73, 80, 118, 52, 32, 97,
    100, 100, 114, 101, 115, 115, 46, 10, 0, 0, 0, 0, 0, 0, 0, 0, 115, 118, 95,
    114, 117, 110, 110, 105, 110, 103, 0, 0, 0, 0, 0, 0, 101, 118, 97, 108, 105,
    110, 116, 0, 94, 51, 87, 97, 114, 110, 105, 110, 103, 58, 32, 83, 101, 114,
    118, 101, 114, 32, 114, 101, 112, 111, 114, 116, 115, 32, 112, 114, 111,
    116, 111, 99, 111, 108, 32, 118, 101, 114, 115, 105, 111, 110, 32, 37, 100,
    44, 32, 119, 101, 32, 104, 97, 118, 101, 32, 37, 100, 46, 32, 84, 114, 121,
    105, 110, 103, 32, 97, 110, 121, 119, 97, 121, 115, 46, 10, 0, 0, 0, 0, 0,
    113, 97, 103, 97, 109, 101, 0, 0, 48, 0, 0, 0, 0, 0, 0, 0, 32, 32, 32, 32,
    114, 101, 106, 101, 99, 116, 101, 100, 32, 99, 111, 110, 110, 101, 99, 116,
    32, 102, 114, 111, 109, 32, 118, 101, 114, 115, 105, 111, 110, 32, 37, 105,
    10, 0, 0, 0, 97, 108, 108, 98, 111, 116, 115, 0, 103, 114, 97, 112, 112,
    108, 101, 80, 111, 105, 110, 116, 91, 50, 93, 0, 109, 97, 112, 95, 114, 101,
    115, 116, 97, 114, 116, 0, 0, 0, 0, 0, 102, 115, 95, 98, 97, 115, 101, 112,
    97, 116, 104, 0, 0, 0, 0, 0, 98, 111, 116, 95, 100, 101, 118, 101, 108, 111,
    112, 101, 114, 0, 0, 0, 101, 120, 101, 99, 32, 113, 51, 99, 111, 110, 102,
    105, 103, 46, 99, 102, 103, 10, 0, 0, 0, 0, 0, 0, 49, 50, 48, 0, 0, 0, 0, 0,
    75, 80, 95, 83, 76, 65, 83, 72, 0, 0, 0, 0, 0, 0, 0, 0, 49, 0, 0, 0, 0, 0,
    0, 0, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45,
    45, 45, 45, 45, 45, 10, 0, 73, 80, 54, 58, 32, 37, 115, 10, 0, 0, 0, 0, 0,
    0, 0, 0, 103, 108, 71, 101, 116, 80, 111, 105, 110, 116, 101, 114, 118, 0,
    0, 0, 37, 115, 58, 79, 117, 116, 32, 111, 102, 32, 111, 114, 100, 101, 114,
    32, 112, 97, 99, 107, 101, 116, 32, 37, 105, 32, 97, 116, 32, 37, 105, 10,
    0, 0, 0, 0, 0, 0, 0, 0, 83, 109, 111, 111, 116, 104, 105, 110, 103, 32, 110,
    111, 116, 32, 115, 117, 112, 112, 111, 114, 116, 101, 100, 32, 119, 105,
    116, 104, 32, 110, 111, 110, 115, 116, 97, 110, 100, 97, 114, 100, 32, 115,
    97, 109, 112, 108, 105, 110, 103, 32, 114, 97, 116, 105, 111, 115, 0, 0, 0,
    0, 0, 0, 0, 0, 110, 111, 109, 105, 112, 109, 97, 112, 115, 0, 0, 0, 0, 0, 0,
    0, 114, 95, 100, 101, 108, 117, 120, 101, 77, 97, 112, 112, 105, 110, 103,
    0, 112, 111, 115, 46, 116, 114, 66, 97, 115, 101, 91, 49, 93, 0, 0, 0, 97,
    116, 116, 114, 95, 78, 111, 114, 109, 97, 108, 50, 0, 0, 0, 0, 117, 110,
    107, 110, 111, 119, 110, 32, 112, 114, 101, 99, 111, 109, 112, 105, 108,
    101, 114, 32, 100, 105, 114, 101, 99, 116, 105, 118, 101, 32, 37, 115, 0, 0,
    0, 0, 0, 0, 0, 0, 85, 110, 119, 97, 110, 116, 101, 100, 32, 99, 104, 97,
    108, 108, 101, 110, 103, 101, 32, 114, 101, 115, 112, 111, 110, 115, 101,
    32, 114, 101, 99, 101, 105, 118, 101, 100, 46, 32, 73, 103, 110, 111, 114,
    101, 100, 46, 10, 0, 110, 111, 99, 104, 97, 116, 0, 0, 97, 108, 108, 0, 0,
    0, 0, 0, 67, 84, 82, 76, 0, 0, 0, 0, 108, 97, 116, 99, 104, 101, 100, 58,
    32, 34, 37, 115, 34, 10, 0, 0, 103, 114, 97, 112, 112, 108, 101, 80, 111,
    105, 110, 116, 91, 49, 93, 0, 67, 111, 117, 108, 100, 110, 39, 116, 32, 108,
    111, 97, 100, 32, 100, 101, 102, 97, 117, 108, 116, 46, 99, 102, 103, 0, 0,
    0, 0, 0, 0, 0, 101, 120, 101, 99, 32, 100, 101, 102, 97, 117, 108, 116, 46,
    99, 102, 103, 10, 0, 0, 0, 0, 0, 0, 0, 75, 80, 95, 68, 69, 76, 0, 0, 103,
    108, 66, 105, 110, 100, 80, 114, 111, 103, 114, 97, 109, 0, 0, 0, 82, 83,
    84, 37, 100, 0, 0, 0, 115, 117, 114, 102, 97, 99, 101, 80, 97, 114, 109, 0,
    0, 0, 0, 0, 114, 95, 115, 112, 101, 99, 117, 108, 97, 114, 77, 97, 112, 112,
    105, 110, 103, 0, 0, 0, 0, 0, 0, 0, 97, 116, 116, 114, 95, 80, 111, 115,
    105, 116, 105, 111, 110, 50, 0, 0, 102, 111, 117, 110, 100, 32, 35, 32, 97,
    116, 32, 101, 110, 100, 32, 111, 102, 32, 108, 105, 110, 101, 0, 0, 99, 104,
    97, 108, 108, 101, 110, 103, 101, 82, 101, 115, 112, 111, 110, 115, 101, 0,
    0, 0, 0, 0, 0, 0, 109, 97, 116, 99, 104, 46, 99, 0, 85, 115, 97, 103, 101,
    58, 32, 107, 105, 99, 107, 32, 60, 112, 108, 97, 121, 101, 114, 32, 110, 97,
    109, 101, 62, 10, 107, 105, 99, 107, 32, 97, 108, 108, 32, 61, 32, 107, 105,
    99, 107, 32, 101, 118, 101, 114, 121, 111, 110, 101, 10, 107, 105, 99, 107,
    32, 97, 108, 108, 98, 111, 116, 115, 32, 61, 32, 107, 105, 99, 107, 32, 97,
    108, 108, 32, 98, 111, 116, 115, 10, 0, 0, 0, 0, 0, 0, 0, 0, 103, 114, 97,
    112, 112, 108, 101, 80, 111, 105, 110, 116, 91, 48, 93, 0, 100, 101, 102,
    97, 117, 108, 116, 46, 99, 102, 103, 0, 0, 0, 0, 0, 37, 115, 32, 117, 110,
    100, 101, 102, 105, 110, 101, 100, 10, 0, 0, 0, 75, 80, 95, 73, 78, 83, 0,
    0, 83, 101, 114, 118, 101, 114, 32, 100, 105, 115, 99, 111, 110, 110, 101,
    99, 116, 101, 100, 32, 45, 32, 37, 115, 0, 0, 0, 0, 0, 0, 0, 0, 67, 76, 95,
    71, 101, 116, 85, 115, 101, 114, 67, 109, 100, 58, 32, 37, 105, 32, 62, 61,
    32, 37, 105, 0, 70, 83, 95, 83, 86, 95, 82, 101, 110, 97, 109, 101, 0, 0, 0,
    0, 70, 83, 95, 83, 86, 95, 70, 79, 112, 101, 110, 70, 105, 108, 101, 87,
    114, 105, 116, 101, 0, 0, 0, 0, 70, 83, 95, 72, 111, 109, 101, 82, 101, 109,
    111, 118, 101, 0, 0, 0, 70, 83, 95, 70, 79, 112, 101, 110, 70, 105, 108,
    101, 87, 114, 105, 116, 101, 0, 0, 0, 0, 0, 0, 0, 70, 83, 95, 70, 79, 112,
    101, 110, 70, 105, 108, 101, 65, 112, 112, 101, 110, 100, 0, 0, 0, 0, 0, 0,
    70, 83, 95, 70, 67, 114, 101, 97, 116, 101, 79, 112, 101, 110, 80, 105, 112,
    101, 70, 105, 108, 101, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 30, 0, 0, 0, 31, 0, 0,
    0, 32, 0, 0, 0, 33, 0, 0, 0, 34, 0, 0, 0, 36, 0, 0, 0, 35, 0, 0, 0, 0, 0, 0,
    0, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 0, 0, 0, 20,
    0, 0, 0, 22, 0, 0, 0, 86, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255,
    255, 0, 0, 0, 0, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 0, 193, 0, 0, 0, 193,
    0, 0, 0, 193, 0, 0, 0, 65, 0, 0, 0, 65, 0, 0, 0, 65, 0, 0, 128, 63, 0, 0,
    128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
    0, 0, 0, 0, 154, 121, 102, 102, 0, 0, 0, 0, 184, 126, 51, 115, 0, 0, 0, 0,
    3, 0, 0, 0, 255, 255, 255, 255, 2, 0, 0, 0, 253, 255, 255, 255, 1, 0, 0, 0,
    2, 0, 0, 0, 1, 0, 0, 0, 3, 0, 0, 0, 2, 0, 0, 0, 255, 255, 255, 255, 253,
    255, 255, 255, 2, 0, 0, 0, 254, 255, 255, 255, 255, 255, 255, 255, 3, 0, 0,
    0, 2, 0, 0, 0, 255, 255, 255, 255, 253, 255, 255, 255, 0, 0, 0, 0, 1, 0, 0,
    0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 255, 255,
    255, 255, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
    255, 255, 255, 255, 255, 0, 0, 0, 0, 255, 255, 255, 255, 1, 0, 0, 0, 0, 8,
    13, 16, 19, 21, 23, 24, 26, 27, 28, 29, 30, 31, 32, 32, 33, 34, 34, 35, 36,
    36, 37, 37, 1, 0, 0, 0, 171, 170, 170, 170, 205, 204, 204, 204, 183, 109,
    219, 182, 57, 142, 227, 56, 163, 139, 46, 186, 197, 78, 236, 196, 239, 238,
    238, 238, 241, 240, 240, 240, 27, 202, 107, 40, 61, 207, 243, 60, 167, 55,
    189, 233, 41, 92, 143, 194, 19, 218, 75, 104, 53, 194, 114, 79, 223, 123,
    239, 189, 225, 131, 15, 62, 139, 175, 248, 138, 173, 27, 76, 145, 151, 111,
    249, 150, 25, 156, 143, 193, 131, 190, 160, 47, 165, 79, 250, 164, 207, 70,
    125, 103, 209, 88, 31, 26, 251, 250, 250, 250, 29, 82, 19, 140, 135, 181,
    111, 88, 9, 238, 35, 184, 243, 216, 138, 160, 21, 151, 12, 193, 191, 239,
    251, 190, 193, 15, 252, 192, 107, 76, 164, 7, 141, 18, 63, 163, 119, 169,
    39, 227, 249, 241, 227, 199, 99, 201, 47, 150, 133, 56, 43, 63, 175, 22, 55,
    97, 177, 72, 25, 120, 219, 67, 46, 43, 253, 252, 252, 252, 103, 235, 208,
    111, 233, 71, 63, 250, 211, 47, 253, 210, 245, 211, 79, 63, 159, 91, 226,
    212, 161, 163, 2, 95, 75, 129, 90, 191, 109, 177, 50, 124, 87, 27, 67, 211,
    217, 143, 253, 216, 0, 0, 0, 0, 184, 126, 154, 121, 0, 0, 0, 0, 56, 43, 2,
    0, 104, 42, 2, 0, 88, 44, 2, 0, 128, 43, 2, 0, 232, 187, 1, 0, 224, 144, 2,
    0, 160, 45, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 0, 0,
    0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 3, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 3, 0, 0,
    0, 2, 0, 0, 0, 1, 0, 0, 0, 3, 0, 0, 0, 2, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 193, 0, 0, 128, 193, 0, 0, 0, 193, 0, 0,
    0, 0, 0, 0, 128, 65, 0, 0, 128, 65, 0, 0, 0, 65, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 254, 255, 255, 255, 3,
    0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 3, 0, 0, 0, 255, 255, 255, 255, 1, 0, 0, 0,
    3, 0, 0, 0, 2, 0, 0, 0, 255, 255, 255, 255, 3, 0, 0, 0, 254, 255, 255, 255,
    254, 255, 255, 255, 255, 255, 255, 255, 3, 0, 0, 0, 254, 255, 255, 255, 1,
    0, 0, 0, 253, 255, 255, 255, 0, 0, 112, 193, 0, 0, 112, 193, 0, 0, 112, 193,
    0, 0, 0, 0, 0, 0, 112, 65, 0, 0, 112, 65, 0, 0, 112, 65, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  ],
  "i8",
  ALLOC_NONE,
  Runtime.GLOBAL_BASE + 184324
);

var tempDoublePtr = Runtime.alignMemory(allocate(12, "i8", ALLOC_STATIC), 8);

assert(tempDoublePtr % 8 == 0);

function copyTempFloat(ptr) {
  // functions, because inlining this code increases code size too much

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr + 1] = HEAP8[ptr + 1];

  HEAP8[tempDoublePtr + 2] = HEAP8[ptr + 2];

  HEAP8[tempDoublePtr + 3] = HEAP8[ptr + 3];
}

function copyTempDouble(ptr) {
  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr + 1] = HEAP8[ptr + 1];

  HEAP8[tempDoublePtr + 2] = HEAP8[ptr + 2];

  HEAP8[tempDoublePtr + 3] = HEAP8[ptr + 3];

  HEAP8[tempDoublePtr + 4] = HEAP8[ptr + 4];

  HEAP8[tempDoublePtr + 5] = HEAP8[ptr + 5];

  HEAP8[tempDoublePtr + 6] = HEAP8[ptr + 6];

  HEAP8[tempDoublePtr + 7] = HEAP8[ptr + 7];
}

function _emscripten_memcpy_big(dest, src, num) {
  HEAPU8.set(HEAPU8.subarray(src, src + num), dest);
  return dest;
}
Module["_memcpy"] = _memcpy;
var _llvm_memcpy_p0i8_p0i8_i32 = _memcpy;

function _llvm_lifetime_start() {}

function _isspace(chr) {
  return chr == 32 || (chr >= 9 && chr <= 13);
}

var ___errno_state = 0;
function ___setErrNo(value) {
  // For convenient setting and returning of errno.
  HEAP32[___errno_state >> 2] = value;
  return value;
}

var ERRNO_CODES = {
  EPERM: 1,
  ENOENT: 2,
  ESRCH: 3,
  EINTR: 4,
  EIO: 5,
  ENXIO: 6,
  E2BIG: 7,
  ENOEXEC: 8,
  EBADF: 9,
  ECHILD: 10,
  EAGAIN: 11,
  EWOULDBLOCK: 11,
  ENOMEM: 12,
  EACCES: 13,
  EFAULT: 14,
  ENOTBLK: 15,
  EBUSY: 16,
  EEXIST: 17,
  EXDEV: 18,
  ENODEV: 19,
  ENOTDIR: 20,
  EISDIR: 21,
  EINVAL: 22,
  ENFILE: 23,
  EMFILE: 24,
  ENOTTY: 25,
  ETXTBSY: 26,
  EFBIG: 27,
  ENOSPC: 28,
  ESPIPE: 29,
  EROFS: 30,
  EMLINK: 31,
  EPIPE: 32,
  EDOM: 33,
  ERANGE: 34,
  ENOMSG: 42,
  EIDRM: 43,
  ECHRNG: 44,
  EL2NSYNC: 45,
  EL3HLT: 46,
  EL3RST: 47,
  ELNRNG: 48,
  EUNATCH: 49,
  ENOCSI: 50,
  EL2HLT: 51,
  EDEADLK: 35,
  ENOLCK: 37,
  EBADE: 52,
  EBADR: 53,
  EXFULL: 54,
  ENOANO: 55,
  EBADRQC: 56,
  EBADSLT: 57,
  EDEADLOCK: 35,
  EBFONT: 59,
  ENOSTR: 60,
  ENODATA: 61,
  ETIME: 62,
  ENOSR: 63,
  ENONET: 64,
  ENOPKG: 65,
  EREMOTE: 66,
  ENOLINK: 67,
  EADV: 68,
  ESRMNT: 69,
  ECOMM: 70,
  EPROTO: 71,
  EMULTIHOP: 72,
  EDOTDOT: 73,
  EBADMSG: 74,
  ENOTUNIQ: 76,
  EBADFD: 77,
  EREMCHG: 78,
  ELIBACC: 79,
  ELIBBAD: 80,
  ELIBSCN: 81,
  ELIBMAX: 82,
  ELIBEXEC: 83,
  ENOSYS: 38,
  ENOTEMPTY: 39,
  ENAMETOOLONG: 36,
  ELOOP: 40,
  EOPNOTSUPP: 95,
  EPFNOSUPPORT: 96,
  ECONNRESET: 104,
  ENOBUFS: 105,
  EAFNOSUPPORT: 97,
  EPROTOTYPE: 91,
  ENOTSOCK: 88,
  ENOPROTOOPT: 92,
  ESHUTDOWN: 108,
  ECONNREFUSED: 111,
  EADDRINUSE: 98,
  ECONNABORTED: 103,
  ENETUNREACH: 101,
  ENETDOWN: 100,
  ETIMEDOUT: 110,
  EHOSTDOWN: 112,
  EHOSTUNREACH: 113,
  EINPROGRESS: 115,
  EALREADY: 114,
  EDESTADDRREQ: 89,
  EMSGSIZE: 90,
  EPROTONOSUPPORT: 93,
  ESOCKTNOSUPPORT: 94,
  EADDRNOTAVAIL: 99,
  ENETRESET: 102,
  EISCONN: 106,
  ENOTCONN: 107,
  ETOOMANYREFS: 109,
  EUSERS: 87,
  EDQUOT: 122,
  ESTALE: 116,
  ENOTSUP: 95,
  ENOMEDIUM: 123,
  EILSEQ: 84,
  EOVERFLOW: 75,
  ECANCELED: 125,
  ENOTRECOVERABLE: 131,
  EOWNERDEAD: 130,
  ESTRPIPE: 86,
};
function __parseInt(str, endptr, base, min, max, bits, unsign) {
  // Skip space.
  while (_isspace(HEAP8[str])) str++;

  // Check for a plus/minus sign.
  var multiplier = 1;
  if (HEAP8[str] == 45) {
    multiplier = -1;
    str++;
  } else if (HEAP8[str] == 43) {
    str++;
  }

  // Find base.
  var finalBase = base;
  if (!finalBase) {
    if (HEAP8[str] == 48) {
      if (HEAP8[(str + 1) | 0] == 120 || HEAP8[(str + 1) | 0] == 88) {
        finalBase = 16;
        str += 2;
      } else {
        finalBase = 8;
        str++;
      }
    }
  } else if (finalBase == 16) {
    if (HEAP8[str] == 48) {
      if (HEAP8[(str + 1) | 0] == 120 || HEAP8[(str + 1) | 0] == 88) {
        str += 2;
      }
    }
  }
  if (!finalBase) finalBase = 10;

  // Get digits.
  var chr;
  var ret = 0;
  while ((chr = HEAP8[str]) != 0) {
    var digit = parseInt(String.fromCharCode(chr), finalBase);
    if (isNaN(digit)) {
      break;
    } else {
      ret = ret * finalBase + digit;
      str++;
    }
  }

  // Apply sign.
  ret *= multiplier;

  // Set end pointer.
  if (endptr) {
    HEAP32[endptr >> 2] = str;
  }

  // Unsign if needed.
  if (unsign) {
    if (Math.abs(ret) > max) {
      ret = max;
      ___setErrNo(ERRNO_CODES.ERANGE);
    } else {
      ret = unSign(ret, bits);
    }
  }

  // Validate range.
  if (ret > max || ret < min) {
    ret = ret > max ? max : min;
    ___setErrNo(ERRNO_CODES.ERANGE);
  }

  if (bits == 64) {
    return (
      (asm["setTempRet0"](
        ((tempDouble = ret),
        +Math_abs(tempDouble) >= +1
          ? tempDouble > +0
            ? (Math_min(+Math_floor(tempDouble / +4294967296), +4294967295) |
                0) >>>
              0
            : ~~+Math_ceil(
                (tempDouble - +(~~tempDouble >>> 0)) / +4294967296
              ) >>> 0
          : 0)
      ),
      ret >>> 0) | 0
    );
  }

  return ret;
}
function _strtol(str, endptr, base) {
  return __parseInt(str, endptr, base, -2147483648, 2147483647, 32); // LONG_MIN, LONG_MAX.
}
function _atoi(ptr) {
  return _strtol(ptr, null, 10);
}

Module["_memset"] = _memset;
var _llvm_memset_p0i8_i32 = _memset;

Module["_strlen"] = _strlen;

function _llvm_lifetime_end() {}

Module["_strcat"] = _strcat;

var ERRNO_MESSAGES = {
  0: "Success",
  1: "Not super-user",
  2: "No such file or directory",
  3: "No such process",
  4: "Interrupted system call",
  5: "I/O error",
  6: "No such device or address",
  7: "Arg list too long",
  8: "Exec format error",
  9: "Bad file number",
  10: "No children",
  11: "No more processes",
  12: "Not enough core",
  13: "Permission denied",
  14: "Bad address",
  15: "Block device required",
  16: "Mount device busy",
  17: "File exists",
  18: "Cross-device link",
  19: "No such device",
  20: "Not a directory",
  21: "Is a directory",
  22: "Invalid argument",
  23: "Too many open files in system",
  24: "Too many open files",
  25: "Not a typewriter",
  26: "Text file busy",
  27: "File too large",
  28: "No space left on device",
  29: "Illegal seek",
  30: "Read only file system",
  31: "Too many links",
  32: "Broken pipe",
  33: "Math arg out of domain of func",
  34: "Math result not representable",
  35: "File locking deadlock error",
  36: "File or path name too long",
  37: "No record locks available",
  38: "Function not implemented",
  39: "Directory not empty",
  40: "Too many symbolic links",
  42: "No message of desired type",
  43: "Identifier removed",
  44: "Channel number out of range",
  45: "Level 2 not synchronized",
  46: "Level 3 halted",
  47: "Level 3 reset",
  48: "Link number out of range",
  49: "Protocol driver not attached",
  50: "No CSI structure available",
  51: "Level 2 halted",
  52: "Invalid exchange",
  53: "Invalid request descriptor",
  54: "Exchange full",
  55: "No anode",
  56: "Invalid request code",
  57: "Invalid slot",
  59: "Bad font file fmt",
  60: "Device not a stream",
  61: "No data (for no delay io)",
  62: "Timer expired",
  63: "Out of streams resources",
  64: "Machine is not on the network",
  65: "Package not installed",
  66: "The object is remote",
  67: "The link has been severed",
  68: "Advertise error",
  69: "Srmount error",
  70: "Communication error on send",
  71: "Protocol error",
  72: "Multihop attempted",
  73: "Cross mount point (not really error)",
  74: "Trying to read unreadable message",
  75: "Value too large for defined data type",
  76: "Given log. name not unique",
  77: "f.d. invalid for this operation",
  78: "Remote address changed",
  79: "Can   access a needed shared lib",
  80: "Accessing a corrupted shared lib",
  81: ".lib section in a.out corrupted",
  82: "Attempting to link in too many libs",
  83: "Attempting to exec a shared library",
  84: "Illegal byte sequence",
  86: "Streams pipe error",
  87: "Too many users",
  88: "Socket operation on non-socket",
  89: "Destination address required",
  90: "Message too long",
  91: "Protocol wrong type for socket",
  92: "Protocol not available",
  93: "Unknown protocol",
  94: "Socket type not supported",
  95: "Not supported",
  96: "Protocol family not supported",
  97: "Address family not supported by protocol family",
  98: "Address already in use",
  99: "Address not available",
  100: "Network interface is not configured",
  101: "Network is unreachable",
  102: "Connection reset by network",
  103: "Connection aborted",
  104: "Connection reset by peer",
  105: "No buffer space available",
  106: "Socket is already connected",
  107: "Socket is not connected",
  108: "Can't send after socket shutdown",
  109: "Too many references",
  110: "Connection timed out",
  111: "Connection refused",
  112: "Host is down",
  113: "Host is unreachable",
  114: "Socket already connected",
  115: "Connection already in progress",
  116: "Stale file handle",
  122: "Quota exceeded",
  123: "No medium (in tape drive)",
  125: "Operation canceled",
  130: "Previous owner died",
  131: "State not recoverable",
};

var TTY = {
  ttys: [],
  init: function () {
    // https://github.com/kripken/emscripten/pull/1555
    // if (ENVIRONMENT_IS_NODE) {
    //   // currently, FS.init does not distinguish if process.stdin is a file or TTY
    //   // device, it always assumes it's a TTY device. because of this, we're forcing
    //   // process.stdin to UTF8 encoding to at least make stdin reading compatible
    //   // with text files until FS.init can be refactored.
    //   process['stdin']['setEncoding']('utf8');
    // }
  },
  shutdown: function () {
    // https://github.com/kripken/emscripten/pull/1555
    // if (ENVIRONMENT_IS_NODE) {
    //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
    //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
    //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
    //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
    //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
    //   process['stdin']['pause']();
    // }
  },
  register: function (dev, ops) {
    TTY.ttys[dev] = { input: [], output: [], ops: ops };
    FS.registerDevice(dev, TTY.stream_ops);
  },
  stream_ops: {
    open: function (stream) {
      var tty = TTY.ttys[stream.node.rdev];
      if (!tty) {
        throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
      }
      stream.tty = tty;
      stream.seekable = false;
    },
    close: function (stream) {
      // flush any pending line data
      if (stream.tty.output.length) {
        stream.tty.ops.put_char(stream.tty, 10);
      }
    },
    read: function (stream, buffer, offset, length, pos /* ignored */) {
      if (!stream.tty || !stream.tty.ops.get_char) {
        throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
      }
      var bytesRead = 0;
      for (var i = 0; i < length; i++) {
        var result;
        try {
          result = stream.tty.ops.get_char(stream.tty);
        } catch (e) {
          throw new FS.ErrnoError(ERRNO_CODES.EIO);
        }
        if (result === undefined && bytesRead === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
        }
        if (result === null || result === undefined) break;
        bytesRead++;
        buffer[offset + i] = result;
      }
      if (bytesRead) {
        stream.node.timestamp = Date.now();
      }
      return bytesRead;
    },
    write: function (stream, buffer, offset, length, pos) {
      if (!stream.tty || !stream.tty.ops.put_char) {
        throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
      }
      for (var i = 0; i < length; i++) {
        try {
          stream.tty.ops.put_char(stream.tty, buffer[offset + i]);
        } catch (e) {
          throw new FS.ErrnoError(ERRNO_CODES.EIO);
        }
      }
      if (length) {
        stream.node.timestamp = Date.now();
      }
      return i;
    },
  },
  default_tty_ops: {
    get_char: function (tty) {
      if (!tty.input.length) {
        var result = null;
        if (ENVIRONMENT_IS_NODE) {
          result = process["stdin"]["read"]();
          if (!result) {
            if (
              process["stdin"]["_readableState"] &&
              process["stdin"]["_readableState"]["ended"]
            ) {
              return null; // EOF
            }
            return undefined; // no data available
          }
        } else if (
          typeof window != "undefined" &&
          typeof window.prompt == "function"
        ) {
          // Browser.
          result = window.prompt("Input: "); // returns null on cancel
          if (result !== null) {
            result += "\n";
          }
        } else if (typeof readline == "function") {
          // Command line.
          result = readline();
          if (result !== null) {
            result += "\n";
          }
        }
        if (!result) {
          return null;
        }
        tty.input = intArrayFromString(result, true);
      }
      return tty.input.shift();
    },
    put_char: function (tty, val) {
      if (val === null || val === 10) {
        Module["print"](tty.output.join(""));
        tty.output = [];
      } else {
        tty.output.push(TTY.utf8.processCChar(val));
      }
    },
  },
  default_tty1_ops: {
    put_char: function (tty, val) {
      if (val === null || val === 10) {
        Module["printErr"](tty.output.join(""));
        tty.output = [];
      } else {
        tty.output.push(TTY.utf8.processCChar(val));
      }
    },
  },
};

var MEMFS = {
  ops_table: null,
  CONTENT_OWNING: 1,
  CONTENT_FLEXIBLE: 2,
  CONTENT_FIXED: 3,
  mount: function (mount) {
    return MEMFS.createNode(null, "/", 16384 | 0777, 0);
  },
  createNode: function (parent, name, mode, dev) {
    if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
      // no supported
      throw new FS.ErrnoError(ERRNO_CODES.EPERM);
    }
    if (!MEMFS.ops_table) {
      MEMFS.ops_table = {
        dir: {
          node: {
            getattr: MEMFS.node_ops.getattr,
            setattr: MEMFS.node_ops.setattr,
            lookup: MEMFS.node_ops.lookup,
            mknod: MEMFS.node_ops.mknod,
            mknod: MEMFS.node_ops.mknod,
            rename: MEMFS.node_ops.rename,
            unlink: MEMFS.node_ops.unlink,
            rmdir: MEMFS.node_ops.rmdir,
            readdir: MEMFS.node_ops.readdir,
            symlink: MEMFS.node_ops.symlink,
          },
          stream: {
            llseek: MEMFS.stream_ops.llseek,
          },
        },
        file: {
          node: {
            getattr: MEMFS.node_ops.getattr,
            setattr: MEMFS.node_ops.setattr,
          },
          stream: {
            llseek: MEMFS.stream_ops.llseek,
            read: MEMFS.stream_ops.read,
            write: MEMFS.stream_ops.write,
            allocate: MEMFS.stream_ops.allocate,
            mmap: MEMFS.stream_ops.mmap,
          },
        },
        link: {
          node: {
            getattr: MEMFS.node_ops.getattr,
            setattr: MEMFS.node_ops.setattr,
            readlink: MEMFS.node_ops.readlink,
          },
          stream: {},
        },
        chrdev: {
          node: {
            getattr: MEMFS.node_ops.getattr,
            setattr: MEMFS.node_ops.setattr,
          },
          stream: FS.chrdev_stream_ops,
        },
      };
    }
    var node = FS.createNode(parent, name, mode, dev);
    if (FS.isDir(node.mode)) {
      node.node_ops = MEMFS.ops_table.dir.node;
      node.stream_ops = MEMFS.ops_table.dir.stream;
      node.contents = {};
    } else if (FS.isFile(node.mode)) {
      node.node_ops = MEMFS.ops_table.file.node;
      node.stream_ops = MEMFS.ops_table.file.stream;
      node.contents = [];
      node.contentMode = MEMFS.CONTENT_FLEXIBLE;
    } else if (FS.isLink(node.mode)) {
      node.node_ops = MEMFS.ops_table.link.node;
      node.stream_ops = MEMFS.ops_table.link.stream;
    } else if (FS.isChrdev(node.mode)) {
      node.node_ops = MEMFS.ops_table.chrdev.node;
      node.stream_ops = MEMFS.ops_table.chrdev.stream;
    }
    node.timestamp = Date.now();
    // add the new node to the parent
    if (parent) {
      parent.contents[name] = node;
    }
    return node;
  },
  ensureFlexible: function (node) {
    if (node.contentMode !== MEMFS.CONTENT_FLEXIBLE) {
      var contents = node.contents;
      node.contents = Array.prototype.slice.call(contents);
      node.contentMode = MEMFS.CONTENT_FLEXIBLE;
    }
  },
  node_ops: {
    getattr: function (node) {
      var attr = {};
      // device numbers reuse inode numbers.
      attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
      attr.ino = node.id;
      attr.mode = node.mode;
      attr.nlink = 1;
      attr.uid = 0;
      attr.gid = 0;
      attr.rdev = node.rdev;
      if (FS.isDir(node.mode)) {
        attr.size = 4096;
      } else if (FS.isFile(node.mode)) {
        attr.size = node.contents.length;
      } else if (FS.isLink(node.mode)) {
        attr.size = node.link.length;
      } else {
        attr.size = 0;
      }
      attr.atime = new Date(node.timestamp);
      attr.mtime = new Date(node.timestamp);
      attr.ctime = new Date(node.timestamp);
      // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
      //       but this is not required by the standard.
      attr.blksize = 4096;
      attr.blocks = Math.ceil(attr.size / attr.blksize);
      return attr;
    },
    setattr: function (node, attr) {
      if (attr.mode !== undefined) {
        node.mode = attr.mode;
      }
      if (attr.timestamp !== undefined) {
        node.timestamp = attr.timestamp;
      }
      if (attr.size !== undefined) {
        MEMFS.ensureFlexible(node);
        var contents = node.contents;
        if (attr.size < contents.length) contents.length = attr.size;
        else while (attr.size > contents.length) contents.push(0);
      }
    },
    lookup: function (parent, name) {
      throw FS.genericErrors[ERRNO_CODES.ENOENT];
    },
    mknod: function (parent, name, mode, dev) {
      return MEMFS.createNode(parent, name, mode, dev);
    },
    rename: function (old_node, new_dir, new_name) {
      // if we're overwriting a directory at new_name, make sure it's empty.
      if (FS.isDir(old_node.mode)) {
        var new_node;
        try {
          new_node = FS.lookupNode(new_dir, new_name);
        } catch (e) {}
        if (new_node) {
          for (var i in new_node.contents) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
          }
        }
      }
      // do the internal rewiring
      delete old_node.parent.contents[old_node.name];
      old_node.name = new_name;
      new_dir.contents[new_name] = old_node;
      old_node.parent = new_dir;
    },
    unlink: function (parent, name) {
      delete parent.contents[name];
    },
    rmdir: function (parent, name) {
      var node = FS.lookupNode(parent, name);
      for (var i in node.contents) {
        throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
      }
      delete parent.contents[name];
    },
    readdir: function (node) {
      var entries = [".", ".."];
      for (var key in node.contents) {
        if (!node.contents.hasOwnProperty(key)) {
          continue;
        }
        entries.push(key);
      }
      return entries;
    },
    symlink: function (parent, newname, oldpath) {
      var node = MEMFS.createNode(parent, newname, 0777 | 40960, 0);
      node.link = oldpath;
      return node;
    },
    readlink: function (node) {
      if (!FS.isLink(node.mode)) {
        throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
      }
      return node.link;
    },
  },
  stream_ops: {
    read: function (stream, buffer, offset, length, position) {
      var contents = stream.node.contents;
      if (position >= contents.length) return 0;
      var size = Math.min(contents.length - position, length);
      assert(size >= 0);
      if (size > 8 && contents.subarray) {
        // non-trivial, and typed array
        buffer.set(contents.subarray(position, position + size), offset);
      } else {
        for (var i = 0; i < size; i++) {
          buffer[offset + i] = contents[position + i];
        }
      }
      return size;
    },
    write: function (stream, buffer, offset, length, position, canOwn) {
      var node = stream.node;
      node.timestamp = Date.now();
      var contents = node.contents;
      if (
        length &&
        contents.length === 0 &&
        position === 0 &&
        buffer.subarray
      ) {
        // just replace it with the new data
        if (canOwn && offset === 0) {
          node.contents = buffer; // this could be a subarray of Emscripten HEAP, or allocated from some other source.
          node.contentMode =
            buffer.buffer === HEAP8.buffer
              ? MEMFS.CONTENT_OWNING
              : MEMFS.CONTENT_FIXED;
        } else {
          node.contents = new Uint8Array(
            buffer.subarray(offset, offset + length)
          );
          node.contentMode = MEMFS.CONTENT_FIXED;
        }
        return length;
      }
      MEMFS.ensureFlexible(node);
      var contents = node.contents;
      while (contents.length < position) contents.push(0);
      for (var i = 0; i < length; i++) {
        contents[position + i] = buffer[offset + i];
      }
      return length;
    },
    llseek: function (stream, offset, whence) {
      var position = offset;
      if (whence === 1) {
        // SEEK_CUR.
        position += stream.position;
      } else if (whence === 2) {
        // SEEK_END.
        if (FS.isFile(stream.node.mode)) {
          position += stream.node.contents.length;
        }
      }
      if (position < 0) {
        throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
      }
      stream.ungotten = [];
      stream.position = position;
      return position;
    },
    allocate: function (stream, offset, length) {
      MEMFS.ensureFlexible(stream.node);
      var contents = stream.node.contents;
      var limit = offset + length;
      while (limit > contents.length) contents.push(0);
    },
    mmap: function (stream, buffer, offset, length, position, prot, flags) {
      if (!FS.isFile(stream.node.mode)) {
        throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
      }
      var ptr;
      var allocated;
      var contents = stream.node.contents;
      // Only make a new copy when MAP_PRIVATE is specified.
      if (
        !(flags & 2) &&
        (contents.buffer === buffer || contents.buffer === buffer.buffer)
      ) {
        // We can't emulate MAP_SHARED when the file is not backed by the buffer
        // we're mapping to (e.g. the HEAP buffer).
        allocated = false;
        ptr = contents.byteOffset;
      } else {
        // Try to avoid unnecessary slices.
        if (position > 0 || position + length < contents.length) {
          if (contents.subarray) {
            contents = contents.subarray(position, position + length);
          } else {
            contents = Array.prototype.slice.call(
              contents,
              position,
              position + length
            );
          }
        }
        allocated = true;
        ptr = _malloc(length);
        if (!ptr) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOMEM);
        }
        buffer.set(contents, ptr);
      }
      return { ptr: ptr, allocated: allocated };
    },
  },
};

var IDBFS = {
  dbs: {},
  indexedDB: function () {
    return (
      window.indexedDB ||
      window.mozIndexedDB ||
      window.webkitIndexedDB ||
      window.msIndexedDB
    );
  },
  DB_VERSION: 21,
  DB_STORE_NAME: "FILE_DATA",
  mount: function (mount) {
    // reuse all of the core MEMFS functionality
    return MEMFS.mount.apply(null, arguments);
  },
  syncfs: function (mount, populate, callback) {
    IDBFS.getLocalSet(mount, function (err, local) {
      if (err) return callback(err);

      IDBFS.getRemoteSet(mount, function (err, remote) {
        if (err) return callback(err);

        var src = populate ? remote : local;
        var dst = populate ? local : remote;

        IDBFS.reconcile(src, dst, callback);
      });
    });
  },
  getDB: function (name, callback) {
    // check the cache first
    var db = IDBFS.dbs[name];
    if (db) {
      return callback(null, db);
    }

    var req;
    try {
      req = IDBFS.indexedDB().open(name, IDBFS.DB_VERSION);
    } catch (e) {
      return callback(e);
    }
    req.onupgradeneeded = function (e) {
      var db = e.target.result;
      var transaction = e.target.transaction;

      var fileStore;

      if (db.objectStoreNames.contains(IDBFS.DB_STORE_NAME)) {
        fileStore = transaction.objectStore(IDBFS.DB_STORE_NAME);
      } else {
        fileStore = db.createObjectStore(IDBFS.DB_STORE_NAME);
      }

      fileStore.createIndex("timestamp", "timestamp", { unique: false });
    };
    req.onsuccess = function () {
      db = req.result;

      // add to the cache
      IDBFS.dbs[name] = db;
      callback(null, db);
    };
    req.onerror = function () {
      callback(this.error);
    };
  },
  getLocalSet: function (mount, callback) {
    var entries = {};

    function isRealDir(p) {
      return p !== "." && p !== "..";
    }
    function toAbsolute(root) {
      return function (p) {
        return PATH.join2(root, p);
      };
    }

    var check = FS.readdir(mount.mountpoint)
      .filter(isRealDir)
      .map(toAbsolute(mount.mountpoint));

    while (check.length) {
      var path = check.pop();
      var stat;

      try {
        stat = FS.stat(path);
      } catch (e) {
        return callback(e);
      }

      if (FS.isDir(stat.mode)) {
        check.push.apply(
          check,
          FS.readdir(path).filter(isRealDir).map(toAbsolute(path))
        );
      }

      entries[path] = { timestamp: stat.mtime };
    }

    return callback(null, { type: "local", entries: entries });
  },
  getRemoteSet: function (mount, callback) {
    var entries = {};

    IDBFS.getDB(mount.mountpoint, function (err, db) {
      if (err) return callback(err);

      var transaction = db.transaction([IDBFS.DB_STORE_NAME], "readonly");
      transaction.onerror = function () {
        callback(this.error);
      };

      var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
      var index = store.index("timestamp");

      index.openKeyCursor().onsuccess = function (event) {
        var cursor = event.target.result;

        if (!cursor) {
          return callback(null, { type: "remote", db: db, entries: entries });
        }

        entries[cursor.primaryKey] = { timestamp: cursor.key };

        cursor.continue();
      };
    });
  },
  loadLocalEntry: function (path, callback) {
    var stat, node;

    try {
      var lookup = FS.lookupPath(path);
      node = lookup.node;
      stat = FS.stat(path);
    } catch (e) {
      return callback(e);
    }

    if (FS.isDir(stat.mode)) {
      return callback(null, { timestamp: stat.mtime, mode: stat.mode });
    } else if (FS.isFile(stat.mode)) {
      return callback(null, {
        timestamp: stat.mtime,
        mode: stat.mode,
        contents: node.contents,
      });
    } else {
      return callback(new Error("node type not supported"));
    }
  },
  storeLocalEntry: function (path, entry, callback) {
    try {
      if (FS.isDir(entry.mode)) {
        FS.mkdir(path, entry.mode);
      } else if (FS.isFile(entry.mode)) {
        FS.writeFile(path, entry.contents, {
          encoding: "binary",
          canOwn: true,
        });
      } else {
        return callback(new Error("node type not supported"));
      }

      FS.utime(path, entry.timestamp, entry.timestamp);
    } catch (e) {
      return callback(e);
    }

    callback(null);
  },
  removeLocalEntry: function (path, callback) {
    try {
      var lookup = FS.lookupPath(path);
      var stat = FS.stat(path);

      if (FS.isDir(stat.mode)) {
        FS.rmdir(path);
      } else if (FS.isFile(stat.mode)) {
        FS.unlink(path);
      }
    } catch (e) {
      return callback(e);
    }

    callback(null);
  },
  loadRemoteEntry: function (store, path, callback) {
    var req = store.get(path);
    req.onsuccess = function (event) {
      callback(null, event.target.result);
    };
    req.onerror = function () {
      callback(this.error);
    };
  },
  storeRemoteEntry: function (store, path, entry, callback) {
    var req = store.put(entry, path);
    req.onsuccess = function () {
      callback(null);
    };
    req.onerror = function () {
      callback(this.error);
    };
  },
  removeRemoteEntry: function (store, path, callback) {
    var req = store.delete(path);
    req.onsuccess = function () {
      callback(null);
    };
    req.onerror = function () {
      callback(this.error);
    };
  },
  reconcile: function (src, dst, callback) {
    var total = 0;

    var create = [];
    Object.keys(src.entries).forEach(function (key) {
      var e = src.entries[key];
      var e2 = dst.entries[key];
      if (!e2 || e.timestamp > e2.timestamp) {
        create.push(key);
        total++;
      }
    });

    var remove = [];
    Object.keys(dst.entries).forEach(function (key) {
      var e = dst.entries[key];
      var e2 = src.entries[key];
      if (!e2) {
        remove.push(key);
        total++;
      }
    });

    if (!total) {
      return callback(null);
    }

    var errored = false;
    var completed = 0;
    var db = src.type === "remote" ? src.db : dst.db;
    var transaction = db.transaction([IDBFS.DB_STORE_NAME], "readwrite");
    var store = transaction.objectStore(IDBFS.DB_STORE_NAME);

    function done(err) {
      if (err) {
        if (!done.errored) {
          done.errored = true;
          return callback(err);
        }
        return;
      }
      if (++completed >= total) {
        return callback(null);
      }
    }

    transaction.onerror = function () {
      done(this.error);
    };

    // sort paths in ascending order so directory entries are created
    // before the files inside them
    create.sort().forEach(function (path) {
      if (dst.type === "local") {
        IDBFS.loadRemoteEntry(store, path, function (err, entry) {
          if (err) return done(err);
          IDBFS.storeLocalEntry(path, entry, done);
        });
      } else {
        IDBFS.loadLocalEntry(path, function (err, entry) {
          if (err) return done(err);
          IDBFS.storeRemoteEntry(store, path, entry, done);
        });
      }
    });

    // sort paths in descending order so files are deleted before their
    // parent directories
    remove
      .sort()
      .reverse()
      .forEach(function (path) {
        if (dst.type === "local") {
          IDBFS.removeLocalEntry(path, done);
        } else {
          IDBFS.removeRemoteEntry(store, path, done);
        }
      });
  },
};

var NODEFS = {
  isWindows: false,
  staticInit: function () {
    NODEFS.isWindows = !!process.platform.match(/^win/);
  },
  mount: function (mount) {
    assert(ENVIRONMENT_IS_NODE);
    return NODEFS.createNode(null, "/", NODEFS.getMode(mount.opts.root), 0);
  },
  createNode: function (parent, name, mode, dev) {
    if (!FS.isDir(mode) && !FS.isFile(mode) && !FS.isLink(mode)) {
      throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
    }
    var node = FS.createNode(parent, name, mode);
    node.node_ops = NODEFS.node_ops;
    node.stream_ops = NODEFS.stream_ops;
    return node;
  },
  getMode: function (path) {
    var stat;
    try {
      stat = fs.lstatSync(path);
      if (NODEFS.isWindows) {
        // On Windows, directories return permission bits 'rw-rw-rw-', even though they have 'rwxrwxrwx', so
        // propagate write bits to execute bits.
        stat.mode = stat.mode | ((stat.mode & 146) >> 1);
      }
    } catch (e) {
      if (!e.code) throw e;
      throw new FS.ErrnoError(ERRNO_CODES[e.code]);
    }
    return stat.mode;
  },
  realPath: function (node) {
    var parts = [];
    while (node.parent !== node) {
      parts.push(node.name);
      node = node.parent;
    }
    parts.push(node.mount.opts.root);
    parts.reverse();
    return PATH.join.apply(null, parts);
  },
  flagsToPermissionStringMap: {
    0: "r",
    1: "r+",
    2: "r+",
    64: "r",
    65: "r+",
    66: "r+",
    129: "rx+",
    193: "rx+",
    514: "w+",
    577: "w",
    578: "w+",
    705: "wx",
    706: "wx+",
    1024: "a",
    1025: "a",
    1026: "a+",
    1089: "a",
    1090: "a+",
    1153: "ax",
    1154: "ax+",
    1217: "ax",
    1218: "ax+",
    4096: "rs",
    4098: "rs+",
  },
  flagsToPermissionString: function (flags) {
    if (flags in NODEFS.flagsToPermissionStringMap) {
      return NODEFS.flagsToPermissionStringMap[flags];
    } else {
      return flags;
    }
  },
  node_ops: {
    getattr: function (node) {
      var path = NODEFS.realPath(node);
      var stat;
      try {
        stat = fs.lstatSync(path);
      } catch (e) {
        if (!e.code) throw e;
        throw new FS.ErrnoError(ERRNO_CODES[e.code]);
      }
      // node.js v0.10.20 doesn't report blksize and blocks on Windows. Fake them with default blksize of 4096.
      // See http://support.microsoft.com/kb/140365
      if (NODEFS.isWindows && !stat.blksize) {
        stat.blksize = 4096;
      }
      if (NODEFS.isWindows && !stat.blocks) {
        stat.blocks = ((stat.size + stat.blksize - 1) / stat.blksize) | 0;
      }
      return {
        dev: stat.dev,
        ino: stat.ino,
        mode: stat.mode,
        nlink: stat.nlink,
        uid: stat.uid,
        gid: stat.gid,
        rdev: stat.rdev,
        size: stat.size,
        atime: stat.atime,
        mtime: stat.mtime,
        ctime: stat.ctime,
        blksize: stat.blksize,
        blocks: stat.blocks,
      };
    },
    setattr: function (node, attr) {
      var path = NODEFS.realPath(node);
      try {
        if (attr.mode !== undefined) {
          fs.chmodSync(path, attr.mode);
          // update the common node structure mode as well
          node.mode = attr.mode;
        }
        if (attr.timestamp !== undefined) {
          var date = new Date(attr.timestamp);
          fs.utimesSync(path, date, date);
        }
        if (attr.size !== undefined) {
          fs.truncateSync(path, attr.size);
        }
      } catch (e) {
        if (!e.code) throw e;
        throw new FS.ErrnoError(ERRNO_CODES[e.code]);
      }
    },
    lookup: function (parent, name) {
      var path = PATH.join2(NODEFS.realPath(parent), name);
      var mode = NODEFS.getMode(path);
      return NODEFS.createNode(parent, name, mode);
    },
    mknod: function (parent, name, mode, dev) {
      var node = NODEFS.createNode(parent, name, mode, dev);
      // create the backing node for this in the fs root as well
      var path = NODEFS.realPath(node);
      try {
        if (FS.isDir(node.mode)) {
          fs.mkdirSync(path, node.mode);
        } else {
          fs.writeFileSync(path, "", { mode: node.mode });
        }
      } catch (e) {
        if (!e.code) throw e;
        throw new FS.ErrnoError(ERRNO_CODES[e.code]);
      }
      return node;
    },
    rename: function (oldNode, newDir, newName) {
      var oldPath = NODEFS.realPath(oldNode);
      var newPath = PATH.join2(NODEFS.realPath(newDir), newName);
      try {
        fs.renameSync(oldPath, newPath);
      } catch (e) {
        if (!e.code) throw e;
        throw new FS.ErrnoError(ERRNO_CODES[e.code]);
      }
    },
    unlink: function (parent, name) {
      var path = PATH.join2(NODEFS.realPath(parent), name);
      try {
        fs.unlinkSync(path);
      } catch (e) {
        if (!e.code) throw e;
        throw new FS.ErrnoError(ERRNO_CODES[e.code]);
      }
    },
    rmdir: function (parent, name) {
      var path = PATH.join2(NODEFS.realPath(parent), name);
      try {
        fs.rmdirSync(path);
      } catch (e) {
        if (!e.code) throw e;
        throw new FS.ErrnoError(ERRNO_CODES[e.code]);
      }
    },
    readdir: function (node) {
      var path = NODEFS.realPath(node);
      try {
        return fs.readdirSync(path);
      } catch (e) {
        if (!e.code) throw e;
        throw new FS.ErrnoError(ERRNO_CODES[e.code]);
      }
    },
    symlink: function (parent, newName, oldPath) {
      var newPath = PATH.join2(NODEFS.realPath(parent), newName);
      try {
        fs.symlinkSync(oldPath, newPath);
      } catch (e) {
        if (!e.code) throw e;
        throw new FS.ErrnoError(ERRNO_CODES[e.code]);
      }
    },
    readlink: function (node) {
      var path = NODEFS.realPath(node);
      try {
        return fs.readlinkSync(path);
      } catch (e) {
        if (!e.code) throw e;
        throw new FS.ErrnoError(ERRNO_CODES[e.code]);
      }
    },
  },
  stream_ops: {
    open: function (stream) {
      var path = NODEFS.realPath(stream.node);
      try {
        if (FS.isFile(stream.node.mode)) {
          stream.nfd = fs.openSync(
            path,
            NODEFS.flagsToPermissionString(stream.flags)
          );
        }
      } catch (e) {
        if (!e.code) throw e;
        throw new FS.ErrnoError(ERRNO_CODES[e.code]);
      }
    },
    close: function (stream) {
      try {
        if (FS.isFile(stream.node.mode) && stream.nfd) {
          fs.closeSync(stream.nfd);
        }
      } catch (e) {
        if (!e.code) throw e;
        throw new FS.ErrnoError(ERRNO_CODES[e.code]);
      }
    },
    read: function (stream, buffer, offset, length, position) {
      // FIXME this is terrible.
      var nbuffer = new Buffer(length);
      var res;
      try {
        res = fs.readSync(stream.nfd, nbuffer, 0, length, position);
      } catch (e) {
        throw new FS.ErrnoError(ERRNO_CODES[e.code]);
      }
      if (res > 0) {
        for (var i = 0; i < res; i++) {
          buffer[offset + i] = nbuffer[i];
        }
      }
      return res;
    },
    write: function (stream, buffer, offset, length, position) {
      // FIXME this is terrible.
      var nbuffer = new Buffer(buffer.subarray(offset, offset + length));
      var res;
      try {
        res = fs.writeSync(stream.nfd, nbuffer, 0, length, position);
      } catch (e) {
        throw new FS.ErrnoError(ERRNO_CODES[e.code]);
      }
      return res;
    },
    llseek: function (stream, offset, whence) {
      var position = offset;
      if (whence === 1) {
        // SEEK_CUR.
        position += stream.position;
      } else if (whence === 2) {
        // SEEK_END.
        if (FS.isFile(stream.node.mode)) {
          try {
            var stat = fs.fstatSync(stream.nfd);
            position += stat.size;
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        }
      }

      if (position < 0) {
        throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
      }

      stream.position = position;
      return position;
    },
  },
};

var _stdin = allocate(1, "i32*", ALLOC_STATIC);

var _stdout = allocate(1, "i32*", ALLOC_STATIC);

var _stderr = allocate(1, "i32*", ALLOC_STATIC);

function _fflush(stream) {
  // int fflush(FILE *stream);
  // http://pubs.opengroup.org/onlinepubs/000095399/functions/fflush.html
  // we don't currently perform any user-space buffering of data
}
var FS = {
  root: null,
  mounts: [],
  devices: [null],
  streams: [],
  nextInode: 1,
  nameTable: null,
  currentPath: "/",
  initialized: false,
  ignorePermissions: true,
  ErrnoError: null,
  genericErrors: {},
  handleFSError: function (e) {
    if (!(e instanceof FS.ErrnoError)) throw e + " : " + stackTrace();
    return ___setErrNo(e.errno);
  },
  lookupPath: function (path, opts) {
    path = PATH.resolve(FS.cwd(), path);
    opts = opts || {};

    var defaults = {
      follow_mount: true,
      recurse_count: 0,
    };
    for (var key in defaults) {
      if (opts[key] === undefined) {
        opts[key] = defaults[key];
      }
    }

    if (opts.recurse_count > 8) {
      // max recursive lookup of 8
      throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
    }

    // split the path
    var parts = PATH.normalizeArray(
      path.split("/").filter(function (p) {
        return !!p;
      }),
      false
    );

    // start at the root
    var current = FS.root;
    var current_path = "/";

    for (var i = 0; i < parts.length; i++) {
      var islast = i === parts.length - 1;
      if (islast && opts.parent) {
        // stop resolving
        break;
      }

      current = FS.lookupNode(current, parts[i]);
      current_path = PATH.join2(current_path, parts[i]);

      // jump to the mount's root node if this is a mountpoint
      if (FS.isMountpoint(current)) {
        if (!islast || (islast && opts.follow_mount)) {
          current = current.mounted.root;
        }
      }

      // by default, lookupPath will not follow a symlink if it is the final path component.
      // setting opts.follow = true will override this behavior.
      if (!islast || opts.follow) {
        var count = 0;
        while (FS.isLink(current.mode)) {
          var link = FS.readlink(current_path);
          current_path = PATH.resolve(PATH.dirname(current_path), link);

          var lookup = FS.lookupPath(current_path, {
            recurse_count: opts.recurse_count,
          });
          current = lookup.node;

          if (count++ > 40) {
            // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
            throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
          }
        }
      }
    }

    return { path: current_path, node: current };
  },
  getPath: function (node) {
    var path;
    while (true) {
      if (FS.isRoot(node)) {
        var mount = node.mount.mountpoint;
        if (!path) return mount;
        return mount[mount.length - 1] !== "/"
          ? mount + "/" + path
          : mount + path;
      }
      path = path ? node.name + "/" + path : node.name;
      node = node.parent;
    }
  },
  hashName: function (parentid, name) {
    var hash = 0;

    for (var i = 0; i < name.length; i++) {
      hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
    }
    return ((parentid + hash) >>> 0) % FS.nameTable.length;
  },
  hashAddNode: function (node) {
    var hash = FS.hashName(node.parent.id, node.name);
    node.name_next = FS.nameTable[hash];
    FS.nameTable[hash] = node;
  },
  hashRemoveNode: function (node) {
    var hash = FS.hashName(node.parent.id, node.name);
    if (FS.nameTable[hash] === node) {
      FS.nameTable[hash] = node.name_next;
    } else {
      var current = FS.nameTable[hash];
      while (current) {
        if (current.name_next === node) {
          current.name_next = node.name_next;
          break;
        }
        current = current.name_next;
      }
    }
  },
  lookupNode: function (parent, name) {
    var err = FS.mayLookup(parent);
    if (err) {
      throw new FS.ErrnoError(err);
    }
    var hash = FS.hashName(parent.id, name);
    for (var node = FS.nameTable[hash]; node; node = node.name_next) {
      var nodeName = node.name;
      if (node.parent.id === parent.id && nodeName === name) {
        return node;
      }
    }
    // if we failed to find it in the cache, call into the VFS
    return FS.lookup(parent, name);
  },
  createNode: function (parent, name, mode, rdev) {
    if (!FS.FSNode) {
      FS.FSNode = function (parent, name, mode, rdev) {
        if (!parent) {
          parent = this; // root node sets parent to itself
        }
        this.parent = parent;
        this.mount = parent.mount;
        this.mounted = null;
        this.id = FS.nextInode++;
        this.name = name;
        this.mode = mode;
        this.node_ops = {};
        this.stream_ops = {};
        this.rdev = rdev;
      };

      FS.FSNode.prototype = {};

      // compatibility
      var readMode = 292 | 73;
      var writeMode = 146;

      // NOTE we must use Object.defineProperties instead of individual calls to
      // Object.defineProperty in order to make closure compiler happy
      Object.defineProperties(FS.FSNode.prototype, {
        read: {
          get: function () {
            return (this.mode & readMode) === readMode;
          },
          set: function (val) {
            val ? (this.mode |= readMode) : (this.mode &= ~readMode);
          },
        },
        write: {
          get: function () {
            return (this.mode & writeMode) === writeMode;
          },
          set: function (val) {
            val ? (this.mode |= writeMode) : (this.mode &= ~writeMode);
          },
        },
        isFolder: {
          get: function () {
            return FS.isDir(this.mode);
          },
        },
        isDevice: {
          get: function () {
            return FS.isChrdev(this.mode);
          },
        },
      });
    }

    var node = new FS.FSNode(parent, name, mode, rdev);

    FS.hashAddNode(node);

    return node;
  },
  destroyNode: function (node) {
    FS.hashRemoveNode(node);
  },
  isRoot: function (node) {
    return node === node.parent;
  },
  isMountpoint: function (node) {
    return !!node.mounted;
  },
  isFile: function (mode) {
    return (mode & 61440) === 32768;
  },
  isDir: function (mode) {
    return (mode & 61440) === 16384;
  },
  isLink: function (mode) {
    return (mode & 61440) === 40960;
  },
  isChrdev: function (mode) {
    return (mode & 61440) === 8192;
  },
  isBlkdev: function (mode) {
    return (mode & 61440) === 24576;
  },
  isFIFO: function (mode) {
    return (mode & 61440) === 4096;
  },
  isSocket: function (mode) {
    return (mode & 49152) === 49152;
  },
  flagModes: {
    r: 0,
    rs: 1052672,
    "r+": 2,
    w: 577,
    wx: 705,
    xw: 705,
    "w+": 578,
    "wx+": 706,
    "xw+": 706,
    a: 1089,
    ax: 1217,
    xa: 1217,
    "a+": 1090,
    "ax+": 1218,
    "xa+": 1218,
  },
  modeStringToFlags: function (str) {
    var flags = FS.flagModes[str];
    if (typeof flags === "undefined") {
      throw new Error("Unknown file open mode: " + str);
    }
    return flags;
  },
  flagsToPermissionString: function (flag) {
    var accmode = flag & 2097155;
    var perms = ["r", "w", "rw"][accmode];
    if (flag & 512) {
      perms += "w";
    }
    return perms;
  },
  nodePermissions: function (node, perms) {
    if (FS.ignorePermissions) {
      return 0;
    }
    // return 0 if any user, group or owner bits are set.
    if (perms.indexOf("r") !== -1 && !(node.mode & 292)) {
      return ERRNO_CODES.EACCES;
    } else if (perms.indexOf("w") !== -1 && !(node.mode & 146)) {
      return ERRNO_CODES.EACCES;
    } else if (perms.indexOf("x") !== -1 && !(node.mode & 73)) {
      return ERRNO_CODES.EACCES;
    }
    return 0;
  },
  mayLookup: function (dir) {
    return FS.nodePermissions(dir, "x");
  },
  mayCreate: function (dir, name) {
    try {
      var node = FS.lookupNode(dir, name);
      return ERRNO_CODES.EEXIST;
    } catch (e) {}
    return FS.nodePermissions(dir, "wx");
  },
  mayDelete: function (dir, name, isdir) {
    var node;
    try {
      node = FS.lookupNode(dir, name);
    } catch (e) {
      return e.errno;
    }
    var err = FS.nodePermissions(dir, "wx");
    if (err) {
      return err;
    }
    if (isdir) {
      if (!FS.isDir(node.mode)) {
        return ERRNO_CODES.ENOTDIR;
      }
      if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
        return ERRNO_CODES.EBUSY;
      }
    } else {
      if (FS.isDir(node.mode)) {
        return ERRNO_CODES.EISDIR;
      }
    }
    return 0;
  },
  mayOpen: function (node, flags) {
    if (!node) {
      return ERRNO_CODES.ENOENT;
    }
    if (FS.isLink(node.mode)) {
      return ERRNO_CODES.ELOOP;
    } else if (FS.isDir(node.mode)) {
      if (
        (flags & 2097155) !== 0 || // opening for write
        flags & 512
      ) {
        return ERRNO_CODES.EISDIR;
      }
    }
    return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
  },
  MAX_OPEN_FDS: 4096,
  nextfd: function (fd_start, fd_end) {
    fd_start = fd_start || 0;
    fd_end = fd_end || FS.MAX_OPEN_FDS;
    for (var fd = fd_start; fd <= fd_end; fd++) {
      if (!FS.streams[fd]) {
        return fd;
      }
    }
    throw new FS.ErrnoError(ERRNO_CODES.EMFILE);
  },
  getStream: function (fd) {
    return FS.streams[fd];
  },
  createStream: function (stream, fd_start, fd_end) {
    if (!FS.FSStream) {
      FS.FSStream = function () {};
      FS.FSStream.prototype = {};
      // compatibility
      Object.defineProperties(FS.FSStream.prototype, {
        object: {
          get: function () {
            return this.node;
          },
          set: function (val) {
            this.node = val;
          },
        },
        isRead: {
          get: function () {
            return (this.flags & 2097155) !== 1;
          },
        },
        isWrite: {
          get: function () {
            return (this.flags & 2097155) !== 0;
          },
        },
        isAppend: {
          get: function () {
            return this.flags & 1024;
          },
        },
      });
    }
    if (stream.__proto__) {
      // reuse the object
      stream.__proto__ = FS.FSStream.prototype;
    } else {
      var newStream = new FS.FSStream();
      for (var p in stream) {
        newStream[p] = stream[p];
      }
      stream = newStream;
    }
    var fd = FS.nextfd(fd_start, fd_end);
    stream.fd = fd;
    FS.streams[fd] = stream;
    return stream;
  },
  closeStream: function (fd) {
    FS.streams[fd] = null;
  },
  getStreamFromPtr: function (ptr) {
    return FS.streams[ptr - 1];
  },
  getPtrForStream: function (stream) {
    return stream ? stream.fd + 1 : 0;
  },
  chrdev_stream_ops: {
    open: function (stream) {
      var device = FS.getDevice(stream.node.rdev);
      // override node's stream ops with the device's
      stream.stream_ops = device.stream_ops;
      // forward the open call
      if (stream.stream_ops.open) {
        stream.stream_ops.open(stream);
      }
    },
    llseek: function () {
      throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
    },
  },
  major: function (dev) {
    return dev >> 8;
  },
  minor: function (dev) {
    return dev & 0xff;
  },
  makedev: function (ma, mi) {
    return (ma << 8) | mi;
  },
  registerDevice: function (dev, ops) {
    FS.devices[dev] = { stream_ops: ops };
  },
  getDevice: function (dev) {
    return FS.devices[dev];
  },
  getMounts: function (mount) {
    var mounts = [];
    var check = [mount];

    while (check.length) {
      var m = check.pop();

      mounts.push(m);

      check.push.apply(check, m.mounts);
    }

    return mounts;
  },
  syncfs: function (populate, callback) {
    if (typeof populate === "function") {
      callback = populate;
      populate = false;
    }

    var mounts = FS.getMounts(FS.root.mount);
    var completed = 0;

    function done(err) {
      if (err) {
        if (!done.errored) {
          done.errored = true;
          return callback(err);
        }
        return;
      }
      if (++completed >= mounts.length) {
        callback(null);
      }
    }

    // sync all mounts
    mounts.forEach(function (mount) {
      if (!mount.type.syncfs) {
        return done(null);
      }
      mount.type.syncfs(mount, populate, done);
    });
  },
  mount: function (type, opts, mountpoint) {
    var root = mountpoint === "/";
    var pseudo = !mountpoint;
    var node;

    if (root && FS.root) {
      throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
    } else if (!root && !pseudo) {
      var lookup = FS.lookupPath(mountpoint, { follow_mount: false });

      mountpoint = lookup.path; // use the absolute path
      node = lookup.node;

      if (FS.isMountpoint(node)) {
        throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
      }

      if (!FS.isDir(node.mode)) {
        throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
      }
    }

    var mount = {
      type: type,
      opts: opts,
      mountpoint: mountpoint,
      mounts: [],
    };

    // create a root node for the fs
    var mountRoot = type.mount(mount);
    mountRoot.mount = mount;
    mount.root = mountRoot;

    if (root) {
      FS.root = mountRoot;
    } else if (node) {
      // set as a mountpoint
      node.mounted = mount;

      // add the new mount to the current mount's children
      if (node.mount) {
        node.mount.mounts.push(mount);
      }
    }

    return mountRoot;
  },
  unmount: function (mountpoint) {
    var lookup = FS.lookupPath(mountpoint, { follow_mount: false });

    if (!FS.isMountpoint(lookup.node)) {
      throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
    }

    // destroy the nodes for this mount, and all its child mounts
    var node = lookup.node;
    var mount = node.mounted;
    var mounts = FS.getMounts(mount);

    Object.keys(FS.nameTable).forEach(function (hash) {
      var current = FS.nameTable[hash];

      while (current) {
        var next = current.name_next;

        if (mounts.indexOf(current.mount) !== -1) {
          FS.destroyNode(current);
        }

        current = next;
      }
    });

    // no longer a mountpoint
    node.mounted = null;

    // remove this mount from the child mounts
    var idx = node.mount.mounts.indexOf(mount);
    assert(idx !== -1);
    node.mount.mounts.splice(idx, 1);
  },
  lookup: function (parent, name) {
    return parent.node_ops.lookup(parent, name);
  },
  mknod: function (path, mode, dev) {
    var lookup = FS.lookupPath(path, { parent: true });
    var parent = lookup.node;
    var name = PATH.basename(path);
    var err = FS.mayCreate(parent, name);
    if (err) {
      throw new FS.ErrnoError(err);
    }
    if (!parent.node_ops.mknod) {
      throw new FS.ErrnoError(ERRNO_CODES.EPERM);
    }
    return parent.node_ops.mknod(parent, name, mode, dev);
  },
  create: function (path, mode) {
    mode = mode !== undefined ? mode : 0666;
    mode &= 4095;
    mode |= 32768;
    return FS.mknod(path, mode, 0);
  },
  mkdir: function (path, mode) {
    mode = mode !== undefined ? mode : 0777;
    mode &= 511 | 512;
    mode |= 16384;
    return FS.mknod(path, mode, 0);
  },
  mkdev: function (path, mode, dev) {
    if (typeof dev === "undefined") {
      dev = mode;
      mode = 0666;
    }
    mode |= 8192;
    return FS.mknod(path, mode, dev);
  },
  symlink: function (oldpath, newpath) {
    var lookup = FS.lookupPath(newpath, { parent: true });
    var parent = lookup.node;
    var newname = PATH.basename(newpath);
    var err = FS.mayCreate(parent, newname);
    if (err) {
      throw new FS.ErrnoError(err);
    }
    if (!parent.node_ops.symlink) {
      throw new FS.ErrnoError(ERRNO_CODES.EPERM);
    }
    return parent.node_ops.symlink(parent, newname, oldpath);
  },
  rename: function (old_path, new_path) {
    var old_dirname = PATH.dirname(old_path);
    var new_dirname = PATH.dirname(new_path);
    var old_name = PATH.basename(old_path);
    var new_name = PATH.basename(new_path);
    // parents must exist
    var lookup, old_dir, new_dir;
    try {
      lookup = FS.lookupPath(old_path, { parent: true });
      old_dir = lookup.node;
      lookup = FS.lookupPath(new_path, { parent: true });
      new_dir = lookup.node;
    } catch (e) {
      throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
    }
    // need to be part of the same mount
    if (old_dir.mount !== new_dir.mount) {
      throw new FS.ErrnoError(ERRNO_CODES.EXDEV);
    }
    // source must exist
    var old_node = FS.lookupNode(old_dir, old_name);
    // old path should not be an ancestor of the new path
    var relative = PATH.relative(old_path, new_dirname);
    if (relative.charAt(0) !== ".") {
      throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
    }
    // new path should not be an ancestor of the old path
    relative = PATH.relative(new_path, old_dirname);
    if (relative.charAt(0) !== ".") {
      throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
    }
    // see if the new path already exists
    var new_node;
    try {
      new_node = FS.lookupNode(new_dir, new_name);
    } catch (e) {
      // not fatal
    }
    // early out if nothing needs to change
    if (old_node === new_node) {
      return;
    }
    // we'll need to delete the old entry
    var isdir = FS.isDir(old_node.mode);
    var err = FS.mayDelete(old_dir, old_name, isdir);
    if (err) {
      throw new FS.ErrnoError(err);
    }
    // need delete permissions if we'll be overwriting.
    // need create permissions if new doesn't already exist.
    err = new_node
      ? FS.mayDelete(new_dir, new_name, isdir)
      : FS.mayCreate(new_dir, new_name);
    if (err) {
      throw new FS.ErrnoError(err);
    }
    if (!old_dir.node_ops.rename) {
      throw new FS.ErrnoError(ERRNO_CODES.EPERM);
    }
    if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
      throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
    }
    // if we are going to change the parent, check write permissions
    if (new_dir !== old_dir) {
      err = FS.nodePermissions(old_dir, "w");
      if (err) {
        throw new FS.ErrnoError(err);
      }
    }
    // remove the node from the lookup hash
    FS.hashRemoveNode(old_node);
    // do the underlying fs rename
    try {
      old_dir.node_ops.rename(old_node, new_dir, new_name);
    } catch (e) {
      throw e;
    } finally {
      // add the node back to the hash (in case node_ops.rename
      // changed its name)
      FS.hashAddNode(old_node);
    }
  },
  rmdir: function (path) {
    var lookup = FS.lookupPath(path, { parent: true });
    var parent = lookup.node;
    var name = PATH.basename(path);
    var node = FS.lookupNode(parent, name);
    var err = FS.mayDelete(parent, name, true);
    if (err) {
      throw new FS.ErrnoError(err);
    }
    if (!parent.node_ops.rmdir) {
      throw new FS.ErrnoError(ERRNO_CODES.EPERM);
    }
    if (FS.isMountpoint(node)) {
      throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
    }
    parent.node_ops.rmdir(parent, name);
    FS.destroyNode(node);
  },
  readdir: function (path) {
    var lookup = FS.lookupPath(path, { follow: true });
    var node = lookup.node;
    if (!node.node_ops.readdir) {
      throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
    }
    return node.node_ops.readdir(node);
  },
  unlink: function (path) {
    var lookup = FS.lookupPath(path, { parent: true });
    var parent = lookup.node;
    var name = PATH.basename(path);
    var node = FS.lookupNode(parent, name);
    var err = FS.mayDelete(parent, name, false);
    if (err) {
      // POSIX says unlink should set EPERM, not EISDIR
      if (err === ERRNO_CODES.EISDIR) err = ERRNO_CODES.EPERM;
      throw new FS.ErrnoError(err);
    }
    if (!parent.node_ops.unlink) {
      throw new FS.ErrnoError(ERRNO_CODES.EPERM);
    }
    if (FS.isMountpoint(node)) {
      throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
    }
    parent.node_ops.unlink(parent, name);
    FS.destroyNode(node);
  },
  readlink: function (path) {
    var lookup = FS.lookupPath(path);
    var link = lookup.node;
    if (!link.node_ops.readlink) {
      throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
    }
    return link.node_ops.readlink(link);
  },
  stat: function (path, dontFollow) {
    var lookup = FS.lookupPath(path, { follow: !dontFollow });
    var node = lookup.node;
    if (!node.node_ops.getattr) {
      throw new FS.ErrnoError(ERRNO_CODES.EPERM);
    }
    return node.node_ops.getattr(node);
  },
  lstat: function (path) {
    return FS.stat(path, true);
  },
  chmod: function (path, mode, dontFollow) {
    var node;
    if (typeof path === "string") {
      var lookup = FS.lookupPath(path, { follow: !dontFollow });
      node = lookup.node;
    } else {
      node = path;
    }
    if (!node.node_ops.setattr) {
      throw new FS.ErrnoError(ERRNO_CODES.EPERM);
    }
    node.node_ops.setattr(node, {
      mode: (mode & 4095) | (node.mode & ~4095),
      timestamp: Date.now(),
    });
  },
  lchmod: function (path, mode) {
    FS.chmod(path, mode, true);
  },
  fchmod: function (fd, mode) {
    var stream = FS.getStream(fd);
    if (!stream) {
      throw new FS.ErrnoError(ERRNO_CODES.EBADF);
    }
    FS.chmod(stream.node, mode);
  },
  chown: function (path, uid, gid, dontFollow) {
    var node;
    if (typeof path === "string") {
      var lookup = FS.lookupPath(path, { follow: !dontFollow });
      node = lookup.node;
    } else {
      node = path;
    }
    if (!node.node_ops.setattr) {
      throw new FS.ErrnoError(ERRNO_CODES.EPERM);
    }
    node.node_ops.setattr(node, {
      timestamp: Date.now(),
      // we ignore the uid / gid for now
    });
  },
  lchown: function (path, uid, gid) {
    FS.chown(path, uid, gid, true);
  },
  fchown: function (fd, uid, gid) {
    var stream = FS.getStream(fd);
    if (!stream) {
      throw new FS.ErrnoError(ERRNO_CODES.EBADF);
    }
    FS.chown(stream.node, uid, gid);
  },
  truncate: function (path, len) {
    if (len < 0) {
      throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
    }
    var node;
    if (typeof path === "string") {
      var lookup = FS.lookupPath(path, { follow: true });
      node = lookup.node;
    } else {
      node = path;
    }
    if (!node.node_ops.setattr) {
      throw new FS.ErrnoError(ERRNO_CODES.EPERM);
    }
    if (FS.isDir(node.mode)) {
      throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
    }
    if (!FS.isFile(node.mode)) {
      throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
    }
    var err = FS.nodePermissions(node, "w");
    if (err) {
      throw new FS.ErrnoError(err);
    }
    node.node_ops.setattr(node, {
      size: len,
      timestamp: Date.now(),
    });
  },
  ftruncate: function (fd, len) {
    var stream = FS.getStream(fd);
    if (!stream) {
      throw new FS.ErrnoError(ERRNO_CODES.EBADF);
    }
    if ((stream.flags & 2097155) === 0) {
      throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
    }
    FS.truncate(stream.node, len);
  },
  utime: function (path, atime, mtime) {
    var lookup = FS.lookupPath(path, { follow: true });
    var node = lookup.node;
    node.node_ops.setattr(node, {
      timestamp: Math.max(atime, mtime),
    });
  },
  open: function (path, flags, mode, fd_start, fd_end) {
    flags = typeof flags === "string" ? FS.modeStringToFlags(flags) : flags;
    mode = typeof mode === "undefined" ? 0666 : mode;
    if (flags & 64) {
      mode = (mode & 4095) | 32768;
    } else {
      mode = 0;
    }
    var node;
    if (typeof path === "object") {
      node = path;
    } else {
      path = PATH.normalize(path);
      try {
        var lookup = FS.lookupPath(path, {
          follow: !(flags & 131072),
        });
        node = lookup.node;
      } catch (e) {
        // ignore
      }
    }
    // perhaps we need to create the node
    if (flags & 64) {
      if (node) {
        // if O_CREAT and O_EXCL are set, error out if the node already exists
        if (flags & 128) {
          throw new FS.ErrnoError(ERRNO_CODES.EEXIST);
        }
      } else {
        // node doesn't exist, try to create it
        node = FS.mknod(path, mode, 0);
      }
    }
    if (!node) {
      throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
    }
    // can't truncate a device
    if (FS.isChrdev(node.mode)) {
      flags &= ~512;
    }
    // check permissions
    var err = FS.mayOpen(node, flags);
    if (err) {
      throw new FS.ErrnoError(err);
    }
    // do truncation if necessary
    if (flags & 512) {
      FS.truncate(node, 0);
    }
    // we've already handled these, don't pass down to the underlying vfs
    flags &= ~(128 | 512);

    // register the stream with the filesystem
    var stream = FS.createStream(
      {
        node: node,
        path: FS.getPath(node), // we want the absolute path to the node
        flags: flags,
        seekable: true,
        position: 0,
        stream_ops: node.stream_ops,
        // used by the file family libc calls (fopen, fwrite, ferror, etc.)
        ungotten: [],
        error: false,
      },
      fd_start,
      fd_end
    );
    // call the new stream's open function
    if (stream.stream_ops.open) {
      stream.stream_ops.open(stream);
    }
    if (Module["logReadFiles"] && !(flags & 1)) {
      if (!FS.readFiles) FS.readFiles = {};
      if (!(path in FS.readFiles)) {
        FS.readFiles[path] = 1;
        Module["printErr"]("read file: " + path);
      }
    }
    return stream;
  },
  close: function (stream) {
    try {
      if (stream.stream_ops.close) {
        stream.stream_ops.close(stream);
      }
    } catch (e) {
      throw e;
    } finally {
      FS.closeStream(stream.fd);
    }
  },
  llseek: function (stream, offset, whence) {
    if (!stream.seekable || !stream.stream_ops.llseek) {
      throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
    }
    return stream.stream_ops.llseek(stream, offset, whence);
  },
  read: function (stream, buffer, offset, length, position) {
    if (length < 0 || position < 0) {
      throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
    }
    if ((stream.flags & 2097155) === 1) {
      throw new FS.ErrnoError(ERRNO_CODES.EBADF);
    }
    if (FS.isDir(stream.node.mode)) {
      throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
    }
    if (!stream.stream_ops.read) {
      throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
    }
    var seeking = true;
    if (typeof position === "undefined") {
      position = stream.position;
      seeking = false;
    } else if (!stream.seekable) {
      throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
    }
    var bytesRead = stream.stream_ops.read(
      stream,
      buffer,
      offset,
      length,
      position
    );
    if (!seeking) stream.position += bytesRead;
    return bytesRead;
  },
  write: function (stream, buffer, offset, length, position, canOwn) {
    if (length < 0 || position < 0) {
      throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
    }
    if ((stream.flags & 2097155) === 0) {
      throw new FS.ErrnoError(ERRNO_CODES.EBADF);
    }
    if (FS.isDir(stream.node.mode)) {
      throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
    }
    if (!stream.stream_ops.write) {
      throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
    }
    var seeking = true;
    if (typeof position === "undefined") {
      position = stream.position;
      seeking = false;
    } else if (!stream.seekable) {
      throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
    }
    if (stream.flags & 1024) {
      // seek to the end before writing in append mode
      FS.llseek(stream, 0, 2);
    }
    var bytesWritten = stream.stream_ops.write(
      stream,
      buffer,
      offset,
      length,
      position,
      canOwn
    );
    if (!seeking) stream.position += bytesWritten;
    return bytesWritten;
  },
  allocate: function (stream, offset, length) {
    if (offset < 0 || length <= 0) {
      throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
    }
    if ((stream.flags & 2097155) === 0) {
      throw new FS.ErrnoError(ERRNO_CODES.EBADF);
    }
    if (!FS.isFile(stream.node.mode) && !FS.isDir(node.mode)) {
      throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
    }
    if (!stream.stream_ops.allocate) {
      throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
    }
    stream.stream_ops.allocate(stream, offset, length);
  },
  mmap: function (stream, buffer, offset, length, position, prot, flags) {
    // TODO if PROT is PROT_WRITE, make sure we have write access
    if ((stream.flags & 2097155) === 1) {
      throw new FS.ErrnoError(ERRNO_CODES.EACCES);
    }
    if (!stream.stream_ops.mmap) {
      throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
    }
    return stream.stream_ops.mmap(
      stream,
      buffer,
      offset,
      length,
      position,
      prot,
      flags
    );
  },
  ioctl: function (stream, cmd, arg) {
    if (!stream.stream_ops.ioctl) {
      throw new FS.ErrnoError(ERRNO_CODES.ENOTTY);
    }
    return stream.stream_ops.ioctl(stream, cmd, arg);
  },
  readFile: function (path, opts) {
    opts = opts || {};
    opts.flags = opts.flags || "r";
    opts.encoding = opts.encoding || "binary";
    if (opts.encoding !== "utf8" && opts.encoding !== "binary") {
      throw new Error('Invalid encoding type "' + opts.encoding + '"');
    }
    var ret;
    var stream = FS.open(path, opts.flags);
    var stat = FS.stat(path);
    var length = stat.size;
    var buf = new Uint8Array(length);
    FS.read(stream, buf, 0, length, 0);
    if (opts.encoding === "utf8") {
      ret = "";
      var utf8 = new Runtime.UTF8Processor();
      for (var i = 0; i < length; i++) {
        ret += utf8.processCChar(buf[i]);
      }
    } else if (opts.encoding === "binary") {
      ret = buf;
    }
    FS.close(stream);
    return ret;
  },
  writeFile: function (path, data, opts) {
    opts = opts || {};
    opts.flags = opts.flags || "w";
    opts.encoding = opts.encoding || "utf8";
    if (opts.encoding !== "utf8" && opts.encoding !== "binary") {
      throw new Error('Invalid encoding type "' + opts.encoding + '"');
    }
    var stream = FS.open(path, opts.flags, opts.mode);
    if (opts.encoding === "utf8") {
      var utf8 = new Runtime.UTF8Processor();
      var buf = new Uint8Array(utf8.processJSString(data));
      FS.write(stream, buf, 0, buf.length, 0, opts.canOwn);
    } else if (opts.encoding === "binary") {
      FS.write(stream, data, 0, data.length, 0, opts.canOwn);
    }
    FS.close(stream);
  },
  cwd: function () {
    return FS.currentPath;
  },
  chdir: function (path) {
    var lookup = FS.lookupPath(path, { follow: true });
    if (!FS.isDir(lookup.node.mode)) {
      throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
    }
    var err = FS.nodePermissions(lookup.node, "x");
    if (err) {
      throw new FS.ErrnoError(err);
    }
    FS.currentPath = lookup.path;
  },
  createDefaultDirectories: function () {
    FS.mkdir("/tmp");
  },
  createDefaultDevices: function () {
    // create /dev
    FS.mkdir("/dev");
    // setup /dev/null
    FS.registerDevice(FS.makedev(1, 3), {
      read: function () {
        return 0;
      },
      write: function () {
        return 0;
      },
    });
    FS.mkdev("/dev/null", FS.makedev(1, 3));
    // setup /dev/tty and /dev/tty1
    // stderr needs to print output using Module['printErr']
    // so we register a second tty just for it.
    TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
    TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
    FS.mkdev("/dev/tty", FS.makedev(5, 0));
    FS.mkdev("/dev/tty1", FS.makedev(6, 0));
    // we're not going to emulate the actual shm device,
    // just create the tmp dirs that reside in it commonly
    FS.mkdir("/dev/shm");
    FS.mkdir("/dev/shm/tmp");
  },
  createStandardStreams: function () {
    // TODO deprecate the old functionality of a single
    // input / output callback and that utilizes FS.createDevice
    // and instead require a unique set of stream ops

    // by default, we symlink the standard streams to the
    // default tty devices. however, if the standard streams
    // have been overwritten we create a unique device for
    // them instead.
    if (Module["stdin"]) {
      FS.createDevice("/dev", "stdin", Module["stdin"]);
    } else {
      FS.symlink("/dev/tty", "/dev/stdin");
    }
    if (Module["stdout"]) {
      FS.createDevice("/dev", "stdout", null, Module["stdout"]);
    } else {
      FS.symlink("/dev/tty", "/dev/stdout");
    }
    if (Module["stderr"]) {
      FS.createDevice("/dev", "stderr", null, Module["stderr"]);
    } else {
      FS.symlink("/dev/tty1", "/dev/stderr");
    }

    // open default streams for the stdin, stdout and stderr devices
    var stdin = FS.open("/dev/stdin", "r");
    HEAP32[_stdin >> 2] = FS.getPtrForStream(stdin);
    assert(stdin.fd === 0, "invalid handle for stdin (" + stdin.fd + ")");

    var stdout = FS.open("/dev/stdout", "w");
    HEAP32[_stdout >> 2] = FS.getPtrForStream(stdout);
    assert(stdout.fd === 1, "invalid handle for stdout (" + stdout.fd + ")");

    var stderr = FS.open("/dev/stderr", "w");
    HEAP32[_stderr >> 2] = FS.getPtrForStream(stderr);
    assert(stderr.fd === 2, "invalid handle for stderr (" + stderr.fd + ")");
  },
  ensureErrnoError: function () {
    if (FS.ErrnoError) return;
    FS.ErrnoError = function ErrnoError(errno) {
      this.errno = errno;
      for (var key in ERRNO_CODES) {
        if (ERRNO_CODES[key] === errno) {
          this.code = key;
          break;
        }
      }
      this.message = ERRNO_MESSAGES[errno];
    };
    FS.ErrnoError.prototype = new Error();
    FS.ErrnoError.prototype.constructor = FS.ErrnoError;
    // Some errors may happen quite a bit, to avoid overhead we reuse them (and suffer a lack of stack info)
    [ERRNO_CODES.ENOENT].forEach(function (code) {
      FS.genericErrors[code] = new FS.ErrnoError(code);
      FS.genericErrors[code].stack = "<generic error, no stack>";
    });
  },
  staticInit: function () {
    FS.ensureErrnoError();

    FS.nameTable = new Array(4096);

    FS.mount(MEMFS, {}, "/");

    FS.createDefaultDirectories();
    FS.createDefaultDevices();
  },
  init: function (input, output, error) {
    assert(
      !FS.init.initialized,
      "FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)"
    );
    FS.init.initialized = true;

    FS.ensureErrnoError();

    // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
    Module["stdin"] = input || Module["stdin"];
    Module["stdout"] = output || Module["stdout"];
    Module["stderr"] = error || Module["stderr"];

    FS.createStandardStreams();
  },
  quit: function () {
    FS.init.initialized = false;
    for (var i = 0; i < FS.streams.length; i++) {
      var stream = FS.streams[i];
      if (!stream) {
        continue;
      }
      FS.close(stream);
    }
  },
  getMode: function (canRead, canWrite) {
    var mode = 0;
    if (canRead) mode |= 292 | 73;
    if (canWrite) mode |= 146;
    return mode;
  },
  joinPath: function (parts, forceRelative) {
    var path = PATH.join.apply(null, parts);
    if (forceRelative && path[0] == "/") path = path.substr(1);
    return path;
  },
  absolutePath: function (relative, base) {
    return PATH.resolve(base, relative);
  },
  standardizePath: function (path) {
    return PATH.normalize(path);
  },
  findObject: function (path, dontResolveLastLink) {
    var ret = FS.analyzePath(path, dontResolveLastLink);
    if (ret.exists) {
      return ret.object;
    } else {
      ___setErrNo(ret.error);
      return null;
    }
  },
  analyzePath: function (path, dontResolveLastLink) {
    // operate from within the context of the symlink's target
    try {
      var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
      path = lookup.path;
    } catch (e) {}
    var ret = {
      isRoot: false,
      exists: false,
      error: 0,
      name: null,
      path: null,
      object: null,
      parentExists: false,
      parentPath: null,
      parentObject: null,
    };
    try {
      var lookup = FS.lookupPath(path, { parent: true });
      ret.parentExists = true;
      ret.parentPath = lookup.path;
      ret.parentObject = lookup.node;
      ret.name = PATH.basename(path);
      lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
      ret.exists = true;
      ret.path = lookup.path;
      ret.object = lookup.node;
      ret.name = lookup.node.name;
      ret.isRoot = lookup.path === "/";
    } catch (e) {
      ret.error = e.errno;
    }
    return ret;
  },
  createFolder: function (parent, name, canRead, canWrite) {
    var path = PATH.join2(
      typeof parent === "string" ? parent : FS.getPath(parent),
      name
    );
    var mode = FS.getMode(canRead, canWrite);
    return FS.mkdir(path, mode);
  },
  createPath: function (parent, path, canRead, canWrite) {
    parent = typeof parent === "string" ? parent : FS.getPath(parent);
    var parts = path.split("/").reverse();
    while (parts.length) {
      var part = parts.pop();
      if (!part) continue;
      var current = PATH.join2(parent, part);
      try {
        FS.mkdir(current);
      } catch (e) {
        // ignore EEXIST
      }
      parent = current;
    }
    return current;
  },
  createFile: function (parent, name, properties, canRead, canWrite) {
    var path = PATH.join2(
      typeof parent === "string" ? parent : FS.getPath(parent),
      name
    );
    var mode = FS.getMode(canRead, canWrite);
    return FS.create(path, mode);
  },
  createDataFile: function (parent, name, data, canRead, canWrite, canOwn) {
    var path = name
      ? PATH.join2(
          typeof parent === "string" ? parent : FS.getPath(parent),
          name
        )
      : parent;
    var mode = FS.getMode(canRead, canWrite);
    var node = FS.create(path, mode);
    if (data) {
      if (typeof data === "string") {
        var arr = new Array(data.length);
        for (var i = 0, len = data.length; i < len; ++i)
          arr[i] = data.charCodeAt(i);
        data = arr;
      }
      // make sure we can write to the file
      FS.chmod(node, mode | 146);
      var stream = FS.open(node, "w");
      FS.write(stream, data, 0, data.length, 0, canOwn);
      FS.close(stream);
      FS.chmod(node, mode);
    }
    return node;
  },
  createDevice: function (parent, name, input, output) {
    var path = PATH.join2(
      typeof parent === "string" ? parent : FS.getPath(parent),
      name
    );
    var mode = FS.getMode(!!input, !!output);
    if (!FS.createDevice.major) FS.createDevice.major = 64;
    var dev = FS.makedev(FS.createDevice.major++, 0);
    // Create a fake device that a set of stream ops to emulate
    // the old behavior.
    FS.registerDevice(dev, {
      open: function (stream) {
        stream.seekable = false;
      },
      close: function (stream) {
        // flush any pending line data
        if (output && output.buffer && output.buffer.length) {
          output(10);
        }
      },
      read: function (stream, buffer, offset, length, pos /* ignored */) {
        var bytesRead = 0;
        for (var i = 0; i < length; i++) {
          var result;
          try {
            result = input();
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES.EIO);
          }
          if (result === undefined && bytesRead === 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
          }
          if (result === null || result === undefined) break;
          bytesRead++;
          buffer[offset + i] = result;
        }
        if (bytesRead) {
          stream.node.timestamp = Date.now();
        }
        return bytesRead;
      },
      write: function (stream, buffer, offset, length, pos) {
        for (var i = 0; i < length; i++) {
          try {
            output(buffer[offset + i]);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES.EIO);
          }
        }
        if (length) {
          stream.node.timestamp = Date.now();
        }
        return i;
      },
    });
    return FS.mkdev(path, mode, dev);
  },
  createLink: function (parent, name, target, canRead, canWrite) {
    var path = PATH.join2(
      typeof parent === "string" ? parent : FS.getPath(parent),
      name
    );
    return FS.symlink(target, path);
  },
  forceLoadFile: function (obj) {
    if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
    var success = true;
    if (typeof XMLHttpRequest !== "undefined") {
      throw new Error(
        "Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread."
      );
    } else if (Module["read"]) {
      // Command-line.
      try {
        // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
        //          read() will try to parse UTF8.
        obj.contents = intArrayFromString(Module["read"](obj.url), true);
      } catch (e) {
        success = false;
      }
    } else {
      throw new Error("Cannot load without read() or XMLHttpRequest.");
    }
    if (!success) ___setErrNo(ERRNO_CODES.EIO);
    return success;
  },
  createLazyFile: function (parent, name, url, canRead, canWrite) {
    if (typeof XMLHttpRequest !== "undefined") {
      if (!ENVIRONMENT_IS_WORKER)
        throw "Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc";
      // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
      function LazyUint8Array() {
        this.lengthKnown = false;
        this.chunks = []; // Loaded chunks. Index is the chunk number
      }
      LazyUint8Array.prototype.get = function LazyUint8Array_get(idx) {
        if (idx > this.length - 1 || idx < 0) {
          return undefined;
        }
        var chunkOffset = idx % this.chunkSize;
        var chunkNum = Math.floor(idx / this.chunkSize);
        return this.getter(chunkNum)[chunkOffset];
      };
      LazyUint8Array.prototype.setDataGetter =
        function LazyUint8Array_setDataGetter(getter) {
          this.getter = getter;
        };
      LazyUint8Array.prototype.cacheLength =
        function LazyUint8Array_cacheLength() {
          // Find length
          var xhr = new XMLHttpRequest();
          xhr.open("HEAD", url, false);
          xhr.send(null);
          if (!((xhr.status >= 200 && xhr.status < 300) || xhr.status === 304))
            throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
          var datalength = Number(xhr.getResponseHeader("Content-length"));
          var header;
          var hasByteServing =
            (header = xhr.getResponseHeader("Accept-Ranges")) &&
            header === "bytes";
          var chunkSize = 1024 * 1024; // Chunk size in bytes

          if (!hasByteServing) chunkSize = datalength;

          // Function to get a range from the remote URL.
          var doXHR = function (from, to) {
            if (from > to)
              throw new Error(
                "invalid range (" +
                  from +
                  ", " +
                  to +
                  ") or no bytes requested!"
              );
            if (to > datalength - 1)
              throw new Error(
                "only " + datalength + " bytes available! programmer error!"
              );

            // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
            var xhr = new XMLHttpRequest();
            xhr.open("GET", url, false);
            if (datalength !== chunkSize)
              xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);

            // Some hints to the browser that we want binary data.
            if (typeof Uint8Array != "undefined")
              xhr.responseType = "arraybuffer";
            if (xhr.overrideMimeType) {
              xhr.overrideMimeType("text/plain; charset=x-user-defined");
            }

            xhr.send(null);
            if (
              !((xhr.status >= 200 && xhr.status < 300) || xhr.status === 304)
            )
              throw new Error(
                "Couldn't load " + url + ". Status: " + xhr.status
              );
            if (xhr.response !== undefined) {
              return new Uint8Array(xhr.response || []);
            } else {
              return intArrayFromString(xhr.responseText || "", true);
            }
          };
          var lazyArray = this;
          lazyArray.setDataGetter(function (chunkNum) {
            var start = chunkNum * chunkSize;
            var end = (chunkNum + 1) * chunkSize - 1; // including this byte
            end = Math.min(end, datalength - 1); // if datalength-1 is selected, this is the last block
            if (typeof lazyArray.chunks[chunkNum] === "undefined") {
              lazyArray.chunks[chunkNum] = doXHR(start, end);
            }
            if (typeof lazyArray.chunks[chunkNum] === "undefined")
              throw new Error("doXHR failed!");
            return lazyArray.chunks[chunkNum];
          });

          this._length = datalength;
          this._chunkSize = chunkSize;
          this.lengthKnown = true;
        };

      var lazyArray = new LazyUint8Array();
      Object.defineProperty(lazyArray, "length", {
        get: function () {
          if (!this.lengthKnown) {
            this.cacheLength();
          }
          return this._length;
        },
      });
      Object.defineProperty(lazyArray, "chunkSize", {
        get: function () {
          if (!this.lengthKnown) {
            this.cacheLength();
          }
          return this._chunkSize;
        },
      });

      var properties = { isDevice: false, contents: lazyArray };
    } else {
      var properties = { isDevice: false, url: url };
    }

    var node = FS.createFile(parent, name, properties, canRead, canWrite);
    // This is a total hack, but I want to get this lazy file code out of the
    // core of MEMFS. If we want to keep this lazy file concept I feel it should
    // be its own thin LAZYFS proxying calls to MEMFS.
    if (properties.contents) {
      node.contents = properties.contents;
    } else if (properties.url) {
      node.contents = null;
      node.url = properties.url;
    }
    // override each stream op with one that tries to force load the lazy file first
    var stream_ops = {};
    var keys = Object.keys(node.stream_ops);
    keys.forEach(function (key) {
      var fn = node.stream_ops[key];
      stream_ops[key] = function forceLoadLazyFile() {
        if (!FS.forceLoadFile(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EIO);
        }
        return fn.apply(null, arguments);
      };
    });
    // use a custom read function
    stream_ops.read = function stream_ops_read(
      stream,
      buffer,
      offset,
      length,
      position
    ) {
      if (!FS.forceLoadFile(node)) {
        throw new FS.ErrnoError(ERRNO_CODES.EIO);
      }
      var contents = stream.node.contents;
      if (position >= contents.length) return 0;
      var size = Math.min(contents.length - position, length);
      assert(size >= 0);
      if (contents.slice) {
        // normal array
        for (var i = 0; i < size; i++) {
          buffer[offset + i] = contents[position + i];
        }
      } else {
        for (var i = 0; i < size; i++) {
          // LazyUint8Array from sync binary XHR
          buffer[offset + i] = contents.get(position + i);
        }
      }
      return size;
    };
    node.stream_ops = stream_ops;
    return node;
  },
  createPreloadedFile: function (
    parent,
    name,
    url,
    canRead,
    canWrite,
    onload,
    onerror,
    dontCreateFile,
    canOwn
  ) {
    Browser.init();
    // TODO we should allow people to just pass in a complete filename instead
    // of parent and name being that we just join them anyways
    var fullname = name ? PATH.resolve(PATH.join2(parent, name)) : parent;
    function processData(byteArray) {
      function finish(byteArray) {
        if (!dontCreateFile) {
          FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
        }
        if (onload) onload();
        removeRunDependency("cp " + fullname);
      }
      var handled = false;
      Module["preloadPlugins"].forEach(function (plugin) {
        if (handled) return;
        if (plugin["canHandle"](fullname)) {
          plugin["handle"](byteArray, fullname, finish, function () {
            if (onerror) onerror();
            removeRunDependency("cp " + fullname);
          });
          handled = true;
        }
      });
      if (!handled) finish(byteArray);
    }
    addRunDependency("cp " + fullname);
    if (typeof url == "string") {
      Browser.asyncLoad(
        url,
        function (byteArray) {
          processData(byteArray);
        },
        onerror
      );
    } else {
      processData(url);
    }
  },
  indexedDB: function () {
    return (
      window.indexedDB ||
      window.mozIndexedDB ||
      window.webkitIndexedDB ||
      window.msIndexedDB
    );
  },
  DB_NAME: function () {
    return "EM_FS_" + window.location.pathname;
  },
  DB_VERSION: 20,
  DB_STORE_NAME: "FILE_DATA",
  saveFilesToDB: function (paths, onload, onerror) {
    onload = onload || function () {};
    onerror = onerror || function () {};
    var indexedDB = FS.indexedDB();
    try {
      var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
    } catch (e) {
      return onerror(e);
    }
    openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
      console.log("creating db");
      var db = openRequest.result;
      db.createObjectStore(FS.DB_STORE_NAME);
    };
    openRequest.onsuccess = function openRequest_onsuccess() {
      var db = openRequest.result;
      var transaction = db.transaction([FS.DB_STORE_NAME], "readwrite");
      var files = transaction.objectStore(FS.DB_STORE_NAME);
      var ok = 0,
        fail = 0,
        total = paths.length;
      function finish() {
        if (fail == 0) onload();
        else onerror();
      }
      paths.forEach(function (path) {
        var putRequest = files.put(FS.analyzePath(path).object.contents, path);
        putRequest.onsuccess = function putRequest_onsuccess() {
          ok++;
          if (ok + fail == total) finish();
        };
        putRequest.onerror = function putRequest_onerror() {
          fail++;
          if (ok + fail == total) finish();
        };
      });
      transaction.onerror = onerror;
    };
    openRequest.onerror = onerror;
  },
  loadFilesFromDB: function (paths, onload, onerror) {
    onload = onload || function () {};
    onerror = onerror || function () {};
    var indexedDB = FS.indexedDB();
    try {
      var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
    } catch (e) {
      return onerror(e);
    }
    openRequest.onupgradeneeded = onerror; // no database to load from
    openRequest.onsuccess = function openRequest_onsuccess() {
      var db = openRequest.result;
      try {
        var transaction = db.transaction([FS.DB_STORE_NAME], "readonly");
      } catch (e) {
        onerror(e);
        return;
      }
      var files = transaction.objectStore(FS.DB_STORE_NAME);
      var ok = 0,
        fail = 0,
        total = paths.length;
      function finish() {
        if (fail == 0) onload();
        else onerror();
      }
      paths.forEach(function (path) {
        var getRequest = files.get(path);
        getRequest.onsuccess = function getRequest_onsuccess() {
          if (FS.analyzePath(path).exists) {
            FS.unlink(path);
          }
          FS.createDataFile(
            PATH.dirname(path),
            PATH.basename(path),
            getRequest.result,
            true,
            true,
            true
          );
          ok++;
          if (ok + fail == total) finish();
        };
        getRequest.onerror = function getRequest_onerror() {
          fail++;
          if (ok + fail == total) finish();
        };
      });
      transaction.onerror = onerror;
    };
    openRequest.onerror = onerror;
  },
};
var PATH = {
  splitPath: function (filename) {
    var splitPathRe =
      /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
    return splitPathRe.exec(filename).slice(1);
  },
  normalizeArray: function (parts, allowAboveRoot) {
    // if the path tries to go above the root, `up` ends up > 0
    var up = 0;
    for (var i = parts.length - 1; i >= 0; i--) {
      var last = parts[i];
      if (last === ".") {
        parts.splice(i, 1);
      } else if (last === "..") {
        parts.splice(i, 1);
        up++;
      } else if (up) {
        parts.splice(i, 1);
        up--;
      }
    }
    // if the path is allowed to go above the root, restore leading ..s
    if (allowAboveRoot) {
      for (; up--; up) {
        parts.unshift("..");
      }
    }
    return parts;
  },
  normalize: function (path) {
    var isAbsolute = path.charAt(0) === "/",
      trailingSlash = path.substr(-1) === "/";
    // Normalize the path
    path = PATH.normalizeArray(
      path.split("/").filter(function (p) {
        return !!p;
      }),
      !isAbsolute
    ).join("/");
    if (!path && !isAbsolute) {
      path = ".";
    }
    if (path && trailingSlash) {
      path += "/";
    }
    return (isAbsolute ? "/" : "") + path;
  },
  dirname: function (path) {
    var result = PATH.splitPath(path),
      root = result[0],
      dir = result[1];
    if (!root && !dir) {
      // No dirname whatsoever
      return ".";
    }
    if (dir) {
      // It has a dirname, strip trailing slash
      dir = dir.substr(0, dir.length - 1);
    }
    return root + dir;
  },
  basename: function (path) {
    // EMSCRIPTEN return '/'' for '/', not an empty string
    if (path === "/") return "/";
    var lastSlash = path.lastIndexOf("/");
    if (lastSlash === -1) return path;
    return path.substr(lastSlash + 1);
  },
  extname: function (path) {
    return PATH.splitPath(path)[3];
  },
  join: function () {
    var paths = Array.prototype.slice.call(arguments, 0);
    return PATH.normalize(paths.join("/"));
  },
  join2: function (l, r) {
    return PATH.normalize(l + "/" + r);
  },
  resolve: function () {
    var resolvedPath = "",
      resolvedAbsolute = false;
    for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
      var path = i >= 0 ? arguments[i] : FS.cwd();
      // Skip empty and invalid entries
      if (typeof path !== "string") {
        throw new TypeError("Arguments to path.resolve must be strings");
      } else if (!path) {
        continue;
      }
      resolvedPath = path + "/" + resolvedPath;
      resolvedAbsolute = path.charAt(0) === "/";
    }
    // At this point the path should be resolved to a full absolute path, but
    // handle relative paths to be safe (might happen when process.cwd() fails)
    resolvedPath = PATH.normalizeArray(
      resolvedPath.split("/").filter(function (p) {
        return !!p;
      }),
      !resolvedAbsolute
    ).join("/");
    return (resolvedAbsolute ? "/" : "") + resolvedPath || ".";
  },
  relative: function (from, to) {
    from = PATH.resolve(from).substr(1);
    to = PATH.resolve(to).substr(1);
    function trim(arr) {
      var start = 0;
      for (; start < arr.length; start++) {
        if (arr[start] !== "") break;
      }
      var end = arr.length - 1;
      for (; end >= 0; end--) {
        if (arr[end] !== "") break;
      }
      if (start > end) return [];
      return arr.slice(start, end - start + 1);
    }
    var fromParts = trim(from.split("/"));
    var toParts = trim(to.split("/"));
    var length = Math.min(fromParts.length, toParts.length);
    var samePartsLength = length;
    for (var i = 0; i < length; i++) {
      if (fromParts[i] !== toParts[i]) {
        samePartsLength = i;
        break;
      }
    }
    var outputParts = [];
    for (var i = samePartsLength; i < fromParts.length; i++) {
      outputParts.push("..");
    }
    outputParts = outputParts.concat(toParts.slice(samePartsLength));
    return outputParts.join("/");
  },
};
var Browser = {
  mainLoop: {
    scheduler: null,
    method: "",
    shouldPause: false,
    paused: false,
    queue: [],
    pause: function () {
      Browser.mainLoop.shouldPause = true;
    },
    resume: function () {
      if (Browser.mainLoop.paused) {
        Browser.mainLoop.paused = false;
        Browser.mainLoop.scheduler();
      }
      Browser.mainLoop.shouldPause = false;
    },
    updateStatus: function () {
      if (Module["setStatus"]) {
        var message = Module["statusMessage"] || "Please wait...";
        var remaining = Browser.mainLoop.remainingBlockers;
        var expected = Browser.mainLoop.expectedBlockers;
        if (remaining) {
          if (remaining < expected) {
            Module["setStatus"](
              message + " (" + (expected - remaining) + "/" + expected + ")"
            );
          } else {
            Module["setStatus"](message);
          }
        } else {
          Module["setStatus"]("");
        }
      }
    },
  },
  isFullScreen: false,
  pointerLock: false,
  moduleContextCreatedCallbacks: [],
  workers: [],
  init: function () {
    if (!Module["preloadPlugins"]) Module["preloadPlugins"] = []; // needs to exist even in workers

    if (Browser.initted || ENVIRONMENT_IS_WORKER) return;
    Browser.initted = true;

    try {
      new Blob();
      Browser.hasBlobConstructor = true;
    } catch (e) {
      Browser.hasBlobConstructor = false;
      console.log(
        "warning: no blob constructor, cannot create blobs with mimetypes"
      );
    }
    Browser.BlobBuilder =
      typeof MozBlobBuilder != "undefined"
        ? MozBlobBuilder
        : typeof WebKitBlobBuilder != "undefined"
        ? WebKitBlobBuilder
        : !Browser.hasBlobConstructor
        ? console.log("warning: no BlobBuilder")
        : null;
    Browser.URLObject =
      typeof window != "undefined"
        ? window.URL
          ? window.URL
          : window.webkitURL
        : undefined;
    if (!Module.noImageDecoding && typeof Browser.URLObject === "undefined") {
      console.log(
        "warning: Browser does not support creating object URLs. Built-in browser image decoding will not be available."
      );
      Module.noImageDecoding = true;
    }

    // Support for plugins that can process preloaded files. You can add more of these to
    // your app by creating and appending to Module.preloadPlugins.
    //
    // Each plugin is asked if it can handle a file based on the file's name. If it can,
    // it is given the file's raw data. When it is done, it calls a callback with the file's
    // (possibly modified) data. For example, a plugin might decompress a file, or it
    // might create some side data structure for use later (like an Image element, etc.).

    var imagePlugin = {};
    imagePlugin["canHandle"] = function imagePlugin_canHandle(name) {
      return !Module.noImageDecoding && /\.(jpg|jpeg|png|bmp)$/i.test(name);
    };
    imagePlugin["handle"] = function imagePlugin_handle(
      byteArray,
      name,
      onload,
      onerror
    ) {
      var b = null;
      if (Browser.hasBlobConstructor) {
        try {
          b = new Blob([byteArray], { type: Browser.getMimetype(name) });
          if (b.size !== byteArray.length) {
            // Safari bug #118630
            // Safari's Blob can only take an ArrayBuffer
            b = new Blob([new Uint8Array(byteArray).buffer], {
              type: Browser.getMimetype(name),
            });
          }
        } catch (e) {
          Runtime.warnOnce(
            "Blob constructor present but fails: " +
              e +
              "; falling back to blob builder"
          );
        }
      }
      if (!b) {
        var bb = new Browser.BlobBuilder();
        bb.append(new Uint8Array(byteArray).buffer); // we need to pass a buffer, and must copy the array to get the right data range
        b = bb.getBlob();
      }
      var url = Browser.URLObject.createObjectURL(b);
      var img = new Image();
      img.onload = function img_onload() {
        assert(img.complete, "Image " + name + " could not be decoded");
        var canvas = document.createElement("canvas");
        canvas.width = img.width;
        canvas.height = img.height;
        var ctx = canvas.getContext("2d");
        ctx.drawImage(img, 0, 0);
        Module["preloadedImages"][name] = canvas;
        Browser.URLObject.revokeObjectURL(url);
        if (onload) onload(byteArray);
      };
      img.onerror = function img_onerror(event) {
        console.log("Image " + url + " could not be decoded");
        if (onerror) onerror();
      };
      img.src = url;
    };
    Module["preloadPlugins"].push(imagePlugin);

    var audioPlugin = {};
    audioPlugin["canHandle"] = function audioPlugin_canHandle(name) {
      return (
        !Module.noAudioDecoding &&
        name.substr(-4) in { ".ogg": 1, ".wav": 1, ".mp3": 1 }
      );
    };
    audioPlugin["handle"] = function audioPlugin_handle(
      byteArray,
      name,
      onload,
      onerror
    ) {
      var done = false;
      function finish(audio) {
        if (done) return;
        done = true;
        Module["preloadedAudios"][name] = audio;
        if (onload) onload(byteArray);
      }
      function fail() {
        if (done) return;
        done = true;
        Module["preloadedAudios"][name] = new Audio(); // empty shim
        if (onerror) onerror();
      }
      if (Browser.hasBlobConstructor) {
        try {
          var b = new Blob([byteArray], { type: Browser.getMimetype(name) });
        } catch (e) {
          return fail();
        }
        var url = Browser.URLObject.createObjectURL(b); // XXX we never revoke this!
        var audio = new Audio();
        audio.addEventListener(
          "canplaythrough",
          function () {
            finish(audio);
          },
          false
        ); // use addEventListener due to chromium bug 124926
        audio.onerror = function audio_onerror(event) {
          if (done) return;
          console.log(
            "warning: browser could not fully decode audio " +
              name +
              ", trying slower base64 approach"
          );
          function encode64(data) {
            var BASE =
              "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
            var PAD = "=";
            var ret = "";
            var leftchar = 0;
            var leftbits = 0;
            for (var i = 0; i < data.length; i++) {
              leftchar = (leftchar << 8) | data[i];
              leftbits += 8;
              while (leftbits >= 6) {
                var curr = (leftchar >> (leftbits - 6)) & 0x3f;
                leftbits -= 6;
                ret += BASE[curr];
              }
            }
            if (leftbits == 2) {
              ret += BASE[(leftchar & 3) << 4];
              ret += PAD + PAD;
            } else if (leftbits == 4) {
              ret += BASE[(leftchar & 0xf) << 2];
              ret += PAD;
            }
            return ret;
          }
          audio.src =
            "data:audio/x-" +
            name.substr(-3) +
            ";base64," +
            encode64(byteArray);
          finish(audio); // we don't wait for confirmation this worked - but it's worth trying
        };
        audio.src = url;
        // workaround for chrome bug 124926 - we do not always get oncanplaythrough or onerror
        Browser.safeSetTimeout(function () {
          finish(audio); // try to use it even though it is not necessarily ready to play
        }, 10000);
      } else {
        return fail();
      }
    };
    Module["preloadPlugins"].push(audioPlugin);

    // Canvas event setup

    var canvas = Module["canvas"];
    canvas.requestPointerLock =
      canvas["requestPointerLock"] ||
      canvas["mozRequestPointerLock"] ||
      canvas["webkitRequestPointerLock"];
    canvas.exitPointerLock =
      document["exitPointerLock"] ||
      document["mozExitPointerLock"] ||
      document["webkitExitPointerLock"] ||
      function () {}; // no-op if function does not exist
    canvas.exitPointerLock = canvas.exitPointerLock.bind(document);

    function pointerLockChange() {
      Browser.pointerLock =
        document["pointerLockElement"] === canvas ||
        document["mozPointerLockElement"] === canvas ||
        document["webkitPointerLockElement"] === canvas;
    }

    document.addEventListener("pointerlockchange", pointerLockChange, false);
    document.addEventListener("mozpointerlockchange", pointerLockChange, false);
    document.addEventListener(
      "webkitpointerlockchange",
      pointerLockChange,
      false
    );

    if (Module["elementPointerLock"]) {
      canvas.addEventListener(
        "click",
        function (ev) {
          if (!Browser.pointerLock && canvas.requestPointerLock) {
            canvas.requestPointerLock();
            ev.preventDefault();
          }
        },
        false
      );
    }
  },
  createContext: function (
    canvas,
    useWebGL,
    setInModule,
    webGLContextAttributes
  ) {
    var ctx;
    try {
      if (useWebGL) {
        var contextAttributes = {
          antialias: false,
          alpha: false,
        };

        if (webGLContextAttributes) {
          for (var attribute in webGLContextAttributes) {
            contextAttributes[attribute] = webGLContextAttributes[attribute];
          }
        }

        var errorInfo = "?";
        function onContextCreationError(event) {
          errorInfo = event.statusMessage || errorInfo;
        }
        canvas.addEventListener(
          "webglcontextcreationerror",
          onContextCreationError,
          false
        );
        try {
          ["experimental-webgl", "webgl"].some(function (webglId) {
            return (ctx = canvas.getContext(webglId, contextAttributes));
          });
        } finally {
          canvas.removeEventListener(
            "webglcontextcreationerror",
            onContextCreationError,
            false
          );
        }
      } else {
        ctx = canvas.getContext("2d");
      }
      if (!ctx) throw ":(";
    } catch (e) {
      Module.print("Could not create canvas: " + [errorInfo, e]);
      return null;
    }
    if (useWebGL) {
      // Set the background of the WebGL canvas to black
      canvas.style.backgroundColor = "black";

      // Warn on context loss
      canvas.addEventListener(
        "webglcontextlost",
        function (event) {
          alert("WebGL context lost. You will need to reload the page.");
        },
        false
      );
    }
    if (setInModule) {
      GLctx = Module.ctx = ctx;
      Module.useWebGL = useWebGL;
      Browser.moduleContextCreatedCallbacks.forEach(function (callback) {
        callback();
      });
      Browser.init();
    }
    return ctx;
  },
  destroyContext: function (canvas, useWebGL, setInModule) {},
  fullScreenHandlersInstalled: false,
  lockPointer: undefined,
  resizeCanvas: undefined,
  requestFullScreen: function (lockPointer, resizeCanvas) {
    Browser.lockPointer = lockPointer;
    Browser.resizeCanvas = resizeCanvas;
    if (typeof Browser.lockPointer === "undefined") Browser.lockPointer = true;
    if (typeof Browser.resizeCanvas === "undefined")
      Browser.resizeCanvas = false;

    var canvas = Module["canvas"];
    function fullScreenChange() {
      Browser.isFullScreen = false;
      if (
        (document["webkitFullScreenElement"] ||
          document["webkitFullscreenElement"] ||
          document["mozFullScreenElement"] ||
          document["mozFullscreenElement"] ||
          document["fullScreenElement"] ||
          document["fullscreenElement"]) === canvas
      ) {
        canvas.cancelFullScreen =
          document["cancelFullScreen"] ||
          document["mozCancelFullScreen"] ||
          document["webkitCancelFullScreen"];
        canvas.cancelFullScreen = canvas.cancelFullScreen.bind(document);
        if (Browser.lockPointer) canvas.requestPointerLock();
        Browser.isFullScreen = true;
        if (Browser.resizeCanvas) Browser.setFullScreenCanvasSize();
      } else if (Browser.resizeCanvas) {
        Browser.setWindowedCanvasSize();
      }
      if (Module["onFullScreen"]) Module["onFullScreen"](Browser.isFullScreen);
    }

    if (!Browser.fullScreenHandlersInstalled) {
      Browser.fullScreenHandlersInstalled = true;
      document.addEventListener("fullscreenchange", fullScreenChange, false);
      document.addEventListener("mozfullscreenchange", fullScreenChange, false);
      document.addEventListener(
        "webkitfullscreenchange",
        fullScreenChange,
        false
      );
    }

    canvas.requestFullScreen =
      canvas["requestFullScreen"] ||
      canvas["mozRequestFullScreen"] ||
      (canvas["webkitRequestFullScreen"]
        ? function () {
            canvas["webkitRequestFullScreen"](Element["ALLOW_KEYBOARD_INPUT"]);
          }
        : null);
    canvas.requestFullScreen();
  },
  requestAnimationFrame: function requestAnimationFrame(func) {
    if (typeof window === "undefined") {
      // Provide fallback to setTimeout if window is undefined (e.g. in Node.js)
      setTimeout(func, 1000 / 60);
    } else {
      if (!window.requestAnimationFrame) {
        window.requestAnimationFrame =
          window["requestAnimationFrame"] ||
          window["mozRequestAnimationFrame"] ||
          window["webkitRequestAnimationFrame"] ||
          window["msRequestAnimationFrame"] ||
          window["oRequestAnimationFrame"] ||
          window["setTimeout"];
      }
      window.requestAnimationFrame(func);
    }
  },
  safeCallback: function (func) {
    return function () {
      if (!ABORT) return func.apply(null, arguments);
    };
  },
  safeRequestAnimationFrame: function (func) {
    return Browser.requestAnimationFrame(function () {
      if (!ABORT) func();
    });
  },
  safeSetTimeout: function (func, timeout) {
    return setTimeout(function () {
      if (!ABORT) func();
    }, timeout);
  },
  safeSetInterval: function (func, timeout) {
    return setInterval(function () {
      if (!ABORT) func();
    }, timeout);
  },
  getMimetype: function (name) {
    return {
      jpg: "image/jpeg",
      jpeg: "image/jpeg",
      png: "image/png",
      bmp: "image/bmp",
      ogg: "audio/ogg",
      wav: "audio/wav",
      mp3: "audio/mpeg",
    }[name.substr(name.lastIndexOf(".") + 1)];
  },
  getUserMedia: function (func) {
    if (!window.getUserMedia) {
      window.getUserMedia =
        navigator["getUserMedia"] || navigator["mozGetUserMedia"];
    }
    window.getUserMedia(func);
  },
  getMovementX: function (event) {
    return (
      event["movementX"] ||
      event["mozMovementX"] ||
      event["webkitMovementX"] ||
      0
    );
  },
  getMovementY: function (event) {
    return (
      event["movementY"] ||
      event["mozMovementY"] ||
      event["webkitMovementY"] ||
      0
    );
  },
  getMouseWheelDelta: function (event) {
    return Math.max(
      -1,
      Math.min(
        1,
        event.type === "DOMMouseScroll" ? event.detail : -event.wheelDelta
      )
    );
  },
  mouseX: 0,
  mouseY: 0,
  mouseMovementX: 0,
  mouseMovementY: 0,
  calculateMouseEvent: function (event) {
    // event should be mousemove, mousedown or mouseup
    if (Browser.pointerLock) {
      // When the pointer is locked, calculate the coordinates
      // based on the movement of the mouse.
      // Workaround for Firefox bug 764498
      if (event.type != "mousemove" && "mozMovementX" in event) {
        Browser.mouseMovementX = Browser.mouseMovementY = 0;
      } else {
        Browser.mouseMovementX = Browser.getMovementX(event);
        Browser.mouseMovementY = Browser.getMovementY(event);
      }

      // check if SDL is available
      if (typeof SDL != "undefined") {
        Browser.mouseX = SDL.mouseX + Browser.mouseMovementX;
        Browser.mouseY = SDL.mouseY + Browser.mouseMovementY;
      } else {
        // just add the mouse delta to the current absolut mouse position
        // FIXME: ideally this should be clamped against the canvas size and zero
        Browser.mouseX += Browser.mouseMovementX;
        Browser.mouseY += Browser.mouseMovementY;
      }
    } else {
      // Otherwise, calculate the movement based on the changes
      // in the coordinates.
      var rect = Module["canvas"].getBoundingClientRect();
      var x, y;

      // Neither .scrollX or .pageXOffset are defined in a spec, but
      // we prefer .scrollX because it is currently in a spec draft.
      // (see: http://www.w3.org/TR/2013/WD-cssom-view-20131217/)
      var scrollX =
        typeof window.scrollX !== "undefined"
          ? window.scrollX
          : window.pageXOffset;
      var scrollY =
        typeof window.scrollY !== "undefined"
          ? window.scrollY
          : window.pageYOffset;
      if (
        event.type == "touchstart" ||
        event.type == "touchend" ||
        event.type == "touchmove"
      ) {
        var t = event.touches.item(0);
        if (t) {
          x = t.pageX - (scrollX + rect.left);
          y = t.pageY - (scrollY + rect.top);
        } else {
          return;
        }
      } else {
        x = event.pageX - (scrollX + rect.left);
        y = event.pageY - (scrollY + rect.top);
      }

      // the canvas might be CSS-scaled compared to its backbuffer;
      // SDL-using content will want mouse coordinates in terms
      // of backbuffer units.
      var cw = Module["canvas"].width;
      var ch = Module["canvas"].height;
      x = x * (cw / rect.width);
      y = y * (ch / rect.height);

      Browser.mouseMovementX = x - Browser.mouseX;
      Browser.mouseMovementY = y - Browser.mouseY;
      Browser.mouseX = x;
      Browser.mouseY = y;
    }
  },
  xhrLoad: function (url, onload, onerror) {
    var xhr = new XMLHttpRequest();
    xhr.open("GET", url, true);
    xhr.responseType = "arraybuffer";
    xhr.onload = function xhr_onload() {
      if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) {
        // file URLs can return 0
        onload(xhr.response);
      } else {
        onerror();
      }
    };
    xhr.onerror = onerror;
    xhr.send(null);
  },
  asyncLoad: function (url, onload, onerror, noRunDep) {
    Browser.xhrLoad(
      url,
      function (arrayBuffer) {
        assert(
          arrayBuffer,
          'Loading data file "' + url + '" failed (no arrayBuffer).'
        );
        onload(new Uint8Array(arrayBuffer));
        if (!noRunDep) removeRunDependency("al " + url);
      },
      function (event) {
        if (onerror) {
          onerror();
        } else {
          throw 'Loading data file "' + url + '" failed.';
        }
      }
    );
    if (!noRunDep) addRunDependency("al " + url);
  },
  resizeListeners: [],
  updateResizeListeners: function () {
    var canvas = Module["canvas"];
    Browser.resizeListeners.forEach(function (listener) {
      listener(canvas.width, canvas.height);
    });
  },
  setCanvasSize: function (width, height, noUpdates) {
    var canvas = Module["canvas"];
    canvas.width = width;
    canvas.height = height;
    if (!noUpdates) Browser.updateResizeListeners();
  },
  windowedWidth: 0,
  windowedHeight: 0,
  setFullScreenCanvasSize: function () {
    var canvas = Module["canvas"];
    this.windowedWidth = canvas.width;
    this.windowedHeight = canvas.height;
    canvas.width = screen.width;
    canvas.height = screen.height;
    // check if SDL is available
    if (typeof SDL != "undefined") {
      var flags = HEAPU32[(SDL.screen + Runtime.QUANTUM_SIZE * 0) >> 2];
      flags = flags | 0x00800000; // set SDL_FULLSCREEN flag
      HEAP32[(SDL.screen + Runtime.QUANTUM_SIZE * 0) >> 2] = flags;
    }
    Browser.updateResizeListeners();
  },
  setWindowedCanvasSize: function () {
    var canvas = Module["canvas"];
    canvas.width = this.windowedWidth;
    canvas.height = this.windowedHeight;
    // check if SDL is available
    if (typeof SDL != "undefined") {
      var flags = HEAPU32[(SDL.screen + Runtime.QUANTUM_SIZE * 0) >> 2];
      flags = flags & ~0x00800000; // clear SDL_FULLSCREEN flag
      HEAP32[(SDL.screen + Runtime.QUANTUM_SIZE * 0) >> 2] = flags;
    }
    Browser.updateResizeListeners();
  },
};

var CRC32 = {
  TABLE: [
    0, 1996959894, 3993919788, 2567524794, 124634137, 1886057615, 3915621685,
    2657392035, 249268274, 2044508324, 3772115230, 2547177864, 162941995,
    2125561021, 3887607047, 2428444049, 498536548, 1789927666, 4089016648,
    2227061214, 450548861, 1843258603, 4107580753, 2211677639, 325883990,
    1684777152, 4251122042, 2321926636, 335633487, 1661365465, 4195302755,
    2366115317, 997073096, 1281953886, 3579855332, 2724688242, 1006888145,
    1258607687, 3524101629, 2768942443, 901097722, 1119000684, 3686517206,
    2898065728, 853044451, 1172266101, 3705015759, 2882616665, 651767980,
    1373503546, 3369554304, 3218104598, 565507253, 1454621731, 3485111705,
    3099436303, 671266974, 1594198024, 3322730930, 2970347812, 795835527,
    1483230225, 3244367275, 3060149565, 1994146192, 31158534, 2563907772,
    4023717930, 1907459465, 112637215, 2680153253, 3904427059, 2013776290,
    251722036, 2517215374, 3775830040, 2137656763, 141376813, 2439277719,
    3865271297, 1802195444, 476864866, 2238001368, 4066508878, 1812370925,
    453092731, 2181625025, 4111451223, 1706088902, 314042704, 2344532202,
    4240017532, 1658658271, 366619977, 2362670323, 4224994405, 1303535960,
    984961486, 2747007092, 3569037538, 1256170817, 1037604311, 2765210733,
    3554079995, 1131014506, 879679996, 2909243462, 3663771856, 1141124467,
    855842277, 2852801631, 3708648649, 1342533948, 654459306, 3188396048,
    3373015174, 1466479909, 544179635, 3110523913, 3462522015, 1591671054,
    702138776, 2966460450, 3352799412, 1504918807, 783551873, 3082640443,
    3233442989, 3988292384, 2596254646, 62317068, 1957810842, 3939845945,
    2647816111, 81470997, 1943803523, 3814918930, 2489596804, 225274430,
    2053790376, 3826175755, 2466906013, 167816743, 2097651377, 4027552580,
    2265490386, 503444072, 1762050814, 4150417245, 2154129355, 426522225,
    1852507879, 4275313526, 2312317920, 282753626, 1742555852, 4189708143,
    2394877945, 397917763, 1622183637, 3604390888, 2714866558, 953729732,
    1340076626, 3518719985, 2797360999, 1068828381, 1219638859, 3624741850,
    2936675148, 906185462, 1090812512, 3747672003, 2825379669, 829329135,
    1181335161, 3412177804, 3160834842, 628085408, 1382605366, 3423369109,
    3138078467, 570562233, 1426400815, 3317316542, 2998733608, 733239954,
    1555261956, 3268935591, 3050360625, 752459403, 1541320221, 2607071920,
    3965973030, 1969922972, 40735498, 2617837225, 3943577151, 1913087877,
    83908371, 2512341634, 3803740692, 2075208622, 213261112, 2463272603,
    3855990285, 2094854071, 198958881, 2262029012, 4057260610, 1759359992,
    534414190, 2176718541, 4139329115, 1873836001, 414664567, 2282248934,
    4279200368, 1711684554, 285281116, 2405801727, 4167216745, 1634467795,
    376229701, 2685067896, 3608007406, 1308918612, 956543938, 2808555105,
    3495958263, 1231636301, 1047427035, 2932959818, 3654703836, 1088359270,
    936918000, 2847714899, 3736837829, 1202900863, 817233897, 3183342108,
    3401237130, 1404277552, 615818150, 3134207493, 3453421203, 1423857449,
    601450431, 3009837614, 3294710456, 1567103746, 711928724, 3020668471,
    3272380065, 1510334235, 755167117,
  ],
  Start: function () {
    return -1;
  },
  Update: function (crc, buffer, offset, len) {
    for (var i = offset, l = offset + len; i < l; i++) {
      crc = CRC32.TABLE[(crc ^ buffer[i]) & 0xff] ^ (crc >>> 8);
    }
    return crc;
  },
  Finish: function (crc) {
    return (crc ^ -1) >>> 0;
  },
};
var SYSC = {
  cb_context_t: { __size__: 8, data: 0, cb: 4 },
  startup_data_t: { __size__: 4100, gameName: 0, after: 4096 },
  download_progress_data_t: { __size__: 8, loaded: 0, total: 4 },
  download_complete_data_t: { __size__: 4, progress: 0 },
  eula: 'LIMITED USE SOFTWARE LICENSE AGREEMENT\n\n \n\nThis Limited Use Software License Agreement (the "Agreement") is a legal agreement between you, the end-user, and Id Software, Inc. ("ID").  BY CONTINUING THE INSTALLATION OF THIS GAME DEMO PROGRAM ENTITLED QUAKE III: ARENA (THE "SOFTWARE"), BY LOADING OR RUNNING THE SOFTWARE, OR BY PLACING OR COPYING THE SOFTWARE ONTO YOUR COMPUTER HARD DRIVE, COMPUTER RAM OR OTHER STORAGE, YOU ARE AGREEING TO BE BOUND BY THE TERMS OF THIS AGREEMENT.\n\n\n\n1.         Grant of License.  Subject to the terms and provisions of this Agreement, ID grants to you the non-exclusive and limited right to use the Software only in executable or object code form. The term "Software" includes all elements of the Software, including, without limitation, data files and screen displays.  You are not receiving any ownership or proprietary right, title or interest in or to the Software or the copyright, trademarks, or other rights related thereto.  For purposes of this section, "use" means loading the Software into RAM and/or onto computer hard drive, as well as installation of the Software on a hard disk or other storage device and means the uses permitted in section 3. hereinbelow.  You agree that the Software will not be shipped, transferred or exported into any country in violation of the U.S. Export Administration Act (or any other law governing such matters) by you or anyone at your direction and that you will not utilize and will not authorize anyone to utilize, in any other manner, the Software in violation of any applicable law.  The Software may not be downloaded or otherwise exported or exported into (or to a national or resident of) any country to which the U.S. has embargoed goods or to anyone or into any country who/which are prohibited, by applicable law, from receiving such property.\n\n\n\n2.         Prohibitions. You, either directly or indirectly, shall not do any of the following acts:\n\n\n\na.         rent the Software;\n\n\n\nb.         sell the Software;\n\n\n\nc.         lease or lend the Software;\n\n\n\nd.         offer the Software on a "pay-per-play" basis;\n\n\n\ne.         distribute the Software (except as permitted by section 3. hereinbelow);\n\n\n\nf.         in any other manner and through any medium whatsoever commercially exploit the Software or use the Software for any commercial purpose;\n\n\n\ng.         disassemble, reverse engineer, decompile, modify or alter the Software including, without limitation, creating or developing extra or add-on levels for the Software;\n\n\n\nh.         translate the Software;\n\n\n\ni.         reproduce or copy the Software (except as permitted by section 3. hereinbelow);\n\n\n\nj.         publicly display the Software;\n\n\n\nk.         prepare or develop derivative works based upon the Software; or\n\n\n\nl.         remove or alter any legal notices or other markings or legends, such as trademark and copyright notices, affixed on or within the Software.\n\n\n\n3.         Permitted Distribution and Copying.  So long as this Agreement accompanies each copy you make of  the Software, and so long as you fully comply, at all times, with this Agreement, ID grants to you the non-exclusive and limited right to copy the Software and to distribute such copies of the Software free of charge for non-commercial purposes which shall include the free of charge distribution of copies of the Software as mounted on the covers of magazines; provided, however, you shall not copy or distribute the Software in any infringing manner or in any manner which violates any law or  third party right and you shall not distribute the Software together with any material which is  infringing, libelous, defamatory, obscene, false, misleading, or  otherwise illegal or unlawful. You agree to label conspicuously as "SHAREWARE" or "DEMO" each CD or other non-electronic copy of the Software that you make and distribute.  ID reserves all rights not granted in this Agreement. You shall not commercially distribute the Software  unless you first  enter into a separate contract with ID, a copy of which you may request, but which ID may decline to execute. For more information visit www.quake3arena.com.\n\n\n\n4.         Intellectual Property Rights.  The Software and all copyrights, trademarks and all other conceivable intellectual property rights related to the Software are owned by ID and are protected by United States copyright laws, international treaty provisions and all applicable law, such as the Lanham Act.  You must treat the Software like any other copyrighted material, as required by 17 U.S.C., §101 et seq. and other applicable law. You agree to use your best efforts to see that any user of the Software licensed hereunder complies with this Agreement.  You agree that you are receiving a copy of the Software by license only and not by sale and that the "first sale" doctrine of 17 U.S.C. §109 does not apply to your receipt or use of the Software.\n\n\n\n5.         NO WARRANTIES.  ID DISCLAIMS ALL WARRANTIES, WHETHER EXPRESS OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE WITH RESPECT TO THE SOFTWARE.  ID DOES NOT WARRANT THAT THE OPERATION OF THE SOFTWARE WILL BE UNINTERRUPTED OR ERROR FREE OR THAT THE SOFTWARE WILL MEET YOUR SPECIFIC REQUIREMENTS.  ADDITIONAL STATEMENTS SUCH AS PRESENTATIONS, WHETHER ORAL OR WRITTEN, DO NOT CONSTITUTE WARRANTIES BY ID AND SHOULD NOT BE RELIED UPON. THIS SECTION 5. SHALL SURVIVE CANCELLATION OR TERMINATION OF THIS AGREEMENT.\n\n\n\n6.         Governing Law, Venue, Indemnity and Liability Limitation.  This Agreement shall be construed in accordance with and governed by the applicable laws of the State of Texas and applicable United States federal law.  Copyright and other proprietary matters will be governed by United States laws and international treaties.  Exclusive venue for all litigation regarding this Agreement shall be in Dallas County, Texas and you agree to submit to the jurisdiction of the courts in Dallas, Texas for any such litigation. You agree to indemnify, defend and hold harmless ID and ID\'s officers, employees, directors, agents, licensees (excluding you), successors and assigns from and against all losses, lawsuits, damages, causes of action and claims relating to and/or arising from your breach of this Agreement.  You agree that your unauthorized use of the Software, or any part thereof, may immediately and irreparably damage ID such that ID could not be adequately compensated solely by a monetary award and that at ID\'s option ID shall be entitled to an injunctive order, in addition to all other available remedies including a monetary award, appropriately restraining and/or prohibiting such unauthorized use without the necessity of ID posting bond or other security. IN ANY CASE, ID AND ID\'S OFFICERS, EMPLOYEES, DIRECTORS, AGENTS, LICENSEES, SUBLICENSEES, SUCCESSORS AND ASSIGNS SHALL NOT BE LIABLE FOR LOSS OF DATA, LOSS OF PROFITS, LOST SAVINGS, SPECIAL, INCIDENTAL, CONSEQUENTIAL, INDIRECT, PUNITIVE OR OTHER SIMILAR DAMAGES ARISING FROM ANY ALLEGED CLAIM FOR BREACH OF WARRANTY, BREACH OF CONTRACT, NEGLIGENCE, STRICT PRODUCT LIABILITY, OR OTHER LEGAL THEORY EVEN IF ID OR ITS AGENT HAVE BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES OR EVEN IF SUCH DAMAGES ARE FORESEEABLE, OR LIABLE FOR ANY CLAIM BY ANY OTHER PARTY.  Some jurisdictions do not allow the exclusion or limitation of incidental or consequential damages, so the above limitation or exclusion may not apply to you. This Section 6. shall survive cancellation or termination of this Agreement.\n\n\n\n7.         U.S. Government Restricted Rights. To the extent applicable, the United States Government shall only have those rights to use the Software as expressly stated and expressly limited and restricted in this Agreement, as provided in 48 C.F.R. §§ 227.7201 through 227.7204, inclusive.\n\n\n\n8.         General Provisions.  Neither this Agreement nor any part or portion hereof shall be assigned or sublicensed by you.  ID may assign its rights under this Agreement in ID\'s sole discretion.  Should any provision of this Agreement be held to be void, invalid, unenforceable or illegal by a court of competent jurisdiction, the validity and enforceability of the other provisions shall not be affected thereby.  If any provision is determined to be unenforceable by a court of competent jurisdiction, you agree to a modification of such provision to provide for enforcement of the provision\'s intent, to the extent permitted by applicable law. Failure of ID to enforce any provision of this Agreement shall not constitute or be construed as a waiver of such provision or of the right to enforce such provision.  Immediately upon your failure to comply with or breach of any term or provision of this Agreement, THIS AGREEMENT AND YOUR LICENSE SHALL AUTOMATICALLY TERMINATE, WITHOUT NOTICE, AND ID MAY PURSUE ALL RELIEF AND REMEDIES AGAINST YOU WHICH ARE AVAILABLE UNDER APPLICABLE LAW AND/OR THIS AGREEMENT.   In the event this Agreement is terminated, you shall have no right to use the Software, in any manner, and you shall immediately destroy all copies of the Software in your possession, custody or control.\n\n\n\nYOU ACKNOWLEDGE THAT YOU HAVE READ THIS AGREEMENT, YOU UNDERSTAND THIS AGREEMENT, AND UNDERSTAND THAT BY CONTINUING THE INSTALLATION OF THE SOFTWARE, BY LOADING OR RUNNING THE SOFTWARE, OR BY PLACING OR COPYING THE SOFTWARE ONTO YOUR COMPUTER HARD DRIVE OR RAM, YOU AGREE TO BE BOUND BY THE TERMS AND CONDITIONS OF THIS AGREEMENT.  YOU FURTHER AGREE THAT, EXCEPT FOR WRITTEN SEPARATE AGREEMENTS BETWEEN ID AND YOU, THIS AGREEMENT IS A COMPLETE AND EXCLUSIVE STATEMENT OF THE RIGHTS AND LIABILITIES OF THE PARTIES HERETO.  THIS AGREEMENT SUPERSEDES ALL PRIOR ORAL AGREEMENTS, PROPOSALS OR UNDERSTANDINGS, AND ANY OTHER COMMUNICATIONS BETWEEN ID AND YOU RELATING TO THE SUBJECT MATTER OF THIS AGREEMENT.',
  installers: [
    {
      name: "linuxq3ademo-1.11-6.x86.gz.sh",
      offset: 5468,
      paks: [
        {
          src: "demoq3/pak0.pk3",
          dest: "baseq3/pak0.pk3",
          checksum: 2483777038,
        },
      ],
    },
    {
      name: "linuxq3apoint-1.32b-3.x86.run",
      offset: 8251,
      paks: [
        {
          src: "baseq3/pak1.pk3",
          dest: "baseq3/pak1.pk3",
          checksum: 1635885364,
        },
        {
          src: "baseq3/pak2.pk3",
          dest: "baseq3/pak2.pk3",
          checksum: 2142044321,
        },
        {
          src: "baseq3/pak3.pk3",
          dest: "baseq3/pak3.pk3",
          checksum: 682311620,
        },
        {
          src: "baseq3/pak4.pk3",
          dest: "baseq3/pak4.pk3",
          checksum: 4113726565,
        },
        {
          src: "baseq3/pak5.pk3",
          dest: "baseq3/pak5.pk3",
          checksum: 590466266,
        },
        {
          src: "baseq3/pak6.pk3",
          dest: "baseq3/pak6.pk3",
          checksum: 231612509,
        },
        {
          src: "baseq3/pak7.pk3",
          dest: "baseq3/pak7.pk3",
          checksum: 3663817674,
        },
        {
          src: "baseq3/pak8.pk3",
          dest: "baseq3/pak8.pk3",
          checksum: 136401958,
        },
      ],
    },
  ],
  manifest: null,
  Print: function (str) {
    str = allocate(intArrayFromString(str + "\n"), "i8", ALLOC_STACK);

    _Com_Printf(str);
  },
  Error: function (level, err) {
    if (level === "fatal") {
      level = 0;
    } else if (level === "drop") {
      level = 1;
    } else if (level === "serverdisconnect") {
      level = 2;
    } else if (level === "disconnect") {
      level = 3;
    } else if (level === "need_cd") {
      level = 4;
    } else {
      level = 0;
    }

    err = allocate(intArrayFromString(err + "\n"), "i8", ALLOC_STACK);

    _Com_Error(level, err);
  },
  ProxyCallback: function (context) {
    try {
      _Com_ProxyCallback(context);
    } catch (e) {
      if (e instanceof ExitStatus) {
        return;
      }
      // TODO should we try and call back in using __Error?
      throw e;
    }
  },
  CRC32File: function (path) {
    var stack = Runtime.stackSave();
    var chunkSize = 1024 * 1024;
    var bufp = allocate(chunkSize, "i8", ALLOC_STACK);
    var crc = CRC32.Start();

    var start = Date.now();

    try {
      var slab = HEAP8;
      var n = 0;
      var pos = 0;
      var stream = FS.open(path, "r", 0666);
      do {
        n = FS.read(stream, slab, bufp, chunkSize, pos);
        crc = CRC32.Update(crc, slab, bufp, n);
        pos += n;
      } while (n);
      FS.close(stream);
    } catch (e) {
      Runtime.stackRestore(stack);
      return null;
    }

    SYSC.Print(
      "generated crc32 for " +
        path +
        " in " +
        ((Date.now() - start) / 1000).toFixed(2) +
        " seconds"
    );

    Runtime.stackRestore(stack);
    return CRC32.Finish(crc);
  },
  GetCDN: function () {
    return Pointer_stringify(_Com_GetCDN());
  },
  GetManifest: function () {
    var manifest = Pointer_stringify(_Com_GetManifest());

    if (!manifest) {
      return [];
    }

    return manifest.split(" ").map(function (entry) {
      var split = entry.split("@");

      return {
        name: split[0],
        checksum: parseInt(split[1], 10),
        compressed: parseInt(split[2], 10),
      };
    });
  },
  DownloadAsset: function (asset, onprogress, onload) {
    var root = SYSC.GetCDN();
    var name = asset.name.replace(
      /(.+\/|)(.+?)$/,
      "$1" + asset.checksum + "-$2"
    );
    var url = "https://" + root + "/assets/" + name;

    SYS.DoXHR(url, {
      dataType: "arraybuffer",
      onprogress: onprogress,
      onload: onload,
    });
  },
  DownloadAssets: function (
    assets,
    onstartasset,
    onprogress,
    onendasset,
    callback
  ) {
    var progress = [];

    function downloadedBytes() {
      return progress.reduce(function (a, b) {
        return a + b;
      });
    }

    function totalBytes() {
      return assets.reduce(function (a, b) {
        return a + b.compressed;
      }, 0);
    }

    function nextDownload() {
      nextDownload.pos =
        nextDownload.pos == undefined ? 0 : nextDownload.pos + 1;

      if (nextDownload.pos >= assets.length) {
        return callback();
      }

      var asset = assets[nextDownload.pos];

      onstartasset(asset);

      SYSC.DownloadAsset(
        asset,
        function (loaded, total) {
          progress[nextDownload.pos] = loaded;

          onprogress(downloadedBytes(), totalBytes());
        },
        function (err, data) {
          if (err) return callback(err);

          onendasset(asset, data, function (err) {
            if (err) return callback(err);

            setTimeout(nextDownload);
          });
        }
      );
    }

    nextDownload();
  },
  UpdateManifest: function (callback) {
    var fs_cdn = Pointer_stringify(
      _Cvar_VariableString(
        allocate(intArrayFromString("fs_cdn"), "i8", ALLOC_STACK)
      )
    );
    var fs_game = Pointer_stringify(
      _Cvar_VariableString(
        allocate(intArrayFromString("fs_game"), "i8", ALLOC_STACK)
      )
    );
    var com_basegame = Pointer_stringify(
      _Cvar_VariableString(
        allocate(intArrayFromString("com_basegame"), "i8", ALLOC_STACK)
      )
    );
    var mapname = Pointer_stringify(
      _Cvar_VariableString(
        allocate(intArrayFromString("mapname"), "i8", ALLOC_STACK)
      )
    );
    var url = "https://" + fs_cdn + "/assets/manifest.json";

    function isInstaller(name) {
      return SYSC.installers.some(function (installer) {
        return installer.name === name;
      });
    }

    function isCommon(name) {
      var basepakRx = RegExp(
        "(" + com_basegame + (fs_game ? "|" + fs_game : "") + ")/pak.+.pk3$"
      );
      return name.match(basepakRx);
    }

    function isMapPak(name) {
      return PATH.basename(name) === mapname + ".pk3";
    }

    function activePaks(entry) {
      return (
        isInstaller(entry.name) || isCommon(entry.name) || isMapPak(entry.name)
      );
    }

    function formatManifestString(manifest) {
      return manifest
        .map(function (entry) {
          return entry.name + "@" + entry.checksum + "@" + entry.compressed;
        })
        .join(" ");
    }

    SYS.DoXHR(url, {
      dataType: "json",
      onload: function (err, manifest) {
        if (err)
          return callback(
            new Error("Failed to download and parse manifest, " + err.message)
          );

        var fs_manifestName = allocate(
          intArrayFromString("fs_manifest"),
          "i8",
          ALLOC_STACK
        );
        var fs_manifest = allocate(
          intArrayFromString(formatManifestString(manifest.filter(activePaks))),
          "i8",
          ALLOC_STACK
        );
        _Cvar_Set(fs_manifestName, fs_manifest);

        var fs_completeManifestName = allocate(
          intArrayFromString("fs_completeManifest"),
          "i8",
          ALLOC_STACK
        );
        var fs_completeManifest = allocate(
          intArrayFromString(formatManifestString(manifest)),
          "i8",
          ALLOC_STACK
        );
        _Cvar_Set(fs_completeManifestName, fs_completeManifest);

        return callback();
      },
    });
  },
  SavePak: function (name, buffer, callback) {
    var fs_homepath = Pointer_stringify(
      _Cvar_VariableString(
        allocate(intArrayFromString("fs_homepath"), "i8", ALLOC_STACK)
      )
    );
    var localPath = PATH.join(fs_homepath, name);

    try {
      FS.mkdir(PATH.dirname(localPath), 0777);
    } catch (e) {
      if (e.errno !== ERRNO_CODES.EEXIST) {
        return callback(e);
      }
    }

    FS.writeFile(localPath, new Uint8Array(buffer), {
      encoding: "binary",
      flags: "w",
      canOwn: true,
    });

    FS.syncfs(callback);
  },
  ValidateInstaller: function (installer) {
    var fs_homepath = Pointer_stringify(
      _Cvar_VariableString(
        allocate(intArrayFromString("fs_homepath"), "i8", ALLOC_STACK)
      )
    );

    for (var i = 0; i < installer.paks.length; i++) {
      var pak = installer.paks[i];
      var localPath = PATH.join(fs_homepath, pak.dest);
      var crc = SYSC.CRC32File(localPath);

      if (crc !== pak.checksum) {
        return false;
      }
    }

    return true;
  },
  DirtyInstallers: function () {
    var installers = [];
    var assets = SYSC.GetManifest();

    for (var i = 0; i < SYSC.installers.length; i++) {
      var installer = SYSC.installers[i];

      var asset;
      for (var j = 0; j < assets.length; j++) {
        if (assets[j].name === installer.name) {
          asset = assets[j];
          break;
        }
      }

      if (!asset) {
        return callback(
          new Error('Failed to find "' + installer.name + '" in manifest')
        );
      }

      if (!SYSC.ValidateInstaller(installer)) {
        // append the installer info to the asset
        asset.installer = installer;

        installers.push(asset);
      }
    }

    return installers;
  },
  ExtractInstaller: function (data, paks, callback) {
    var gunzip = new Zlib.Gunzip(data);
    var buffer = gunzip.decompress();
    var tar = new Tar(buffer);

    function nextEntry() {
      nextEntry.pos = nextEntry.pos == undefined ? 0 : nextEntry.pos + 1;

      if (nextEntry.pos >= paks.length) {
        return callback();
      }

      var entry = paks[nextEntry.pos];

      var pakPath = entry.src;
      var buffer = tar.getContent(pakPath);

      // TODO validate buffer checksum

      SYSC.SavePak(entry.dest, buffer, function (err) {
        if (err) return callback(err);

        nextEntry();
      });
    }

    nextEntry();
  },
  SyncInstallers: function (callback) {
    var downloads = SYSC.DirtyInstallers();

    if (!downloads.length) {
      return callback();
    }

    SYS.PromptEULA(function (err) {
      if (err) return callback(err);

      SYSC.DownloadAssets(
        downloads,
        function (asset) {
          SYS.LoadingDescription("loading " + asset.name);
        },
        function (loaded, total) {
          SYS.LoadingProgress(loaded / total);
        },
        function (asset, data, next) {
          SYSC.ExtractInstaller(
            new Uint8Array(data, asset.installer.offset),
            asset.installer.paks,
            next
          );
        },
        function (err) {
          SYS.LoadingDescription(null);

          setTimeout(function () {
            callback(err);
          });
        }
      );
    });
  },
  ValidatePak: function (asset) {
    var fs_homepath = Pointer_stringify(
      _Cvar_VariableString(
        allocate(intArrayFromString("fs_homepath"), "i8", ALLOC_STACK)
      )
    );
    var localPath = PATH.join(fs_homepath, asset.name);
    var crc = SYSC.CRC32File(localPath);

    return crc === asset.checksum;
  },
  DirtyPaks: function () {
    return SYSC.GetManifest().filter(function (asset) {
      return asset.name.indexOf(".pk3") !== -1 && !SYSC.ValidatePak(asset);
    });
  },
  SyncPaks: function (callback) {
    var downloads = SYSC.DirtyPaks();

    SYSC.DownloadAssets(
      downloads,
      function (asset) {
        SYS.LoadingDescription("loading " + asset.name);
      },
      function (loaded, total) {
        SYS.LoadingProgress(loaded / total);
      },
      function (asset, data, next) {
        SYSC.SavePak(asset.name, data, next);
      },
      function (err) {
        SYS.LoadingDescription(null);

        setTimeout(function () {
          callback(err);
        });
      }
    );
  },
  FS_Startup: function (callback) {
    SYSC.UpdateManifest(function (err) {
      if (err) return callback(err);

      SYSC.SyncInstallers(function (err) {
        if (err) return callback(err);

        SYSC.SyncPaks(Browser.safeCallback(callback));
      });
    });
  },
  FS_Shutdown: function (callback) {
    callback(null);
  },
};
var SYS = {
  exited: false,
  timeBase: null,
  style: null,
  loading: null,
  css: '@font-face {\tfont-family: "Open Sans";\tsrc: url("data:application/x-font-ttf;base64,") format("truetype");\tfont-weight: normal;\tfont-style: normal;}.btn {\tdisplay: inline-block;\tmargin-bottom: 0;\tfont-weight: 400;\ttext-align: center;\tvertical-align: middle;\tcursor: pointer;\tbackground-image: none;\tborder: 1px solid transparent;\twhite-space: nowrap;\tpadding: 6px 12px;\tfont-size: 14px;\tline-height: 1.428571429;\tborder-radius: 4px;}.btn-success {\tcolor: #fff;\tbackground-color: #5cb85c;\tborder-color: #4cae4c;}.btn-success:hover {\tbackground-color: #47a447;\tborder-color: #398439;}#eula-frame {\tdisplay: none;\tposition: absolute;\ttop: 0;\tleft: 0;\tbottom: 0;\tright: 0;\toverflow-y: auto;}#eula-frame-inner {\tmax-width: 940px;\tmargin: 0 auto;\tpadding: 5em 0;\tbackground: rgba(0, 0, 0, 0.9);\tcolor: #eee;\tfont-size: 1.2em;}#eula-frame p {\tfont-family: "Helvetica Neue", Helvetica, Arial, sans-serif;}#eula {\tcolor: #ccc;\theight: 25em;\tmargin: 3em 0;\toverflow-y: scroll;\twhite-space: pre-wrap;}#dialog {\tdisplay: none;\tposition: absolute;\ttop: 50%;\tleft: 50%;\tmargin-top: -5em;\tmargin-left: -12em;\twidth: 24em;\tbackground: #2a2a2a;}#dialog .title {\tmargin: 0;\tpadding: 0.2em 0.5em;\tbackground: #333;\tcolor: #fff;\tfont-family: "Open Sans";\tfont-weight: bold;\ttext-transform: uppercase;}#dialog .description {\tmargin: 0;\tpadding: 0.5em;\tcolor: #fff;\tfont-family: "Helvetica Neue", Helvetica, Arial, sans-serif;}#loading {\tdisplay: none;\tposition: absolute;\ttop: 0;\tleft: 0;\tbottom: 0;\tright: 0;\tz-index: 1;}#loading-progress {\tposition: absolute;\ttop: 50%;\tleft: 50%;\tmargin-top: -1em;\tmargin-left: -12em;\tpadding: 0.4em;\twidth: 24em;\tbackground: rgba(0, 0, 0, 0.7);}#loading-progress .description {\ttext-align: center;\tcolor: #fff;\tfont-family: "Open Sans";\ttext-shadow: 1px 1px 2px #000;\ttext-transform: uppercase;}#loading-progress .bar-wrapper {\tbackground: #222;\tborder-radius: 2px;}#loading-progress .bar {\twidth: 0;\tbackground: #2dbb30;\tbox-shadow: inset 0 -1px 0 rgba(0, 0, 0, .15);}',
  DoXHR: function (url, opts) {
    if (!url) {
      return opts.onload(new Error("Must provide a URL"));
    }

    var req = new XMLHttpRequest();
    req.open("GET", url, true);
    if (
      opts.dataType &&
      // responseType json not implemented in webkit, we'll do it manually later on
      opts.dataType !== "json"
    ) {
      req.responseType = opts.dataType;
    }
    req.onprogress = function (ev) {
      if (opts.onprogress) {
        opts.onprogress(ev.loaded, ev.total);
      }
    };
    req.onload = function () {
      var err = null;
      var data = req.response;

      if (!((req.status >= 200 && req.status < 300) || req.status === 304)) {
        err = new Error("Couldn't load " + url + ". Status: " + req.statusCode);
      } else {
        // manually parse out a request expecting a JSON response
        if (opts.dataType === "json") {
          try {
            data = JSON.parse(data);
          } catch (e) {
            err = e;
          }
        }
      }

      if (opts.onload) {
        opts.onload(err, data);
      }
    };
    req.send(null);
  },
  LoadingDescription: function (desc) {
    var progress = document.getElementById("loading-progress");
    var description = progress.querySelector(".description");

    if (!desc) {
      SYS.loading.style.display = "none";
      SYS.LoadingProgress(0);
    } else {
      SYS.loading.style.display = "block";
    }

    description.innerHTML = desc;
  },
  LoadingProgress: function (frac) {
    var progress = document.getElementById("loading-progress");
    var bar = progress.querySelector(".bar");

    bar.style.width = frac * 100 + "%";
  },
  PromptEULA: function (callback) {
    var agree = document.getElementById("agree");
    var dontAgree = document.getElementById("dont-agree");

    SYS.eula.style.display = "block";

    agree.onclick = function () {
      SYS.eula.style.display = "none";
      agree.onclick = null;
      return callback();
    };

    dontAgree.onclick = function () {
      SYS.eula.style.display = "none";
      dontAgree.onclick = null;
      return callback(new Error("You must agree to the EULA to continue"));
    };
  },
};
function _Sys_Milliseconds() {
  if (!SYS.timeBase) {
    SYS.timeBase = Date.now();
  }

  if (window.performance.now) {
    return parseInt(window.performance.now(), 10);
  } else if (window.performance.webkitNow) {
    return parseInt(window.performance.webkitNow(), 10);
  } else {
    return Date.now() - SYS.timeBase();
  }
}

Module["_strncpy"] = _strncpy;

var _sin = Math_sin;

var _cos = Math_cos;

var _atan2 = Math_atan2;

function _Sys_LowPhysicalMemory() {
  return false;
}

function _round(x) {
  return x < 0 ? -Math.round(-x) : Math.round(x);
}
var _roundf = _round;

var _ceilf = Math_ceil;

var _floorf = Math_floor;

var _sqrtf = Math_sqrt;

Module["_strcpy"] = _strcpy;

Module["_memmove"] = _memmove;
var _llvm_memmove_p0i8_p0i8_i32 = _memmove;

function _strchr(ptr, chr) {
  ptr--;
  do {
    ptr++;
    var val = HEAP8[ptr];
    if (val == chr) return ptr;
  } while (val);
  return 0;
}

function _isalnum(chr) {
  return (
    (chr >= 48 && chr <= 57) ||
    (chr >= 97 && chr <= 122) ||
    (chr >= 65 && chr <= 90)
  );
}

var _sqrt = Math_sqrt;

var _llvm_pow_f32 = Math_pow;

var _fabsf = Math_abs;

function _Sys_GetClipboardData() {
  return 0;
}

Module["_tolower"] = _tolower;

function _strrchr(ptr, chr) {
  var ptr2 = ptr + _strlen(ptr);
  do {
    if (HEAP8[ptr2] == chr) return ptr2;
    ptr2--;
  } while (ptr2 >= ptr);
  return 0;
}

Module["_rand_r"] = _rand_r;

var ___rand_seed = allocate([0x0273459b, 0, 0, 0], "i32", ALLOC_STATIC);
Module["_rand"] = _rand;

function _rint(x) {
  if (Math.abs(x % 1) !== 0.5) return Math.round(x);
  return x + (x % 2) + (x < 0 ? 1 : -1);
}
var _lrintf = _rint;

function _Sys_SetEnv(name, value) {
  name = Pointer_stringify(name);
  value = Pointer_stringify(value);
}

function _Sys_GLimpSafeInit() {}

function _Sys_GLimpInit() {
  var viewport = Module["viewport"];

  // create a canvas element at this point if one doesnt' already exist
  if (!Module["canvas"]) {
    var canvas = document.createElement("canvas");
    canvas.id = "viewport";
    canvas.width = viewport.offsetWidth;
    canvas.height = viewport.offsetHeight;

    Module["canvas"] = viewport.appendChild(canvas);
  }
}

function __getFloat(text) {
  return /^[+-]?[0-9]*\.?[0-9]+([eE][+-]?[0-9]+)?/.exec(text);
}
function __scanString(format, get, unget, varargs) {
  if (!__scanString.whiteSpace) {
    __scanString.whiteSpace = {};
    __scanString.whiteSpace[32] = 1;
    __scanString.whiteSpace[9] = 1;
    __scanString.whiteSpace[10] = 1;
    __scanString.whiteSpace[11] = 1;
    __scanString.whiteSpace[12] = 1;
    __scanString.whiteSpace[13] = 1;
  }
  // Supports %x, %4x, %d.%d, %lld, %s, %f, %lf.
  // TODO: Support all format specifiers.
  format = Pointer_stringify(format);
  var soFar = 0;
  if (format.indexOf("%n") >= 0) {
    // need to track soFar
    var _get = get;
    get = function get() {
      soFar++;
      return _get();
    };
    var _unget = unget;
    unget = function unget() {
      soFar--;
      return _unget();
    };
  }
  var formatIndex = 0;
  var argsi = 0;
  var fields = 0;
  var argIndex = 0;
  var next;

  mainLoop: for (var formatIndex = 0; formatIndex < format.length; ) {
    if (format[formatIndex] === "%" && format[formatIndex + 1] == "n") {
      var argPtr = HEAP32[(varargs + argIndex) >> 2];
      argIndex += Runtime.getAlignSize("void*", null, true);
      HEAP32[argPtr >> 2] = soFar;
      formatIndex += 2;
      continue;
    }

    if (format[formatIndex] === "%") {
      var nextC = format.indexOf("c", formatIndex + 1);
      if (nextC > 0) {
        var maxx = 1;
        if (nextC > formatIndex + 1) {
          var sub = format.substring(formatIndex + 1, nextC);
          maxx = parseInt(sub);
          if (maxx != sub) maxx = 0;
        }
        if (maxx) {
          var argPtr = HEAP32[(varargs + argIndex) >> 2];
          argIndex += Runtime.getAlignSize("void*", null, true);
          fields++;
          for (var i = 0; i < maxx; i++) {
            next = get();
            HEAP8[argPtr++ | 0] = next;
            if (next === 0) return i > 0 ? fields : fields - 1; // we failed to read the full length of this field
          }
          formatIndex += nextC - formatIndex + 1;
          continue;
        }
      }
    }

    // handle %[...]
    if (
      format[formatIndex] === "%" &&
      format.indexOf("[", formatIndex + 1) > 0
    ) {
      var match = /\%([0-9]*)\[(\^)?(\]?[^\]]*)\]/.exec(
        format.substring(formatIndex)
      );
      if (match) {
        var maxNumCharacters = parseInt(match[1]) || Infinity;
        var negateScanList = match[2] === "^";
        var scanList = match[3];

        // expand "middle" dashs into character sets
        var middleDashMatch;
        while ((middleDashMatch = /([^\-])\-([^\-])/.exec(scanList))) {
          var rangeStartCharCode = middleDashMatch[1].charCodeAt(0);
          var rangeEndCharCode = middleDashMatch[2].charCodeAt(0);
          for (
            var expanded = "";
            rangeStartCharCode <= rangeEndCharCode;
            expanded += String.fromCharCode(rangeStartCharCode++)
          );
          scanList = scanList.replace(
            middleDashMatch[1] + "-" + middleDashMatch[2],
            expanded
          );
        }

        var argPtr = HEAP32[(varargs + argIndex) >> 2];
        argIndex += Runtime.getAlignSize("void*", null, true);
        fields++;

        for (var i = 0; i < maxNumCharacters; i++) {
          next = get();
          if (negateScanList) {
            if (scanList.indexOf(String.fromCharCode(next)) < 0) {
              HEAP8[argPtr++ | 0] = next;
            } else {
              unget();
              break;
            }
          } else {
            if (scanList.indexOf(String.fromCharCode(next)) >= 0) {
              HEAP8[argPtr++ | 0] = next;
            } else {
              unget();
              break;
            }
          }
        }

        // write out null-terminating character
        HEAP8[argPtr++ | 0] = 0;
        formatIndex += match[0].length;

        continue;
      }
    }
    // remove whitespace
    while (1) {
      next = get();
      if (next == 0) return fields;
      if (!(next in __scanString.whiteSpace)) break;
    }
    unget();

    if (format[formatIndex] === "%") {
      formatIndex++;
      var suppressAssignment = false;
      if (format[formatIndex] == "*") {
        suppressAssignment = true;
        formatIndex++;
      }
      var maxSpecifierStart = formatIndex;
      while (
        format[formatIndex].charCodeAt(0) >= 48 &&
        format[formatIndex].charCodeAt(0) <= 57
      ) {
        formatIndex++;
      }
      var max_;
      if (formatIndex != maxSpecifierStart) {
        max_ = parseInt(format.slice(maxSpecifierStart, formatIndex), 10);
      }
      var long_ = false;
      var half = false;
      var longLong = false;
      if (format[formatIndex] == "l") {
        long_ = true;
        formatIndex++;
        if (format[formatIndex] == "l") {
          longLong = true;
          formatIndex++;
        }
      } else if (format[formatIndex] == "h") {
        half = true;
        formatIndex++;
      }
      var type = format[formatIndex];
      formatIndex++;
      var curr = 0;
      var buffer = [];
      // Read characters according to the format. floats are trickier, they may be in an unfloat state in the middle, then be a valid float later
      if (
        type == "f" ||
        type == "e" ||
        type == "g" ||
        type == "F" ||
        type == "E" ||
        type == "G"
      ) {
        next = get();
        while (next > 0 && !(next in __scanString.whiteSpace)) {
          buffer.push(String.fromCharCode(next));
          next = get();
        }
        var m = __getFloat(buffer.join(""));
        var last = m ? m[0].length : 0;
        for (var i = 0; i < buffer.length - last + 1; i++) {
          unget();
        }
        buffer.length = last;
      } else {
        next = get();
        var first = true;

        // Strip the optional 0x prefix for %x.
        if ((type == "x" || type == "X") && next == 48) {
          var peek = get();
          if (peek == 120 || peek == 88) {
            next = get();
          } else {
            unget();
          }
        }

        while ((curr < max_ || isNaN(max_)) && next > 0) {
          if (
            !(next in __scanString.whiteSpace) && // stop on whitespace
            (type == "s" ||
              ((type === "d" || type == "u" || type == "i") &&
                ((next >= 48 && next <= 57) || (first && next == 45))) ||
              ((type === "x" || type === "X") &&
                ((next >= 48 && next <= 57) ||
                  (next >= 97 && next <= 102) ||
                  (next >= 65 && next <= 70)))) &&
            (formatIndex >= format.length ||
              next !== format[formatIndex].charCodeAt(0))
          ) {
            // Stop when we read something that is coming up
            buffer.push(String.fromCharCode(next));
            next = get();
            curr++;
            first = false;
          } else {
            break;
          }
        }
        unget();
      }
      if (buffer.length === 0) return 0; // Failure.
      if (suppressAssignment) continue;

      var text = buffer.join("");
      var argPtr = HEAP32[(varargs + argIndex) >> 2];
      argIndex += Runtime.getAlignSize("void*", null, true);
      switch (type) {
        case "d":
        case "u":
        case "i":
          if (half) {
            HEAP16[argPtr >> 1] = parseInt(text, 10);
          } else if (longLong) {
            (tempI64 = [
              parseInt(text, 10) >>> 0,
              ((tempDouble = parseInt(text, 10)),
              +Math_abs(tempDouble) >= +1
                ? tempDouble > +0
                  ? (Math_min(
                      +Math_floor(tempDouble / +4294967296),
                      +4294967295
                    ) |
                      0) >>>
                    0
                  : ~~+Math_ceil(
                      (tempDouble - +(~~tempDouble >>> 0)) / +4294967296
                    ) >>> 0
                : 0),
            ]),
              (HEAP32[argPtr >> 2] = tempI64[0]),
              (HEAP32[(argPtr + 4) >> 2] = tempI64[1]);
          } else {
            HEAP32[argPtr >> 2] = parseInt(text, 10);
          }
          break;
        case "X":
        case "x":
          HEAP32[argPtr >> 2] = parseInt(text, 16);
          break;
        case "F":
        case "f":
        case "E":
        case "e":
        case "G":
        case "g":
        case "E":
          // fallthrough intended
          if (long_) {
            HEAPF64[argPtr >> 3] = parseFloat(text);
          } else {
            HEAPF32[argPtr >> 2] = parseFloat(text);
          }
          break;
        case "s":
          var array = intArrayFromString(text);
          for (var j = 0; j < array.length; j++) {
            HEAP8[(argPtr + j) | 0] = array[j];
          }
          break;
      }
      fields++;
    } else if (format[formatIndex].charCodeAt(0) in __scanString.whiteSpace) {
      next = get();
      while (next in __scanString.whiteSpace) {
        if (next <= 0) break mainLoop; // End of input.
        next = get();
      }
      unget(next);
      formatIndex++;
    } else {
      // Not a specifier.
      next = get();
      if (format[formatIndex].charCodeAt(0) !== next) {
        unget(next);
        break mainLoop;
      }
      formatIndex++;
    }
  }
  return fields;
}
function _sscanf(s, format, varargs) {
  // int sscanf(const char *restrict s, const char *restrict format, ... );
  // http://pubs.opengroup.org/onlinepubs/000095399/functions/scanf.html
  var index = 0;
  function get() {
    return HEAP8[(s + index++) | 0];
  }
  function unget() {
    index--;
  }
  return __scanString(format, get, unget, varargs);
}

function __reallyNegative(x) {
  return x < 0 || (x === 0 && 1 / x === -Infinity);
}
function __formatString(format, varargs) {
  var textIndex = format;
  var argIndex = 0;
  function getNextArg(type) {
    // NOTE: Explicitly ignoring type safety. Otherwise this fails:
    //       int x = 4; printf("%c\n", (char)x);
    var ret;
    if (type === "double") {
      ret = HEAPF64[(varargs + argIndex) >> 3];
    } else if (type == "i64") {
      ret = [
        HEAP32[(varargs + argIndex) >> 2],
        HEAP32[(varargs + (argIndex + 8)) >> 2],
      ];
      argIndex += 8; // each 32-bit chunk is in a 64-bit block
    } else {
      type = "i32"; // varargs are always i32, i64, or double
      ret = HEAP32[(varargs + argIndex) >> 2];
    }
    argIndex += Math.max(
      Runtime.getNativeFieldSize(type),
      Runtime.getAlignSize(type, null, true)
    );
    return ret;
  }

  var ret = [];
  var curr, next, currArg;
  while (1) {
    var startTextIndex = textIndex;
    curr = HEAP8[textIndex];
    if (curr === 0) break;
    next = HEAP8[(textIndex + 1) | 0];
    if (curr == 37) {
      // Handle flags.
      var flagAlwaysSigned = false;
      var flagLeftAlign = false;
      var flagAlternative = false;
      var flagZeroPad = false;
      var flagPadSign = false;
      flagsLoop: while (1) {
        switch (next) {
          case 43:
            flagAlwaysSigned = true;
            break;
          case 45:
            flagLeftAlign = true;
            break;
          case 35:
            flagAlternative = true;
            break;
          case 48:
            if (flagZeroPad) {
              break flagsLoop;
            } else {
              flagZeroPad = true;
              break;
            }
          case 32:
            flagPadSign = true;
            break;
          default:
            break flagsLoop;
        }
        textIndex++;
        next = HEAP8[(textIndex + 1) | 0];
      }

      // Handle width.
      var width = 0;
      if (next == 42) {
        width = getNextArg("i32");
        textIndex++;
        next = HEAP8[(textIndex + 1) | 0];
      } else {
        while (next >= 48 && next <= 57) {
          width = width * 10 + (next - 48);
          textIndex++;
          next = HEAP8[(textIndex + 1) | 0];
        }
      }

      // Handle precision.
      var precisionSet = false,
        precision = -1;
      if (next == 46) {
        precision = 0;
        precisionSet = true;
        textIndex++;
        next = HEAP8[(textIndex + 1) | 0];
        if (next == 42) {
          precision = getNextArg("i32");
          textIndex++;
        } else {
          while (1) {
            var precisionChr = HEAP8[(textIndex + 1) | 0];
            if (precisionChr < 48 || precisionChr > 57) break;
            precision = precision * 10 + (precisionChr - 48);
            textIndex++;
          }
        }
        next = HEAP8[(textIndex + 1) | 0];
      }
      if (precision === -1) {
        precision = 6; // Standard default.
        precisionSet = false;
      }

      // Handle integer sizes. WARNING: These assume a 32-bit architecture!
      var argSize;
      switch (String.fromCharCode(next)) {
        case "h":
          var nextNext = HEAP8[(textIndex + 2) | 0];
          if (nextNext == 104) {
            textIndex++;
            argSize = 1; // char (actually i32 in varargs)
          } else {
            argSize = 2; // short (actually i32 in varargs)
          }
          break;
        case "l":
          var nextNext = HEAP8[(textIndex + 2) | 0];
          if (nextNext == 108) {
            textIndex++;
            argSize = 8; // long long
          } else {
            argSize = 4; // long
          }
          break;
        case "L": // long long
        case "q": // int64_t
        case "j": // intmax_t
          argSize = 8;
          break;
        case "z": // size_t
        case "t": // ptrdiff_t
        case "I": // signed ptrdiff_t or unsigned size_t
          argSize = 4;
          break;
        default:
          argSize = null;
      }
      if (argSize) textIndex++;
      next = HEAP8[(textIndex + 1) | 0];

      // Handle type specifier.
      switch (String.fromCharCode(next)) {
        case "d":
        case "i":
        case "u":
        case "o":
        case "x":
        case "X":
        case "p": {
          // Integer.
          var signed = next == 100 || next == 105;
          argSize = argSize || 4;
          var currArg = getNextArg("i" + argSize * 8);
          var origArg = currArg;
          var argText;
          // Flatten i64-1 [low, high] into a (slightly rounded) double
          if (argSize == 8) {
            currArg = Runtime.makeBigInt(currArg[0], currArg[1], next == 117);
          }
          // Truncate to requested size.
          if (argSize <= 4) {
            var limit = Math.pow(256, argSize) - 1;
            currArg = (signed ? reSign : unSign)(currArg & limit, argSize * 8);
          }
          // Format the number.
          var currAbsArg = Math.abs(currArg);
          var prefix = "";
          if (next == 100 || next == 105) {
            if (argSize == 8 && i64Math)
              argText = i64Math.stringify(origArg[0], origArg[1], null);
            else argText = reSign(currArg, 8 * argSize, 1).toString(10);
          } else if (next == 117) {
            if (argSize == 8 && i64Math)
              argText = i64Math.stringify(origArg[0], origArg[1], true);
            else argText = unSign(currArg, 8 * argSize, 1).toString(10);
            currArg = Math.abs(currArg);
          } else if (next == 111) {
            argText = (flagAlternative ? "0" : "") + currAbsArg.toString(8);
          } else if (next == 120 || next == 88) {
            prefix = flagAlternative && currArg != 0 ? "0x" : "";
            if (argSize == 8 && i64Math) {
              if (origArg[1]) {
                argText = (origArg[1] >>> 0).toString(16);
                var lower = (origArg[0] >>> 0).toString(16);
                while (lower.length < 8) lower = "0" + lower;
                argText += lower;
              } else {
                argText = (origArg[0] >>> 0).toString(16);
              }
            } else if (currArg < 0) {
              // Represent negative numbers in hex as 2's complement.
              currArg = -currArg;
              argText = (currAbsArg - 1).toString(16);
              var buffer = [];
              for (var i = 0; i < argText.length; i++) {
                buffer.push((0xf - parseInt(argText[i], 16)).toString(16));
              }
              argText = buffer.join("");
              while (argText.length < argSize * 2) argText = "f" + argText;
            } else {
              argText = currAbsArg.toString(16);
            }
            if (next == 88) {
              prefix = prefix.toUpperCase();
              argText = argText.toUpperCase();
            }
          } else if (next == 112) {
            if (currAbsArg === 0) {
              argText = "(nil)";
            } else {
              prefix = "0x";
              argText = currAbsArg.toString(16);
            }
          }
          if (precisionSet) {
            while (argText.length < precision) {
              argText = "0" + argText;
            }
          }

          // Add sign if needed
          if (currArg >= 0) {
            if (flagAlwaysSigned) {
              prefix = "+" + prefix;
            } else if (flagPadSign) {
              prefix = " " + prefix;
            }
          }

          // Move sign to prefix so we zero-pad after the sign
          if (argText.charAt(0) == "-") {
            prefix = "-" + prefix;
            argText = argText.substr(1);
          }

          // Add padding.
          while (prefix.length + argText.length < width) {
            if (flagLeftAlign) {
              argText += " ";
            } else {
              if (flagZeroPad) {
                argText = "0" + argText;
              } else {
                prefix = " " + prefix;
              }
            }
          }

          // Insert the result into the buffer.
          argText = prefix + argText;
          argText.split("").forEach(function (chr) {
            ret.push(chr.charCodeAt(0));
          });
          break;
        }
        case "f":
        case "F":
        case "e":
        case "E":
        case "g":
        case "G": {
          // Float.
          var currArg = getNextArg("double");
          var argText;
          if (isNaN(currArg)) {
            argText = "nan";
            flagZeroPad = false;
          } else if (!isFinite(currArg)) {
            argText = (currArg < 0 ? "-" : "") + "inf";
            flagZeroPad = false;
          } else {
            var isGeneral = false;
            var effectivePrecision = Math.min(precision, 20);

            // Convert g/G to f/F or e/E, as per:
            // http://pubs.opengroup.org/onlinepubs/9699919799/functions/printf.html
            if (next == 103 || next == 71) {
              isGeneral = true;
              precision = precision || 1;
              var exponent = parseInt(
                currArg.toExponential(effectivePrecision).split("e")[1],
                10
              );
              if (precision > exponent && exponent >= -4) {
                next = (next == 103 ? "f" : "F").charCodeAt(0);
                precision -= exponent + 1;
              } else {
                next = (next == 103 ? "e" : "E").charCodeAt(0);
                precision--;
              }
              effectivePrecision = Math.min(precision, 20);
            }

            if (next == 101 || next == 69) {
              argText = currArg.toExponential(effectivePrecision);
              // Make sure the exponent has at least 2 digits.
              if (/[eE][-+]\d$/.test(argText)) {
                argText = argText.slice(0, -1) + "0" + argText.slice(-1);
              }
            } else if (next == 102 || next == 70) {
              argText = currArg.toFixed(effectivePrecision);
              if (currArg === 0 && __reallyNegative(currArg)) {
                argText = "-" + argText;
              }
            }

            var parts = argText.split("e");
            if (isGeneral && !flagAlternative) {
              // Discard trailing zeros and periods.
              while (
                parts[0].length > 1 &&
                parts[0].indexOf(".") != -1 &&
                (parts[0].slice(-1) == "0" || parts[0].slice(-1) == ".")
              ) {
                parts[0] = parts[0].slice(0, -1);
              }
            } else {
              // Make sure we have a period in alternative mode.
              if (flagAlternative && argText.indexOf(".") == -1)
                parts[0] += ".";
              // Zero pad until required precision.
              while (precision > effectivePrecision++) parts[0] += "0";
            }
            argText = parts[0] + (parts.length > 1 ? "e" + parts[1] : "");

            // Capitalize 'E' if needed.
            if (next == 69) argText = argText.toUpperCase();

            // Add sign.
            if (currArg >= 0) {
              if (flagAlwaysSigned) {
                argText = "+" + argText;
              } else if (flagPadSign) {
                argText = " " + argText;
              }
            }
          }

          // Add padding.
          while (argText.length < width) {
            if (flagLeftAlign) {
              argText += " ";
            } else {
              if (flagZeroPad && (argText[0] == "-" || argText[0] == "+")) {
                argText = argText[0] + "0" + argText.slice(1);
              } else {
                argText = (flagZeroPad ? "0" : " ") + argText;
              }
            }
          }

          // Adjust case.
          if (next < 97) argText = argText.toUpperCase();

          // Insert the result into the buffer.
          argText.split("").forEach(function (chr) {
            ret.push(chr.charCodeAt(0));
          });
          break;
        }
        case "s": {
          // String.
          var arg = getNextArg("i8*");
          var argLength = arg ? _strlen(arg) : "(null)".length;
          if (precisionSet) argLength = Math.min(argLength, precision);
          if (!flagLeftAlign) {
            while (argLength < width--) {
              ret.push(32);
            }
          }
          if (arg) {
            for (var i = 0; i < argLength; i++) {
              ret.push(HEAPU8[arg++ | 0]);
            }
          } else {
            ret = ret.concat(
              intArrayFromString("(null)".substr(0, argLength), true)
            );
          }
          if (flagLeftAlign) {
            while (argLength < width--) {
              ret.push(32);
            }
          }
          break;
        }
        case "c": {
          // Character.
          if (flagLeftAlign) ret.push(getNextArg("i8"));
          while (--width > 0) {
            ret.push(32);
          }
          if (!flagLeftAlign) ret.push(getNextArg("i8"));
          break;
        }
        case "n": {
          // Write the length written so far to the next parameter.
          var ptr = getNextArg("i32*");
          HEAP32[ptr >> 2] = ret.length;
          break;
        }
        case "%": {
          // Literal percent sign.
          ret.push(curr);
          break;
        }
        default: {
          // Unknown specifiers remain untouched.
          for (var i = startTextIndex; i < textIndex + 2; i++) {
            ret.push(HEAP8[i]);
          }
        }
      }
      textIndex += 2;
      // TODO: Support a/A (hex float) and m (last error) specifiers.
      // TODO: Support %1${specifier} for arg selection.
    } else {
      ret.push(curr);
      textIndex += 1;
    }
  }
  return ret;
}
function _snprintf(s, n, format, varargs) {
  // int snprintf(char *restrict s, size_t n, const char *restrict format, ...);
  // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
  var result = __formatString(format, varargs);
  var limit =
    n === undefined
      ? result.length
      : Math.min(result.length, Math.max(n - 1, 0));
  if (s < 0) {
    s = -s;
    var buf = _malloc(limit + 1);
    HEAP32[s >> 2] = buf;
    s = buf;
  }
  for (var i = 0; i < limit; i++) {
    HEAP8[(s + i) | 0] = result[i];
  }
  if (limit < n || n === undefined) HEAP8[(s + i) | 0] = 0;
  return result.length;
}
function _sprintf(s, format, varargs) {
  // int sprintf(char *restrict s, const char *restrict format, ...);
  // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
  return _snprintf(s, undefined, format, varargs);
}

var _llvm_va_start = undefined;

function _vsnprintf(s, n, format, va_arg) {
  return _snprintf(s, n, format, HEAP32[va_arg >> 2]);
}

function _llvm_va_end() {}

var _llvm_memset_p0i8_i64 = _memset;

var _llvm_memcpy_p0i8_p0i8_i64 = _memcpy;

function _strpbrk(ptr1, ptr2) {
  var curr;
  var searchSet = {};
  while (1) {
    var curr = HEAP8[ptr2++ | 0];
    if (!curr) break;
    searchSet[curr] = 1;
  }
  while (1) {
    curr = HEAP8[ptr1];
    if (!curr) break;
    if (curr in searchSet) return ptr1;
    ptr1++;
  }
  return 0;
}

function _time(ptr) {
  var ret = Math.floor(Date.now() / 1000);
  if (ptr) {
    HEAP32[ptr >> 2] = ret;
  }
  return ret;
}

var ___tm_current = allocate(44, "i8", ALLOC_STATIC);

var ___tm_timezone = allocate(intArrayFromString("GMT"), "i8", ALLOC_STATIC);

var _tzname = allocate(8, "i32*", ALLOC_STATIC);

var _daylight = allocate(1, "i32*", ALLOC_STATIC);

var _timezone = allocate(1, "i32*", ALLOC_STATIC);
function _tzset() {
  // TODO: Use (malleable) environment variables instead of system settings.
  if (_tzset.called) return;
  _tzset.called = true;

  HEAP32[_timezone >> 2] = -new Date().getTimezoneOffset() * 60;

  var winter = new Date(2000, 0, 1);
  var summer = new Date(2000, 6, 1);
  HEAP32[_daylight >> 2] = Number(
    winter.getTimezoneOffset() != summer.getTimezoneOffset()
  );

  var winterName = "GMT"; // XXX do not rely on browser timezone info, it is very unpredictable | winter.toString().match(/\(([A-Z]+)\)/)[1];
  var summerName = "GMT"; // XXX do not rely on browser timezone info, it is very unpredictable | summer.toString().match(/\(([A-Z]+)\)/)[1];
  var winterNamePtr = allocate(
    intArrayFromString(winterName),
    "i8",
    ALLOC_NORMAL
  );
  var summerNamePtr = allocate(
    intArrayFromString(summerName),
    "i8",
    ALLOC_NORMAL
  );
  HEAP32[_tzname >> 2] = winterNamePtr;
  HEAP32[(_tzname + 4) >> 2] = summerNamePtr;
}
function _localtime_r(time, tmPtr) {
  _tzset();
  var date = new Date(HEAP32[time >> 2] * 1000);
  HEAP32[tmPtr >> 2] = date.getSeconds();
  HEAP32[(tmPtr + 4) >> 2] = date.getMinutes();
  HEAP32[(tmPtr + 8) >> 2] = date.getHours();
  HEAP32[(tmPtr + 12) >> 2] = date.getDate();
  HEAP32[(tmPtr + 16) >> 2] = date.getMonth();
  HEAP32[(tmPtr + 20) >> 2] = date.getFullYear() - 1900;
  HEAP32[(tmPtr + 24) >> 2] = date.getDay();

  var start = new Date(date.getFullYear(), 0, 1);
  var yday = Math.floor(
    (date.getTime() - start.getTime()) / (1000 * 60 * 60 * 24)
  );
  HEAP32[(tmPtr + 28) >> 2] = yday;
  HEAP32[(tmPtr + 36) >> 2] = start.getTimezoneOffset() * 60;

  var dst = Number(start.getTimezoneOffset() != date.getTimezoneOffset());
  HEAP32[(tmPtr + 32) >> 2] = dst;

  HEAP32[(tmPtr + 40) >> 2] = ___tm_timezone;

  return tmPtr;
}
function _localtime(time) {
  return _localtime_r(time, ___tm_current);
}

var ___tm_formatted = allocate(44, "i8", ALLOC_STATIC);

function _mktime(tmPtr) {
  _tzset();
  var year = HEAP32[(tmPtr + 20) >> 2];
  var timestamp =
    new Date(
      year >= 1900 ? year : year + 1900,
      HEAP32[(tmPtr + 16) >> 2],
      HEAP32[(tmPtr + 12) >> 2],
      HEAP32[(tmPtr + 8) >> 2],
      HEAP32[(tmPtr + 4) >> 2],
      HEAP32[tmPtr >> 2],
      0
    ).getTime() / 1000;
  HEAP32[(tmPtr + 24) >> 2] = new Date(timestamp).getDay();
  var yday = Math.round(
    (timestamp - new Date(year, 0, 1).getTime()) / (1000 * 60 * 60 * 24)
  );
  HEAP32[(tmPtr + 28) >> 2] = yday;
  return timestamp;
}
function _asctime_r(tmPtr, buf) {
  var date = new Date(_mktime(tmPtr) * 1000);
  var formatted = date.toString();
  var datePart = formatted.replace(/\d{4}.*/, "").replace(/ 0/, "  ");
  var timePart = formatted.match(/\d{2}:\d{2}:\d{2}/)[0];
  formatted = datePart + timePart + " " + date.getFullYear() + "\n";
  formatted.split("").forEach(function (chr, index) {
    HEAP8[(buf + index) | 0] = chr.charCodeAt(0);
  });
  HEAP8[(buf + 25) | 0] = 0;
  return buf;
}
function _asctime(tmPtr) {
  return _asctime_r(tmPtr, ___tm_formatted);
}

function _mkport() {
  throw "TODO";
}
var SOCKFS = {
  mount: function (mount) {
    return FS.createNode(null, "/", 16384 | 0777, 0);
  },
  createSocket: function (family, type, protocol) {
    var streaming = type == 1;
    if (protocol) {
      assert(streaming == (protocol == 6)); // if SOCK_STREAM, must be tcp
    }

    // create our internal socket structure
    var sock = {
      family: family,
      type: type,
      protocol: protocol,
      server: null,
      peers: {},
      pending: [],
      recv_queue: [],
      sock_ops: SOCKFS.websocket_sock_ops,
    };

    // create the filesystem node to store the socket structure
    var name = SOCKFS.nextname();
    var node = FS.createNode(SOCKFS.root, name, 49152, 0);
    node.sock = sock;

    // and the wrapping stream that enables library functions such
    // as read and write to indirectly interact with the socket
    var stream = FS.createStream({
      path: name,
      node: node,
      flags: FS.modeStringToFlags("r+"),
      seekable: false,
      stream_ops: SOCKFS.stream_ops,
    });

    // map the new stream to the socket structure (sockets have a 1:1
    // relationship with a stream)
    sock.stream = stream;

    return sock;
  },
  getSocket: function (fd) {
    var stream = FS.getStream(fd);
    if (!stream || !FS.isSocket(stream.node.mode)) {
      return null;
    }
    return stream.node.sock;
  },
  stream_ops: {
    poll: function (stream) {
      var sock = stream.node.sock;
      return sock.sock_ops.poll(sock);
    },
    ioctl: function (stream, request, varargs) {
      var sock = stream.node.sock;
      return sock.sock_ops.ioctl(sock, request, varargs);
    },
    read: function (stream, buffer, offset, length, position /* ignored */) {
      var sock = stream.node.sock;
      var msg = sock.sock_ops.recvmsg(sock, length);
      if (!msg) {
        // socket is closed
        return 0;
      }
      buffer.set(msg.buffer, offset);
      return msg.buffer.length;
    },
    write: function (stream, buffer, offset, length, position /* ignored */) {
      var sock = stream.node.sock;
      return sock.sock_ops.sendmsg(sock, buffer, offset, length);
    },
    close: function (stream) {
      var sock = stream.node.sock;
      sock.sock_ops.close(sock);
    },
  },
  nextname: function () {
    if (!SOCKFS.nextname.current) {
      SOCKFS.nextname.current = 0;
    }
    return "socket[" + SOCKFS.nextname.current++ + "]";
  },
  websocket_sock_ops: {
    createPeer: function (sock, addr, port) {
      var ws;

      if (typeof addr === "object") {
        ws = addr;
        addr = null;
        port = null;
      }

      if (ws) {
        // for sockets that've already connected (e.g. we're the server)
        // we can inspect the _socket property for the address
        if (ws._socket) {
          addr = ws._socket.remoteAddress;
          port = ws._socket.remotePort;
        }
        // if we're just now initializing a connection to the remote,
        // inspect the url property
        else {
          var result = /ws[s]?:\/\/([^:]+):(\d+)/.exec(ws.url);
          if (!result) {
            throw new Error(
              "WebSocket URL must be in the format ws(s)://address:port"
            );
          }
          addr = result[1];
          port = parseInt(result[2], 10);
        }
      } else {
        // create the actual websocket object and connect
        try {
          var url = "ws://" + addr + ":" + port;
          // the node ws library API is slightly different than the browser's
          var opts = ENVIRONMENT_IS_NODE
            ? { headers: { "websocket-protocol": ["binary"] } }
            : ["binary"];
          // If node we use the ws library.
          var WebSocket = ENVIRONMENT_IS_NODE
            ? require("ws")
            : window["WebSocket"];
          ws = new WebSocket(url, opts);
          ws.binaryType = "arraybuffer";
        } catch (e) {
          throw new FS.ErrnoError(ERRNO_CODES.EHOSTUNREACH);
        }
      }

      var peer = {
        addr: addr,
        port: port,
        socket: ws,
        dgram_send_queue: [],
      };

      SOCKFS.websocket_sock_ops.addPeer(sock, peer);
      SOCKFS.websocket_sock_ops.handlePeerEvents(sock, peer);

      // if this is a bound dgram socket, send the port number first to allow
      // us to override the ephemeral port reported to us by remotePort on the
      // remote end.
      if (sock.type === 2 && typeof sock.sport !== "undefined") {
        peer.dgram_send_queue.push(
          new Uint8Array([
            255,
            255,
            255,
            255,
            "p".charCodeAt(0),
            "o".charCodeAt(0),
            "r".charCodeAt(0),
            "t".charCodeAt(0),
            (sock.sport & 0xff00) >> 8,
            sock.sport & 0xff,
          ])
        );
      }

      return peer;
    },
    getPeer: function (sock, addr, port) {
      return sock.peers[addr + ":" + port];
    },
    addPeer: function (sock, peer) {
      sock.peers[peer.addr + ":" + peer.port] = peer;
    },
    removePeer: function (sock, peer) {
      delete sock.peers[peer.addr + ":" + peer.port];
    },
    handlePeerEvents: function (sock, peer) {
      var first = true;

      function handleOpen() {
        try {
          var queued = peer.dgram_send_queue.shift();
          while (queued) {
            peer.socket.send(queued);
            queued = peer.dgram_send_queue.shift();
          }
        } catch (e) {
          // not much we can do here in the way of proper error handling as we've already
          // lied and said this data was sent. shut it down.
          peer.socket.close();
        }
      }

      function handleMessage(data) {
        assert(typeof data !== "string" && data.byteLength !== undefined); // must receive an ArrayBuffer
        data = new Uint8Array(data); // make a typed array view on the array buffer

        // if this is the port message, override the peer's port with it
        var wasfirst = first;
        first = false;
        if (
          wasfirst &&
          data.length === 10 &&
          data[0] === 255 &&
          data[1] === 255 &&
          data[2] === 255 &&
          data[3] === 255 &&
          data[4] === "p".charCodeAt(0) &&
          data[5] === "o".charCodeAt(0) &&
          data[6] === "r".charCodeAt(0) &&
          data[7] === "t".charCodeAt(0)
        ) {
          // update the peer's port and it's key in the peer map
          var newport = (data[8] << 8) | data[9];
          SOCKFS.websocket_sock_ops.removePeer(sock, peer);
          peer.port = newport;
          SOCKFS.websocket_sock_ops.addPeer(sock, peer);
          return;
        }

        sock.recv_queue.push({ addr: peer.addr, port: peer.port, data: data });
      }

      function handleClose() {
        SOCKFS.websocket_sock_ops.removePeer(sock, peer);
      }

      if (ENVIRONMENT_IS_NODE) {
        peer.socket.on("open", handleOpen);
        peer.socket.on("message", function (data, flags) {
          if (!flags.binary) {
            return;
          }
          handleMessage(new Uint8Array(data).buffer); // copy from node Buffer -> ArrayBuffer
        });
        peer.socket.on("error", handleClose);
        peer.socket.on("close", handleClose);
      } else {
        peer.socket.onopen = handleOpen;
        peer.socket.onmessage = function peer_socket_onmessage(event) {
          handleMessage(event.data);
        };
        peer.socket.onerror = handleClose;
        peer.socket.onclose = handleClose;
      }
    },
    poll: function (sock) {
      if (sock.type === 1 && sock.server) {
        // listen sockets should only say they're available for reading
        // if there are pending clients.
        return sock.pending.length ? 64 | 1 : 0;
      }

      var mask = 0;
      var dest =
        sock.type === 1 // we only care about the socket state for connection-based sockets
          ? SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport)
          : null;

      if (
        sock.recv_queue.length ||
        !dest || // connection-less sockets are always ready to read
        (dest && dest.socket.readyState === dest.socket.CLOSING) ||
        (dest && dest.socket.readyState === dest.socket.CLOSED)
      ) {
        // let recv return 0 once closed
        mask |= 64 | 1;
      }

      if (
        !dest || // connection-less sockets are always ready to write
        (dest && dest.socket.readyState === dest.socket.OPEN)
      ) {
        mask |= 4;
      }

      if (
        (dest && dest.socket.readyState === dest.socket.CLOSING) ||
        (dest && dest.socket.readyState === dest.socket.CLOSED)
      ) {
        mask |= 16;
      }

      return mask;
    },
    ioctl: function (sock, request, arg) {
      switch (request) {
        case 21531:
          var bytes = 0;
          if (sock.recv_queue.length) {
            bytes = sock.recv_queue[0].data.length;
          }
          HEAP32[arg >> 2] = bytes;
          return 0;
        default:
          return ERRNO_CODES.EINVAL;
      }
    },
    close: function (sock) {
      // if we've spawned a listen server, close it
      if (sock.server) {
        try {
          sock.server.close();
        } catch (e) {}
        sock.server = null;
      }
      // close any peer connections
      var peers = Object.keys(sock.peers);
      for (var i = 0; i < peers.length; i++) {
        var peer = sock.peers[peers[i]];
        try {
          peer.socket.close();
        } catch (e) {}
        SOCKFS.websocket_sock_ops.removePeer(sock, peer);
      }
      return 0;
    },
    bind: function (sock, addr, port) {
      if (
        typeof sock.saddr !== "undefined" ||
        typeof sock.sport !== "undefined"
      ) {
        throw new FS.ErrnoError(ERRNO_CODES.EINVAL); // already bound
      }
      sock.saddr = addr;
      sock.sport = port || _mkport();
      // in order to emulate dgram sockets, we need to launch a listen server when
      // binding on a connection-less socket
      // note: this is only required on the server side
      if (sock.type === 2) {
        // close the existing server if it exists
        if (sock.server) {
          sock.server.close();
          sock.server = null;
        }
        // swallow error operation not supported error that occurs when binding in the
        // browser where this isn't supported
        try {
          sock.sock_ops.listen(sock, 0);
        } catch (e) {
          if (!(e instanceof FS.ErrnoError)) throw e;
          if (e.errno !== ERRNO_CODES.EOPNOTSUPP) throw e;
        }
      }
    },
    connect: function (sock, addr, port) {
      if (sock.server) {
        throw new FS.ErrnoError(ERRNO_CODS.EOPNOTSUPP);
      }

      // TODO autobind
      // if (!sock.addr && sock.type == 2) {
      // }

      // early out if we're already connected / in the middle of connecting
      if (
        typeof sock.daddr !== "undefined" &&
        typeof sock.dport !== "undefined"
      ) {
        var dest = SOCKFS.websocket_sock_ops.getPeer(
          sock,
          sock.daddr,
          sock.dport
        );
        if (dest) {
          if (dest.socket.readyState === dest.socket.CONNECTING) {
            throw new FS.ErrnoError(ERRNO_CODES.EALREADY);
          } else {
            throw new FS.ErrnoError(ERRNO_CODES.EISCONN);
          }
        }
      }

      // add the socket to our peer list and set our
      // destination address / port to match
      var peer = SOCKFS.websocket_sock_ops.createPeer(sock, addr, port);
      sock.daddr = peer.addr;
      sock.dport = peer.port;

      // always "fail" in non-blocking mode
      throw new FS.ErrnoError(ERRNO_CODES.EINPROGRESS);
    },
    listen: function (sock, backlog) {
      if (!ENVIRONMENT_IS_NODE) {
        throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
      }
      if (sock.server) {
        throw new FS.ErrnoError(ERRNO_CODES.EINVAL); // already listening
      }
      var WebSocketServer = require("ws").Server;
      var host = sock.saddr;
      sock.server = new WebSocketServer({
        host: host,
        port: sock.sport,
        // TODO support backlog
      });

      sock.server.on("connection", function (ws) {
        if (sock.type === 1) {
          var newsock = SOCKFS.createSocket(
            sock.family,
            sock.type,
            sock.protocol
          );

          // create a peer on the new socket
          var peer = SOCKFS.websocket_sock_ops.createPeer(newsock, ws);
          newsock.daddr = peer.addr;
          newsock.dport = peer.port;

          // push to queue for accept to pick up
          sock.pending.push(newsock);
        } else {
          // create a peer on the listen socket so calling sendto
          // with the listen socket and an address will resolve
          // to the correct client
          SOCKFS.websocket_sock_ops.createPeer(sock, ws);
        }
      });
      sock.server.on("closed", function () {
        sock.server = null;
      });
      sock.server.on("error", function () {
        // don't throw
      });
    },
    accept: function (listensock) {
      if (!listensock.server) {
        throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
      }
      var newsock = listensock.pending.shift();
      newsock.stream.flags = listensock.stream.flags;
      return newsock;
    },
    getname: function (sock, peer) {
      var addr, port;
      if (peer) {
        if (sock.daddr === undefined || sock.dport === undefined) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
        }
        addr = sock.daddr;
        port = sock.dport;
      } else {
        // TODO saddr and sport will be set for bind()'d UDP sockets, but what
        // should we be returning for TCP sockets that've been connect()'d?
        addr = sock.saddr || 0;
        port = sock.sport || 0;
      }
      return { addr: addr, port: port };
    },
    sendmsg: function (sock, buffer, offset, length, addr, port) {
      if (sock.type === 2) {
        // connection-less sockets will honor the message address,
        // and otherwise fall back to the bound destination address
        if (addr === undefined || port === undefined) {
          addr = sock.daddr;
          port = sock.dport;
        }
        // if there was no address to fall back to, error out
        if (addr === undefined || port === undefined) {
          throw new FS.ErrnoError(ERRNO_CODES.EDESTADDRREQ);
        }
      } else {
        // connection-based sockets will only use the bound
        addr = sock.daddr;
        port = sock.dport;
      }

      // find the peer for the destination address
      var dest = SOCKFS.websocket_sock_ops.getPeer(sock, addr, port);

      // early out if not connected with a connection-based socket
      if (sock.type === 1) {
        if (
          !dest ||
          dest.socket.readyState === dest.socket.CLOSING ||
          dest.socket.readyState === dest.socket.CLOSED
        ) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
        } else if (dest.socket.readyState === dest.socket.CONNECTING) {
          throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
        }
      }

      // create a copy of the incoming data to send, as the WebSocket API
      // doesn't work entirely with an ArrayBufferView, it'll just send
      // the entire underlying buffer
      var data;
      if (buffer instanceof Array || buffer instanceof ArrayBuffer) {
        data = buffer.slice(offset, offset + length);
      } else {
        // ArrayBufferView
        data = buffer.buffer.slice(
          buffer.byteOffset + offset,
          buffer.byteOffset + offset + length
        );
      }

      // if we're emulating a connection-less dgram socket and don't have
      // a cached connection, queue the buffer to send upon connect and
      // lie, saying the data was sent now.
      if (sock.type === 2) {
        if (!dest || dest.socket.readyState !== dest.socket.OPEN) {
          // if we're not connected, open a new connection
          if (
            !dest ||
            dest.socket.readyState === dest.socket.CLOSING ||
            dest.socket.readyState === dest.socket.CLOSED
          ) {
            dest = SOCKFS.websocket_sock_ops.createPeer(sock, addr, port);
          }
          dest.dgram_send_queue.push(data);
          return length;
        }
      }

      try {
        // send the actual data
        dest.socket.send(data);
        return length;
      } catch (e) {
        throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
      }
    },
    recvmsg: function (sock, length) {
      // http://pubs.opengroup.org/onlinepubs/7908799/xns/recvmsg.html
      if (sock.type === 1 && sock.server) {
        // tcp servers should not be recv()'ing on the listen socket
        throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
      }

      var queued = sock.recv_queue.shift();
      if (!queued) {
        if (sock.type === 1) {
          var dest = SOCKFS.websocket_sock_ops.getPeer(
            sock,
            sock.daddr,
            sock.dport
          );

          if (!dest) {
            // if we have a destination address but are not connected, error out
            throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
          } else if (
            dest.socket.readyState === dest.socket.CLOSING ||
            dest.socket.readyState === dest.socket.CLOSED
          ) {
            // return null if the socket has closed
            return null;
          } else {
            // else, our socket is in a valid state but truly has nothing available
            throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
          }
        } else {
          throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
        }
      }

      // queued.data will be an ArrayBuffer if it's unadulterated, but if it's
      // requeued TCP data it'll be an ArrayBufferView
      var queuedLength = queued.data.byteLength || queued.data.length;
      var queuedOffset = queued.data.byteOffset || 0;
      var queuedBuffer = queued.data.buffer || queued.data;
      var bytesRead = Math.min(length, queuedLength);
      var res = {
        buffer: new Uint8Array(queuedBuffer, queuedOffset, bytesRead),
        addr: queued.addr,
        port: queued.port,
      };

      // push back any unread data for TCP connections
      if (sock.type === 1 && bytesRead < queuedLength) {
        var bytesRemaining = queuedLength - bytesRead;
        queued.data = new Uint8Array(
          queuedBuffer,
          queuedOffset + bytesRead,
          bytesRemaining
        );
        sock.recv_queue.unshift(queued);
      }

      return res;
    },
  },
};
function _send(fd, buf, len, flags) {
  var sock = SOCKFS.getSocket(fd);
  if (!sock) {
    ___setErrNo(ERRNO_CODES.EBADF);
    return -1;
  }
  // TODO honor flags
  return _write(fd, buf, len);
}

function _pwrite(fildes, buf, nbyte, offset) {
  // ssize_t pwrite(int fildes, const void *buf, size_t nbyte, off_t offset);
  // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
  var stream = FS.getStream(fildes);
  if (!stream) {
    ___setErrNo(ERRNO_CODES.EBADF);
    return -1;
  }
  try {
    var slab = HEAP8;
    return FS.write(stream, slab, buf, nbyte, offset);
  } catch (e) {
    FS.handleFSError(e);
    return -1;
  }
}
function _write(fildes, buf, nbyte) {
  // ssize_t write(int fildes, const void *buf, size_t nbyte);
  // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
  var stream = FS.getStream(fildes);
  if (!stream) {
    ___setErrNo(ERRNO_CODES.EBADF);
    return -1;
  }

  try {
    var slab = HEAP8;
    return FS.write(stream, slab, buf, nbyte);
  } catch (e) {
    FS.handleFSError(e);
    return -1;
  }
}

function _fileno(stream) {
  // int fileno(FILE *stream);
  // http://pubs.opengroup.org/onlinepubs/000095399/functions/fileno.html
  return FS.getStreamFromPtr(stream).fd;
}
function _fputc(c, stream) {
  // int fputc(int c, FILE *stream);
  // http://pubs.opengroup.org/onlinepubs/000095399/functions/fputc.html
  var chr = unSign(c & 0xff);
  HEAP8[_fputc.ret | 0] = chr;
  var fd = _fileno(stream);
  var ret = _write(fd, _fputc.ret, 1);
  if (ret == -1) {
    var streamObj = FS.getStreamFromPtr(stream);
    if (streamObj) streamObj.error = true;
    return -1;
  } else {
    return chr;
  }
}
function _putchar(c) {
  // int putchar(int c);
  // http://pubs.opengroup.org/onlinepubs/000095399/functions/putchar.html
  return _fputc(c, HEAP32[_stdout >> 2]);
}
Module["_saveSetjmp"] = _saveSetjmp;

Module["_testSetjmp"] = _testSetjmp;
function _longjmp(env, value) {
  asm["setThrew"](env, value || 1);
  throw "longjmp";
}

var _setjmp = undefined;

function _toupper(chr) {
  if (chr >= 97 && chr <= 122) {
    return chr - 97 + 65;
  } else {
    return chr;
  }
}

var _environ = allocate(1, "i32*", ALLOC_STATIC);
var ___environ = _environ;
function ___buildEnvironment(env) {
  // WARNING: Arbitrary limit!
  var MAX_ENV_VALUES = 64;
  var TOTAL_ENV_SIZE = 1024;

  // Statically allocate memory for the environment.
  var poolPtr;
  var envPtr;
  if (!___buildEnvironment.called) {
    ___buildEnvironment.called = true;
    // Set default values. Use string keys for Closure Compiler compatibility.
    ENV["USER"] = "root";
    ENV["PATH"] = "/";
    ENV["PWD"] = "/";
    ENV["HOME"] = "/home/emscripten";
    ENV["LANG"] = "en_US.UTF-8";
    ENV["_"] = "./this.program";
    // Allocate memory.
    poolPtr = allocate(TOTAL_ENV_SIZE, "i8", ALLOC_STATIC);
    envPtr = allocate(MAX_ENV_VALUES * 4, "i8*", ALLOC_STATIC);
    HEAP32[envPtr >> 2] = poolPtr;
    HEAP32[_environ >> 2] = envPtr;
  } else {
    envPtr = HEAP32[_environ >> 2];
    poolPtr = HEAP32[envPtr >> 2];
  }

  // Collect key=value lines.
  var strings = [];
  var totalSize = 0;
  for (var key in env) {
    if (typeof env[key] === "string") {
      var line = key + "=" + env[key];
      strings.push(line);
      totalSize += line.length;
    }
  }
  if (totalSize > TOTAL_ENV_SIZE) {
    throw new Error("Environment size exceeded TOTAL_ENV_SIZE!");
  }

  // Make new.
  var ptrSize = 4;
  for (var i = 0; i < strings.length; i++) {
    var line = strings[i];
    writeAsciiToMemory(line, poolPtr);
    HEAP32[(envPtr + i * ptrSize) >> 2] = poolPtr;
    poolPtr += line.length + 1;
  }
  HEAP32[(envPtr + strings.length * ptrSize) >> 2] = 0;
}
var ENV = {};
function _getenv(name) {
  // char *getenv(const char *name);
  // http://pubs.opengroup.org/onlinepubs/009695399/functions/getenv.html
  if (name === 0) return 0;
  name = Pointer_stringify(name);
  if (!ENV.hasOwnProperty(name)) return 0;

  if (_getenv.ret) _free(_getenv.ret);
  _getenv.ret = allocate(intArrayFromString(ENV[name]), "i8", ALLOC_NORMAL);
  return _getenv.ret;
}

function _Sys_RandomBytes(string, len) {
  return false;
}

function _Sys_Dialog(type, message, title) {
  SYSC.Error("SYS_Dialog not implemented");
}

function _srand(seed) {
  HEAP32[___rand_seed >> 2] = seed;
}

function _strstr(ptr1, ptr2) {
  var check = 0,
    start;
  do {
    if (!check) {
      start = ptr1;
      check = ptr2;
    }
    var curr1 = HEAP8[ptr1++ | 0];
    var curr2 = HEAP8[check++ | 0];
    if (curr2 == 0) return start;
    if (curr2 != curr1) {
      // rewind to one character after start, to find ez in eeez
      ptr1 = start + 1;
      check = 0;
    }
  } while (curr1);
  return 0;
}

function _setvbuf(stream, buf, type, size) {
  // int setvbuf(FILE *restrict stream, char *restrict buf, int type, size_t size);
  // http://pubs.opengroup.org/onlinepubs/000095399/functions/setvbuf.html
  // TODO: Implement custom buffering.
  return 0;
}

function _ftell(stream) {
  // long ftell(FILE *stream);
  // http://pubs.opengroup.org/onlinepubs/000095399/functions/ftell.html
  stream = FS.getStreamFromPtr(stream);
  if (!stream) {
    ___setErrNo(ERRNO_CODES.EBADF);
    return -1;
  }
  if (FS.isChrdev(stream.node.mode)) {
    ___setErrNo(ERRNO_CODES.ESPIPE);
    return -1;
  } else {
    return stream.position;
  }
}

function _lseek(fildes, offset, whence) {
  // off_t lseek(int fildes, off_t offset, int whence);
  // http://pubs.opengroup.org/onlinepubs/000095399/functions/lseek.html
  var stream = FS.getStream(fildes);
  if (!stream) {
    ___setErrNo(ERRNO_CODES.EBADF);
    return -1;
  }
  try {
    return FS.llseek(stream, offset, whence);
  } catch (e) {
    FS.handleFSError(e);
    return -1;
  }
}
function _fseek(stream, offset, whence) {
  // int fseek(FILE *stream, long offset, int whence);
  // http://pubs.opengroup.org/onlinepubs/000095399/functions/fseek.html
  var fd = _fileno(stream);
  var ret = _lseek(fd, offset, whence);
  if (ret == -1) {
    return -1;
  }
  stream = FS.getStreamFromPtr(stream);
  stream.eof = false;
  return 0;
}

function _Sys_Mkdir(directory) {
  directory = Pointer_stringify(directory);
  try {
    FS.mkdir(directory, 0777);
  } catch (e) {
    if (!(e instanceof FS.ErrnoError)) {
      SYSC.Error("drop", e.message);
    }
    return e.errno === ERRNO_CODES.EEXIST;
  }
  return true;
}

function _unlink(path) {
  // int unlink(const char *path);
  // http://pubs.opengroup.org/onlinepubs/000095399/functions/unlink.html
  path = Pointer_stringify(path);
  try {
    FS.unlink(path);
    return 0;
  } catch (e) {
    FS.handleFSError(e);
    return -1;
  }
}

function _rmdir(path) {
  // int rmdir(const char *path);
  // http://pubs.opengroup.org/onlinepubs/000095399/functions/rmdir.html
  path = Pointer_stringify(path);
  try {
    FS.rmdir(path);
    return 0;
  } catch (e) {
    FS.handleFSError(e);
    return -1;
  }
}
function _remove(path) {
  // int remove(const char *path);
  // http://pubs.opengroup.org/onlinepubs/000095399/functions/remove.html
  var ret = _unlink(path);
  if (ret == -1) ret = _rmdir(path);
  return ret;
}

function _Sys_FOpen(ospath, mode) {
  return _fopen(ospath, mode);
}

function _close(fildes) {
  // int close(int fildes);
  // http://pubs.opengroup.org/onlinepubs/000095399/functions/close.html
  var stream = FS.getStream(fildes);
  if (!stream) {
    ___setErrNo(ERRNO_CODES.EBADF);
    return -1;
  }
  try {
    FS.close(stream);
    return 0;
  } catch (e) {
    FS.handleFSError(e);
    return -1;
  }
}

function _fsync(fildes) {
  // int fsync(int fildes);
  // http://pubs.opengroup.org/onlinepubs/000095399/functions/fsync.html
  var stream = FS.getStream(fildes);
  if (stream) {
    // We write directly to the file system, so there's nothing to do here.
    return 0;
  } else {
    ___setErrNo(ERRNO_CODES.EBADF);
    return -1;
  }
}
function _fclose(stream) {
  // int fclose(FILE *stream);
  // http://pubs.opengroup.org/onlinepubs/000095399/functions/fclose.html
  var fd = _fileno(stream);
  _fsync(fd);
  return _close(fd);
}

function _rename(old_path, new_path) {
  // int rename(const char *old, const char *new);
  // http://pubs.opengroup.org/onlinepubs/000095399/functions/rename.html
  old_path = Pointer_stringify(old_path);
  new_path = Pointer_stringify(new_path);
  try {
    FS.rename(old_path, new_path);
    return 0;
  } catch (e) {
    FS.handleFSError(e);
    return -1;
  }
}

function _Sys_Mkfifo(path) {
  return 0;
}

function _recv(fd, buf, len, flags) {
  var sock = SOCKFS.getSocket(fd);
  if (!sock) {
    ___setErrNo(ERRNO_CODES.EBADF);
    return -1;
  }
  // TODO honor flags
  return _read(fd, buf, len);
}

function _pread(fildes, buf, nbyte, offset) {
  // ssize_t pread(int fildes, void *buf, size_t nbyte, off_t offset);
  // http://pubs.opengroup.org/onlinepubs/000095399/functions/read.html
  var stream = FS.getStream(fildes);
  if (!stream) {
    ___setErrNo(ERRNO_CODES.EBADF);
    return -1;
  }
  try {
    var slab = HEAP8;
    return FS.read(stream, slab, buf, nbyte, offset);
  } catch (e) {
    FS.handleFSError(e);
    return -1;
  }
}
function _read(fildes, buf, nbyte) {
  // ssize_t read(int fildes, void *buf, size_t nbyte);
  // http://pubs.opengroup.org/onlinepubs/000095399/functions/read.html
  var stream = FS.getStream(fildes);
  if (!stream) {
    ___setErrNo(ERRNO_CODES.EBADF);
    return -1;
  }

  try {
    var slab = HEAP8;
    return FS.read(stream, slab, buf, nbyte);
  } catch (e) {
    FS.handleFSError(e);
    return -1;
  }
}
function _fread(ptr, size, nitems, stream) {
  // size_t fread(void *restrict ptr, size_t size, size_t nitems, FILE *restrict stream);
  // http://pubs.opengroup.org/onlinepubs/000095399/functions/fread.html
  var bytesToRead = nitems * size;
  if (bytesToRead == 0) {
    return 0;
  }
  var bytesRead = 0;
  var streamObj = FS.getStreamFromPtr(stream);
  if (!streamObj) {
    ___setErrNo(ERRNO_CODES.EBADF);
    return 0;
  }
  while (streamObj.ungotten.length && bytesToRead > 0) {
    HEAP8[ptr++ | 0] = streamObj.ungotten.pop();
    bytesToRead--;
    bytesRead++;
  }
  var err = _read(streamObj.fd, ptr, bytesToRead);
  if (err == -1) {
    if (streamObj) streamObj.error = true;
    return 0;
  }
  bytesRead += err;
  if (bytesRead < bytesToRead) streamObj.eof = true;
  return Math.floor(bytesRead / size);
}

function _fwrite(ptr, size, nitems, stream) {
  // size_t fwrite(const void *restrict ptr, size_t size, size_t nitems, FILE *restrict stream);
  // http://pubs.opengroup.org/onlinepubs/000095399/functions/fwrite.html
  var bytesToWrite = nitems * size;
  if (bytesToWrite == 0) return 0;
  var fd = _fileno(stream);
  var bytesWritten = _write(fd, ptr, bytesToWrite);
  if (bytesWritten == -1) {
    var streamObj = FS.getStreamFromPtr(stream);
    if (streamObj) streamObj.error = true;
    return 0;
  } else {
    return Math.floor(bytesWritten / size);
  }
}

function _Sys_ListFiles(directory, ext, filter, numfiles, dironly) {
  directory = Pointer_stringify(directory);
  ext = Pointer_stringify(ext);
  if (ext === "/") {
    ext = null;
    dironly = true;
  }

  // TODO support filter

  var contents;
  try {
    contents = FS.readdir(directory);
  } catch (e) {
    HEAP32[numfiles >> 2] = 0;
    return null;
  }

  var matches = [];
  for (var i = 0; i < contents.length; i++) {
    var name = contents[i];
    var stat = FS.stat(PATH.join(directory, name));

    if (dironly && !FS.isDir(stat.mode)) {
      continue;
    }

    if (!ext || name.lastIndexOf(ext) === name.length - ext.length) {
      matches.push(name);
    }
  }

  HEAP32[numfiles >> 2] = matches.length;

  if (!matches.length) {
    return null;
  }

  // return a copy of the match list
  var list = _Z_Malloc((matches.length + 1) * 4);

  var i;
  for (i = 0; i < matches.length; i++) {
    var filename = _S_Malloc(matches[i].length + 1);

    writeStringToMemory(matches[i], filename);

    // write the string's pointer back to the main array
    HEAP32[(list + i * 4) >> 2] = filename;
  }

  // add a NULL terminator to the list
  HEAP32[(list + i * 4) >> 2] = 0;

  return list;
}

function _Sys_FreeFileList(list) {
  if (!list) {
    return;
  }

  var ptr;

  for (var i = 0; (ptr = HEAP32[(list + i * 4) >> 2]); i++) {
    _Z_Free(ptr);
  }

  _Z_Free(list);
}

function _qsort(base, num, size, cmp) {
  if (num == 0 || size == 0) return;
  // forward calls to the JavaScript sort method
  // first, sort the items logically
  var keys = [];
  for (var i = 0; i < num; i++) keys.push(i);
  keys.sort(function (a, b) {
    return Module["dynCall_iii"](cmp, base + a * size, base + b * size);
  });
  // apply the sort
  var temp = _malloc(num * size);
  _memcpy(temp, base, num * size);
  for (var i = 0; i < num; i++) {
    if (keys[i] == i) continue; // already in place
    _memcpy(base + i * size, temp + keys[i] * size, size);
  }
  _free(temp);
}

function _Sys_FS_Shutdown(context) {
  var name = allocate(intArrayFromString("fs_homepath"), "i8", ALLOC_STACK);
  var fs_homepath = Pointer_stringify(_Cvar_VariableString(name));

  FS.syncfs(function (err) {
    SYSC.FS_Shutdown(
      Browser.safeCallback(function (err) {
        if (err) {
          // FIXME cb_free_context(context)
          SYSC.Error("fatal", err);
          return;
        }

        SYSC.ProxyCallback(context);
      })
    );
  });
}

function _Sys_DefaultHomePath() {
  return 0;
}

function _Sys_FS_Startup(context) {
  var name = allocate(intArrayFromString("fs_homepath"), "i8", ALLOC_STACK);
  var fs_homepath = Pointer_stringify(_Cvar_VariableString(name));

  // mount a persistable filesystem into base
  var dir;
  try {
    dir = FS.mkdir(fs_homepath);
  } catch (e) {
    if (!(e instanceof FS.ErrnoError) || e.errno !== ERRNO_CODES.EEXIST) {
      SYSC.Error("fatal", e.message);
    }
  }

  try {
    FS.mount(IDBFS, {}, fs_homepath);
  } catch (e) {
    if (!(e instanceof FS.ErrnoError) || e.errno !== ERRNO_CODES.EBUSY) {
      SYSC.Error("fatal", e.message);
    }
  }

  var start = Date.now();

  FS.syncfs(true, function (err) {
    if (err) {
      return SYSC.Error("fatal", err.message);
    }

    SYSC.Print(
      "initial sync completed in " +
        ((Date.now() - start) / 1000).toFixed(2) +
        " seconds"
    );

    SYSC.FS_Startup(
      Browser.safeCallback(function (err) {
        if (err) {
          // FIXME cb_free_context(context)
          SYSC.Error("fatal", err);
          return;
        }

        SYSC.ProxyCallback(context);
      })
    );
  });
}

function _llvm_uadd_with_overflow_i32(x, y) {
  x = x >>> 0;
  y = y >>> 0;
  return (asm["setTempRet0"](x + y > 4294967295), (x + y) >>> 0) | 0;
}

function _strerror_r(errnum, strerrbuf, buflen) {
  if (errnum in ERRNO_MESSAGES) {
    if (ERRNO_MESSAGES[errnum].length > buflen - 1) {
      return ___setErrNo(ERRNO_CODES.ERANGE);
    } else {
      var msg = ERRNO_MESSAGES[errnum];
      writeAsciiToMemory(msg, strerrbuf);
      return 0;
    }
  } else {
    return ___setErrNo(ERRNO_CODES.EINVAL);
  }
}
function _strerror(errnum) {
  if (!_strerror.buffer) _strerror.buffer = _malloc(256);
  _strerror_r(errnum, _strerror.buffer, 256);
  return _strerror.buffer;
}

function ___errno_location() {
  return ___errno_state;
}

function _htons(value) {
  return ((value & 0xff) << 8) + ((value & 0xff00) >> 8);
}
var _ntohs = _htons;

function __inet_pton4_raw(str) {
  var b = str.split(".");
  for (var i = 0; i < 4; i++) {
    var tmp = Number(b[i]);
    if (isNaN(tmp)) return null;
    b[i] = tmp;
  }
  return (b[0] | (b[1] << 8) | (b[2] << 16) | (b[3] << 24)) >>> 0;
}

function __inet_pton6_raw(str) {
  var words;
  var w, offset, z, i;
  /* http://home.deds.nl/~aeron/regex/ */
  var valid6regx =
    /^((?=.*::)(?!.*::.+::)(::)?([\dA-F]{1,4}:(:|\b)|){5}|([\dA-F]{1,4}:){6})((([\dA-F]{1,4}((?!\3)::|:\b|$))|(?!\2\3)){2}|(((2[0-4]|1\d|[1-9])?\d|25[0-5])\.?\b){4})$/i;
  var parts = [];
  if (!valid6regx.test(str)) {
    return null;
  }
  if (str === "::") {
    return [0, 0, 0, 0, 0, 0, 0, 0];
  }
  // Z placeholder to keep track of zeros when splitting the string on ":"
  if (str.indexOf("::") === 0) {
    str = str.replace("::", "Z:"); // leading zeros case
  } else {
    str = str.replace("::", ":Z:");
  }

  if (str.indexOf(".") > 0) {
    // parse IPv4 embedded stress
    str = str.replace(new RegExp("[.]", "g"), ":");
    words = str.split(":");
    words[words.length - 4] =
      parseInt(words[words.length - 4]) +
      parseInt(words[words.length - 3]) * 256;
    words[words.length - 3] =
      parseInt(words[words.length - 2]) +
      parseInt(words[words.length - 1]) * 256;
    words = words.slice(0, words.length - 2);
  } else {
    words = str.split(":");
  }

  offset = 0;
  z = 0;
  for (w = 0; w < words.length; w++) {
    if (typeof words[w] === "string") {
      if (words[w] === "Z") {
        // compressed zeros - write appropriate number of zero words
        for (z = 0; z < 8 - words.length + 1; z++) {
          parts[w + z] = 0;
        }
        offset = z - 1;
      } else {
        // parse hex to field to 16-bit value and write it in network byte-order
        parts[w + offset] = _htons(parseInt(words[w], 16));
      }
    } else {
      // parsed IPv4 words
      parts[w + offset] = words[w];
    }
  }
  return [
    (parts[1] << 16) | parts[0],
    (parts[3] << 16) | parts[2],
    (parts[5] << 16) | parts[4],
    (parts[7] << 16) | parts[6],
  ];
}
var DNS = {
  address_map: { id: 1, addrs: {}, names: {} },
  lookup_name: function (name) {
    // If the name is already a valid ipv4 / ipv6 address, don't generate a fake one.
    var res = __inet_pton4_raw(name);
    if (res) {
      return name;
    }
    res = __inet_pton6_raw(name);
    if (res) {
      return name;
    }

    // See if this name is already mapped.
    var addr;

    if (DNS.address_map.addrs[name]) {
      addr = DNS.address_map.addrs[name];
    } else {
      var id = DNS.address_map.id++;
      assert(id < 65535, "exceeded max address mappings of 65535");

      addr = "172.29." + (id & 0xff) + "." + (id & 0xff00);

      DNS.address_map.names[addr] = name;
      DNS.address_map.addrs[name] = addr;
    }

    return addr;
  },
  lookup_addr: function (addr) {
    if (DNS.address_map.names[addr]) {
      return DNS.address_map.names[addr];
    }

    return null;
  },
};

var Sockets = {
  BUFFER_SIZE: 10240,
  MAX_BUFFER_SIZE: 10485760,
  nextFd: 1,
  fds: {},
  nextport: 1,
  maxport: 65535,
  peer: null,
  connections: {},
  portmap: {},
  localAddr: 4261412874,
  addrPool: [
    33554442, 50331658, 67108874, 83886090, 100663306, 117440522, 134217738,
    150994954, 167772170, 184549386, 201326602, 218103818, 234881034,
  ],
};
function __write_sockaddr(sa, family, addr, port) {
  switch (family) {
    case 2:
      addr = __inet_pton4_raw(addr);
      HEAP16[sa >> 1] = family;
      HEAP32[(sa + 4) >> 2] = addr;
      HEAP16[(sa + 2) >> 1] = _htons(port);
      break;
    case 10:
      addr = __inet_pton6_raw(addr);
      HEAP32[sa >> 2] = family;
      HEAP32[(sa + 8) >> 2] = addr[0];
      HEAP32[(sa + 12) >> 2] = addr[1];
      HEAP32[(sa + 16) >> 2] = addr[2];
      HEAP32[(sa + 20) >> 2] = addr[3];
      HEAP16[(sa + 2) >> 1] = _htons(port);
      break;
    default:
      return { errno: ERRNO_CODES.EAFNOSUPPORT };
  }
  // kind of lame, but let's match _read_sockaddr's interface
  return {};
}
function _recvfrom(fd, buf, len, flags, addr, addrlen) {
  var sock = SOCKFS.getSocket(fd);
  if (!sock) {
    ___setErrNo(ERRNO_CODES.EBADF);
    return -1;
  }

  // read from the socket
  var msg;
  try {
    msg = sock.sock_ops.recvmsg(sock, len);
  } catch (e) {
    FS.handleFSError(e);
    return -1;
  }

  if (!msg) {
    // socket is closed
    return 0;
  }

  // write the source address out
  if (addr) {
    var res = __write_sockaddr(
      addr,
      sock.family,
      DNS.lookup_name(msg.addr),
      msg.port
    );
    assert(!res.errno);
  }
  // write the buffer out
  HEAPU8.set(msg.buffer, buf);

  return msg.buffer.byteLength;
}

function __inet_ntop4_raw(addr) {
  return (
    (addr & 0xff) +
    "." +
    ((addr >> 8) & 0xff) +
    "." +
    ((addr >> 16) & 0xff) +
    "." +
    ((addr >> 24) & 0xff)
  );
}

function __inet_ntop6_raw(ints) {
  //  ref:  http://www.ietf.org/rfc/rfc2373.txt - section 2.5.4
  //  Format for IPv4 compatible and mapped  128-bit IPv6 Addresses
  //  128-bits are split into eight 16-bit words
  //  stored in network byte order (big-endian)
  //  |                80 bits               | 16 |      32 bits        |
  //  +-----------------------------------------------------------------+
  //  |               10 bytes               |  2 |      4 bytes        |
  //  +--------------------------------------+--------------------------+
  //  +               5 words                |  1 |      2 words        |
  //  +--------------------------------------+--------------------------+
  //  |0000..............................0000|0000|    IPv4 ADDRESS     | (compatible)
  //  +--------------------------------------+----+---------------------+
  //  |0000..............................0000|FFFF|    IPv4 ADDRESS     | (mapped)
  //  +--------------------------------------+----+---------------------+
  var str = "";
  var word = 0;
  var longest = 0;
  var lastzero = 0;
  var zstart = 0;
  var len = 0;
  var i = 0;
  var parts = [
    ints[0] & 0xffff,
    ints[0] >> 16,
    ints[1] & 0xffff,
    ints[1] >> 16,
    ints[2] & 0xffff,
    ints[2] >> 16,
    ints[3] & 0xffff,
    ints[3] >> 16,
  ];

  // Handle IPv4-compatible, IPv4-mapped, loopback and any/unspecified addresses

  var hasipv4 = true;
  var v4part = "";
  // check if the 10 high-order bytes are all zeros (first 5 words)
  for (i = 0; i < 5; i++) {
    if (parts[i] !== 0) {
      hasipv4 = false;
      break;
    }
  }

  if (hasipv4) {
    // low-order 32-bits store an IPv4 address (bytes 13 to 16) (last 2 words)
    v4part = __inet_ntop4_raw(parts[6] | (parts[7] << 16));
    // IPv4-mapped IPv6 address if 16-bit value (bytes 11 and 12) == 0xFFFF (6th word)
    if (parts[5] === -1) {
      str = "::ffff:";
      str += v4part;
      return str;
    }
    // IPv4-compatible IPv6 address if 16-bit value (bytes 11 and 12) == 0x0000 (6th word)
    if (parts[5] === 0) {
      str = "::";
      //special case IPv6 addresses
      if (v4part === "0.0.0.0") v4part = ""; // any/unspecified address
      if (v4part === "0.0.0.1") v4part = "1"; // loopback address
      str += v4part;
      return str;
    }
  }

  // Handle all other IPv6 addresses

  // first run to find the longest contiguous zero words
  for (word = 0; word < 8; word++) {
    if (parts[word] === 0) {
      if (word - lastzero > 1) {
        len = 0;
      }
      lastzero = word;
      len++;
    }
    if (len > longest) {
      longest = len;
      zstart = word - longest + 1;
    }
  }

  for (word = 0; word < 8; word++) {
    if (longest > 1) {
      // compress contiguous zeros - to produce "::"
      if (parts[word] === 0 && word >= zstart && word < zstart + longest) {
        if (word === zstart) {
          str += ":";
          if (zstart === 0) str += ":"; //leading zeros case
        }
        continue;
      }
    }
    // converts 16-bit words from big-endian to little-endian before converting to hex string
    str += Number(_ntohs(parts[word] & 0xffff)).toString(16);
    str += word < 7 ? ":" : "";
  }
  return str;
}
function __read_sockaddr(sa, salen) {
  // family / port offsets are common to both sockaddr_in and sockaddr_in6
  var family = HEAP16[sa >> 1];
  var port = _ntohs(HEAP16[(sa + 2) >> 1]);
  var addr;

  switch (family) {
    case 2:
      if (salen !== 16) {
        return { errno: ERRNO_CODES.EINVAL };
      }
      addr = HEAP32[(sa + 4) >> 2];
      addr = __inet_ntop4_raw(addr);
      break;
    case 10:
      if (salen !== 28) {
        return { errno: ERRNO_CODES.EINVAL };
      }
      addr = [
        HEAP32[(sa + 8) >> 2],
        HEAP32[(sa + 12) >> 2],
        HEAP32[(sa + 16) >> 2],
        HEAP32[(sa + 20) >> 2],
      ];
      addr = __inet_ntop6_raw(addr);
      break;
    default:
      return { errno: ERRNO_CODES.EAFNOSUPPORT };
  }

  return { family: family, addr: addr, port: port };
}
function _sendto(fd, message, length, flags, dest_addr, dest_len) {
  var sock = SOCKFS.getSocket(fd);
  if (!sock) {
    ___setErrNo(ERRNO_CODES.EBADF);
    return -1;
  }

  // read the address and port to send to
  var info = __read_sockaddr(dest_addr, dest_len);
  if (info.errno) {
    ___setErrNo(info.errno);
    return -1;
  }
  var port = info.port;
  var addr = DNS.lookup_addr(info.addr) || info.addr;

  // send the message
  try {
    var slab = HEAP8;
    return sock.sock_ops.sendmsg(sock, slab, message, length, addr, port);
  } catch (e) {
    FS.handleFSError(e);
    return -1;
  }
}

function _socket(family, type, protocol) {
  var sock = SOCKFS.createSocket(family, type, protocol);
  assert(sock.stream.fd < 64); // select() assumes socket fd values are in 0..63
  return sock.stream.fd;
}

function _ioctl(fd, request, varargs) {
  var stream = FS.getStream(fd);
  if (!stream) {
    ___setErrNo(ERRNO_CODES.EBADF);
    return -1;
  }
  var arg = HEAP32[varargs >> 2];

  try {
    return FS.ioctl(stream, request, arg);
  } catch (e) {
    FS.handleFSError(e);
    return -1;
  }
}

function _setsockopt(fd, level, optname, optval, optlen) {
  console.log("ignoring setsockopt command");
  return 0;
}

function _bind(fd, addrp, addrlen) {
  var sock = SOCKFS.getSocket(fd);
  if (!sock) {
    ___setErrNo(ERRNO_CODES.EBADF);
    return -1;
  }

  var info = __read_sockaddr(addrp, addrlen);
  if (info.errno) {
    ___setErrNo(info.errno);
    return -1;
  }
  var port = info.port;
  var addr = DNS.lookup_addr(info.addr) || info.addr;

  try {
    sock.sock_ops.bind(sock, addr, port);
    return 0;
  } catch (e) {
    FS.handleFSError(e);
    return -1;
  }
}

function _if_nametoindex(a) {
  return 0;
}

function _gethostbyname(name) {
  name = Pointer_stringify(name);

  // generate hostent
  var ret = _malloc(20); // XXX possibly leaked, as are others here
  var nameBuf = _malloc(name.length + 1);
  writeStringToMemory(name, nameBuf);
  HEAP32[ret >> 2] = nameBuf;
  var aliasesBuf = _malloc(4);
  HEAP32[aliasesBuf >> 2] = 0;
  HEAP32[(ret + 4) >> 2] = aliasesBuf;
  var afinet = 2;
  HEAP32[(ret + 8) >> 2] = afinet;
  HEAP32[(ret + 12) >> 2] = 4;
  var addrListBuf = _malloc(12);
  HEAP32[addrListBuf >> 2] = addrListBuf + 8;
  HEAP32[(addrListBuf + 4) >> 2] = 0;
  HEAP32[(addrListBuf + 8) >> 2] = __inet_pton4_raw(DNS.lookup_name(name));
  HEAP32[(ret + 16) >> 2] = addrListBuf;
  return ret;
}

function _connect(fd, addrp, addrlen) {
  var sock = SOCKFS.getSocket(fd);
  if (!sock) {
    ___setErrNo(ERRNO_CODES.EBADF);
    return -1;
  }

  var info = __read_sockaddr(addrp, addrlen);
  if (info.errno) {
    ___setErrNo(info.errno);
    return -1;
  }
  var port = info.port;
  var addr = DNS.lookup_addr(info.addr) || info.addr;

  try {
    sock.sock_ops.connect(sock, addr, port);
    return 0;
  } catch (e) {
    FS.handleFSError(e);
    return -1;
  }
}

var ___DEFAULT_POLLMASK = 5;
function _select(nfds, readfds, writefds, exceptfds, timeout) {
  // readfds are supported,
  // writefds checks socket open status
  // exceptfds not supported
  // timeout is always 0 - fully async
  assert(nfds <= 64, "nfds must be less than or equal to 64"); // fd sets have 64 bits
  assert(!exceptfds, "exceptfds not supported");

  var total = 0;

  var srcReadLow = readfds ? HEAP32[readfds >> 2] : 0,
    srcReadHigh = readfds ? HEAP32[(readfds + 4) >> 2] : 0;
  var srcWriteLow = writefds ? HEAP32[writefds >> 2] : 0,
    srcWriteHigh = writefds ? HEAP32[(writefds + 4) >> 2] : 0;
  var srcExceptLow = exceptfds ? HEAP32[exceptfds >> 2] : 0,
    srcExceptHigh = exceptfds ? HEAP32[(exceptfds + 4) >> 2] : 0;

  var dstReadLow = 0,
    dstReadHigh = 0;
  var dstWriteLow = 0,
    dstWriteHigh = 0;
  var dstExceptLow = 0,
    dstExceptHigh = 0;

  var allLow =
    (readfds ? HEAP32[readfds >> 2] : 0) |
    (writefds ? HEAP32[writefds >> 2] : 0) |
    (exceptfds ? HEAP32[exceptfds >> 2] : 0);
  var allHigh =
    (readfds ? HEAP32[(readfds + 4) >> 2] : 0) |
    (writefds ? HEAP32[(writefds + 4) >> 2] : 0) |
    (exceptfds ? HEAP32[(exceptfds + 4) >> 2] : 0);

  function get(fd, low, high, val) {
    return fd < 32 ? low & val : high & val;
  }

  for (var fd = 0; fd < nfds; fd++) {
    var mask = 1 << fd % 32;
    if (!get(fd, allLow, allHigh, mask)) {
      continue; // index isn't in the set
    }

    var stream = FS.getStream(fd);
    if (!stream) {
      ___setErrNo(ERRNO_CODES.EBADF);
      return -1;
    }

    var flags = ___DEFAULT_POLLMASK;

    if (stream.stream_ops.poll) {
      flags = stream.stream_ops.poll(stream);
    }

    if (flags & 1 && get(fd, srcReadLow, srcReadHigh, mask)) {
      fd < 32
        ? (dstReadLow = dstReadLow | mask)
        : (dstReadHigh = dstReadHigh | mask);
      total++;
    }
    if (flags & 4 && get(fd, srcWriteLow, srcWriteHigh, mask)) {
      fd < 32
        ? (dstWriteLow = dstWriteLow | mask)
        : (dstWriteHigh = dstWriteHigh | mask);
      total++;
    }
    if (flags & 2 && get(fd, srcExceptLow, srcExceptHigh, mask)) {
      fd < 32
        ? (dstExceptLow = dstExceptLow | mask)
        : (dstExceptHigh = dstExceptHigh | mask);
      total++;
    }
  }

  if (readfds) {
    HEAP32[readfds >> 2] = dstReadLow;
    HEAP32[(readfds + 4) >> 2] = dstReadHigh;
  }
  if (writefds) {
    HEAP32[writefds >> 2] = dstWriteLow;
    HEAP32[(writefds + 4) >> 2] = dstWriteHigh;
  }
  if (exceptfds) {
    HEAP32[exceptfds >> 2] = dstExceptLow;
    HEAP32[(exceptfds + 4) >> 2] = dstExceptHigh;
  }

  return total;
}

function _gethostname(name, namelen) {
  // int gethostname(char *name, size_t namelen);
  // http://pubs.opengroup.org/onlinepubs/000095399/functions/gethostname.html
  var host = "emscripten";
  if (typeof window !== "undefined" && window.location.host) {
    host = window.location.host;
  }
  var length = Math.min(namelen, host.length);
  for (var i = 0; i < length; i++) {
    HEAP8[(name + i) | 0] = host.charCodeAt(i);
  }
  if (namelen > length) {
    HEAP8[(name + i) | 0] = 0;
    return 0;
  } else {
    ___setErrNo(ERRNO_CODES.ENAMETOOLONG);
    return -1;
  }
}

function _htonl(value) {
  return (
    ((value & 0xff) << 24) +
    ((value & 0xff00) << 8) +
    ((value & 0xff0000) >>> 8) +
    ((value & 0xff000000) >>> 24)
  );
}
function _getaddrinfo(node, service, hint, out) {
  // Note getaddrinfo currently only returns a single addrinfo with ai_next defaulting to NULL. When NULL
  // hints are specified or ai_family set to AF_UNSPEC or ai_socktype or ai_protocol set to 0 then we
  // really should provide a linked list of suitable addrinfo values.
  var addrs = [];
  var canon = null;
  var addr = 0;
  var port = 0;
  var flags = 0;
  var family = 0;
  var type = 0;
  var proto = 0;
  var ai, last;

  function allocaddrinfo(family, type, proto, canon, addr, port) {
    var sa, salen, ai;
    var res;

    salen = family === 10 ? 28 : 16;
    addr = family === 10 ? __inet_ntop6_raw(addr) : __inet_ntop4_raw(addr);
    sa = _malloc(salen);
    res = __write_sockaddr(sa, family, addr, port);
    assert(!res.errno);

    ai = _malloc(32);
    HEAP32[(ai + 4) >> 2] = family;
    HEAP32[(ai + 8) >> 2] = type;
    HEAP32[(ai + 12) >> 2] = proto;
    if (canon) {
      HEAP32[(ai + 24) >> 2] = canon;
    }
    HEAP32[(ai + 20) >> 2] = sa;
    if (family === 10) {
      HEAP32[(ai + 16) >> 2] = 28;
    } else {
      HEAP32[(ai + 16) >> 2] = 16;
    }
    HEAP32[(ai + 28) >> 2] = 0;

    return ai;
  }

  if (hint) {
    flags = HEAP32[hint >> 2];
    family = HEAP32[(hint + 4) >> 2];
    type = HEAP32[(hint + 8) >> 2];
    proto = HEAP32[(hint + 12) >> 2];
  }
  if (type && !proto) {
    proto = type === 2 ? 17 : 6;
  }
  if (!type && proto) {
    type = proto === 17 ? 2 : 1;
  }

  // If type or proto are set to zero in hints we should really be returning multiple addrinfo values, but for
  // now default to a TCP STREAM socket so we can at least return a sensible addrinfo given NULL hints.
  if (proto === 0) {
    proto = 6;
  }
  if (type === 0) {
    type = 1;
  }

  if (!node && !service) {
    return -2;
  }
  if (flags & ~(1 | 2 | 4 | 1024 | 8 | 16 | 32)) {
    return -1;
  }
  if (hint !== 0 && HEAP32[hint >> 2] & 2 && !node) {
    return -1;
  }
  if (flags & 32) {
    // TODO
    return -2;
  }
  if (type !== 0 && type !== 1 && type !== 2) {
    return -7;
  }
  if (family !== 0 && family !== 2 && family !== 10) {
    return -6;
  }

  if (service) {
    service = Pointer_stringify(service);
    port = parseInt(service, 10);

    if (isNaN(port)) {
      if (flags & 1024) {
        return -2;
      }
      // TODO support resolving well-known service names from:
      // http://www.iana.org/assignments/service-names-port-numbers/service-names-port-numbers.txt
      return -8;
    }
  }

  if (!node) {
    if (family === 0) {
      family = 2;
    }
    if ((flags & 1) === 0) {
      if (family === 2) {
        addr = _htonl(2130706433);
      } else {
        addr = [0, 0, 0, 1];
      }
    }
    ai = allocaddrinfo(family, type, proto, null, addr, port);
    HEAP32[out >> 2] = ai;
    return 0;
  }

  //
  // try as a numeric address
  //
  node = Pointer_stringify(node);
  addr = __inet_pton4_raw(node);
  if (addr !== null) {
    // incoming node is a valid ipv4 address
    if (family === 0 || family === 2) {
      family = 2;
    } else if (family === 10 && flags & 8) {
      addr = [0, 0, _htonl(0xffff), addr];
      family = 10;
    } else {
      return -2;
    }
  } else {
    addr = __inet_pton6_raw(node);
    if (addr !== null) {
      // incoming node is a valid ipv6 address
      if (family === 0 || family === 10) {
        family = 10;
      } else {
        return -2;
      }
    }
  }
  if (addr != null) {
    ai = allocaddrinfo(family, type, proto, node, addr, port);
    HEAP32[out >> 2] = ai;
    return 0;
  }
  if (flags & 4) {
    return -2;
  }

  //
  // try as a hostname
  //
  // resolve the hostname to a temporary fake address
  node = DNS.lookup_name(node);
  addr = __inet_pton4_raw(node);
  if (family === 0) {
    family = 2;
  } else if (family === 10) {
    addr = [0, 0, _htonl(0xffff), addr];
  }
  ai = allocaddrinfo(family, type, proto, null, addr, port);
  HEAP32[out >> 2] = ai;
  return 0;
}

function _freeaddrinfo(ai) {
  var sa = HEAP32[(ai + 20) >> 2];
  _free(sa);
  _free(ai);
}

function _getnameinfo(sa, salen, node, nodelen, serv, servlen, flags) {
  var info = __read_sockaddr(sa, salen);
  if (info.errno) {
    return -6;
  }
  var port = info.port;
  var addr = info.addr;

  if (node && nodelen) {
    var lookup;
    if (flags & 1 || !(lookup = DNS.lookup_addr(addr))) {
      if (flags & 8) {
        return -2;
      }
    } else {
      addr = lookup;
    }
    if (addr.length >= nodelen) {
      return -12;
    }
    writeStringToMemory(addr, node);
  }

  if (serv && servlen) {
    port = "" + port;
    if (port.length > servlen) {
      return -12;
    }
    writeStringToMemory(port, serv);
  }

  return 0;
}

var GAI_ERRNO_MESSAGES = {};
function _gai_strerror(val) {
  var buflen = 256;

  // On first call to gai_strerror we initialise the buffer and populate the error messages.
  if (!_gai_strerror.buffer) {
    _gai_strerror.buffer = _malloc(buflen);

    GAI_ERRNO_MESSAGES["0"] = "Success";
    GAI_ERRNO_MESSAGES["" + -1] = "Invalid value for 'ai_flags' field";
    GAI_ERRNO_MESSAGES["" + -2] = "NAME or SERVICE is unknown";
    GAI_ERRNO_MESSAGES["" + -3] = "Temporary failure in name resolution";
    GAI_ERRNO_MESSAGES["" + -4] = "Non-recoverable failure in name res";
    GAI_ERRNO_MESSAGES["" + -6] = "'ai_family' not supported";
    GAI_ERRNO_MESSAGES["" + -7] = "'ai_socktype' not supported";
    GAI_ERRNO_MESSAGES["" + -8] = "SERVICE not supported for 'ai_socktype'";
    GAI_ERRNO_MESSAGES["" + -10] = "Memory allocation failure";
    GAI_ERRNO_MESSAGES["" + -11] = "System error returned in 'errno'";
    GAI_ERRNO_MESSAGES["" + -12] = "Argument buffer overflow";
  }

  var msg = "Unknown error";

  if (val in GAI_ERRNO_MESSAGES) {
    if (GAI_ERRNO_MESSAGES[val].length > buflen - 1) {
      msg = "Message too long"; // EMSGSIZE message. This should never occur given the GAI_ERRNO_MESSAGES above.
    } else {
      msg = GAI_ERRNO_MESSAGES[val];
    }
  }

  writeAsciiToMemory(msg, _gai_strerror.buffer);
  return _gai_strerror.buffer;
}

var AL = {
  contexts: [],
  currentContext: null,
  stringCache: {},
  alcStringCache: {},
  QUEUE_INTERVAL: 25,
  QUEUE_LOOKAHEAD: 100,
  updateSources: function updateSources(context) {
    for (var i = 0; i < context.src.length; i++) {
      AL.updateSource(context.src[i]);
    }
  },
  updateSource: function updateSource(src) {
    if (src.state !== 0x1012 /* AL_PLAYING */) {
      return;
    }

    var currentTime = AL.currentContext.ctx.currentTime;
    var startTime = src.bufferPosition;

    for (var i = src.buffersPlayed; i < src.queue.length; i++) {
      var entry = src.queue[i];

      var startOffset = startTime - currentTime;
      var endTime = startTime + entry.buffer.duration;

      // Clean up old buffers.
      if (currentTime >= endTime) {
        // Update our location in the queue.
        src.bufferPosition = endTime;
        src.buffersPlayed = i + 1;

        // Stop / restart the source when we hit the end.
        if (src.buffersPlayed >= src.queue.length) {
          if (src.loop) {
            AL.setSourceState(src, 0x1012 /* AL_PLAYING */);
          } else {
            AL.setSourceState(src, 0x1014 /* AL_STOPPED */);
          }
        }
      }
      // Process all buffers that'll be played before the next tick.
      else if (startOffset < AL.QUEUE_LOOKAHEAD / 1000 && !entry.src) {
        // If the start offset is negative, we need to offset the actual buffer.
        var offset = Math.abs(Math.min(startOffset, 0));

        entry.src = AL.currentContext.ctx.createBufferSource();
        entry.src.buffer = entry.buffer;
        entry.src.connect(src.gain);
        entry.src.start(startTime, offset);
      }

      startTime = endTime;
    }
  },
  setSourceState: function setSourceState(src, state) {
    if (state === 0x1012 /* AL_PLAYING */) {
      if (src.state !== 0x1013 /* AL_PAUSED */) {
        src.state = 0x1012 /* AL_PLAYING */;
        // Reset our position.
        src.bufferPosition = AL.currentContext.ctx.currentTime;
        src.buffersPlayed = 0;
      } else {
        src.state = 0x1012 /* AL_PLAYING */;
        // Use the current offset from src.bufferPosition to resume at the correct point.
        src.bufferPosition =
          AL.currentContext.ctx.currentTime - src.bufferPosition;
      }
      AL.stopSourceQueue(src);
      AL.updateSource(src);
    } else if (state === 0x1013 /* AL_PAUSED */) {
      if (src.state === 0x1012 /* AL_PLAYING */) {
        src.state = 0x1013 /* AL_PAUSED */;
        // Store off the current offset to restore with on resume.
        src.bufferPosition =
          AL.currentContext.ctx.currentTime - src.bufferPosition;
        AL.stopSourceQueue(src);
      }
    } else if (state === 0x1014 /* AL_STOPPED */) {
      if (src.state !== 0x1011 /* AL_INITIAL */) {
        src.state = 0x1014 /* AL_STOPPED */;
        src.buffersPlayed = src.queue.length;
        AL.stopSourceQueue(src);
      }
    } else if (state == 0x1011 /* AL_INITIAL */) {
      if (src.state !== 0x1011 /* AL_INITIAL */) {
        src.state = 0x1011 /* AL_INITIAL */;
        src.bufferPosition = 0;
        src.buffersPlayed = 0;
      }
    }
  },
  stopSourceQueue: function stopSourceQueue(src) {
    for (var i = 0; i < src.queue.length; i++) {
      var entry = src.queue[i];
      if (entry.src) {
        entry.src.stop(0);
        entry.src = null;
      }
    }
  },
};
function _alcIsExtensionPresent(device, extName) {
  return 0;
}

function _alcGetString(device, param) {
  if (AL.alcStringCache[param]) return AL.alcStringCache[param];
  var ret;
  switch (param) {
    case 0 /* ALC_NO_ERROR */:
      ret = "No Error";
      break;
    case 0xa001 /* ALC_INVALID_DEVICE */:
      ret = "Invalid Device";
      break;
    case 0xa002 /* ALC_INVALID_CONTEXT */:
      ret = "Invalid Context";
      break;
    case 0xa003 /* ALC_INVALID_ENUM */:
      ret = "Invalid Enum";
      break;
    case 0xa004 /* ALC_INVALID_VALUE */:
      ret = "Invalid Value";
      break;
    case 0xa005 /* ALC_OUT_OF_MEMORY */:
      ret = "Out of Memory";
      break;
    case 0x1004 /* ALC_DEFAULT_DEVICE_SPECIFIER */:
      if (
        typeof AudioContext == "function" ||
        typeof webkitAudioContext == "function"
      ) {
        ret = "Device";
      } else {
        return 0;
      }
      break;
    case 0x1005 /* ALC_DEVICE_SPECIFIER */:
      if (
        typeof AudioContext == "function" ||
        typeof webkitAudioContext == "function"
      ) {
        ret = "Device\0";
      } else {
        ret = "\0";
      }
      break;
    case 0x311 /* ALC_CAPTURE_DEFAULT_DEVICE_SPECIFIER */:
      return 0;
      break;
    case 0x310 /* ALC_CAPTURE_DEVICE_SPECIFIER */:
      ret = "\0";
      break;
    case 0x1006 /* ALC_EXTENSIONS */:
      if (!device) {
        AL.currentContext.err = 0xa001 /* ALC_INVALID_DEVICE */;
        return 0;
      }
      ret = "";
      break;
    default:
      AL.currentContext.err = 0xa003 /* ALC_INVALID_ENUM */;
      return 0;
  }

  ret = allocate(intArrayFromString(ret), "i8", ALLOC_NORMAL);

  AL.alcStringCache[param] = ret;

  return ret;
}

function _alcOpenDevice(deviceName) {
  if (
    typeof AudioContext == "function" ||
    typeof webkitAudioContext == "function"
  ) {
    return 1; // non-null pointer -- we just simulate one device
  } else {
    return 0;
  }
}

var _updateSources = undefined;
function _alcCreateContext(device, attrList) {
  if (device != 1) {
    return 0;
  }

  if (attrList) {
    return 0;
  }

  var ctx;
  try {
    ctx = new AudioContext();
  } catch (e) {
    try {
      ctx = new webkitAudioContext();
    } catch (e) {}
  }

  if (ctx) {
    var gain = ctx.createGain();
    gain.connect(ctx.destination);
    var context = {
      ctx: ctx,
      err: 0,
      src: [],
      buf: [],
      interval: setInterval(function () {
        AL.updateSources(context);
      }, AL.QUEUE_INTERVAL),
      gain: gain,
    };
    AL.contexts.push(context);
    return AL.contexts.length;
  } else {
    return 0;
  }
}

function _alcCloseDevice(device) {
  // Stop playback, etc
}

function _alcMakeContextCurrent(context) {
  if (context == 0) {
    AL.currentContext = null;
    return 0;
  } else {
    AL.currentContext = AL.contexts[context - 1];
    return 1;
  }
}

function _alDistanceModel(model) {
  if (model !== 0 /* AL_NONE */) {
  }
}

function _alDopplerFactor(value) {}

function _alDopplerVelocity(value) {}

function _alGetString(param) {
  if (AL.stringCache[param]) return AL.stringCache[param];
  var ret;
  switch (param) {
    case 0 /* AL_NO_ERROR */:
      ret = "No Error";
      break;
    case 0xa001 /* AL_INVALID_NAME */:
      ret = "Invalid Name";
      break;
    case 0xa002 /* AL_INVALID_ENUM */:
      ret = "Invalid Enum";
      break;
    case 0xa003 /* AL_INVALID_VALUE */:
      ret = "Invalid Value";
      break;
    case 0xa004 /* AL_INVALID_OPERATION */:
      ret = "Invalid Operation";
      break;
    case 0xa005 /* AL_OUT_OF_MEMORY */:
      ret = "Out of Memory";
      break;
    case 0xb001 /* AL_VENDOR */:
      ret = "Emscripten";
      break;
    case 0xb002 /* AL_VERSION */:
      ret = "1.1";
      break;
    case 0xb003 /* AL_RENDERER */:
      ret = "WebAudio";
      break;
    case 0xb004 /* AL_EXTENSIONS */:
      ret = "";
      break;
    default:
      AL.currentContext.err = 0xa002 /* AL_INVALID_ENUM */;
      return 0;
  }

  ret = allocate(intArrayFromString(ret), "i8", ALLOC_NORMAL);

  AL.stringCache[param] = ret;

  return ret;
}

function _alBufferData(buffer, format, data, size, freq) {
  if (!AL.currentContext) {
    return;
  }
  if (buffer > AL.currentContext.buf.length) {
    return;
  }
  var channels, bytes;
  switch (format) {
    case 0x1100 /* AL_FORMAT_MONO8 */:
      bytes = 1;
      channels = 1;
      break;
    case 0x1101 /* AL_FORMAT_MONO16 */:
      bytes = 2;
      channels = 1;
      break;
    case 0x1102 /* AL_FORMAT_STEREO8 */:
      bytes = 1;
      channels = 2;
      break;
    case 0x1103 /* AL_FORMAT_STEREO16 */:
      bytes = 2;
      channels = 2;
      break;
    default:
      return;
  }
  try {
    AL.currentContext.buf[buffer - 1] = AL.currentContext.ctx.createBuffer(
      channels,
      size / (bytes * channels),
      freq
    );
    AL.currentContext.buf[buffer - 1].bytesPerSample = bytes;
  } catch (e) {
    AL.currentContext.err = 0xa003 /* AL_INVALID_VALUE */;
    return;
  }
  var buf = new Array(channels);
  for (var i = 0; i < channels; ++i) {
    buf[i] = AL.currentContext.buf[buffer - 1].getChannelData(i);
  }
  for (var i = 0; i < size / (bytes * channels); ++i) {
    for (var j = 0; j < channels; ++j) {
      switch (bytes) {
        case 1:
          var val = HEAP8[(data + (i * channels + j)) | 0] & 0xff; // unsigned
          buf[j][i] = -1.0 + val * (2 / 256);
          break;
        case 2:
          var val = HEAP16[(data + 2 * (i * channels + j)) >> 1];
          buf[j][i] = val / 32768;
          break;
      }
    }
  }
}

function _alGetError() {
  if (!AL.currentContext) {
    return 0xa004 /* AL_INVALID_OPERATION */;
  } else {
    // Reset error on get.
    var err = AL.currentContext.err;
    AL.currentContext.err = 0 /* AL_NO_ERROR */;
    return err;
  }
}

function _alDeleteBuffers(count, buffers) {
  if (!AL.currentContext) {
    return;
  }
  if (count > AL.currentContext.buf.length) {
    AL.currentContext.err = 0xa003 /* AL_INVALID_VALUE */;
    return;
  }

  for (var i = 0; i < count; ++i) {
    var bufferIdx = HEAP32[(buffers + i * 4) >> 2] - 1;

    // Make sure the buffer index is valid.
    if (
      bufferIdx >= AL.currentContext.buf.length ||
      !AL.currentContext.buf[bufferIdx]
    ) {
      AL.currentContext.err = 0xa001 /* AL_INVALID_NAME */;
      return;
    }

    // Make sure the buffer is no longer in use.
    var buffer = AL.currentContext.buf[bufferIdx];
    for (var j = 0; j < AL.currentContext.src.length; ++j) {
      var src = AL.currentContext.src[j];
      if (!src) {
        continue;
      }
      for (var k = 0; k < src.queue.length; k++) {
        if (buffer === src.queue[k].buffer) {
          AL.currentContext.err = 0xa004 /* AL_INVALID_OPERATION */;
          return;
        }
      }
    }
  }

  for (var i = 0; i < count; ++i) {
    var bufferIdx = HEAP32[(buffers + i * 4) >> 2] - 1;
    delete AL.currentContext.buf[bufferIdx];
  }
}

function _alGenBuffers(count, buffers) {
  if (!AL.currentContext) {
    return;
  }
  for (var i = 0; i < count; ++i) {
    AL.currentContext.buf.push(null);
    HEAP32[(buffers + i * 4) >> 2] = AL.currentContext.buf.length;
  }
}

var _updateSource = undefined;
function _alGetSourcei(source, param, value) {
  if (!AL.currentContext) {
    return;
  }
  var src = AL.currentContext.src[source - 1];
  if (!src) {
    AL.currentContext.err = 0xa001 /* AL_INVALID_NAME */;
    return;
  }

  // Being that we have no way to receive end events from buffer nodes,
  // we currently proccess and update a source's buffer queue every
  // ~QUEUE_INTERVAL milliseconds. However, this interval is not precise,
  // so we also forcefully update the source when alGetSourcei is queried
  // to aid in the common scenario of application calling alGetSourcei(AL_BUFFERS_PROCESSED)
  // to recycle buffers.
  AL.updateSource(src);

  switch (param) {
    case 0x202 /* AL_SOURCE_RELATIVE */:
      HEAP32[value >> 2] = src.panner ? 1 : 0;
      break;
    case 0x1001 /* AL_CONE_INNER_ANGLE */:
      HEAP32[value >> 2] = src.coneInnerAngle;
      break;
    case 0x1002 /* AL_CONE_OUTER_ANGLE */:
      HEAP32[value >> 2] = src.coneOuterAngle;
      break;
    case 0x1009 /* AL_BUFFER */:
      if (!src.queue.length) {
        HEAP32[value >> 2] = 0;
      } else {
        // Find the first unprocessed buffer.
        var buffer = src.queue[src.buffersPlayed].buffer;
        // Return its index.
        for (var i = 0; i < AL.currentContext.buf.length; ++i) {
          if (buffer == AL.currentContext.buf[i]) {
            HEAP32[value >> 2] = i + 1;
            return;
          }
        }
        HEAP32[value >> 2] = 0;
      }
      break;
    case 0x1010 /* AL_SOURCE_STATE */:
      HEAP32[value >> 2] = src.state;
      break;
    case 0x1015 /* AL_BUFFERS_QUEUED */:
      HEAP32[value >> 2] = src.queue.length;
      break;
    case 0x1016 /* AL_BUFFERS_PROCESSED */:
      if (src.loop) {
        HEAP32[value >> 2] = 0;
      } else {
        HEAP32[value >> 2] = src.buffersPlayed;
      }
      break;
    default:
      AL.currentContext.err = 0xa002 /* AL_INVALID_ENUM */;
      break;
  }
}

function _alSourceUnqueueBuffers(source, count, buffers) {
  if (!AL.currentContext) {
    return;
  }
  var src = AL.currentContext.src[source - 1];
  if (!src) {
    AL.currentContext.err = 0xa001 /* AL_INVALID_NAME */;
    return;
  }

  if (count > src.buffersPlayed) {
    AL.currentContext.err = 0xa003 /* AL_INVALID_VALUE */;
    return;
  }

  for (var i = 0; i < count; i++) {
    var entry = src.queue.shift();
    // Write the buffers index out to the return list.
    for (var j = 0; j < AL.currentContext.buf.length; j++) {
      var b = AL.currentContext.buf[j];
      if (b && b == entry.buffer) {
        HEAP32[(buffers + i * 4) >> 2] = j + 1;
        break;
      }
    }
    src.buffersPlayed--;
  }

  AL.updateSource(src);
}

function _alSourceQueueBuffers(source, count, buffers) {
  if (!AL.currentContext) {
    return;
  }
  var src = AL.currentContext.src[source - 1];
  if (!src) {
    AL.currentContext.err = 0xa001 /* AL_INVALID_NAME */;
    return;
  }
  for (var i = 0; i < count; ++i) {
    var bufferIdx = HEAP32[(buffers + i * 4) >> 2];
    if (bufferIdx > AL.currentContext.buf.length) {
      AL.currentContext.err = 0xa001 /* AL_INVALID_NAME */;
      return;
    }
  }

  for (var i = 0; i < count; ++i) {
    var bufferIdx = HEAP32[(buffers + i * 4) >> 2];
    var buffer = AL.currentContext.buf[bufferIdx - 1];
    src.queue.push({ buffer: buffer, src: null });
  }

  AL.updateSource(src);
}

var _setSourceState = undefined;
function _alSourcePlay(source) {
  if (!AL.currentContext) {
    return;
  }
  var src = AL.currentContext.src[source - 1];
  if (!src) {
    AL.currentContext.err = 0xa001 /* AL_INVALID_NAME */;
    return;
  }
  AL.setSourceState(src, 0x1012 /* AL_PLAYING */);
}

function _alSourcei(source, param, value) {
  if (!AL.currentContext) {
    return;
  }
  var src = AL.currentContext.src[source - 1];
  if (!src) {
    AL.currentContext.err = 0xa001 /* AL_INVALID_NAME */;
    return;
  }
  switch (param) {
    case 0x1001 /* AL_CONE_INNER_ANGLE */:
      src.coneInnerAngle = value;
      break;
    case 0x1002 /* AL_CONE_OUTER_ANGLE */:
      src.coneOuterAngle = value;
      break;
    case 0x1007 /* AL_LOOPING */:
      src.loop = value === 1 /* AL_TRUE */;
      break;
    case 0x1009 /* AL_BUFFER */:
      var buffer = AL.currentContext.buf[value - 1];
      if (value == 0) {
        src.queue = [];
      } else {
        src.queue = [{ buffer: buffer }];
      }
      AL.updateSource(src);
      break;
    case 0x202 /* AL_SOURCE_RELATIVE */:
      if (value === 1 /* AL_TRUE */) {
        if (src.panner) {
          src.panner = null;

          // Disconnect from the panner.
          src.gain.disconnect();

          src.gain.connect(AL.currentContext.ctx.destination);
        }
      } else if (value === 0 /* AL_FALSE */) {
        if (!src.panner) {
          var panner = (src.panner = AL.currentContext.ctx.createPanner());
          panner.panningModel = "equalpower";
          panner.distanceModel = "linear";
          panner.refDistance = src.refDistance;
          panner.maxDistance = src.maxDistance;
          panner.rolloffFactor = src.rolloffFactor;
          panner.setPosition(src.position[0], src.position[1], src.position[2]);
          //panner.setVelocity(src.velocity[0], src.velocity[1], src.velocity[2]);
          panner.connect(AL.currentContext.ctx.destination);

          // Disconnect from the default source.
          src.gain.disconnect();

          src.gain.connect(panner);
        }
      } else {
        AL.currentContext.err = 0xa003 /* AL_INVALID_VALUE */;
      }
      break;
    default:
      AL.currentContext.err = 0xa002 /* AL_INVALID_ENUM */;
      break;
  }
}

function _alSourceStop(source) {
  if (!AL.currentContext) {
    return;
  }
  var src = AL.currentContext.src[source - 1];
  if (!src) {
    AL.currentContext.err = 0xa001 /* AL_INVALID_NAME */;
    return;
  }
  AL.setSourceState(src, 0x1014 /* AL_STOPPED */);
}

function _alGetSourcef(source, param, value) {
  if (!AL.currentContext) {
    return;
  }
  var src = AL.currentContext.src[source - 1];
  if (!src) {
    AL.currentContext.err = 0xa001 /* AL_INVALID_NAME */;
    return;
  }
  switch (param) {
    // case 0x1003 /* AL_PITCH */:
    //   break;
    case 0x100a /* AL_GAIN */:
      HEAPF32[value >> 2] = src.gain.gain.value;
      break;
    // case 0x100D /* AL_MIN_GAIN */:
    //   break;
    // case 0x100E /* AL_MAX_GAIN */:
    //   break;
    case 0x1023 /* AL_MAX_DISTANCE */:
      HEAPF32[value >> 2] = src.maxDistance;
      break;
    case 0x1021 /* AL_ROLLOFF_FACTOR */:
      HEAPF32[value >> 2] = src.rolloffFactor;
      break;
    case 0x1022 /* AL_CONE_OUTER_GAIN */:
      HEAPF32[value >> 2] = src.coneOuterGain;
      break;
    case 0x1001 /* AL_CONE_INNER_ANGLE */:
      HEAPF32[value >> 2] = src.coneInnerAngle;
      break;
    case 0x1002 /* AL_CONE_OUTER_ANGLE */:
      HEAPF32[value >> 2] = src.coneOuterAngle;
      break;
    case 0x1020 /* AL_REFERENCE_DISTANCE */:
      HEAPF32[value >> 2] = src.refDistance;
      break;
    // case 0x1024 /* AL_SEC_OFFSET */:
    //   break;
    // case 0x1025 /* AL_SAMPLE_OFFSET */:
    //   break;
    // case 0x1026 /* AL_BYTE_OFFSET */:
    //   break;
    default:
      AL.currentContext.err = 0xa002 /* AL_INVALID_ENUM */;
      break;
  }
}

function _alSourcef(source, param, value) {
  if (!AL.currentContext) {
    return;
  }
  var src = AL.currentContext.src[source - 1];
  if (!src) {
    AL.currentContext.err = 0xa001 /* AL_INVALID_NAME */;
    return;
  }
  switch (param) {
    case 0x1003 /* AL_PITCH */:
      break;
    case 0x100a /* AL_GAIN */:
      src.gain.gain.value = value;
      break;
    // case 0x100D /* AL_MIN_GAIN */:
    //   break;
    // case 0x100E /* AL_MAX_GAIN */:
    //   break;
    case 0x1023 /* AL_MAX_DISTANCE */:
      src.maxDistance = value;
      break;
    case 0x1021 /* AL_ROLLOFF_FACTOR */:
      src.rolloffFactor = value;
      break;
    case 0x1022 /* AL_CONE_OUTER_GAIN */:
      src.coneOuterGain = value;
      break;
    case 0x1001 /* AL_CONE_INNER_ANGLE */:
      src.coneInnerAngle = value;
      break;
    case 0x1002 /* AL_CONE_OUTER_ANGLE */:
      src.coneOuterAngle = value;
      break;
    case 0x1020 /* AL_REFERENCE_DISTANCE */:
      src.refDistance = value;
      break;
    default:
      AL.currentContext.err = 0xa002 /* AL_INVALID_ENUM */;
      break;
  }
}

function _fmod(x, y) {
  return x % y;
}
var _fmodf = _fmod;

function _alSource3f(source, param, v1, v2, v3) {
  if (!AL.currentContext) {
    return;
  }
  var src = AL.currentContext.src[source - 1];
  if (!src) {
    AL.currentContext.err = 0xa001 /* AL_INVALID_NAME */;
    return;
  }
  switch (param) {
    case 0x1004 /* AL_POSITION */:
      src.position = [v1, v2, v3];
      break;
    case 0x1005 /* AL_DIRECTION */:
      src.direction = [v1, v2, v3];
      break;
    case 0x1006 /* AL_VELOCITY */:
      src.velocity = [v1, v2, v3];
      break;
    default:
      AL.currentContext.err = 0xa002 /* AL_INVALID_ENUM */;
      break;
  }
}
function _alSourcefv(source, param, value) {
  _alSource3f(
    source,
    param,
    HEAPF32[value >> 2],
    HEAPF32[(value + 4) >> 2],
    HEAPF32[(value + 8) >> 2]
  );
}

function _alListenerfv(param, values) {
  if (!AL.currentContext) {
    return;
  }
  switch (param) {
    case 0x1004 /* AL_POSITION */:
      var x = HEAPF32[values >> 2];
      var y = HEAPF32[(values + 4) >> 2];
      var z = HEAPF32[(values + 8) >> 2];
      AL.currentContext.ctx.listener._position = [x, y, z];
      AL.currentContext.ctx.listener.setPosition(x, y, z);
      break;
    case 0x1006 /* AL_VELOCITY */:
      var x = HEAPF32[values >> 2];
      var y = HEAPF32[(values + 4) >> 2];
      var z = HEAPF32[(values + 8) >> 2];
      AL.currentContext.ctx.listener._velocity = [x, y, z];
      //AL.currentContext.ctx.listener.setVelocity(x, y, z);
      break;
    case 0x100f /* AL_ORIENTATION */:
      var x = HEAPF32[values >> 2];
      var y = HEAPF32[(values + 4) >> 2];
      var z = HEAPF32[(values + 8) >> 2];
      var x2 = HEAPF32[(values + 12) >> 2];
      var y2 = HEAPF32[(values + 16) >> 2];
      var z2 = HEAPF32[(values + 20) >> 2];
      AL.currentContext.ctx.listener._orientation = [x, y, z, x2, y2, z2];
      AL.currentContext.ctx.listener.setOrientation(x, y, z, x2, y2, z2);
      break;
    default:
      AL.currentContext.err = 0xa002 /* AL_INVALID_ENUM */;
      break;
  }
}

function _alcDestroyContext(context) {
  // Stop playback, etc
  clearInterval(AL.contexts[context - 1].interval);
}

function _alDeleteSources(count, sources) {
  if (!AL.currentContext) {
    return;
  }
  for (var i = 0; i < count; ++i) {
    var sourceIdx = HEAP32[(sources + i * 4) >> 2] - 1;
    delete AL.currentContext.src[sourceIdx];
  }
}

function _alGenSources(count, sources) {
  if (!AL.currentContext) {
    return;
  }
  for (var i = 0; i < count; ++i) {
    var gain = AL.currentContext.ctx.createGain();
    gain.connect(AL.currentContext.gain);
    AL.currentContext.src.push({
      state: 0x1011 /* AL_INITIAL */,
      queue: [],
      loop: false,
      get refDistance() {
        return this._refDistance || 1;
      },
      set refDistance(val) {
        this._refDistance = val;
        if (this.panner) this.panner.refDistance = val;
      },
      get maxDistance() {
        return this._maxDistance || 10000;
      },
      set maxDistance(val) {
        this._maxDistance = val;
        if (this.panner) this.panner.maxDistance = val;
      },
      get rolloffFactor() {
        return this._rolloffFactor || 1;
      },
      set rolloffFactor(val) {
        this._rolloffFactor = val;
        if (this.panner) this.panner.rolloffFactor = val;
      },
      get position() {
        return this._position || [0, 0, 0];
      },
      set position(val) {
        this._position = val;
        if (this.panner) this.panner.setPosition(val[0], val[1], val[2]);
      },
      get velocity() {
        return this._velocity || [0, 0, 0];
      },
      set velocity(val) {
        this._velocity = val;
        //if (this.panner) this.panner.setVelocity(val[0], val[1], val[2]);
      },
      get direction() {
        return this._direction || [0, 0, 0];
      },
      set direction(val) {
        this._direction = val;
        if (this.panner) this.panner.setOrientation(val[0], val[1], val[2]);
      },
      get coneOuterGain() {
        return this._coneOuterGain || 0.0;
      },
      set coneOuterGain(val) {
        this._coneOuterGain = val;
        if (this.panner) this.panner.coneOuterGain = val;
      },
      get coneInnerAngle() {
        return this._coneInnerAngle || 360.0;
      },
      set coneInnerAngle(val) {
        this._coneInnerAngle = val;
        if (this.panner) this.panner.coneInnerAngle = val;
      },
      get coneOuterAngle() {
        return this._coneOuterAngle || 360.0;
      },
      set coneOuterAngle(val) {
        this._coneOuterAngle = val;
        if (this.panner) this.panner.coneOuterAngle = val;
      },
      gain: gain,
      panner: null,
      buffersPlayed: 0,
      bufferPosition: 0,
    });
    HEAP32[(sources + i * 4) >> 2] = AL.currentContext.src.length;
  }
}

var _acos = Math_acos;

function _llvm_bswap_i16(x) {
  return ((x & 0xff) << 8) | ((x >> 8) & 0xff);
}

function _llvm_bswap_i32(x) {
  return (
    ((x & 0xff) << 24) |
    (((x >> 8) & 0xff) << 16) |
    (((x >> 16) & 0xff) << 8) |
    (x >>> 24)
  );
}

function _open(path, oflag, varargs) {
  // int open(const char *path, int oflag, ...);
  // http://pubs.opengroup.org/onlinepubs/009695399/functions/open.html
  var mode = HEAP32[varargs >> 2];
  path = Pointer_stringify(path);
  try {
    var stream = FS.open(path, oflag, mode);
    return stream.fd;
  } catch (e) {
    FS.handleFSError(e);
    return -1;
  }
}
function _fopen(filename, mode) {
  // FILE *fopen(const char *restrict filename, const char *restrict mode);
  // http://pubs.opengroup.org/onlinepubs/000095399/functions/fopen.html
  var flags;
  mode = Pointer_stringify(mode);
  if (mode[0] == "r") {
    if (mode.indexOf("+") != -1) {
      flags = 2;
    } else {
      flags = 0;
    }
  } else if (mode[0] == "w") {
    if (mode.indexOf("+") != -1) {
      flags = 2;
    } else {
      flags = 1;
    }
    flags |= 64;
    flags |= 512;
  } else if (mode[0] == "a") {
    if (mode.indexOf("+") != -1) {
      flags = 2;
    } else {
      flags = 1;
    }
    flags |= 64;
    flags |= 1024;
  } else {
    ___setErrNo(ERRNO_CODES.EINVAL);
    return 0;
  }
  var fd = _open(
    filename,
    flags,
    allocate([0x1ff, 0, 0, 0], "i32", ALLOC_STACK)
  ); // All creation permissions.
  return fd === -1 ? 0 : FS.getPtrForStream(FS.getStream(fd));
}

function _ferror(stream) {
  // int ferror(FILE *stream);
  // http://pubs.opengroup.org/onlinepubs/000095399/functions/ferror.html
  stream = FS.getStreamFromPtr(stream);
  return Number(stream && stream.error);
}

var VM = {
  vmHeader_t: {
    __size__: 36,
    vmMagic: 0,
    instructionCount: 4,
    codeOffset: 8,
    codeLength: 12,
    dataOffset: 16,
    dataLength: 20,
    litLength: 24,
    bssLength: 28,
    jtrgLength: 32,
  },
  vm_t: {
    __size__: 156,
    programStack: 0,
    systemCall: 4,
    name: 8,
    searchPath: 72,
    dllHandle: 76,
    entryPoint: 80,
    destroy: 84,
    currentlyInterpreting: 88,
    compiled: 92,
    codeBase: 96,
    entryOfs: 100,
    codeLength: 104,
    instructionPointers: 108,
    instructionCount: 112,
    dataBase: 116,
    dataMask: 120,
    stackBottom: 124,
    numSymbols: 128,
    symbols: 132,
    callLevel: 136,
    breakFunction: 140,
    breakCount: 144,
    jumpTableTargets: 148,
    numJumpTableTargets: 152,
  },
  vms: [],
  SUSPENDED: 3735928559,
  MAX_VMMAIN_ARGS: 13,
  ENTRY_FRAME_SIZE: 60,
  OPSTACK_SIZE: 1024,
  TYPE: { F4: 1, I4: 2, U4: 3 },
  Constant4: function (state) {
    var v =
      (HEAP8[(state.codeBase + state.pc) | 0] & 0xff) |
      ((HEAP8[(state.codeBase + (state.pc + 1)) | 0] & 0xff) << 8) |
      ((HEAP8[(state.codeBase + (state.pc + 2)) | 0] & 0xff) << 16) |
      ((HEAP8[(state.codeBase + (state.pc + 3)) | 0] & 0xff) << 24);
    state.pc += 4;
    return v;
  },
  Constant1: function (state) {
    var v = HEAP8[(state.codeBase + state.pc) | 0];
    state.pc += 1;
    return v;
  },
  FindLabels: function (state) {
    var labels = {};

    var op, lastop;
    for (
      state.instr = 0, state.pc = 0;
      state.instr < state.instructionCount;
      state.instr++
    ) {
      op = HEAP8[(state.codeBase + state.pc) | 0];

      state.pc++;

      // create a label after each unconditional branching operator
      // FIXME this is a bit excessive
      if (
        lastop === 5 /* OP_CALL */ ||
        lastop === 10 /* OP_JUMP */ ||
        lastop === 7 /* OP_POP */ ||
        lastop === 6 /* OP_PUSH */
      ) {
        labels[state.instr] = true;
      }

      switch (op) {
        case 3 /* OP_ENTER */:
        case 4 /* OP_LEAVE */:
        case 9 /* OP_LOCAL */:
        case 34 /* OP_BLOCK_COPY */:
          VM.Constant4(state);
          break;

        case 8 /* OP_CONST */:
          var value = VM.Constant4(state);
          var nextop = HEAP8[(state.codeBase + state.pc) | 0];
          if (nextop === 10 /* OP_JUMP */) {
            labels[value] = true;
          }
          break;

        case 33 /* OP_ARG */:
          VM.Constant1(state);
          break;

        case 11 /* OP_EQ */:
        case 12 /* OP_NE */:
        case 13 /* OP_LTI */:
        case 14 /* OP_LEI */:
        case 15 /* OP_GTI */:
        case 16 /* OP_GEI */:
        case 17 /* OP_LTU */:
        case 18 /* OP_LEU */:
        case 19 /* OP_GTU */:
        case 20 /* OP_GEU */:
        case 21 /* OP_EQF */:
        case 22 /* OP_NEF */:
        case 23 /* OP_LTF */:
        case 24 /* OP_LEF */:
        case 25 /* OP_GTF */:
        case 26 /* OP_GEF */:
          // create labels for any explicit branch destination
          labels[VM.Constant4(state)] = true;
          break;

        default:
          break;
      }

      lastop = op;
    }

    return labels;
  },
  CompileModule: function (name, instructionCount, codeBase, dataBase) {
    var fs_game = Pointer_stringify(
      _Cvar_VariableString(
        allocate(intArrayFromString("fs_game"), "i8", ALLOC_STACK)
      )
    );

    var state = {
      name: name,
      instructionCount: instructionCount,
      codeBase: codeBase,
      dataBase: dataBase,
      pc: 0,
      instr: 0,
    };

    var labels = VM.FindLabels(state);
    var fninstr = 0;
    var eof = false;
    var ab = new ArrayBuffer(4);
    var i32 = new Int32Array(ab);
    var u32 = new Uint32Array(ab);
    var f32 = new Float32Array(ab);
    var callargs = [];

    //
    // expressions
    //
    var exprStack = [];

    function PUSH_EXPR(expr) {
      exprStack.push(expr);
    }

    function POP_EXPR(type) {
      return exprStack.pop();
    }

    function CAST_STR(type, expr) {
      switch (type) {
        case VM.TYPE.F4:
          return "+(" + expr + ")";

        case VM.TYPE.I4:
          return "(" + expr + ")|0";

        case VM.TYPE.U4:
          return "(" + expr + ")>>>0";

        default:
          throw new Error("unexpected data type");
      }
    }

    function BITCAST_STR(type, expr) {
      if (type === expr.type) {
        return expr.toString();
      }

      if (expr.type === VM.TYPE.I4 && type === VM.TYPE.F4) {
        if (expr instanceof CNST) {
          i32[0] = expr.value;
          return CAST_STR(type, f32[0]);
        }

        if (expr instanceof LOAD4) {
          // by default, every pointer value is loaded from HEAP32
          // don't use the scratch array if we can load directly from HEAPF32
          return CAST_STR(
            type,
            "HEAPF32[((" + OFFSET_STR(expr.addr) + ")>>2)]"
          );
        }

        return CAST_STR(type, "i32[0] = " + expr + ", f32[0]");
      } else if (expr.type === VM.TYPE.U4 && type === VM.TYPE.F4) {
        return CAST_STR(type, "u32[0] = " + expr + ", f32[0]");
      } else if (expr.type === VM.TYPE.F4 && type === VM.TYPE.I4) {
        return CAST_STR(type, "f32[0] = " + expr + ", i32[0]");
      } else if (expr.type === VM.TYPE.U4 && type === VM.TYPE.I4) {
        return CAST_STR(type, expr.toString());
      } else if (expr.type === VM.TYPE.F4 && type === VM.TYPE.U4) {
        return CAST_STR(type, "f32[0] = " + expr + ", u32[0]");
      } else if (expr.type === VM.TYPE.I4 && type === VM.TYPE.U4) {
        return CAST_STR(type, expr.toString());
      } else {
        throw new Error(
          "unsupported bitcast operands " + expr.type + " " + type
        );
      }
    }

    function OFFSET_STR(expr) {
      if (expr instanceof CNST) {
        return state.dataBase + expr.value;
      } else if (expr instanceof LOCAL) {
        return state.dataBase + expr.offset + "+STACKTOP";
      }
      return state.dataBase + "+" + expr;
    }

    function CNST(value) {
      var ctor = CNST.ctor;
      if (!ctor) {
        ctor = CNST.ctor = function (value) {
          this.type = VM.TYPE.I4;
          this.value = value;
        };
        ctor.prototype = Object.create(CNST.prototype);
        ctor.prototype.toString = function () {
          return this.value.toString();
        };
      }
      return new ctor(value);
    }

    function LOCAL(offset) {
      var ctor = LOCAL.ctor;
      if (!ctor) {
        ctor = LOCAL.ctor = function (offset) {
          this.type = VM.TYPE.I4;
          this.offset = offset;
        };
        ctor.prototype = Object.create(LOCAL.prototype);
        ctor.prototype.toString = function () {
          return "STACKTOP+" + this.offset.toString();
        };
      }
      return new ctor(offset);
    }

    function LOAD4(addr) {
      var ctor = LOAD4.ctor;
      if (!ctor) {
        ctor = LOAD4.ctor = function (addr) {
          this.type = VM.TYPE.I4;
          this.addr = addr;
        };
        ctor.prototype = Object.create(LOAD4.prototype);
        ctor.prototype.toString = function () {
          return "HEAP32[((" + OFFSET_STR(this.addr) + ")>>2)]";
        };
      }
      return new ctor(addr);
    }

    function LOAD2(addr) {
      var ctor = LOAD2.ctor;
      if (!ctor) {
        ctor = LOAD2.ctor = function (addr) {
          this.type = VM.TYPE.I4;
          this.addr = addr;
        };
        ctor.prototype = Object.create(LOAD2.prototype);
        ctor.prototype.toString = function () {
          // TODO add makeGetValue u16
          return "HEAPU16[" + OFFSET_STR(this.addr) + " >> 1]";
        };
      }
      return new ctor(addr);
    }

    function LOAD1(addr) {
      var ctor = LOAD1.ctor;
      if (!ctor) {
        ctor = LOAD1.ctor = function (addr) {
          this.type = VM.TYPE.I4;
          this.addr = addr;
        };
        ctor.prototype = Object.create(LOAD1.prototype);
        ctor.prototype.toString = function () {
          // TODO add makeGetValue u8
          return "HEAPU8[" + OFFSET_STR(this.addr) + "]";
        };
      }
      return new ctor(addr);
    }

    function UNARY(type, op, expr) {
      var ctor = UNARY.ctor;
      if (!ctor) {
        ctor = UNARY.ctor = function (type, op, expr) {
          this.type = type;
          this.op = op;
          this.expr = expr;
        };
        ctor.prototype = Object.create(UNARY.prototype);
        ctor.prototype.toString = function () {
          var expr = BITCAST_STR(this.type, this.expr);

          switch (this.op) {
            case 35 /* OP_SEX8 */:
              return "((" + expr + ")<<24)>>24";

            case 36 /* OP_SEX16 */:
              return "((" + expr + ")<<16)>>16";

            case 37 /* OP_NEGI */:
              return "-(" + expr + ")";

            case 49 /* OP_BCOM */:
              return "(" + expr + ")^-1";

            case 53 /* OP_NEGF */:
              return "(-.0)-(" + expr + ")";

            default:
              throw new Error("unknown op type for unary expression");
          }
        };
      }
      return new ctor(type, op, expr);
    }

    function BINARY(type, op, lhs, rhs) {
      var ctor = BINARY.ctor;
      if (!ctor) {
        ctor = BINARY.ctor = function (type, op, lhs, rhs) {
          this.type = type;
          this.op = op;
          this.lhs = lhs;
          this.rhs = rhs;
        };
        ctor.prototype = Object.create(BINARY.prototype);
        ctor.prototype.toString = function () {
          var lhs = "(" + BITCAST_STR(this.type, this.lhs) + ")";
          var rhs = "(" + BITCAST_STR(this.type, this.rhs) + ")";

          switch (this.op) {
            case 38 /* OP_ADD */:
            case 54 /* OP_ADDF */:
              return lhs + "+" + rhs;

            case 39 /* OP_SUB */:
            case 55 /* OP_SUBF */:
              return lhs + "-" + rhs;

            case 40 /* OP_DIVI */:
            case 41 /* OP_DIVU */:
            case 56 /* OP_DIVF */:
              return lhs + "/" + rhs;

            case 42 /* OP_MODI */:
            case 43 /* OP_MODU */:
              return lhs + "%" + rhs;

            case 44 /* OP_MULI */:
            case 45 /* OP_MULU */:
              return "Math.imul(" + lhs + ", " + rhs + ")";

            case 57 /* OP_MULF */:
              return lhs + "*" + rhs;

            case 46 /* OP_BAND */:
              return lhs + "&" + rhs;

            case 47 /* OP_BOR */:
              return lhs + "|" + rhs;

            case 48 /* OP_BXOR */:
              return lhs + "^" + rhs;

            case 50 /* OP_LSH */:
              return lhs + "<<" + rhs;

            case 51 /* OP_RSHI */:
              return lhs + ">>" + rhs;

            case 52 /* OP_RSHU */:
              return lhs + ">>>" + rhs;

            default:
              throw new Error("unknown op type for binary expression");
          }
        };
      }
      return new ctor(type, op, lhs, rhs);
    }

    function CONVERT(type, from_type, expr) {
      var ctor = CONVERT.ctor;
      if (!ctor) {
        ctor = CONVERT.ctor = function (type, from_type, expr) {
          this.type = type;
          this.from_type = from_type;
          this.expr = expr;
        };
        ctor.prototype = Object.create(CONVERT.prototype);
        ctor.prototype.toString = function () {
          return CAST_STR(this.type, BITCAST_STR(this.from_type, this.expr));
        };
      }
      return new ctor(type, from_type, expr);
    }

    //
    // statements
    //
    var moduleStr = "";
    var indent = 0;

    function EmitStatement(str) {
      var prefix = "";
      for (var i = 0; i < indent; i++) {
        prefix += "\t";
      }
      moduleStr += prefix + str + "\n";
    }

    function EmitEnter(frameSize) {
      EmitStatement(
        "var fn" +
          fninstr +
          " = FUNCTIONS[" +
          fninstr +
          "] = function fn" +
          fninstr +
          "(override) {"
      );
      indent++;
      EmitStatement("var label = override || " + fninstr + ";");
      EmitStatement("while (1) switch (label) {");
      indent++;
      EmitStatement("case " + fninstr + ":");
      indent++;
      EmitStatement("STACKTOP -= " + frameSize + ";");
    }

    function EmitLeave(frameSize, ret) {
      // leave the return value on the stack
      EmitStatement(
        "HEAP32[((" + OFFSET_STR(LOCAL(frameSize - 4)) + ")>>2)]=" + ret + ";"
      );
      EmitStatement("STACKTOP += " + frameSize + ";");
      EmitStatement("return;");

      if (eof) {
        indent--;
        indent--;
        EmitStatement("}");
        indent--;
        EmitStatement("};");
      }
    }

    function EmitCall(addr) {
      var translate = {
        cgame: {
          "-101": "memset",
          "-102": "memcpy",
          "-103": "strncpy",
          "-104": "sin",
          "-105": "cos",
          "-106": "atan2",
          "-107": "sqrt",
          "-108": "floor",
          "-109": "ceil",
          "-112": "acos",
        },
        qagame: {
          "-101": "memset",
          "-102": "memcpy",
          "-103": "strncpy",
          "-104": "sin",
          "-105": "cos",
          "-106": "atan2",
          "-107": "sqrt",
          "-111": "floor",
          "-112": "ceil",
        },
        ui: {
          "-101": "memset",
          "-102": "memcpy",
          "-103": "strncpy",
          "-104": "sin",
          "-105": "cos",
          "-106": "atan2",
          "-107": "sqrt",
          "-108": "floor",
          "-109": "ceil",
        },
      };

      // emit return address info
      EmitStore4(LOCAL(0), fninstr);
      EmitStore4(LOCAL(4), state.instr + 1);

      // emit args
      while (callargs.length) {
        var arg = callargs.shift();
        EmitStore4(arg.addr, arg.value);
      }

      // go ahead and directly translate a few syscalls to speed things up
      var table = translate[state.name];
      var translation = table && table[addr];

      if (translation) {
        switch (translation) {
          case "memset":
            EmitStatement(
              "HEAP32[((" +
                OFFSET_STR(LOCAL(-4)) +
                ")>>2)]=_memset(" +
                state.dataBase +
                "+" +
                LOAD4(LOCAL(8)) +
                ", " +
                LOAD4(LOCAL(12)) +
                ", " +
                LOAD4(LOCAL(16)) +
                ");"
            );
            break;

          case "memcpy":
            EmitStatement(
              "HEAP32[((" +
                OFFSET_STR(LOCAL(-4)) +
                ")>>2)]=_memcpy(" +
                state.dataBase +
                "+" +
                LOAD4(LOCAL(8)) +
                ", " +
                state.dataBase +
                "+" +
                LOAD4(LOCAL(12)) +
                ", " +
                LOAD4(LOCAL(16)) +
                ");"
            );
            break;

          case "strncpy":
            EmitStatement(
              "HEAP32[((" +
                OFFSET_STR(LOCAL(-4)) +
                ")>>2)]=_strncpy(" +
                state.dataBase +
                "+" +
                LOAD4(LOCAL(8)) +
                ", " +
                state.dataBase +
                "+" +
                LOAD4(LOCAL(12)) +
                ", " +
                LOAD4(LOCAL(16)) +
                ");"
            );
            break;

          case "sin":
            EmitStatement(
              "HEAPF32[((" +
                OFFSET_STR(LOCAL(-4)) +
                ")>>2)]=Math.sin(" +
                BITCAST_STR(VM.TYPE.F4, LOAD4(LOCAL(8))) +
                ");"
            );
            break;

          case "cos":
            EmitStatement(
              "HEAPF32[((" +
                OFFSET_STR(LOCAL(-4)) +
                ")>>2)]=Math.cos(" +
                BITCAST_STR(VM.TYPE.F4, LOAD4(LOCAL(8))) +
                ");"
            );
            break;

          case "atan2":
            EmitStatement(
              "HEAPF32[((" +
                OFFSET_STR(LOCAL(-4)) +
                ")>>2)]=Math.atan2(" +
                BITCAST_STR(VM.TYPE.F4, LOAD4(LOCAL(8))) +
                ", " +
                BITCAST_STR(VM.TYPE.F4, LOAD4(LOCAL(12))) +
                ");"
            );
            break;

          case "sqrt":
            EmitStatement(
              "HEAPF32[((" +
                OFFSET_STR(LOCAL(-4)) +
                ")>>2)]=Math.sqrt(" +
                BITCAST_STR(VM.TYPE.F4, LOAD4(LOCAL(8))) +
                ");"
            );
            break;

          case "floor":
            EmitStatement(
              "HEAPF32[((" +
                OFFSET_STR(LOCAL(-4)) +
                ")>>2)]=Math.floor(" +
                BITCAST_STR(VM.TYPE.F4, LOAD4(LOCAL(8))) +
                ");"
            );
            break;

          case "ceil":
            EmitStatement(
              "HEAPF32[((" +
                OFFSET_STR(LOCAL(-4)) +
                ")>>2)]=Math.ceil(" +
                BITCAST_STR(VM.TYPE.F4, LOAD4(LOCAL(8))) +
                ");"
            );
            break;

          case "acos":
            EmitStatement(
              "HEAPF32[((" +
                OFFSET_STR(LOCAL(-4)) +
                ")>>2)]=Math.acos(" +
                BITCAST_STR(VM.TYPE.F4, LOAD4(LOCAL(8))) +
                ");"
            );
            break;
        }
      } else {
        var expr = "call(" + addr + ")";

        // remove the indirection if we can
        if (addr instanceof CNST) {
          if (addr.value >= 0) {
            expr = "fn" + addr.value + "()";
          } else {
            expr = "syscall(" + addr.value + ")";
          }
        }

        EmitStatement(expr + ";");
      }

      // push return value to stack
      PUSH_EXPR(LOAD4(LOCAL(-4)));
    }

    function EmitJump(label) {
      EmitStatement("label = " + label + ";");
      EmitStatement("break;");
    }

    function EmitConditionalJump(lhs, rhs, cond, label) {
      var expr = "(" + lhs + ") " + cond + " (" + rhs + ")";

      // MEGA HACK FOR CPMA 1.47
      // ignore its built in pak-file checking since we repackage our own paks
      if (
        fs_game === "cpma" &&
        name === "qagame" &&
        (state.instr === 1382 || state.instr === 1392)
      ) {
        // 1382 is checking if trap_FS_FOpenFile returned 0 for the pak, and if so, jumps to an error block
        // 1392 is checking if trap_FS_FOpenFile's returned length matches the expected length and if so, jumps to a success block
        expr = state.instr === 1382 ? "0" : "1";
      }

      EmitStatement("if (" + expr + ") {");
      indent++;
      EmitJump(label);
      indent--;
      EmitStatement("}");
    }

    function EmitStore4(addr, value) {
      if (value.type === VM.TYPE.F4) {
        EmitStatement(
          "HEAPF32[((" + OFFSET_STR(addr) + ")>>2)]=" + value + ";"
        );
      } else {
        EmitStatement("HEAP32[((" + OFFSET_STR(addr) + ")>>2)]=" + value + ";");
      }
    }

    function EmitStore2(addr, value) {
      EmitStatement("HEAP16[((" + OFFSET_STR(addr) + ")>>1)]=" + value + ";");
    }

    function EmitStore1(addr, value) {
      EmitStatement("HEAP8[((" + OFFSET_STR(addr) + ")|0)]=" + value + ";");
    }

    function EmitBlockCopy(dest, src, bytes) {
      EmitStatement(
        "(_memcpy(" +
          OFFSET_STR(dest) +
          ", " +
          OFFSET_STR(src) +
          ", " +
          bytes +
          ")|0);"
      );
    }

    EmitStatement("(function () {");
    indent++;

    EmitStatement("var FUNCTIONS = {};");
    EmitStatement("var STACKTOP;");

    EmitStatement("function syscall(callnum) {");
    EmitStatement("\tcallnum = ~callnum;");
    EmitStatement("\t// save the current vm");
    EmitStatement("\tvar savedVM = _VM_GetCurrent();");
    EmitStatement("\tvar stackOnEntry = STACKTOP;");
    EmitStatement("\tvar image = HEAP32[(((savedVM)+(VM.vm_t.dataBase))>>2)];");
    EmitStatement("\t// store the callnum in the return address space");
    EmitStatement(
      "\tvar returnAddr = HEAP32[(((image)+(stackOnEntry + 4))>>2)];"
    );
    EmitStatement("\tHEAP32[(((image)+(stackOnEntry + 4))>>2)]=callnum;");
    // MEGA HACK FOR CPMA 1.47
    // it uses the default model mynx which we don't have. if
    // it fails to load the default model, the game will exit
    if (fs_game === "cpma" && name === "cgame") {
      EmitStatement(
        "\tif (callnum === 10 /* trap_FS_FOpenFile */ || callnum === 34 /* trap_S_RegisterSound */ || callnum === 37 /* trap_R_RegisterModel */ || callnum === 38 /* trap_R_RegisterSkin */) {"
      );
      EmitStatement(
        "\t\tvar modelName = Pointer_stringify(" +
          state.dataBase +
          " + HEAP32[(((image)+(stackOnEntry + 8))>>2)]);"
      );
      EmitStatement('\t\tif (modelName.indexOf("/mynx") !== -1) {');
      EmitStatement('\t\t\tmodelName = modelName.replace("/mynx", "/sarge");');
      EmitStatement("\t\t\tSTACKTOP -= modelName.length+1;");
      EmitStatement(
        "\t\t\twriteStringToMemory(modelName, " +
          state.dataBase +
          " + STACKTOP);"
      );
      EmitStatement(
        "\t\t\tHEAP32[(((image)+(stackOnEntry + 8))>>2)]=STACKTOP;"
      );
      EmitStatement("\t\t}");
      EmitStatement("\t}");
    }
    EmitStatement("\t// modify VM stack pointer for recursive VM entry");
    EmitStatement("\tSTACKTOP -= 4;");
    EmitStatement(
      "\tHEAP32[(((savedVM)+(VM.vm_t.programStack))>>2)]=STACKTOP;"
    );
    EmitStatement("\t// call into the client");
    EmitStatement(
      "\tvar systemCall = HEAP32[(((savedVM)+(VM.vm_t.systemCall))>>2)];"
    );
    EmitStatement(
      '\tvar ret = Runtime.dynCall("ii", systemCall, [image + stackOnEntry + 4]);'
    );
    EmitStatement("\t// restore return address");
    EmitStatement("\tHEAP32[(((image)+(stackOnEntry + 4))>>2)]=returnAddr;");
    EmitStatement("\t// leave the return value on the stack");
    EmitStatement("\tHEAP32[(((image)+(stackOnEntry - 4))>>2)]=ret;");
    EmitStatement("\tSTACKTOP = stackOnEntry;");
    EmitStatement(
      "\tHEAP32[(((savedVM)+(VM.vm_t.programStack))>>2)]=STACKTOP;"
    );
    EmitStatement("\t_VM_SetCurrent(savedVM);");
    // intercept trap_UpdateScreen calls coming from cgame and suspend the VM
    if (name === "cgame") {
      EmitStatement("\tif (callnum === 17 /* trap_UpdateScreen */) {");
      EmitStatement("\t\tthrow { suspend: true };");
      EmitStatement("\t}");
    }
    EmitStatement("\treturn;");
    EmitStatement("}");

    EmitStatement("function call(addr) {");
    EmitStatement("\tif (addr >= 0) {");
    EmitStatement("\t\tvar fn = FUNCTIONS[addr];");
    EmitStatement("\t\tfn();");
    EmitStatement("\t\treturn;");
    EmitStatement("\t}");
    EmitStatement("\tsyscall(addr);");
    EmitStatement("}");

    EmitStatement("var ab = new ArrayBuffer(4);");
    EmitStatement("var i32 = new Int32Array(ab);");
    EmitStatement("var u32 = new Uint32Array(ab);");
    EmitStatement("var f32 = new Float32Array(ab);");

    var lastop1, lastop2;
    for (
      state.instr = 0, state.pc = 0;
      state.instr < state.instructionCount;
      state.instr++
    ) {
      var op = HEAP8[(state.codeBase + state.pc) | 0];

      state.pc++;

      if (labels[state.instr]) {
        indent--;
        EmitStatement("case " + state.instr + ":");
        indent++;
      }

      switch (op) {
        //
        // expressions
        //
        case 6 /* OP_PUSH */:
          PUSH_EXPR(CNST(0));
          eof = true;
          break;

        case 7 /* OP_POP */:
          POP_EXPR();
          break;

        case 8 /* OP_CONST */:
          PUSH_EXPR(CNST(VM.Constant4(state)));
          break;

        case 9 /* OP_LOCAL */:
          PUSH_EXPR(LOCAL(VM.Constant4(state)));
          break;

        case 27 /* OP_LOAD1 */:
          PUSH_EXPR(LOAD1(POP_EXPR()));
          break;

        case 28 /* OP_LOAD2 */:
          PUSH_EXPR(LOAD2(POP_EXPR()));
          break;

        case 29 /* OP_LOAD4 */:
          PUSH_EXPR(LOAD4(POP_EXPR()));
          break;

        case 35 /* OP_SEX8 */:
        case 36 /* OP_SEX16 */:
        case 37 /* OP_NEGI */:
        case 49 /* OP_BCOM */:
          PUSH_EXPR(UNARY(VM.TYPE.I4, op, POP_EXPR()));
          break;

        case 53 /* OP_NEGF */:
          PUSH_EXPR(UNARY(VM.TYPE.F4, op, POP_EXPR()));
          break;

        case 38 /* OP_ADD */:
        case 39 /* OP_SUB */:
        case 40 /* OP_DIVI */:
        case 42 /* OP_MODI */:
        case 44 /* OP_MULI */:
        case 46 /* OP_BAND */:
        case 47 /* OP_BOR */:
        case 48 /* OP_BXOR */:
        case 50 /* OP_LSH */:
        case 51 /* OP_RSHI */:
          var rhs = POP_EXPR();
          var lhs = POP_EXPR();
          PUSH_EXPR(BINARY(VM.TYPE.I4, op, lhs, rhs));
          break;

        case 41 /* OP_DIVU */:
        case 43 /* OP_MODU */:
        case 45 /* OP_MULU */:
        case 52 /* OP_RSHU */:
          var rhs = POP_EXPR();
          var lhs = POP_EXPR();
          PUSH_EXPR(BINARY(VM.TYPE.U4, op, lhs, rhs));
          break;

        case 54 /* OP_ADDF */:
        case 55 /* OP_SUBF */:
        case 56 /* OP_DIVF */:
        case 57 /* OP_MULF */:
          var rhs = POP_EXPR();
          var lhs = POP_EXPR();
          PUSH_EXPR(BINARY(VM.TYPE.F4, op, lhs, rhs));
          break;

        case 58 /* OP_CVIF */:
          PUSH_EXPR(CONVERT(VM.TYPE.F4, VM.TYPE.I4, POP_EXPR()));
          break;

        case 59 /* OP_CVFI */:
          PUSH_EXPR(CONVERT(VM.TYPE.I4, VM.TYPE.F4, POP_EXPR()));
          break;

        //
        // statements
        //
        case 0 /* OP_UNDEF */:
        case 1 /* OP_IGNORE */:
          break;

        case 2 /* OP_BREAK */:
          EmitStatement("debugger;");
          break;

        case 3 /* OP_ENTER */:
          fninstr = state.instr;
          eof = false;
          EmitEnter(VM.Constant4(state));
          break;

        case 4 /* OP_LEAVE */:
          EmitLeave(VM.Constant4(state), BITCAST_STR(VM.TYPE.I4, POP_EXPR()));
          break;

        case 5 /* OP_CALL */:
          EmitCall(POP_EXPR());
          break;

        case 10 /* OP_JUMP */:
          // OP_LEAVE ops have explicit jumps written out afterwards that we can ignore
          // RETI4
          // ADDRGP4 $1
          // JUMPV
          var expr = POP_EXPR();
          if (
            !((lastop1 === 4 /* OP_LEAVE */ && lastop2 === 8) /* OP_CONST */)
          ) {
            var instr = BITCAST_STR(VM.TYPE.I4, expr);
            EmitJump(instr);
          }
          break;

        case 11 /* OP_EQ */:
          var rhs = BITCAST_STR(VM.TYPE.I4, POP_EXPR());
          var lhs = BITCAST_STR(VM.TYPE.I4, POP_EXPR());
          EmitConditionalJump(lhs, rhs, "===", VM.Constant4(state));
          break;

        case 12 /* OP_NE */:
          var rhs = BITCAST_STR(VM.TYPE.I4, POP_EXPR());
          var lhs = BITCAST_STR(VM.TYPE.I4, POP_EXPR());
          EmitConditionalJump(lhs, rhs, "!==", VM.Constant4(state));
          break;

        case 13 /* OP_LTI */:
          var rhs = BITCAST_STR(VM.TYPE.I4, POP_EXPR());
          var lhs = BITCAST_STR(VM.TYPE.I4, POP_EXPR());
          EmitConditionalJump(lhs, rhs, "<", VM.Constant4(state));
          break;

        case 14 /* OP_LEI */:
          var rhs = BITCAST_STR(VM.TYPE.I4, POP_EXPR());
          var lhs = BITCAST_STR(VM.TYPE.I4, POP_EXPR());
          EmitConditionalJump(lhs, rhs, "<=", VM.Constant4(state));
          break;

        case 15 /* OP_GTI */:
          var rhs = BITCAST_STR(VM.TYPE.I4, POP_EXPR());
          var lhs = BITCAST_STR(VM.TYPE.I4, POP_EXPR());
          EmitConditionalJump(lhs, rhs, ">", VM.Constant4(state));
          break;

        case 16 /* OP_GEI */:
          var rhs = BITCAST_STR(VM.TYPE.I4, POP_EXPR());
          var lhs = BITCAST_STR(VM.TYPE.I4, POP_EXPR());
          EmitConditionalJump(lhs, rhs, ">=", VM.Constant4(state));
          break;

        case 17 /* OP_LTU */:
          var rhs = BITCAST_STR(VM.TYPE.U4, POP_EXPR());
          var lhs = BITCAST_STR(VM.TYPE.U4, POP_EXPR());
          EmitConditionalJump(lhs, rhs, "<", VM.Constant4(state));
          break;

        case 18 /* OP_LEU */:
          var rhs = BITCAST_STR(VM.TYPE.U4, POP_EXPR());
          var lhs = BITCAST_STR(VM.TYPE.U4, POP_EXPR());
          EmitConditionalJump(lhs, rhs, "<=", VM.Constant4(state));
          break;

        case 19 /* OP_GTU */:
          var rhs = BITCAST_STR(VM.TYPE.U4, POP_EXPR());
          var lhs = BITCAST_STR(VM.TYPE.U4, POP_EXPR());
          EmitConditionalJump(lhs, rhs, ">", VM.Constant4(state));
          break;

        case 20 /* OP_GEU */:
          var rhs = BITCAST_STR(VM.TYPE.U4, POP_EXPR());
          var lhs = BITCAST_STR(VM.TYPE.U4, POP_EXPR());
          EmitConditionalJump(lhs, rhs, ">=", VM.Constant4(state));
          break;

        case 21 /* OP_EQF */:
          var rhs = BITCAST_STR(VM.TYPE.F4, POP_EXPR());
          var lhs = BITCAST_STR(VM.TYPE.F4, POP_EXPR());
          EmitConditionalJump(lhs, rhs, "===", VM.Constant4(state));
          break;

        case 22 /* OP_NEF */:
          var rhs = BITCAST_STR(VM.TYPE.F4, POP_EXPR());
          var lhs = BITCAST_STR(VM.TYPE.F4, POP_EXPR());
          EmitConditionalJump(lhs, rhs, "!==", VM.Constant4(state));
          break;

        case 23 /* OP_LTF */:
          var rhs = BITCAST_STR(VM.TYPE.F4, POP_EXPR());
          var lhs = BITCAST_STR(VM.TYPE.F4, POP_EXPR());
          EmitConditionalJump(lhs, rhs, "<", VM.Constant4(state));
          break;

        case 24 /* OP_LEF */:
          var rhs = BITCAST_STR(VM.TYPE.F4, POP_EXPR());
          var lhs = BITCAST_STR(VM.TYPE.F4, POP_EXPR());
          EmitConditionalJump(lhs, rhs, "<=", VM.Constant4(state));
          break;

        case 25 /* OP_GTF */:
          var rhs = BITCAST_STR(VM.TYPE.F4, POP_EXPR());
          var lhs = BITCAST_STR(VM.TYPE.F4, POP_EXPR());
          EmitConditionalJump(lhs, rhs, ">", VM.Constant4(state));
          break;

        case 26 /* OP_GEF */:
          var rhs = BITCAST_STR(VM.TYPE.F4, POP_EXPR());
          var lhs = BITCAST_STR(VM.TYPE.F4, POP_EXPR());
          EmitConditionalJump(lhs, rhs, ">=", VM.Constant4(state));
          break;

        case 30 /* OP_STORE1 */:
          var value = BITCAST_STR(VM.TYPE.I4, POP_EXPR());
          var addr = POP_EXPR();
          EmitStore1(addr, value);
          break;

        case 31 /* OP_STORE2 */:
          var value = BITCAST_STR(VM.TYPE.I4, POP_EXPR());
          var addr = POP_EXPR();
          EmitStore2(addr, value);
          break;

        case 32 /* OP_STORE4 */:
          var value = POP_EXPR();
          var addr = POP_EXPR();
          EmitStore4(addr, value);
          break;

        case 33 /* OP_ARG */:
          var value = POP_EXPR();
          var addr = LOCAL(VM.Constant1(state));
          callargs.push({ addr: addr, value: value });
          break;

        case 34 /* OP_BLOCK_COPY */:
          var src = POP_EXPR();
          var dest = POP_EXPR();
          var bytes = VM.Constant4(state);
          EmitBlockCopy(dest, src, bytes);
          break;
      }

      lastop1 = lastop2;
      lastop2 = op;
    }

    EmitStatement("return Object.create(Object.prototype, {");
    EmitStatement("\tFUNCTIONS: { value: FUNCTIONS },");
    EmitStatement(
      "\tSTACKTOP: { get: function () { return STACKTOP; }, set: function (val) { STACKTOP = val; } },"
    );
    EmitStatement("});");
    indent--;
    EmitStatement("})");

    return moduleStr;
  },
};

function _VM_Destroy(vmp) {
  var handle = HEAP32[(vmp + VM.vm_t.entryOfs) >> 2];

  delete VM.vms[handle];
}
function _VM_Compile(vmp, headerp) {
  var current = _VM_GetCurrent();
  var name = Pointer_stringify(vmp + VM.vm_t.name);
  var dataBase = HEAP32[(vmp + VM.vm_t.dataBase) >> 2];
  var codeOffset = HEAP32[(headerp + VM.vmHeader_t.codeOffset) >> 2];
  var instructionCount =
    HEAP32[(headerp + VM.vmHeader_t.instructionCount) >> 2];

  var vm;
  try {
    var start = Date.now();

    var module = VM.CompileModule(
      name,
      instructionCount,
      headerp + codeOffset,
      dataBase
    );
    var indirectEval = eval;
    vm = indirectEval(module)();

    SYSC.Print(
      "VM file " +
        name +
        " compiled in " +
        (Date.now() - start) +
        " milliseconds"
    );
  } catch (e) {
    if (e.longjmp || e === "longjmp") {
      throw e;
    }
    SYSC.Error("fatal", e);
  }

  var handle = VM.vms.length + 1;
  VM.vms[handle] = vm;

  if (!VM.DestroyPtr) {
    VM.DestroyPtr = Runtime.addFunction(_VM_Destroy);
  }

  HEAP32[(vmp + VM.vm_t.entryOfs) >> 2] = handle;
  HEAP32[(vmp + VM.vm_t.destroy) >> 2] = VM.DestroyPtr;
}

function _VM_SuspendCompiled(vmp, stackOnEntry) {
  var handle = HEAP32[(vmp + VM.vm_t.entryOfs) >> 2];
  var vm = VM.vms[handle];

  if (!vm) {
    SYSC.Error("drop", "invalid vm handle");
    return;
  }

  vm.suspended = true;
  vm.stackOnEntry = stackOnEntry;
}
function _VM_CallCompiled(vmp, args) {
  var handle = HEAP32[(vmp + VM.vm_t.entryOfs) >> 2];
  var vm = VM.vms[handle];

  // we can't re-enter the vm until it's been resumed
  if (vm.suspended) {
    SYSC.Error("drop", "attempted to re-enter suspended vm");
  }

  // set the current vm
  var savedVM = _VM_GetCurrent();
  _VM_SetCurrent(vmp);

  // save off the stack pointer
  var image = HEAP32[(vmp + VM.vm_t.dataBase) >> 2];

  // set up the stack frame
  var stackOnEntry = HEAP32[(vmp + VM.vm_t.programStack) >> 2];
  var stackTop = stackOnEntry - VM.ENTRY_FRAME_SIZE;

  HEAP32[(image + stackTop) >> 2] = -1;
  HEAP32[(image + (stackTop + 4)) >> 2] = 0;

  for (var i = 0; i < VM.MAX_VMMAIN_ARGS; i++) {
    var arg = HEAP32[(args + i * 4) >> 2];
    HEAP32[(image + (stackTop + 8 + i * 4)) >> 2] = arg;
  }

  // call into the entry point
  var result;

  try {
    var entryPoint = vm.FUNCTIONS[0];

    vm.STACKTOP = stackTop;

    entryPoint();

    if (vm.STACKTOP !== stackOnEntry - VM.ENTRY_FRAME_SIZE) {
      SYSC.Error(
        "fatal",
        "program stack corrupted, is " +
          vm.STACKTOP +
          ", expected " +
          (stackOnEntry - VM.ENTRY_FRAME_SIZE)
      );
    }

    result = HEAP32[(image + (vm.STACKTOP - 4)) >> 2];

    HEAP32[(vmp + VM.vm_t.programStack) >> 2] = stackOnEntry;
  } catch (e) {
    if (e.longjmp || e === "longjmp") {
      throw e;
    }

    if (!e.suspend) {
      SYSC.Error("fatal", e);
      return;
    }

    _VM_SuspendCompiled(vmp, stackOnEntry);

    result = VM.SUSPENDED;
  }

  // restore the current vm
  _VM_SetCurrent(savedVM);

  // return value is at the top of the stack still
  return result;
}

function _fprintf(stream, format, varargs) {
  // int fprintf(FILE *restrict stream, const char *restrict format, ...);
  // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
  var result = __formatString(format, varargs);
  var stack = Runtime.stackSave();
  var ret = _fwrite(
    allocate(result, "i8", ALLOC_STACK),
    1,
    result.length,
    stream
  );
  Runtime.stackRestore(stack);
  return ret;
}

function _VM_IsSuspendedCompiled(vmp) {
  var handle = HEAP32[(vmp + VM.vm_t.entryOfs) >> 2];
  var vm = VM.vms[handle];

  if (!vm) {
    SYSC.Error("drop", "invalid vm handle");
    return;
  }

  return vm.suspended;
}

function _VM_ResumeCompiled(vmp) {
  var handle = HEAP32[(vmp + VM.vm_t.entryOfs) >> 2];
  var vm = VM.vms[handle];

  if (!vm) {
    SYSC.Error("drop", "invalid vm handle");
    return;
  }

  var savedVM = _VM_GetCurrent();
  _VM_SetCurrent(vmp);

  var image = HEAP32[(vmp + VM.vm_t.dataBase) >> 2];
  var stackOnEntry = vm.stackOnEntry;
  var result;

  vm.suspended = false;

  try {
    while (true) {
      // grab the last return address off the stack top and resume execution
      var fninstr = HEAP32[(image + vm.STACKTOP) >> 2];
      var opinstr = HEAP32[(image + (vm.STACKTOP + 4)) >> 2];

      if (fninstr === -1) {
        // we're done unwinding
        break;
      }

      var fn = vm.FUNCTIONS[fninstr];

      fn(opinstr);
    }

    if (vm.STACKTOP !== stackOnEntry - VM.ENTRY_FRAME_SIZE) {
      SYSC.Error(
        "drop",
        "program stack corrupted, is " +
          vm.STACKTOP +
          ", expected " +
          (stackOnEntry - VM.ENTRY_FRAME_SIZE)
      );
      return;
    }

    result = HEAP32[(image + (vm.STACKTOP - 4)) >> 2];

    HEAP32[(vmp + VM.vm_t.programStack) >> 2] = stackOnEntry;
  } catch (e) {
    if (e.longjmp || e === "longjmp") {
      throw e;
    }

    if (!e.suspend) {
      SYSC.Error("drop", e);
      return;
    }

    _VM_SuspendCompiled(vmp, stackOnEntry);

    result = VM.SUSPENDED;
  }

  // restore the current vm
  _VM_SetCurrent(savedVM);

  return result;
}

function _clock() {
  if (_clock.start === undefined) _clock.start = Date.now();
  return Math.floor((Date.now() - _clock.start) * (1000000 / 1000));
}

function _vfprintf(s, f, va_arg) {
  return _fprintf(s, f, HEAP32[va_arg >> 2]);
}

function _strncat(pdest, psrc, num) {
  var len = _strlen(pdest);
  var i = 0;
  while (1) {
    HEAP8[(pdest + len + i) | 0] = HEAP8[(psrc + i) | 0];
    if (HEAP8[(pdest + (len + i)) | 0] == 0) break;
    i++;
    if (i == num) {
      HEAP8[(pdest + (len + i)) | 0] = 0;
      break;
    }
  }
  return pdest;
}

function _ctime(timer) {
  return _asctime(_localtime(timer));
}

var SDL = {
  defaults: { width: 320, height: 200, copyOnLock: true },
  version: null,
  surfaces: {},
  canvasPool: [],
  events: [],
  fonts: [null],
  audios: [null],
  rwops: [null],
  music: { audio: null, volume: 1 },
  mixerFrequency: 22050,
  mixerFormat: 32784,
  mixerNumChannels: 2,
  mixerChunkSize: 1024,
  channelMinimumNumber: 0,
  GL: false,
  glAttributes: {
    0: 3,
    1: 3,
    2: 2,
    3: 0,
    4: 0,
    5: 1,
    6: 16,
    7: 0,
    8: 0,
    9: 0,
    10: 0,
    11: 0,
    12: 0,
    13: 0,
    14: 0,
    15: 1,
    16: 0,
    17: 0,
    18: 0,
  },
  keyboardState: null,
  keyboardMap: {},
  canRequestFullscreen: false,
  isRequestingFullscreen: false,
  textInput: false,
  startTime: null,
  initFlags: 0,
  buttonState: 0,
  modState: 0,
  DOMButtons: [0, 0, 0],
  DOMEventToSDLEvent: {},
  keyCodes: {
    16: 1249,
    17: 1248,
    18: 1250,
    33: 1099,
    34: 1102,
    37: 1104,
    38: 1106,
    39: 1103,
    40: 1105,
    46: 127,
    96: 1112,
    97: 1113,
    98: 1114,
    99: 1115,
    100: 1116,
    101: 1117,
    102: 1118,
    103: 1119,
    104: 1120,
    105: 1121,
    112: 1082,
    113: 1083,
    114: 1084,
    115: 1085,
    116: 1086,
    117: 1087,
    118: 1088,
    119: 1089,
    120: 1090,
    121: 1091,
    122: 1092,
    123: 1093,
    173: 45,
    188: 44,
    190: 46,
    191: 47,
    192: 96,
  },
  scanCodes: {
    8: 42,
    9: 43,
    13: 40,
    27: 41,
    32: 44,
    44: 54,
    46: 55,
    47: 56,
    48: 39,
    49: 30,
    50: 31,
    51: 32,
    52: 33,
    53: 34,
    54: 35,
    55: 36,
    56: 37,
    57: 38,
    59: 51,
    61: 46,
    91: 47,
    92: 49,
    93: 48,
    96: 52,
    97: 4,
    98: 5,
    99: 6,
    100: 7,
    101: 8,
    102: 9,
    103: 10,
    104: 11,
    105: 12,
    106: 13,
    107: 14,
    108: 15,
    109: 16,
    110: 17,
    111: 18,
    112: 19,
    113: 20,
    114: 21,
    115: 22,
    116: 23,
    117: 24,
    118: 25,
    119: 26,
    120: 27,
    121: 28,
    122: 29,
    305: 224,
    308: 226,
  },
  loadRect: function (rect) {
    return {
      x: HEAP32[(rect + 0) >> 2],
      y: HEAP32[(rect + 4) >> 2],
      w: HEAP32[(rect + 8) >> 2],
      h: HEAP32[(rect + 12) >> 2],
    };
  },
  loadColorToCSSRGB: function (color) {
    var rgba = HEAP32[color >> 2];
    return (
      "rgb(" +
      (rgba & 255) +
      "," +
      ((rgba >> 8) & 255) +
      "," +
      ((rgba >> 16) & 255) +
      ")"
    );
  },
  loadColorToCSSRGBA: function (color) {
    var rgba = HEAP32[color >> 2];
    return (
      "rgba(" +
      (rgba & 255) +
      "," +
      ((rgba >> 8) & 255) +
      "," +
      ((rgba >> 16) & 255) +
      "," +
      ((rgba >> 24) & 255) / 255 +
      ")"
    );
  },
  translateColorToCSSRGBA: function (rgba) {
    return (
      "rgba(" +
      (rgba & 0xff) +
      "," +
      ((rgba >> 8) & 0xff) +
      "," +
      ((rgba >> 16) & 0xff) +
      "," +
      (rgba >>> 24) / 0xff +
      ")"
    );
  },
  translateRGBAToCSSRGBA: function (r, g, b, a) {
    return (
      "rgba(" +
      (r & 0xff) +
      "," +
      (g & 0xff) +
      "," +
      (b & 0xff) +
      "," +
      (a & 0xff) / 255 +
      ")"
    );
  },
  translateRGBAToColor: function (r, g, b, a) {
    return r | (g << 8) | (b << 16) | (a << 24);
  },
  makeSurface: function (
    width,
    height,
    flags,
    usePageCanvas,
    source,
    rmask,
    gmask,
    bmask,
    amask
  ) {
    flags = flags || 0;
    var is_SDL_HWSURFACE = flags & 0x00000001;
    var is_SDL_HWPALETTE = flags & 0x00200000;
    var is_SDL_OPENGL = flags & 0x04000000;

    var surf = _malloc(60);
    var pixelFormat = _malloc(44);
    //surface with SDL_HWPALETTE flag is 8bpp surface (1 byte)
    var bpp = is_SDL_HWPALETTE ? 1 : 4;
    var buffer = 0;

    // preemptively initialize this for software surfaces,
    // otherwise it will be lazily initialized inside of SDL_LockSurface
    if (!is_SDL_HWSURFACE && !is_SDL_OPENGL) {
      buffer = _malloc(width * height * 4);
    }

    HEAP32[surf >> 2] = flags;
    HEAP32[(surf + 4) >> 2] = pixelFormat;
    HEAP32[(surf + 8) >> 2] = width;
    HEAP32[(surf + 12) >> 2] = height;
    HEAP32[(surf + 16) >> 2] = width * bpp; // assuming RGBA or indexed for now,
    // since that is what ImageData gives us in browsers
    HEAP32[(surf + 20) >> 2] = buffer;
    HEAP32[(surf + 36) >> 2] = 0;
    HEAP32[(surf + 56) >> 2] = 1;

    HEAP32[
      pixelFormat >> 2
    ] = 0 /* XXX missing C define SDL_PIXELFORMAT_RGBA8888 */;
    HEAP32[(pixelFormat + 4) >> 2] = 0; // TODO
    HEAP8[(pixelFormat + 8) | 0] = bpp * 8;
    HEAP8[(pixelFormat + 9) | 0] = bpp;

    HEAP32[(pixelFormat + 12) >> 2] = rmask || 0x000000ff;
    HEAP32[(pixelFormat + 16) >> 2] = gmask || 0x0000ff00;
    HEAP32[(pixelFormat + 20) >> 2] = bmask || 0x00ff0000;
    HEAP32[(pixelFormat + 24) >> 2] = amask || 0xff000000;

    // Decide if we want to use WebGL or not
    SDL.GL = SDL.GL || is_SDL_OPENGL;
    var canvas;
    if (!usePageCanvas) {
      if (SDL.canvasPool.length > 0) {
        canvas = SDL.canvasPool.pop();
      } else {
        canvas = document.createElement("canvas");
      }
      canvas.width = width;
      canvas.height = height;
    } else {
      canvas = Module["canvas"];
    }

    var webGLContextAttributes = {
      antialias:
        SDL.glAttributes[13 /*SDL_GL_MULTISAMPLEBUFFERS*/] != 0 &&
        SDL.glAttributes[14 /*SDL_GL_MULTISAMPLESAMPLES*/] > 1,
      depth: SDL.glAttributes[6 /*SDL_GL_DEPTH_SIZE*/] > 0,
      stencil: SDL.glAttributes[7 /*SDL_GL_STENCIL_SIZE*/] > 0,
    };

    var ctx = Browser.createContext(
      canvas,
      is_SDL_OPENGL,
      usePageCanvas,
      webGLContextAttributes
    );

    SDL.surfaces[surf] = {
      width: width,
      height: height,
      canvas: canvas,
      ctx: ctx,
      surf: surf,
      buffer: buffer,
      pixelFormat: pixelFormat,
      alpha: 255,
      flags: flags,
      locked: 0,
      usePageCanvas: usePageCanvas,
      source: source,

      isFlagSet: function (flag) {
        return flags & flag;
      },
    };

    return surf;
  },
  copyIndexedColorData: function (surfData, rX, rY, rW, rH) {
    // HWPALETTE works with palette
    // setted by SDL_SetColors
    if (!surfData.colors) {
      return;
    }

    var fullWidth = Module["canvas"].width;
    var fullHeight = Module["canvas"].height;

    var startX = rX || 0;
    var startY = rY || 0;
    var endX = (rW || fullWidth - startX) + startX;
    var endY = (rH || fullHeight - startY) + startY;

    var buffer = surfData.buffer;
    var data = surfData.image.data;
    var colors = surfData.colors;

    for (var y = startY; y < endY; ++y) {
      var indexBase = y * fullWidth;
      var colorBase = indexBase * 4;
      for (var x = startX; x < endX; ++x) {
        // HWPALETTE have only 256 colors (not rgba)
        var index = HEAPU8[(buffer + indexBase + x) | 0] * 3;
        var colorOffset = colorBase + x * 4;

        data[colorOffset] = colors[index];
        data[colorOffset + 1] = colors[index + 1];
        data[colorOffset + 2] = colors[index + 2];
        //unused: data[colorOffset +3] = color[index +3];
      }
    }
  },
  freeSurface: function (surf) {
    var refcountPointer = surf + 56;
    var refcount = HEAP32[refcountPointer >> 2];
    if (refcount > 1) {
      HEAP32[refcountPointer >> 2] = refcount - 1;
      return;
    }

    var info = SDL.surfaces[surf];
    if (!info.usePageCanvas && info.canvas) SDL.canvasPool.push(info.canvas);
    if (info.buffer) _free(info.buffer);
    _free(info.pixelFormat);
    _free(surf);
    SDL.surfaces[surf] = null;
  },
  touchX: 0,
  touchY: 0,
  savedKeydown: null,
  receiveEvent: function (event) {
    switch (event.type) {
      case "touchstart":
        event.preventDefault();
        var touch = event.touches[0];
        touchX = touch.pageX;
        touchY = touch.pageY;
        var event = {
          type: "mousedown",
          button: 0,
          pageX: touchX,
          pageY: touchY,
        };
        SDL.DOMButtons[0] = 1;
        SDL.events.push(event);
        break;
      case "touchmove":
        event.preventDefault();
        var touch = event.touches[0];
        touchX = touch.pageX;
        touchY = touch.pageY;
        event = {
          type: "mousemove",
          button: 0,
          pageX: touchX,
          pageY: touchY,
        };
        SDL.events.push(event);
        break;
      case "touchend":
        event.preventDefault();
        event = {
          type: "mouseup",
          button: 0,
          pageX: touchX,
          pageY: touchY,
        };
        SDL.DOMButtons[0] = 0;
        SDL.events.push(event);
        break;
      case "mousemove":
        if (Browser.pointerLock) {
          // workaround for firefox bug 750111
          if ("mozMovementX" in event) {
            event["movementX"] = event["mozMovementX"];
            event["movementY"] = event["mozMovementY"];
          }
          // workaround for Firefox bug 782777
          if (event["movementX"] == 0 && event["movementY"] == 0) {
            // ignore a mousemove event if it doesn't contain any movement info
            // (without pointer lock, we infer movement from pageX/pageY, so this check is unnecessary)
            event.preventDefault();
            return;
          }
        }
      // fall through
      case "keydown":
      case "keyup":
      case "keypress":
      case "mousedown":
      case "mouseup":
      case "DOMMouseScroll":
      case "mousewheel":
        // If we preventDefault on keydown events, the subsequent keypress events
        // won't fire. However, it's fine (and in some cases necessary) to
        // preventDefault for keys that don't generate a character. Otherwise,
        // preventDefault is the right thing to do in general.
        if (
          event.type !== "keydown" ||
          (!SDL.unicode && !SDL.textInput) ||
          event.keyCode === 8 /* backspace */ ||
          event.keyCode === 9 /* tab */
        ) {
          event.preventDefault();
        }

        if (event.type == "DOMMouseScroll" || event.type == "mousewheel") {
          var button = Browser.getMouseWheelDelta(event) > 0 ? 4 : 3;
          var event2 = {
            type: "mousedown",
            button: button,
            pageX: event.pageX,
            pageY: event.pageY,
          };
          SDL.events.push(event2);
          event = {
            type: "mouseup",
            button: button,
            pageX: event.pageX,
            pageY: event.pageY,
          };
        } else if (event.type == "mousedown") {
          SDL.DOMButtons[event.button] = 1;
        } else if (event.type == "mouseup") {
          // ignore extra ups, can happen if we leave the canvas while pressing down, then return,
          // since we add a mouseup in that case
          if (!SDL.DOMButtons[event.button]) {
            return;
          }

          SDL.DOMButtons[event.button] = 0;
        }

        // We can only request fullscreen as the result of user input.
        // Due to this limitation, we toggle a boolean on keydown which
        // SDL_WM_ToggleFullScreen will check and subsequently set another
        // flag indicating for us to request fullscreen on the following
        // keyup. This isn't perfect, but it enables SDL_WM_ToggleFullScreen
        // to work as the result of a keypress (which is an extremely
        // common use case).
        if (event.type === "keydown") {
          SDL.canRequestFullscreen = true;
        } else if (event.type === "keyup") {
          if (SDL.isRequestingFullscreen) {
            Module["requestFullScreen"](true, true);
            SDL.isRequestingFullscreen = false;
          }
          SDL.canRequestFullscreen = false;
        }

        // SDL expects a unicode character to be passed to its keydown events.
        // Unfortunately, the browser APIs only provide a charCode property on
        // keypress events, so we must backfill in keydown events with their
        // subsequent keypress event's charCode.
        if (event.type === "keypress" && SDL.savedKeydown) {
          // charCode is read-only
          SDL.savedKeydown.keypressCharCode = event.charCode;
          SDL.savedKeydown = null;
        } else if (event.type === "keydown") {
          SDL.savedKeydown = event;
        }

        // Don't push keypress events unless SDL_StartTextInput has been called.
        if (event.type !== "keypress" || SDL.textInput) {
          SDL.events.push(event);
        }
        break;
      case "mouseout":
        // Un-press all pressed mouse buttons, because we might miss the release outside of the canvas
        for (var i = 0; i < 3; i++) {
          if (SDL.DOMButtons[i]) {
            SDL.events.push({
              type: "mouseup",
              button: i,
              pageX: event.pageX,
              pageY: event.pageY,
            });
            SDL.DOMButtons[i] = 0;
          }
        }
        event.preventDefault();
        break;
      case "blur":
      case "visibilitychange": {
        // Un-press all pressed keys: TODO
        for (var code in SDL.keyboardMap) {
          SDL.events.push({
            type: "keyup",
            keyCode: SDL.keyboardMap[code],
          });
        }
        event.preventDefault();
        break;
      }
      case "unload":
        if (Browser.mainLoop.runner) {
          SDL.events.push(event);
          // Force-run a main event loop, since otherwise this event will never be caught!
          Browser.mainLoop.runner();
        }
        return;
      case "resize":
        SDL.events.push(event);
        // manually triggered resize event doesn't have a preventDefault member
        if (event.preventDefault) {
          event.preventDefault();
        }
        break;
    }
    if (SDL.events.length >= 10000) {
      Module.printErr("SDL event queue full, dropping events");
      SDL.events = SDL.events.slice(0, 10000);
    }
    return;
  },
  handleEvent: function (event) {
    if (event.handled) return;
    event.handled = true;

    switch (event.type) {
      case "keydown":
      case "keyup": {
        var down = event.type === "keydown";
        var code = event.keyCode;
        if (code >= 65 && code <= 90) {
          code += 32; // make lowercase for SDL
        } else {
          code = SDL.keyCodes[event.keyCode] || event.keyCode;
        }

        HEAP8[(SDL.keyboardState + code) | 0] = down;
        // TODO: lmeta, rmeta, numlock, capslock, KMOD_MODE, KMOD_RESERVED
        SDL.modState =
          (HEAP8[(SDL.keyboardState + 1248) | 0] ? 0x0040 | 0x0080 : 0) | // KMOD_LCTRL & KMOD_RCTRL
          (HEAP8[(SDL.keyboardState + 1249) | 0] ? 0x0001 | 0x0002 : 0) | // KMOD_LSHIFT & KMOD_RSHIFT
          (HEAP8[(SDL.keyboardState + 1250) | 0] ? 0x0100 | 0x0200 : 0); // KMOD_LALT & KMOD_RALT

        if (down) {
          SDL.keyboardMap[code] = event.keyCode; // save the DOM input, which we can use to unpress it during blur
        } else {
          delete SDL.keyboardMap[code];
        }

        break;
      }
      case "mousedown":
      case "mouseup":
        if (event.type == "mousedown") {
          // SDL_BUTTON(x) is defined as (1 << ((x)-1)).  SDL buttons are 1-3,
          // and DOM buttons are 0-2, so this means that the below formula is
          // correct.
          SDL.buttonState |= 1 << event.button;
        } else if (event.type == "mouseup") {
          SDL.buttonState &= ~(1 << event.button);
        }
      // fall through
      case "mousemove": {
        Browser.calculateMouseEvent(event);
        break;
      }
    }
  },
  makeCEvent: function (event, ptr) {
    if (typeof event === "number") {
      // This is a pointer to a native C event that was SDL_PushEvent'ed
      _memcpy(ptr, event, 28); // XXX
      return;
    }

    SDL.handleEvent(event);

    switch (event.type) {
      case "keydown":
      case "keyup": {
        var down = event.type === "keydown";
        //Module.print('Received key event: ' + event.keyCode);
        var key = event.keyCode;
        if (key >= 65 && key <= 90) {
          key += 32; // make lowercase for SDL
        } else {
          key = SDL.keyCodes[event.keyCode] || event.keyCode;
        }
        var scan;
        if (key >= 1024) {
          scan = key - 1024;
        } else {
          scan = SDL.scanCodes[key] || key;
        }

        HEAP32[ptr >> 2] = SDL.DOMEventToSDLEvent[event.type];
        HEAP8[(ptr + 8) | 0] = down ? 1 : 0;
        HEAP8[(ptr + 9) | 0] = 0; // TODO
        HEAP32[(ptr + 12) >> 2] = scan;
        HEAP32[(ptr + 16) >> 2] = key;
        HEAP16[(ptr + 20) >> 1] = SDL.modState;
        // some non-character keys (e.g. backspace and tab) won't have keypressCharCode set, fill in with the keyCode.
        HEAP32[(ptr + 24) >> 2] = event.keypressCharCode || key;

        break;
      }
      case "keypress": {
        HEAP32[ptr >> 2] = SDL.DOMEventToSDLEvent[event.type];
        // Not filling in windowID for now
        var cStr = intArrayFromString(String.fromCharCode(event.charCode));
        for (var i = 0; i < cStr.length; ++i) {
          HEAP8[(ptr + (8 + i)) | 0] = cStr[i];
        }
        break;
      }
      case "mousedown":
      case "mouseup":
      case "mousemove": {
        if (event.type != "mousemove") {
          var down = event.type === "mousedown";
          HEAP32[ptr >> 2] = SDL.DOMEventToSDLEvent[event.type];
          HEAP8[(ptr + 8) | 0] = event.button + 1; // DOM buttons are 0-2, SDL 1-3
          HEAP8[(ptr + 9) | 0] = down ? 1 : 0;
          HEAP32[(ptr + 12) >> 2] = Browser.mouseX;
          HEAP32[(ptr + 16) >> 2] = Browser.mouseY;
        } else {
          HEAP32[ptr >> 2] = SDL.DOMEventToSDLEvent[event.type];
          HEAP8[(ptr + 8) | 0] = SDL.buttonState;
          HEAP32[(ptr + 12) >> 2] = Browser.mouseX;
          HEAP32[(ptr + 16) >> 2] = Browser.mouseY;
          HEAP32[(ptr + 20) >> 2] = Browser.mouseMovementX;
          HEAP32[(ptr + 24) >> 2] = Browser.mouseMovementY;
        }
        break;
      }
      case "unload": {
        HEAP32[ptr >> 2] = SDL.DOMEventToSDLEvent[event.type];
        break;
      }
      case "resize": {
        HEAP32[ptr >> 2] = SDL.DOMEventToSDLEvent[event.type];
        HEAP32[(ptr + 4) >> 2] = event.w;
        HEAP32[(ptr + 8) >> 2] = event.h;
        break;
      }
      case "joystick_button_up":
      case "joystick_button_down": {
        var state = event.type === "joystick_button_up" ? 0 : 1;
        HEAP32[ptr >> 2] = SDL.DOMEventToSDLEvent[event.type];
        HEAP8[(ptr + 4) | 0] = event.index;
        HEAP8[(ptr + 5) | 0] = event.button;
        HEAP8[(ptr + 6) | 0] = state;
        break;
      }
      case "joystick_axis_motion": {
        HEAP32[ptr >> 2] = SDL.DOMEventToSDLEvent[event.type];
        HEAP8[(ptr + 4) | 0] = event.index;
        HEAP8[(ptr + 5) | 0] = event.axis;
        HEAP32[(ptr + 8) >> 2] = SDL.joystickAxisValueConversion(event.value);
        break;
      }
      default:
        throw "Unhandled SDL event: " + event.type;
    }
  },
  estimateTextWidth: function (fontData, text) {
    var h = fontData.size;
    var fontString = h + "px " + fontData.name;
    var tempCtx = SDL.ttfContext;
    tempCtx.save();
    tempCtx.font = fontString;
    var ret = tempCtx.measureText(text).width | 0;
    tempCtx.restore();
    return ret;
  },
  allocateChannels: function (num) {
    // called from Mix_AllocateChannels and init
    if (SDL.numChannels && SDL.numChannels >= num && num != 0) return;
    SDL.numChannels = num;
    SDL.channels = [];
    for (var i = 0; i < num; i++) {
      SDL.channels[i] = {
        audio: null,
        volume: 1.0,
      };
    }
  },
  setGetVolume: function (info, volume) {
    if (!info) return 0;
    var ret = info.volume * 128; // MIX_MAX_VOLUME
    if (volume != -1) {
      info.volume = volume / 128;
      if (info.audio) info.audio.volume = info.volume;
    }
    return ret;
  },
  fillWebAudioBufferFromHeap: function (
    heapPtr,
    sizeSamplesPerChannel,
    dstAudioBuffer
  ) {
    // The input audio data is interleaved across the channels, i.e. [L, R, L, R, L, R, ...] and is either 8-bit or 16-bit as
    // supported by the SDL API. The output audio wave data for Web Audio API must be in planar buffers of [-1,1]-normalized Float32 data,
    // so perform a buffer conversion for the data.
    var numChannels = SDL.audio.channels;
    for (var c = 0; c < numChannels; ++c) {
      var channelData = dstAudioBuffer["getChannelData"](c);
      if (channelData.length != sizeSamplesPerChannel) {
        throw (
          "Web Audio output buffer length mismatch! Destination size: " +
          channelData.length +
          " samples vs expected " +
          sizeSamplesPerChannel +
          " samples!"
        );
      }
      if (SDL.audio.format == 0x8010 /*AUDIO_S16LSB*/) {
        for (var j = 0; j < sizeSamplesPerChannel; ++j) {
          channelData[j] =
            HEAP16[(heapPtr + (j * numChannels + c) * 2) >> 1] / 0x8000;
        }
      } else if (SDL.audio.format == 0x0008 /*AUDIO_U8*/) {
        for (var j = 0; j < sizeSamplesPerChannel; ++j) {
          var v = HEAP8[(heapPtr + (j * numChannels + c)) | 0];
          channelData[j] = (v >= 0 ? v - 128 : v + 128) / 128;
        }
      }
    }
  },
  debugSurface: function (surfData) {
    console.log(
      "dumping surface " +
        [surfData.surf, surfData.source, surfData.width, surfData.height]
    );
    var image = surfData.ctx.getImageData(
      0,
      0,
      surfData.width,
      surfData.height
    );
    var data = image.data;
    var num = Math.min(surfData.width, surfData.height);
    for (var i = 0; i < num; i++) {
      console.log(
        "   diagonal " +
          i +
          ":" +
          [
            data[i * surfData.width * 4 + i * 4 + 0],
            data[i * surfData.width * 4 + i * 4 + 1],
            data[i * surfData.width * 4 + i * 4 + 2],
            data[i * surfData.width * 4 + i * 4 + 3],
          ]
      );
    }
  },
  joystickEventState: 1,
  lastJoystickState: {},
  joystickNamePool: {},
  recordJoystickState: function (joystick, state) {
    // Standardize button state.
    var buttons = new Array(state.buttons.length);
    for (var i = 0; i < state.buttons.length; i++) {
      buttons[i] = SDL.getJoystickButtonState(state.buttons[i]);
    }

    SDL.lastJoystickState[joystick] = {
      buttons: buttons,
      axes: state.axes.slice(0),
      timestamp: state.timestamp,
      index: state.index,
      id: state.id,
    };
  },
  getJoystickButtonState: function (button) {
    if (typeof button === "object") {
      // Current gamepad API editor's draft (Firefox Nightly)
      // https://dvcs.w3.org/hg/gamepad/raw-file/default/gamepad.html#idl-def-GamepadButton
      return button.pressed;
    } else {
      // Current gamepad API working draft (Firefox / Chrome Stable)
      // http://www.w3.org/TR/2012/WD-gamepad-20120529/#gamepad-interface
      return button > 0;
    }
  },
  queryJoysticks: function () {
    for (var joystick in SDL.lastJoystickState) {
      var state = SDL.getGamepad(joystick - 1);
      var prevState = SDL.lastJoystickState[joystick];
      // Check only if the timestamp has differed.
      // NOTE: Timestamp is not available in Firefox.
      if (
        typeof state.timestamp !== "number" ||
        state.timestamp !== prevState.timestamp
      ) {
        var i;
        for (i = 0; i < state.buttons.length; i++) {
          var buttonState = SDL.getJoystickButtonState(state.buttons[i]);
          // NOTE: The previous state already has a boolean representation of
          //       its button, so no need to standardize its button state here.
          if (buttonState !== prevState.buttons[i]) {
            // Insert button-press event.
            SDL.events.push({
              type: buttonState ? "joystick_button_down" : "joystick_button_up",
              joystick: joystick,
              index: joystick - 1,
              button: i,
            });
          }
        }
        for (i = 0; i < state.axes.length; i++) {
          if (state.axes[i] !== prevState.axes[i]) {
            // Insert axes-change event.
            SDL.events.push({
              type: "joystick_axis_motion",
              joystick: joystick,
              index: joystick - 1,
              axis: i,
              value: state.axes[i],
            });
          }
        }

        SDL.recordJoystickState(joystick, state);
      }
    }
  },
  joystickAxisValueConversion: function (value) {
    // Ensures that 0 is 0, 1 is 32767, and -1 is 32768.
    return Math.ceil((value + 1) * 32767.5 - 32768);
  },
  getGamepads: function () {
    var fcn =
      navigator.getGamepads ||
      navigator.webkitGamepads ||
      navigator.mozGamepads ||
      navigator.gamepads ||
      navigator.webkitGetGamepads;
    if (fcn !== undefined) {
      // The function must be applied on the navigator object.
      return fcn.apply(navigator);
    } else {
      return [];
    }
  },
  getGamepad: function (deviceIndex) {
    var gamepads = SDL.getGamepads();
    if (gamepads.length > deviceIndex && deviceIndex >= 0) {
      return gamepads[deviceIndex];
    }
    return null;
  },
};
function _SDL_GetAppState() {
  var state = 0;

  if (Browser.pointerLock) {
    state |= 0x01; // SDL_APPMOUSEFOCUS
  }
  if (document.hasFocus()) {
    state |= 0x02; // SDL_APPINPUTFOCUS
  }
  state |= 0x04; // SDL_APPACTIVE

  return state;
}

function _SDL_GetKeyboardState(numKeys) {
  if (numKeys) {
    HEAP32[numKeys >> 2] = 65536;
  }
  return SDL.keyboardState;
}

function _SDL_Init(initFlags) {
  SDL.startTime = Date.now();
  SDL.initFlags = initFlags;

  // capture all key events. we just keep down and up, but also capture press to prevent default actions
  if (!Module["doNotCaptureKeyboard"]) {
    document.addEventListener("keydown", SDL.receiveEvent);
    document.addEventListener("keyup", SDL.receiveEvent);
    document.addEventListener("keypress", SDL.receiveEvent);
    window.addEventListener("blur", SDL.receiveEvent);
    document.addEventListener("visibilitychange", SDL.receiveEvent);
  }

  if (initFlags & 0x200) {
    // SDL_INIT_JOYSTICK
    // Firefox will not give us Joystick data unless we register this NOP
    // callback.
    // https://bugzilla.mozilla.org/show_bug.cgi?id=936104
    addEventListener("gamepadconnected", function () {});
  }

  window.addEventListener("unload", SDL.receiveEvent);
  SDL.keyboardState = _malloc(0x10000); // Our SDL needs 512, but 64K is safe for older SDLs
  _memset(SDL.keyboardState, 0, 0x10000);
  // Initialize this structure carefully for closure
  SDL.DOMEventToSDLEvent["keydown"] = 0x300 /* SDL_KEYDOWN */;
  SDL.DOMEventToSDLEvent["keyup"] = 0x301 /* SDL_KEYUP */;
  SDL.DOMEventToSDLEvent["keypress"] = 0x303 /* SDL_TEXTINPUT */;
  SDL.DOMEventToSDLEvent["mousedown"] = 0x401 /* SDL_MOUSEBUTTONDOWN */;
  SDL.DOMEventToSDLEvent["mouseup"] = 0x402 /* SDL_MOUSEBUTTONUP */;
  SDL.DOMEventToSDLEvent["mousemove"] = 0x400 /* SDL_MOUSEMOTION */;
  SDL.DOMEventToSDLEvent["unload"] = 0x100 /* SDL_QUIT */;
  SDL.DOMEventToSDLEvent[
    "resize"
  ] = 0x7001 /* SDL_VIDEORESIZE/SDL_EVENT_COMPAT2 */;
  // These are not technically DOM events; the HTML gamepad API is poll-based.
  // However, we define them here, as the rest of the SDL code assumes that
  // all SDL events originate as DOM events.
  SDL.DOMEventToSDLEvent[
    "joystick_axis_motion"
  ] = 0x600 /* SDL_JOYAXISMOTION */;
  SDL.DOMEventToSDLEvent[
    "joystick_button_down"
  ] = 0x603 /* SDL_JOYBUTTONDOWN */;
  SDL.DOMEventToSDLEvent["joystick_button_up"] = 0x604 /* SDL_JOYBUTTONUP */;
  return 0; // success
}
function _SDL_WasInit() {
  if (SDL.startTime === null) {
    _SDL_Init();
  }
  return 1;
}

function _SDL_EnableUNICODE(on) {
  var ret = SDL.unicode || 0;
  SDL.unicode = on;
  return ret;
}

function _SDL_EnableKeyRepeat(delay, interval) {
  // TODO
}

function _SDL_JoystickClose(joystick) {
  delete SDL.lastJoystickState[joystick];
}

function _SDL_QuitSubSystem(flags) {
  Module.print("SDL_QuitSubSystem called (and ignored)");
}

function _SDL_GetError() {
  if (!SDL.errorMessage) {
    SDL.errorMessage = allocate(
      intArrayFromString("unknown SDL-emscripten error"),
      "i8",
      ALLOC_NORMAL
    );
  }
  return SDL.errorMessage;
}

function _SDL_NumJoysticks() {
  var count = 0;
  var gamepads = SDL.getGamepads();
  // The length is not the number of gamepads; check which ones are defined.
  for (var i = 0; i < gamepads.length; i++) {
    if (gamepads[i] !== undefined && gamepads[i] !== null) count++;
  }
  return count;
}

function _SDL_JoystickName(deviceIndex) {
  var gamepad = SDL.getGamepad(deviceIndex);
  if (gamepad) {
    var name = gamepad.id;
    if (SDL.joystickNamePool.hasOwnProperty(name)) {
      return SDL.joystickNamePool[name];
    }
    return (SDL.joystickNamePool[name] = allocate(
      intArrayFromString(name),
      "i8",
      ALLOC_NORMAL
    ));
  }
  return 0;
}

function _SDL_JoystickOpen(deviceIndex) {
  var gamepad = SDL.getGamepad(deviceIndex);
  if (gamepad) {
    // Use this as a unique 'pointer' for this joystick.
    var joystick = deviceIndex + 1;
    SDL.recordJoystickState(joystick, gamepad);
    return joystick;
  }
  return 0;
}

function _SDL_JoystickNumAxes(joystick) {
  var gamepad = SDL.getGamepad(joystick - 1);
  if (gamepad) {
    return gamepad.axes.length;
  }
  return 0;
}

function _SDL_JoystickNumHats(joystick) {
  return 0;
}

function _SDL_JoystickNumButtons(joystick) {
  var gamepad = SDL.getGamepad(joystick - 1);
  if (gamepad) {
    return gamepad.buttons.length;
  }
  return 0;
}

function _SDL_JoystickNumBalls(joystick) {
  return 0;
}

function _SDL_JoystickEventState(state) {
  if (state < 0) {
    // SDL_QUERY: Return current state.
    return SDL.joystickEventState;
  }
  return (SDL.joystickEventState = state);
}

function _SDL_ShowCursor(toggle) {
  switch (toggle) {
    case 0: // SDL_DISABLE
      if (Browser.isFullScreen) {
        // only try to lock the pointer when in full screen mode
        Module["canvas"].requestPointerLock();
        return 0;
      } else {
        // else return SDL_ENABLE to indicate the failure
        return 1;
      }
      break;
    case 1: // SDL_ENABLE
      Module["canvas"].exitPointerLock();
      return 1;
      break;
    case -1: // SDL_QUERY
      return !Browser.pointerLock;
      break;
    default:
      console.log(
        "SDL_ShowCursor called with unknown toggle parameter value: " +
          toggle +
          "."
      );
      break;
  }
}

function _SDL_WM_GrabInput() {}

function _SDL_PumpEvents() {
  SDL.events.forEach(function (event) {
    SDL.handleEvent(event);
  });
}

function _SDL_PeepEvents(events, numEvents, action, from, to) {
  switch (action) {
    case 2: {
      // SDL_GETEVENT
      assert(numEvents == 1);
      var got = 0;
      while (SDL.events.length > 0 && numEvents > 0) {
        var type = SDL.DOMEventToSDLEvent[SDL.events[0].type];
        if (type < from || type > to) break;
        SDL.makeCEvent(SDL.events.shift(), events);
        got++;
        numEvents--;
        // events += sizeof(..)
      }
      return got;
    }
    default:
      throw "SDL_PeepEvents does not yet support that action: " + action;
  }
}

function _SDL_WarpMouse(x, y) {
  return; // TODO: implement this in a non-buggy way. Need to keep relative mouse movements correct after calling this
  var rect = Module["canvas"].getBoundingClientRect();
  SDL.events.push({
    type: "mousemove",
    pageX: x + (window.scrollX + rect.left),
    pageY: y + (window.scrollY + rect.top),
  });
}

function _SDL_PollEvent(ptr) {
  if (SDL.initFlags & 0x200 && SDL.joystickEventState) {
    // If SDL_INIT_JOYSTICK was supplied AND the joystick system is configured
    // to automatically query for events, query for joystick events.
    SDL.queryJoysticks();
  }
  if (SDL.events.length === 0) return 0;
  if (ptr) {
    SDL.makeCEvent(SDL.events.shift(), ptr);
  }
  return 1;
}

function _SDL_GetKeyName(key) {
  if (!SDL.keyName) {
    SDL.keyName = allocate(
      intArrayFromString("unknown key"),
      "i8",
      ALLOC_NORMAL
    );
  }
  return SDL.keyName;
}

function _SDL_JoystickUpdate() {
  SDL.queryJoysticks();
}

function _SDL_JoystickGetBall(joystick, ball, dxptr, dyptr) {
  return -1;
}

function _SDL_JoystickGetButton(joystick, button) {
  var gamepad = SDL.getGamepad(joystick - 1);
  if (gamepad && gamepad.buttons.length > button) {
    return SDL.getJoystickButtonState(gamepad.buttons[button]) ? 1 : 0;
  }
  return 0;
}

function _SDL_JoystickGetHat(joystick, hat) {
  return 0;
}

function _SDL_JoystickGetAxis(joystick, axis) {
  var gamepad = SDL.getGamepad(joystick - 1);
  if (gamepad && gamepad.axes.length > axis) {
    return SDL.joystickAxisValueConversion(gamepad.axes[axis]);
  }
  return 0;
}

function _SDL_VideoDriverName(buf, max_size) {
  if (SDL.startTime === null) {
    return 0; //return NULL
  }
  //driverName - emscripten_sdl_driver
  var driverName = [
    101, 109, 115, 99, 114, 105, 112, 116, 101, 110, 95, 115, 100, 108, 95, 100,
    114, 105, 118, 101, 114,
  ];

  var index = 0;
  var size = driverName.length;

  if (max_size <= size) {
    size = max_size - 1; //-1 cause null-terminator
  }

  while (index < size) {
    var value = driverName[index];
    HEAP8[(buf + index) | 0] = value;
    index++;
  }

  HEAP8[(buf + index) | 0] = 0;
  return buf;
}
function _SDL_AudioDriverName(buf, max_size) {
  return _SDL_VideoDriverName(buf, max_size);
}

function _SDL_OpenAudio(desired, obtained) {
  try {
    SDL.audio = {
      freq: HEAPU32[desired >> 2],
      format: HEAPU16[(desired + 4) >> 1],
      channels: HEAPU8[(desired + 6) | 0],
      samples: HEAPU16[(desired + 8) >> 1], // Samples in the CB buffer per single sound channel.
      callback: HEAPU32[(desired + 16) >> 2],
      userdata: HEAPU32[(desired + 20) >> 2],
      paused: true,
      timer: null,
    };
    // The .silence field tells the constant sample value that corresponds to the safe un-skewed silence value for the wave data.
    if (SDL.audio.format == 0x0008 /*AUDIO_U8*/) {
      SDL.audio.silence = 128; // Audio ranges in [0, 255], so silence is half-way in between.
    } else if (SDL.audio.format == 0x8010 /*AUDIO_S16LSB*/) {
      SDL.audio.silence = 0; // Signed data in range [-32768, 32767], silence is 0.
    } else {
      throw "Invalid SDL audio format " + SDL.audio.format + "!";
    }
    // Round the desired audio frequency up to the next 'common' frequency value.
    // Web Audio API spec states 'An implementation must support sample-rates in at least the range 22050 to 96000.'
    if (SDL.audio.freq <= 0) {
      throw "Unsupported sound frequency " + SDL.audio.freq + "!";
    } else if (SDL.audio.freq <= 22050) {
      SDL.audio.freq = 22050; // Take it safe and clamp everything lower than 22kHz to that.
    } else if (SDL.audio.freq <= 32000) {
      SDL.audio.freq = 32000;
    } else if (SDL.audio.freq <= 44100) {
      SDL.audio.freq = 44100;
    } else if (SDL.audio.freq <= 48000) {
      SDL.audio.freq = 48000;
    } else if (SDL.audio.freq <= 96000) {
      SDL.audio.freq = 96000;
    } else {
      throw "Unsupported sound frequency " + SDL.audio.freq + "!";
    }
    if (SDL.audio.channels == 0) {
      SDL.audio.channels = 1; // In SDL both 0 and 1 mean mono.
    } else if (SDL.audio.channels < 0 || SDL.audio.channels > 32) {
      throw (
        "Unsupported number of audio channels for SDL audio: " +
        SDL.audio.channels +
        "!"
      );
    } else if (SDL.audio.channels != 1 && SDL.audio.channels != 2) {
      // Unsure what SDL audio spec supports. Web Audio spec supports up to 32 channels.
      console.log(
        "Warning: Using untested number of audio channels " + SDL.audio.channels
      );
    }
    if (
      SDL.audio.samples < 128 ||
      SDL.audio.samples > 524288 /* arbitrary cap */
    ) {
      throw "Unsupported audio callback buffer size " + SDL.audio.samples + "!";
    } else if ((SDL.audio.samples & (SDL.audio.samples - 1)) != 0) {
      throw (
        "Audio callback buffer size " +
        SDL.audio.samples +
        " must be a power-of-two!"
      );
    }

    var totalSamples = SDL.audio.samples * SDL.audio.channels;
    SDL.audio.bytesPerSample =
      SDL.audio.format == 0x0008 /*AUDIO_U8*/ ||
      SDL.audio.format == 0x8008 /*AUDIO_S8*/
        ? 1
        : 2;
    SDL.audio.bufferSize = totalSamples * SDL.audio.bytesPerSample;
    SDL.audio.buffer = _malloc(SDL.audio.bufferSize);

    // To account for jittering in frametimes, always have multiple audio buffers queued up for the audio output device.
    // This helps that we won't starve that easily if a frame takes long to complete.
    SDL.audio.numSimultaneouslyQueuedBuffers =
      Module["SDL_numSimultaneouslyQueuedBuffers"] || 3;

    // Create a callback function that will be routinely called to ask more audio data from the user application.
    SDL.audio.caller = function SDL_audio_caller() {
      if (!SDL.audio) {
        return;
      }
      Runtime.dynCall("viii", SDL.audio.callback, [
        SDL.audio.userdata,
        SDL.audio.buffer,
        SDL.audio.bufferSize,
      ]);
      SDL.audio.pushAudio(SDL.audio.buffer, SDL.audio.bufferSize);
    };

    SDL.audio.audioOutput = new Audio();
    // As a workaround use Mozilla Audio Data API on Firefox until it ships with Web Audio and sound quality issues are fixed.
    if (typeof SDL.audio.audioOutput["mozSetup"] === "function") {
      SDL.audio.audioOutput["mozSetup"](SDL.audio.channels, SDL.audio.freq); // use string attributes on mozOutput for closure compiler
      SDL.audio.mozBuffer = new Float32Array(totalSamples);
      SDL.audio.nextPlayTime = 0;
      SDL.audio.pushAudio = function SDL_audio_pushAudio(ptr, size) {
        --SDL.audio.numAudioTimersPending;
        var mozBuffer = SDL.audio.mozBuffer;
        // The input audio data for SDL audio is either 8-bit or 16-bit interleaved across channels, output for Mozilla Audio Data API
        // needs to be Float32 interleaved, so perform a sample conversion.
        if (SDL.audio.format == 0x8010 /*AUDIO_S16LSB*/) {
          for (var i = 0; i < totalSamples; i++) {
            mozBuffer[i] = HEAP16[(ptr + i * 2) >> 1] / 0x8000;
          }
        } else if (SDL.audio.format == 0x0008 /*AUDIO_U8*/) {
          for (var i = 0; i < totalSamples; i++) {
            var v = HEAP8[(ptr + i) | 0];
            mozBuffer[i] = (v >= 0 ? v - 128 : v + 128) / 128;
          }
        }
        // Submit the audio data to audio device.
        SDL.audio.audioOutput["mozWriteAudio"](mozBuffer);

        // Compute when the next audio callback should be called.
        var curtime = Date.now() / 1000.0 - SDL.audio.startTime;
        var playtime = Math.max(curtime, SDL.audio.nextPlayTime);
        var buffer_duration = SDL.audio.samples / SDL.audio.freq;
        SDL.audio.nextPlayTime = playtime + buffer_duration;
        // Schedule the next audio callback call to occur when the current one finishes.
        SDL.audio.timer = Browser.safeSetTimeout(
          SDL.audio.caller,
          1000.0 * (playtime - curtime)
        );
        ++SDL.audio.numAudioTimersPending;
        // And also schedule extra buffers _now_ if we have too few in queue.
        if (
          SDL.audio.numAudioTimersPending <
          SDL.audio.numSimultaneouslyQueuedBuffers
        ) {
          ++SDL.audio.numAudioTimersPending;
          Browser.safeSetTimeout(SDL.audio.caller, 1.0);
        }
      };
    } else {
      // Initialize Web Audio API if we haven't done so yet. Note: Only initialize Web Audio context ever once on the web page,
      // since initializing multiple times fails on Chrome saying 'audio resources have been exhausted'.
      if (!SDL.audioContext) {
        if (typeof AudioContext === "function") {
          SDL.audioContext = new AudioContext();
        } else if (typeof webkitAudioContext === "function") {
          SDL.audioContext = new webkitAudioContext();
        } else {
          throw "Web Audio API is not available!";
        }
      }
      SDL.audio.soundSource = new Array(); // Use an array of sound sources as a ring buffer to queue blocks of synthesized audio to Web Audio API.
      SDL.audio.nextSoundSource = 0; // Index of the next sound buffer in the ring buffer queue to play.
      SDL.audio.nextPlayTime = 0; // Time in seconds when the next audio block is due to start.

      // The pushAudio function with a new audio buffer whenever there is new audio data to schedule to be played back on the device.
      SDL.audio.pushAudio = function (ptr, sizeBytes) {
        try {
          --SDL.audio.numAudioTimersPending;
          if (SDL.audio.paused) return;

          var sizeSamples = sizeBytes / SDL.audio.bytesPerSample; // How many samples fit in the callback buffer?
          var sizeSamplesPerChannel = sizeSamples / SDL.audio.channels; // How many samples per a single channel fit in the cb buffer?
          if (sizeSamplesPerChannel != SDL.audio.samples) {
            throw "Received mismatching audio buffer size!";
          }
          // Allocate new sound buffer to be played.
          var source = SDL.audioContext["createBufferSource"]();
          if (SDL.audio.soundSource[SDL.audio.nextSoundSource]) {
            SDL.audio.soundSource[SDL.audio.nextSoundSource]["disconnect"](); // Explicitly disconnect old source, since we know it shouldn't be running anymore.
          }
          SDL.audio.soundSource[SDL.audio.nextSoundSource] = source;
          var soundBuffer = SDL.audioContext["createBuffer"](
            SDL.audio.channels,
            sizeSamplesPerChannel,
            SDL.audio.freq
          );
          SDL.audio.soundSource[SDL.audio.nextSoundSource]["connect"](
            SDL.audioContext["destination"]
          );

          SDL.fillWebAudioBufferFromHeap(
            ptr,
            sizeSamplesPerChannel,
            soundBuffer
          );
          // Workaround https://bugzilla.mozilla.org/show_bug.cgi?id=883675 by setting the buffer only after filling. The order is important here!
          source["buffer"] = soundBuffer;

          // Schedule the generated sample buffer to be played out at the correct time right after the previously scheduled
          // sample buffer has finished.
          var curtime = SDL.audioContext["currentTime"];
          var playtime = Math.max(curtime, SDL.audio.nextPlayTime);
          SDL.audio.soundSource[SDL.audio.nextSoundSource]["start"](playtime);
          var buffer_duration = sizeSamplesPerChannel / SDL.audio.freq;
          SDL.audio.nextPlayTime = playtime + buffer_duration;
          // Timer will be scheduled before the buffer completed playing.
          // Extra buffers are needed to avoid disturbing playing buffer.
          SDL.audio.nextSoundSource =
            (SDL.audio.nextSoundSource + 1) %
            (SDL.audio.numSimultaneouslyQueuedBuffers + 2);
          var secsUntilNextCall = playtime - curtime;

          // Queue the next audio frame push to be performed when the previously queued buffer has finished playing.
          var preemptBufferFeedMSecs = (1000 * buffer_duration) / 2.0;
          SDL.audio.timer = Browser.safeSetTimeout(
            SDL.audio.caller,
            Math.max(0.0, 1000.0 * secsUntilNextCall - preemptBufferFeedMSecs)
          );
          ++SDL.audio.numAudioTimersPending;

          // If we are risking starving, immediately queue extra buffers.
          if (
            SDL.audio.numAudioTimersPending <
            SDL.audio.numSimultaneouslyQueuedBuffers
          ) {
            ++SDL.audio.numAudioTimersPending;
            Browser.safeSetTimeout(SDL.audio.caller, 1.0);
          }
        } catch (e) {
          console.log(
            "Web Audio API error playing back audio: " + e.toString()
          );
        }
      };
    }

    if (obtained) {
      // Report back the initialized audio parameters.
      HEAP32[obtained >> 2] = SDL.audio.freq;
      HEAP16[(obtained + 4) >> 1] = SDL.audio.format;
      HEAP8[(obtained + 6) | 0] = SDL.audio.channels;
      HEAP8[(obtained + 7) | 0] = SDL.audio.silence;
      HEAP16[(obtained + 8) >> 1] = SDL.audio.samples;
      HEAP32[(obtained + 16) >> 2] = SDL.audio.callback;
      HEAP32[(obtained + 20) >> 2] = SDL.audio.userdata;
    }
    SDL.allocateChannels(32);
  } catch (e) {
    console.log(
      'Initializing SDL audio threw an exception: "' +
        e.toString() +
        '"! Continuing without audio.'
    );
    SDL.audio = null;
    SDL.allocateChannels(0);
    if (obtained) {
      HEAP32[obtained >> 2] = 0;
      HEAP16[(obtained + 4) >> 1] = 0;
      HEAP8[(obtained + 6) | 0] = 0;
      HEAP8[(obtained + 7) | 0] = 0;
      HEAP16[(obtained + 8) >> 1] = 0;
      HEAP32[(obtained + 16) >> 2] = 0;
      HEAP32[(obtained + 20) >> 2] = 0;
    }
  }
  if (!SDL.audio) {
    return -1;
  }
  return 0;
}

function _SDL_PauseAudio(pauseOn) {
  if (!SDL.audio) {
    return;
  }
  if (pauseOn) {
    if (SDL.audio.timer !== undefined) {
      clearTimeout(SDL.audio.timer);
      SDL.audio.numAudioTimersPending = 0;
      SDL.audio.timer = undefined;
    }
    if (SDL.audio.scriptProcessorNode !== undefined) {
      SDL.audio.scriptProcessorNode["disconnect"]();
      SDL.audio.scriptProcessorNode = undefined;
    }
  } else if (!SDL.audio.timer && !SDL.audio.scriptProcessorNode) {
    // If we are using the same sampling frequency as the native sampling rate of the Web Audio graph is using, we can feed our buffers via
    // Web Audio ScriptProcessorNode, which is a pull-mode API that calls back to our code to get audio data.
    if (SDL.audio.freq == SDL.audioContext["sampleRate"]) {
      var sizeSamplesPerChannel =
        SDL.audio.bufferSize / SDL.audio.bytesPerSample / SDL.audio.channels; // How many samples per a single channel fit in the cb buffer?
      SDL.audio.scriptProcessorNode = SDL.audioContext["createScriptProcessor"](
        sizeSamplesPerChannel,
        0,
        SDL.audio.channels
      );
      SDL.audio.scriptProcessorNode["onaudioprocess"] = function (e) {
        Runtime.dynCall("viii", SDL.audio.callback, [
          SDL.audio.userdata,
          SDL.audio.buffer,
          SDL.audio.bufferSize,
        ]);
        SDL.fillWebAudioBufferFromHeap(
          SDL.audio.buffer,
          sizeSamplesPerChannel,
          e["outputBuffer"]
        );
      };
      SDL.audio.scriptProcessorNode["connect"](SDL.audioContext["destination"]);
    } else {
      // If we are using a different sampling rate, must manually queue audio data to the graph via timers.
      // Start the audio playback timer callback loop.
      SDL.audio.numAudioTimersPending = 1;
      SDL.audio.timer = Browser.safeSetTimeout(SDL.audio.caller, 1);
      SDL.audio.startTime = Date.now() / 1000.0; // Only used for Mozilla Audio Data API. Not needed for Web Audio API.
    }
  }
  SDL.audio.paused = pauseOn;
}

function _SDL_CloseAudio() {
  if (SDL.audio) {
    try {
      for (var i = 0; i < SDL.audio.soundSource.length; ++i) {
        if (!typeof (SDL.audio.soundSource[i] === "undefined")) {
          SDL.audio.soundSource[i].stop(0);
        }
      }
    } catch (e) {}
    SDL.audio.soundSource = null;
    _SDL_PauseAudio(1);
    _free(SDL.audio.buffer);
    SDL.audio = null;
    SDL.allocateChannels(0);
  }
}

function _SDL_UnlockAudio() {}

function _SDL_LockAudio() {}

function _Sys_Cwd() {
  var cwd = allocate(intArrayFromString(FS.cwd()), "i8", ALLOC_STACK);
  return cwd;
}

function _Sys_PIDIsRunning(pid) {
  return 1;
}

function _Sys_PID() {
  return 0;
}

function _SDL_HasRDTSC() {
  return 0;
}

function _SDL_HasMMX() {
  return 0;
}

function _SDL_Has3DNow() {
  return 0;
}

function _SDL_HasSSE() {
  return 0;
}

function _SDL_HasSSE2() {
  return 0;
}

function _SDL_HasAltiVec() {
  return 0;
}

function _Sys_GetCurrentUser() {
  var stack = Runtime.stackSave();
  var ret = allocate(intArrayFromString("player"), "i8", ALLOC_STACK);
  Runtime.stackRestore(stack);
  return ret;
}

function _fputs(s, stream) {
  // int fputs(const char *restrict s, FILE *restrict stream);
  // http://pubs.opengroup.org/onlinepubs/000095399/functions/fputs.html
  var fd = _fileno(stream);
  return _write(fd, s, _strlen(s));
}

function _Sys_ErrorDialog(error) {
  error = Pointer_stringify(error);

  var handler = Module["exitHandler"];
  if (handler) {
    SYS.exited = true;
    handler(error);
    return;
  }

  var title = SYS.dialog.querySelector(".title");
  title.className = "title error";
  title.innerHTML = "Error";

  var description = SYS.dialog.querySelector(".description");
  description.innerHTML = error;

  SYS.dialog.style.display = "block";
}

var DLFCN = { error: null, errorMsg: null, loadedLibs: {}, loadedLibNames: {} };
function _dlclose(handle) {
  // int dlclose(void *handle);
  // http://pubs.opengroup.org/onlinepubs/009695399/functions/dlclose.html
  if (!DLFCN.loadedLibs[handle]) {
    DLFCN.errorMsg = "Tried to dlclose() unopened handle: " + handle;
    return 1;
  } else {
    var lib_record = DLFCN.loadedLibs[handle];
    if (--lib_record.refcount == 0) {
      if (lib_record.module.cleanups) {
        lib_record.module.cleanups.forEach(function (cleanup) {
          cleanup();
        });
      }
      delete DLFCN.loadedLibNames[lib_record.name];
      delete DLFCN.loadedLibs[handle];
    }
    return 0;
  }
}

function _dlopen(filename, flag) {
  // void *dlopen(const char *file, int mode);
  // http://pubs.opengroup.org/onlinepubs/009695399/functions/dlopen.html
  filename =
    filename === 0
      ? "__self__"
      : (ENV["LD_LIBRARY_PATH"] || "/") + Pointer_stringify(filename);

  abort("need to build with DLOPEN_SUPPORT=1 to get dlopen support in asm.js");

  if (DLFCN.loadedLibNames[filename]) {
    // Already loaded; increment ref count and return.
    var handle = DLFCN.loadedLibNames[filename];
    DLFCN.loadedLibs[handle].refcount++;
    return handle;
  }

  if (filename === "__self__") {
    var handle = -1;
    var lib_module = Module;
    var cached_functions = SYMBOL_TABLE;
  } else {
    var target = FS.findObject(filename);
    if (!target || target.isFolder || target.isDevice) {
      DLFCN.errorMsg = "Could not find dynamic lib: " + filename;
      return 0;
    } else {
      FS.forceLoadFile(target);
      var lib_data = intArrayToString(target.contents);
    }

    try {
      var lib_module = eval(lib_data)(DLFCN.functionTable.length, Module);
    } catch (e) {
      DLFCN.errorMsg = "Could not evaluate dynamic lib: " + filename;
      return 0;
    }

    // Not all browsers support Object.keys().
    var handle = 1;
    for (var key in DLFCN.loadedLibs) {
      if (DLFCN.loadedLibs.hasOwnProperty(key)) handle++;
    }

    // We don't care about RTLD_NOW and RTLD_LAZY.
    if (flag & 256) {
      // RTLD_GLOBAL
      for (var ident in lib_module) {
        if (lib_module.hasOwnProperty(ident)) {
          Module[ident] = lib_module[ident];
        }
      }
    }

    var cached_functions = {};
  }
  DLFCN.loadedLibs[handle] = {
    refcount: 1,
    name: filename,
    module: lib_module,
    cached_functions: cached_functions,
  };
  DLFCN.loadedLibNames[filename] = handle;

  return handle;
}

function _dlerror() {
  // char *dlerror(void);
  // http://pubs.opengroup.org/onlinepubs/009695399/functions/dlerror.html
  if (DLFCN.errorMsg === null) {
    return 0;
  } else {
    if (DLFCN.error) _free(DLFCN.error);
    var msgArr = intArrayFromString(DLFCN.errorMsg);
    DLFCN.error = allocate(msgArr, "i8", ALLOC_NORMAL);
    DLFCN.errorMsg = null;
    return DLFCN.error;
  }
}

function _dlsym(handle, symbol) {
  // void *dlsym(void *restrict handle, const char *restrict name);
  // http://pubs.opengroup.org/onlinepubs/009695399/functions/dlsym.html
  symbol = "_" + Pointer_stringify(symbol);

  if (!DLFCN.loadedLibs[handle]) {
    DLFCN.errorMsg = "Tried to dlsym() from an unopened handle: " + handle;
    return 0;
  } else {
    var lib = DLFCN.loadedLibs[handle];
    // self-dlopen means that lib.module is not a superset of
    // cached_functions, so check the latter first
    if (lib.cached_functions.hasOwnProperty(symbol)) {
      return lib.cached_functions[symbol];
    } else {
      if (!lib.module.hasOwnProperty(symbol)) {
        DLFCN.errorMsg =
          'Tried to lookup unknown symbol "' +
          symbol +
          '" in dynamic lib: ' +
          lib.name;
        return 0;
      } else {
        var result = lib.module[symbol];
        if (typeof result == "function") {
          result = lib.module.SYMBOL_TABLE[symbol];
          assert(result);
          lib.cached_functions = result;
        }
        return result;
      }
    }
  }
}

function _SDL_Linked_Version() {
  if (SDL.version === null) {
    SDL.version = _malloc(3);
    HEAP8[(SDL.version + 0) | 0] = 1;
    HEAP8[(SDL.version + 1) | 0] = 3;
    HEAP8[(SDL.version + 2) | 0] = 0;
  }
  return SDL.version;
}

function _Sys_PlatformInit() {
  // embed our css
  var style = document.createElement("style");
  style.setAttribute("type", "text/css");
  style.innerHTML = SYS.css;
  SYS.style = document.getElementsByTagName("head")[0].appendChild(style);

  // add dialog elements to viewport
  var dialog = document.createElement("div");
  dialog.id = "dialog";
  dialog.innerHTML = '<h4 class="title"></h4>' + '<p class="description"></p>';
  SYS.dialog = Module["viewport"].appendChild(dialog);

  // add loading elements to viewport
  var loading = document.createElement("div");
  loading.id = "loading";
  loading.innerHTML =
    '<div id="loading-progress">' +
    '	<div class="description"></div>' +
    '	<div class="bar-wrapper"><div class="bar">&nbsp;</div></div>' +
    "</div>";
  SYS.loading = Module["viewport"].appendChild(loading);

  // add eula frame to viewport
  var eula = document.createElement("div");
  eula.id = "eula-frame";
  eula.innerHTML =
    '<div id="eula-frame-inner">' +
    "<p>In order to continue, the official Quake3 demo will need to be installed into the browser's persistent storage.</p>" +
    '<p>Please read through the demo\'s EULA and click "I Agree" if you agree to it and would like to continue.</p>' +
    '<pre id="eula">' +
    SYSC.eula +
    "</pre>" +
    '<button id="agree" class="btn btn-success">I Agree</button>' +
    '<button id="dont-agree" class="btn btn-success">I Don\'t Agree</button>' +
    "</div>";
  SYS.eula = Module["viewport"].appendChild(eula);
}

function _Sys_Dirname(path) {
  path = Pointer_stringify(path);
  path = PATH.dirname(path);
  var dirname = allocate(intArrayFromString(path), "i8", ALLOC_STACK);
  return dirname;
}

function _emscripten_exit_with_live_runtime() {
  Module["noExitRuntime"] = true;
  throw "SimulateInfiniteLoop";
}

function _signal(sig, func) {
  // TODO
  return 0;
}

function _emscripten_set_main_loop(func, fps, simulateInfiniteLoop) {
  Module["noExitRuntime"] = true;

  Browser.mainLoop.runner = function Browser_mainLoop_runner() {
    if (ABORT) return;
    if (Browser.mainLoop.queue.length > 0) {
      var start = Date.now();
      var blocker = Browser.mainLoop.queue.shift();
      blocker.func(blocker.arg);
      if (Browser.mainLoop.remainingBlockers) {
        var remaining = Browser.mainLoop.remainingBlockers;
        var next = remaining % 1 == 0 ? remaining - 1 : Math.floor(remaining);
        if (blocker.counted) {
          Browser.mainLoop.remainingBlockers = next;
        } else {
          // not counted, but move the progress along a tiny bit
          next = next + 0.5; // do not steal all the next one's progress
          Browser.mainLoop.remainingBlockers = (8 * remaining + next) / 9;
        }
      }
      console.log(
        'main loop blocker "' +
          blocker.name +
          '" took ' +
          (Date.now() - start) +
          " ms"
      ); //, left: ' + Browser.mainLoop.remainingBlockers);
      Browser.mainLoop.updateStatus();
      setTimeout(Browser.mainLoop.runner, 0);
      return;
    }
    if (Browser.mainLoop.shouldPause) {
      // catch pauses from non-main loop sources
      Browser.mainLoop.paused = true;
      Browser.mainLoop.shouldPause = false;
      return;
    }

    // Signal GL rendering layer that processing of a new frame is about to start. This helps it optimize
    // VBO double-buffering and reduce GPU stalls.
    GL.newRenderingFrameStarted();

    if (Browser.mainLoop.method === "timeout" && Module.ctx) {
      Module.printErr(
        "Looks like you are rendering without using requestAnimationFrame for the main loop. You should use 0 for the frame rate in emscripten_set_main_loop in order to use requestAnimationFrame, as that can greatly improve your frame rates!"
      );
      Browser.mainLoop.method = ""; // just warn once per call to set main loop
    }

    if (Module["preMainLoop"]) {
      Module["preMainLoop"]();
    }

    try {
      Runtime.dynCall("v", func);
    } catch (e) {
      if (e instanceof ExitStatus) {
        return;
      } else {
        if (e && typeof e === "object" && e.stack)
          Module.printErr("exception thrown: " + [e, e.stack]);
        throw e;
      }
    }

    if (Module["postMainLoop"]) {
      Module["postMainLoop"]();
    }

    if (Browser.mainLoop.shouldPause) {
      // catch pauses from the main loop itself
      Browser.mainLoop.paused = true;
      Browser.mainLoop.shouldPause = false;
      return;
    }
    Browser.mainLoop.scheduler();
  };
  if (fps && fps > 0) {
    Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler() {
      setTimeout(Browser.mainLoop.runner, 1000 / fps); // doing this each time means that on exception, we stop
    };
    Browser.mainLoop.method = "timeout";
  } else {
    Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler() {
      Browser.requestAnimationFrame(Browser.mainLoop.runner);
    };
    Browser.mainLoop.method = "rAF";
  }
  Browser.mainLoop.scheduler();

  if (simulateInfiniteLoop) {
    throw "SimulateInfiniteLoop";
  }
}

function _SDL_Quit() {
  for (var i = 0; i < SDL.numChannels; ++i) {
    if (SDL.channels[i].audio) {
      SDL.channels[i].audio.pause();
    }
  }
  if (SDL.music.audio) {
    SDL.music.audio.pause();
  }
  Module.print("SDL_Quit called (and ignored)");
}

function _Sys_PlatformExit() {
  var handler = Module["exitHandler"];
  if (handler) {
    if (!SYS.exited) {
      handler();
    }
    return;
  }

  // we want to leave around an error dialog if one exists
  // SYS.style.remove();
  // SYS.style = null;

  // SYS.dialog.remove();
  // SYS.dialog = null;

  SYS.loading.remove();
  SYS.loading = null;

  SYS.eula.remove();
  SYS.eula = null;

  if (Module["canvas"]) {
    Module["canvas"].remove();
  }
}

function __exit(status) {
  // void _exit(int status);
  // http://pubs.opengroup.org/onlinepubs/000095399/functions/exit.html
  Module["exit"](status);
}
function _exit(status) {
  __exit(status);
}

var _exp = Math_exp;

var ctlz_i8 = allocate(
  [
    8, 7, 6, 6, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3,
    3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
    2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0,
  ],
  "i8",
  ALLOC_STATIC
);
Module["_llvm_ctlz_i32"] = _llvm_ctlz_i32;

var _log = Math_log;

var _floor = Math_floor;

function _exp2(x) {
  return Math.pow(2, x);
}

function _memchr(ptr, chr, num) {
  chr = unSign(chr);
  for (var i = 0; i < num; i++) {
    if (HEAP8[ptr] == chr) return ptr;
    ptr++;
  }
  return 0;
}

var GL = {
  counter: 1,
  lastError: 0,
  buffers: [],
  programs: [],
  framebuffers: [],
  renderbuffers: [],
  textures: [],
  uniforms: [],
  shaders: [],
  currArrayBuffer: 0,
  currElementArrayBuffer: 0,
  byteSizeByTypeRoot: 5120,
  byteSizeByType: [1, 1, 2, 2, 4, 4, 4, 2, 3, 4, 8],
  programInfos: {},
  stringCache: {},
  packAlignment: 4,
  unpackAlignment: 4,
  init: function () {
    GL.createLog2ceilLookup(GL.MAX_TEMP_BUFFER_SIZE);
    Browser.moduleContextCreatedCallbacks.push(GL.initExtensions);
  },
  recordError: function recordError(errorCode) {
    if (!GL.lastError) {
      GL.lastError = errorCode;
    }
  },
  getNewId: function (table) {
    var ret = GL.counter++;
    for (var i = table.length; i < ret; i++) {
      table[i] = null;
    }
    return ret;
  },
  MINI_TEMP_BUFFER_SIZE: 16,
  miniTempBuffer: null,
  miniTempBufferViews: [0],
  MAX_TEMP_BUFFER_SIZE: 2097152,
  tempVertexBuffers1: [],
  tempVertexBufferCounters1: [],
  tempVertexBuffers2: [],
  tempVertexBufferCounters2: [],
  numTempVertexBuffersPerSize: 64,
  tempIndexBuffers: [],
  tempQuadIndexBuffer: null,
  log2ceilLookup: null,
  createLog2ceilLookup: function (maxValue) {
    GL.log2ceilLookup = new Uint8Array(maxValue + 1);
    var log2 = 0;
    var pow2 = 1;
    GL.log2ceilLookup[0] = 0;
    for (var i = 1; i <= maxValue; ++i) {
      if (i > pow2) {
        pow2 <<= 1;
        ++log2;
      }
      GL.log2ceilLookup[i] = log2;
    }
  },
  generateTempBuffers: function (quads) {
    var largestIndex = GL.log2ceilLookup[GL.MAX_TEMP_BUFFER_SIZE];
    GL.tempVertexBufferCounters1.length = GL.tempVertexBufferCounters2.length =
      largestIndex + 1;
    GL.tempVertexBuffers1.length = GL.tempVertexBuffers2.length =
      largestIndex + 1;
    GL.tempIndexBuffers.length = largestIndex + 1;
    for (var i = 0; i <= largestIndex; ++i) {
      GL.tempIndexBuffers[i] = null; // Created on-demand
      GL.tempVertexBufferCounters1[i] = GL.tempVertexBufferCounters2[i] = 0;
      var ringbufferLength = GL.numTempVertexBuffersPerSize;
      GL.tempVertexBuffers1[i] = [];
      GL.tempVertexBuffers2[i] = [];
      var ringbuffer1 = GL.tempVertexBuffers1[i];
      var ringbuffer2 = GL.tempVertexBuffers2[i];
      ringbuffer1.length = ringbuffer2.length = ringbufferLength;
      for (var j = 0; j < ringbufferLength; ++j) {
        ringbuffer1[j] = ringbuffer2[j] = null; // Created on-demand
      }
    }

    if (quads) {
      // GL_QUAD indexes can be precalculated
      GL.tempQuadIndexBuffer = GLctx.createBuffer();
      GLctx.bindBuffer(GLctx.ELEMENT_ARRAY_BUFFER, GL.tempQuadIndexBuffer);
      var numIndexes = GL.MAX_TEMP_BUFFER_SIZE >> 1;
      var quadIndexes = new Uint16Array(numIndexes);
      var i = 0,
        v = 0;
      while (1) {
        quadIndexes[i++] = v;
        if (i >= numIndexes) break;
        quadIndexes[i++] = v + 1;
        if (i >= numIndexes) break;
        quadIndexes[i++] = v + 2;
        if (i >= numIndexes) break;
        quadIndexes[i++] = v;
        if (i >= numIndexes) break;
        quadIndexes[i++] = v + 2;
        if (i >= numIndexes) break;
        quadIndexes[i++] = v + 3;
        if (i >= numIndexes) break;
        v += 4;
      }
      GLctx.bufferData(
        GLctx.ELEMENT_ARRAY_BUFFER,
        quadIndexes,
        GLctx.STATIC_DRAW
      );
      GLctx.bindBuffer(GLctx.ELEMENT_ARRAY_BUFFER, null);
    }
  },
  getTempVertexBuffer: function getTempVertexBuffer(sizeBytes) {
    var idx = GL.log2ceilLookup[sizeBytes];
    var ringbuffer = GL.tempVertexBuffers1[idx];
    var nextFreeBufferIndex = GL.tempVertexBufferCounters1[idx];
    GL.tempVertexBufferCounters1[idx] =
      (GL.tempVertexBufferCounters1[idx] + 1) &
      (GL.numTempVertexBuffersPerSize - 1);
    var vbo = ringbuffer[nextFreeBufferIndex];
    if (vbo) {
      return vbo;
    }
    var prevVBO = GLctx.getParameter(GLctx.ARRAY_BUFFER_BINDING);
    ringbuffer[nextFreeBufferIndex] = GLctx.createBuffer();
    GLctx.bindBuffer(GLctx.ARRAY_BUFFER, ringbuffer[nextFreeBufferIndex]);
    GLctx.bufferData(GLctx.ARRAY_BUFFER, 1 << idx, GLctx.DYNAMIC_DRAW);
    GLctx.bindBuffer(GLctx.ARRAY_BUFFER, prevVBO);
    return ringbuffer[nextFreeBufferIndex];
  },
  getTempIndexBuffer: function getTempIndexBuffer(sizeBytes) {
    var idx = GL.log2ceilLookup[sizeBytes];
    var ibo = GL.tempIndexBuffers[idx];
    if (ibo) {
      return ibo;
    }
    var prevIBO = GLctx.getParameter(GLctx.ELEMENT_ARRAY_BUFFER_BINDING);
    GL.tempIndexBuffers[idx] = GLctx.createBuffer();
    GLctx.bindBuffer(GLctx.ELEMENT_ARRAY_BUFFER, GL.tempIndexBuffers[idx]);
    GLctx.bufferData(GLctx.ELEMENT_ARRAY_BUFFER, 1 << idx, GLctx.DYNAMIC_DRAW);
    GLctx.bindBuffer(GLctx.ELEMENT_ARRAY_BUFFER, prevIBO);
    return GL.tempIndexBuffers[idx];
  },
  newRenderingFrameStarted: function newRenderingFrameStarted() {
    var vb = GL.tempVertexBuffers1;
    GL.tempVertexBuffers1 = GL.tempVertexBuffers2;
    GL.tempVertexBuffers2 = vb;
    vb = GL.tempVertexBufferCounters1;
    GL.tempVertexBufferCounters1 = GL.tempVertexBufferCounters2;
    GL.tempVertexBufferCounters2 = vb;
    var largestIndex = GL.log2ceilLookup[GL.MAX_TEMP_BUFFER_SIZE];
    for (var i = 0; i <= largestIndex; ++i) {
      GL.tempVertexBufferCounters1[i] = 0;
    }
  },
  findToken: function (source, token) {
    function isIdentChar(ch) {
      if (ch >= 48 && ch <= 57)
        // 0-9
        return true;
      if (ch >= 65 && ch <= 90)
        // A-Z
        return true;
      if (ch >= 97 && ch <= 122)
        // a-z
        return true;
      return false;
    }
    var i = -1;
    do {
      i = source.indexOf(token, i + 1);
      if (i < 0) {
        break;
      }
      if (i > 0 && isIdentChar(source[i - 1])) {
        continue;
      }
      i += token.length;
      if (i < source.length - 1 && isIdentChar(source[i + 1])) {
        continue;
      }
      return true;
    } while (true);
    return false;
  },
  getSource: function (shader, count, string, length) {
    var source = "";
    for (var i = 0; i < count; ++i) {
      var frag;
      if (length) {
        var len = HEAP32[(length + i * 4) >> 2];
        if (len < 0) {
          frag = Pointer_stringify(HEAP32[(string + i * 4) >> 2]);
        } else {
          frag = Pointer_stringify(HEAP32[(string + i * 4) >> 2], len);
        }
      } else {
        frag = Pointer_stringify(HEAP32[(string + i * 4) >> 2]);
      }
      source += frag;
    }
    // Let's see if we need to enable the standard derivatives extension
    type = GLctx.getShaderParameter(
      GL.shaders[shader],
      0x8b4f /* GL_SHADER_TYPE */
    );
    if (type == 0x8b30 /* GL_FRAGMENT_SHADER */) {
      if (
        GL.findToken(source, "dFdx") ||
        GL.findToken(source, "dFdy") ||
        GL.findToken(source, "fwidth")
      ) {
        source = "#extension GL_OES_standard_derivatives : enable\n" + source;
        var extension = GLctx.getExtension("OES_standard_derivatives");
      }
    }
    return source;
  },
  computeImageSize: function (width, height, sizePerPixel, alignment) {
    function roundedToNextMultipleOf(x, y) {
      return Math.floor((x + y - 1) / y) * y;
    }
    var plainRowSize = width * sizePerPixel;
    var alignedRowSize = roundedToNextMultipleOf(plainRowSize, alignment);
    return height <= 0 ? 0 : (height - 1) * alignedRowSize + plainRowSize;
  },
  get: function (name_, p, type) {
    // Guard against user passing a null pointer.
    // Note that GLES2 spec does not say anything about how passing a null pointer should be treated.
    // Testing on desktop core GL 3, the application crashes on glGetIntegerv to a null pointer, but
    // better to report an error instead of doing anything random.
    if (!p) {
      GL.recordError(0x0501 /* GL_INVALID_VALUE */);
      return;
    }
    var ret = undefined;
    switch (
      name_ // Handle a few trivial GLES values
    ) {
      case 0x8dfa: // GL_SHADER_COMPILER
        ret = 1;
        break;
      case 0x8df8: // GL_SHADER_BINARY_FORMATS
        if (type !== "Integer") {
          GL.recordError(0x0500); // GL_INVALID_ENUM
        }
        return; // Do not write anything to the out pointer, since no binary formats are supported.
      case 0x8df9: // GL_NUM_SHADER_BINARY_FORMATS
        ret = 0;
        break;
      case 0x86a2: // GL_NUM_COMPRESSED_TEXTURE_FORMATS
        // WebGL doesn't have GL_NUM_COMPRESSED_TEXTURE_FORMATS (it's obsolete since GL_COMPRESSED_TEXTURE_FORMATS returns a JS array that can be queried for length),
        // so implement it ourselves to allow C++ GLES2 code get the length.
        var formats = GLctx.getParameter(
          0x86a3 /*GL_COMPRESSED_TEXTURE_FORMATS*/
        );
        ret = formats.length;
        break;
      case 0x8b9a: // GL_IMPLEMENTATION_COLOR_READ_TYPE
        ret = 0x1401; // GL_UNSIGNED_BYTE
        break;
      case 0x8b9b: // GL_IMPLEMENTATION_COLOR_READ_FORMAT
        ret = 0x1908; // GL_RGBA
        break;
    }

    if (ret === undefined) {
      var result = GLctx.getParameter(name_);
      switch (typeof result) {
        case "number":
          ret = result;
          break;
        case "boolean":
          ret = result ? 1 : 0;
          break;
        case "string":
          GL.recordError(0x0500); // GL_INVALID_ENUM
          return;
        case "object":
          if (result === null) {
            // null is a valid result for some (e.g., which buffer is bound - perhaps nothing is bound), but otherwise
            // can mean an invalid name_, which we need to report as an error
            switch (name_) {
              case 0x8894: // ARRAY_BUFFER_BINDING
              case 0x8b8d: // CURRENT_PROGRAM
              case 0x8895: // ELEMENT_ARRAY_BUFFER_BINDING
              case 0x8ca6: // FRAMEBUFFER_BINDING
              case 0x8ca7: // RENDERBUFFER_BINDING
              case 0x8069: // TEXTURE_BINDING_2D
              case 0x8514: {
                // TEXTURE_BINDING_CUBE_MAP
                ret = 0;
                break;
              }
              default: {
                GL.recordError(0x0500); // GL_INVALID_ENUM
                return;
              }
            }
          } else if (
            result instanceof Float32Array ||
            result instanceof Uint32Array ||
            result instanceof Int32Array ||
            result instanceof Array
          ) {
            for (var i = 0; i < result.length; ++i) {
              switch (type) {
                case "Integer":
                  HEAP32[(p + i * 4) >> 2] = result[i];
                  break;
                case "Float":
                  HEAPF32[(p + i * 4) >> 2] = result[i];
                  break;
                case "Boolean":
                  HEAP8[(p + i) | 0] = result[i] ? 1 : 0;
                  break;
                default:
                  throw "internal glGet error, bad type: " + type;
              }
            }
            return;
          } else if (
            result instanceof WebGLBuffer ||
            result instanceof WebGLProgram ||
            result instanceof WebGLFramebuffer ||
            result instanceof WebGLRenderbuffer ||
            result instanceof WebGLTexture
          ) {
            ret = result.name | 0;
          } else {
            GL.recordError(0x0500); // GL_INVALID_ENUM
            return;
          }
          break;
        default:
          GL.recordError(0x0500); // GL_INVALID_ENUM
          return;
      }
    }

    switch (type) {
      case "Integer":
        HEAP32[p >> 2] = ret;
        break;
      case "Float":
        HEAPF32[p >> 2] = ret;
        break;
      case "Boolean":
        HEAP8[p] = ret ? 1 : 0;
        break;
      default:
        throw "internal glGet error, bad type: " + type;
    }
  },
  getTexPixelData: function (
    type,
    format,
    width,
    height,
    pixels,
    internalFormat
  ) {
    var sizePerPixel;
    switch (type) {
      case 0x1401 /* GL_UNSIGNED_BYTE */:
        switch (format) {
          case 0x1906 /* GL_ALPHA */:
          case 0x1909 /* GL_LUMINANCE */:
            sizePerPixel = 1;
            break;
          case 0x1907 /* GL_RGB */:
            sizePerPixel = 3;
            break;
          case 0x1908 /* GL_RGBA */:
            sizePerPixel = 4;
            break;
          case 0x190a /* GL_LUMINANCE_ALPHA */:
            sizePerPixel = 2;
            break;
          default:
            throw "Invalid format (" + format + ")";
        }
        break;
      case 0x1403 /* GL_UNSIGNED_SHORT */:
        if (format == 0x1902 /* GL_DEPTH_COMPONENT */) {
          sizePerPixel = 2;
        } else {
          throw "Invalid format (" + format + ")";
        }
        break;
      case 0x1405 /* GL_UNSIGNED_INT */:
        if (format == 0x1902 /* GL_DEPTH_COMPONENT */) {
          sizePerPixel = 4;
        } else {
          throw "Invalid format (" + format + ")";
        }
        break;
      case 0x84fa /* UNSIGNED_INT_24_8_WEBGL */:
        sizePerPixel = 4;
        break;
      case 0x8363 /* GL_UNSIGNED_SHORT_5_6_5 */:
      case 0x8033 /* GL_UNSIGNED_SHORT_4_4_4_4 */:
      case 0x8034 /* GL_UNSIGNED_SHORT_5_5_5_1 */:
        sizePerPixel = 2;
        break;
      case 0x1406 /* GL_FLOAT */:
        switch (format) {
          case 0x1907 /* GL_RGB */:
            sizePerPixel = 3 * 4;
            break;
          case 0x1908 /* GL_RGBA */:
            sizePerPixel = 4 * 4;
            break;
          default:
            throw "Invalid format (" + format + ")";
        }
        internalFormat = GLctx.RGBA;
        break;
      default:
        throw "Invalid type (" + type + ")";
    }
    var bytes = GL.computeImageSize(
      width,
      height,
      sizePerPixel,
      GL.unpackAlignment
    );
    if (type == 0x1401 /* GL_UNSIGNED_BYTE */) {
      pixels = HEAPU8.subarray(pixels, pixels + bytes);
    } else if (type == 0x1406 /* GL_FLOAT */) {
      pixels = HEAPF32.subarray(pixels >> 2, (pixels + bytes) >> 2);
    } else if (
      type == 0x1405 /* GL_UNSIGNED_INT */ ||
      type == 0x84fa /* UNSIGNED_INT_24_8_WEBGL */
    ) {
      pixels = HEAPU32.subarray(pixels >> 2, (pixels + bytes) >> 2);
    } else {
      pixels = HEAPU16.subarray(pixels >> 1, (pixels + bytes) >> 1);
    }
    return {
      pixels: pixels,
      internalFormat: internalFormat,
    };
  },
  initExtensions: function () {
    if (GL.initExtensions.done) return;
    GL.initExtensions.done = true;

    if (!Module.useWebGL) return; // an app might link both gl and 2d backends

    GL.miniTempBuffer = new Float32Array(GL.MINI_TEMP_BUFFER_SIZE);
    for (var i = 0; i < GL.MINI_TEMP_BUFFER_SIZE; i++) {
      GL.miniTempBufferViews[i] = GL.miniTempBuffer.subarray(0, i + 1);
    }

    GL.maxVertexAttribs = GLctx.getParameter(GLctx.MAX_VERTEX_ATTRIBS);

    // Detect the presence of a few extensions manually, this GL interop layer itself will need to know if they exist.
    GL.compressionExt =
      GLctx.getExtension("WEBGL_compressed_texture_s3tc") ||
      GLctx.getExtension("MOZ_WEBGL_compressed_texture_s3tc") ||
      GLctx.getExtension("WEBKIT_WEBGL_compressed_texture_s3tc");

    GL.anisotropicExt =
      GLctx.getExtension("EXT_texture_filter_anisotropic") ||
      GLctx.getExtension("MOZ_EXT_texture_filter_anisotropic") ||
      GLctx.getExtension("WEBKIT_EXT_texture_filter_anisotropic");

    GL.floatExt = GLctx.getExtension("OES_texture_float");

    // Extension available from Firefox 26 and Google Chrome 30
    GL.instancedArraysExt = GLctx.getExtension("ANGLE_instanced_arrays");

    // These are the 'safe' feature-enabling extensions that don't add any performance impact related to e.g. debugging, and
    // should be enabled by default so that client GLES2/GL code will not need to go through extra hoops to get its stuff working.
    // As new extensions are ratified at http://www.khronos.org/registry/webgl/extensions/ , feel free to add your new extensions
    // here, as long as they don't produce a performance impact for users that might not be using those extensions.
    // E.g. debugging-related extensions should probably be off by default.
    var automaticallyEnabledExtensions = [
      "OES_texture_float",
      "OES_texture_half_float",
      "OES_standard_derivatives",
      "OES_vertex_array_object",
      "WEBGL_compressed_texture_s3tc",
      "WEBGL_depth_texture",
      "OES_element_index_uint",
      "EXT_texture_filter_anisotropic",
      "ANGLE_instanced_arrays",
      "OES_texture_float_linear",
      "OES_texture_half_float_linear",
      "WEBGL_compressed_texture_atc",
      "WEBGL_compressed_texture_pvrtc",
      "EXT_color_buffer_half_float",
      "WEBGL_color_buffer_float",
      "EXT_frag_depth",
      "EXT_sRGB",
      "WEBGL_draw_buffers",
      "WEBGL_shared_resources",
    ];

    function shouldEnableAutomatically(extension) {
      for (var i in automaticallyEnabledExtensions) {
        var include = automaticallyEnabledExtensions[i];
        if (ext.indexOf(include) != -1) {
          return true;
        }
      }
      return false;
    }

    var extensions = GLctx.getSupportedExtensions();
    for (var e in extensions) {
      var ext = extensions[e].replace("MOZ_", "").replace("WEBKIT_", "");
      if (automaticallyEnabledExtensions.indexOf(ext) != -1) {
        GLctx.getExtension(ext); // Calling .getExtension enables that extension permanently, no need to store the return value to be enabled.
      }
    }
  },
  populateUniformTable: function (program) {
    var p = GL.programs[program];
    GL.programInfos[program] = {
      uniforms: {},
      maxUniformLength: 0, // This is eagerly computed below, since we already enumerate all uniforms anyway.
      maxAttributeLength: -1, // This is lazily computed and cached, computed when/if first asked, "-1" meaning not computed yet.
    };

    var ptable = GL.programInfos[program];
    var utable = ptable.uniforms;
    // A program's uniform table maps the string name of an uniform to an integer location of that uniform.
    // The global GL.uniforms map maps integer locations to WebGLUniformLocations.
    var numUniforms = GLctx.getProgramParameter(p, GLctx.ACTIVE_UNIFORMS);
    for (var i = 0; i < numUniforms; ++i) {
      var u = GLctx.getActiveUniform(p, i);

      var name = u.name;
      ptable.maxUniformLength = Math.max(
        ptable.maxUniformLength,
        name.length + 1
      );

      // Strip off any trailing array specifier we might have got, e.g. "[0]".
      if (name.indexOf("]", name.length - 1) !== -1) {
        var ls = name.lastIndexOf("[");
        name = name.slice(0, ls);
      }

      // Optimize memory usage slightly: If we have an array of uniforms, e.g. 'vec3 colors[3];', then
      // only store the string 'colors' in utable, and 'colors[0]', 'colors[1]' and 'colors[2]' will be parsed as 'colors'+i.
      // Note that for the GL.uniforms table, we still need to fetch the all WebGLUniformLocations for all the indices.
      var loc = GLctx.getUniformLocation(p, name);
      var id = GL.getNewId(GL.uniforms);
      utable[name] = [u.size, id];
      GL.uniforms[id] = loc;

      for (var j = 1; j < u.size; ++j) {
        var n = name + "[" + j + "]";
        loc = GLctx.getUniformLocation(p, n);
        id = GL.getNewId(GL.uniforms);

        GL.uniforms[id] = loc;
      }
    }
  },
};
function _glBindTexture(target, texture) {
  GLctx.bindTexture(target, texture ? GL.textures[texture] : null);
}

function _glDisable(x0) {
  GLctx.disable(x0);
}

function _glEnable(x0) {
  GLctx.enable(x0);
}

function _glCullFace(x0) {
  GLctx.cullFace(x0);
}

function _glTexEnvf() {
  Runtime.warnOnce("glTexEnvf: TODO");
}

function _glDepthFunc(x0) {
  GLctx.depthFunc(x0);
}

function _glBlendFunc(x0, x1) {
  GLctx.blendFunc(x0, x1);
}

function _glDepthMask(x0) {
  GLctx.depthMask(x0);
}

function _glPolygonMode() {}

function _glFinish() {
  GLctx.finish();
}

function _glClearColor(x0, x1, x2, x3) {
  GLctx.clearColor(x0, x1, x2, x3);
}

function _glClear(x0) {
  GLctx.clear(x0);
}

function _glDepthRange(x0, x1) {
  GLctx.depthRange(x0, x1);
}

function _glViewport(x0, x1, x2, x3) {
  GLctx.viewport(x0, x1, x2, x3);
}

function _glScissor(x0, x1, x2, x3) {
  GLctx.scissor(x0, x1, x2, x3);
}

function _glTexImage2D(
  target,
  level,
  internalFormat,
  width,
  height,
  border,
  format,
  type,
  pixels
) {
  if (pixels) {
    var data = GL.getTexPixelData(
      type,
      format,
      width,
      height,
      pixels,
      internalFormat
    );
    pixels = data.pixels;
    internalFormat = data.internalFormat;
  } else {
    pixels = null;
  }
  GLctx.texImage2D(
    target,
    level,
    internalFormat,
    width,
    height,
    border,
    format,
    type,
    pixels
  );
}

function _glTexParameterf(x0, x1, x2) {
  GLctx.texParameterf(x0, x1, x2);
}

function _glTexSubImage2D(
  target,
  level,
  xoffset,
  yoffset,
  width,
  height,
  format,
  type,
  pixels
) {
  if (pixels) {
    var data = GL.getTexPixelData(type, format, width, height, pixels, -1);
    pixels = data.pixels;
  } else {
    pixels = null;
  }
  GLctx.texSubImage2D(
    target,
    level,
    xoffset,
    yoffset,
    width,
    height,
    format,
    type,
    pixels
  );
}

function _glColorMask(x0, x1, x2, x3) {
  GLctx.colorMask(x0, x1, x2, x3);
}

function _glCopyTexImage2D(x0, x1, x2, x3, x4, x5, x6, x7) {
  GLctx.copyTexImage2D(x0, x1, x2, x3, x4, x5, x6, x7);
}

var _tan = Math_tan;

function _glDrawBuffer() {
  throw "glDrawBuffer: TODO";
}

function _glReadPixels(x, y, width, height, format, type, pixels) {
  var sizePerPixel;
  switch (format) {
    case 0x1907 /* GL_RGB */:
      sizePerPixel = 3;
      break;
    case 0x1908 /* GL_RGBA */:
      sizePerPixel = 4;
      break;
    default:
      GL.recordError(0x0500 /*GL_INVALID_ENUM*/);
      return;
  }
  var totalSize = width * height * sizePerPixel;
  GLctx.readPixels(
    x,
    y,
    width,
    height,
    format,
    type,
    HEAPU8.subarray(pixels, pixels + totalSize)
  );
}

var _ceil = Math_ceil;

function _glStencilMask(x0) {
  GLctx.stencilMask(x0);
}

function _glClearStencil(x0) {
  GLctx.clearStencil(x0);
}

function _glStencilFunc(x0, x1, x2) {
  GLctx.stencilFunc(x0, x1, x2);
}

function _glStencilOp(x0, x1, x2) {
  GLctx.stencilOp(x0, x1, x2);
}

function _glGetError() {
  // First return any GL error generated by the emscripten library_gl.js interop layer.
  if (GL.lastError) {
    var error = GL.lastError;
    GL.lastError = 0 /*GL_NO_ERROR*/;
    return error;
  } else {
    // If there were none, return the GL error from the browser GL context.
    return GLctx.getError();
  }
}

function _SDL_GL_GetProcAddress(name_) {
  return _emscripten_GetProcAddress(name_);
}

function _glGetString(name_) {
  if (GL.stringCache[name_]) return GL.stringCache[name_];
  var ret;
  switch (name_) {
    case 0x1f00 /* GL_VENDOR */:
    case 0x1f01 /* GL_RENDERER */:
    case 0x1f02 /* GL_VERSION */:
      ret = allocate(
        intArrayFromString(GLctx.getParameter(name_)),
        "i8",
        ALLOC_NORMAL
      );
      break;
    case 0x1f03 /* GL_EXTENSIONS */:
      var exts = GLctx.getSupportedExtensions();
      var gl_exts = [];
      for (i in exts) {
        gl_exts.push(exts[i]);
        gl_exts.push("GL_" + exts[i]);
      }
      ret = allocate(intArrayFromString(gl_exts.join(" ")), "i8", ALLOC_NORMAL);
      break;
    case 0x8b8c /* GL_SHADING_LANGUAGE_VERSION */:
      ret = allocate(
        intArrayFromString("OpenGL ES GLSL 1.00 (WebGL)"),
        "i8",
        ALLOC_NORMAL
      );
      break;
    default:
      GL.recordError(0x0500 /*GL_INVALID_ENUM*/);
      return 0;
  }
  GL.stringCache[name_] = ret;
  return ret;
}

function _glGetIntegerv(name_, p) {
  return GL.get(name_, p, "Integer");
}

function _glReadBuffer() {
  throw "glReadBuffer: TODO";
}

function _glGenTextures(n, textures) {
  for (var i = 0; i < n; i++) {
    var id = GL.getNewId(GL.textures);
    var texture = GLctx.createTexture();
    texture.name = id;
    GL.textures[id] = texture;
    HEAP32[(textures + i * 4) >> 2] = id;
  }
}

function _glTexParameteri(x0, x1, x2) {
  GLctx.texParameteri(x0, x1, x2);
}

var _llvm_pow_f64 = Math_pow;

function _glDeleteTextures(n, textures) {
  for (var i = 0; i < n; i++) {
    var id = HEAP32[(textures + i * 4) >> 2];
    var texture = GL.textures[id];
    GLctx.deleteTexture(texture);
    texture.name = 0;
    GL.textures[id] = null;
  }
}

function _glTexParameterfv(target, pname, params) {
  var param = HEAPF32[params >> 2];
  GLctx.texParameterf(target, pname, param);
}

var _fabs = Math_abs;

function _glClearDepth(x0) {
  GLctx.clearDepth(x0);
}

function _glColor4f(r, g, b, a) {
  r = Math.max(Math.min(r, 1), 0);
  g = Math.max(Math.min(g, 1), 0);
  b = Math.max(Math.min(b, 1), 0);
  a = Math.max(Math.min(a, 1), 0);

  // TODO: make ub the default, not f, save a few mathops
  if (GLImmediate.mode >= 0) {
    var start = GLImmediate.vertexCounter << 2;
    GLImmediate.vertexDataU8[start + 0] = r * 255;
    GLImmediate.vertexDataU8[start + 1] = g * 255;
    GLImmediate.vertexDataU8[start + 2] = b * 255;
    GLImmediate.vertexDataU8[start + 3] = a * 255;
    GLImmediate.vertexCounter++;
    GLImmediate.addRendererComponent(GLImmediate.COLOR, 4, GLctx.UNSIGNED_BYTE);
  } else {
    GLImmediate.clientColor[0] = r;
    GLImmediate.clientColor[1] = g;
    GLImmediate.clientColor[2] = b;
    GLImmediate.clientColor[3] = a;
  }
}

function _glDrawElements(mode, count, type, indices) {
  GLctx.drawElements(mode, count, type, indices);
}

function _glPolygonOffset(x0, x1) {
  GLctx.polygonOffset(x0, x1);
}

function _glIsEnabled(x0) {
  return GLctx.isEnabled(x0);
}

function _glGetBooleanv(name_, p) {
  return GL.get(name_, p, "Boolean");
}

function _glCreateShader(shaderType) {
  var id = GL.getNewId(GL.shaders);
  GL.shaders[id] = GLctx.createShader(shaderType);
  return id;
}

function _glShaderSource(shader, count, string, length) {
  var source = GL.getSource(shader, count, string, length);
  GLctx.shaderSource(GL.shaders[shader], source);
}

function _glCompileShader(shader) {
  GLctx.compileShader(GL.shaders[shader]);
}

function _glAttachShader(program, shader) {
  GLctx.attachShader(GL.programs[program], GL.shaders[shader]);
}

function _glDetachShader(program, shader) {
  GLctx.detachShader(GL.programs[program], GL.shaders[shader]);
}

function _glUseProgram(program) {
  GLctx.useProgram(program ? GL.programs[program] : null);
}

function _glDeleteProgram(program) {
  var program = GL.programs[program];
  GLctx.deleteProgram(program);
  program.name = 0;
  GL.programs[program] = null;
  GL.programInfos[program] = null;
}

function _glBindAttribLocation(program, index, name) {
  name = Pointer_stringify(name);
  GLctx.bindAttribLocation(GL.programs[program], index, name);
}

function _glLinkProgram(program) {
  GLctx.linkProgram(GL.programs[program]);
  GL.programInfos[program] = null; // uniforms no longer keep the same names after linking
  GL.populateUniformTable(program);
}

function _glBindBuffer(target, buffer) {
  var bufferObj = buffer ? GL.buffers[buffer] : null;

  if (target == GLctx.ARRAY_BUFFER) {
    GLImmediate.lastArrayBuffer = GL.currArrayBuffer = buffer;
  } else if (target == GLctx.ELEMENT_ARRAY_BUFFER) {
    GL.currElementArrayBuffer = buffer;
  }

  GLctx.bindBuffer(target, bufferObj);
}

function _glGetFloatv(name_, p) {
  return GL.get(name_, p, "Float");
}

function _glHint(x0, x1) {
  GLctx.hint(x0, x1);
}

function _glEnableVertexAttribArray(index) {
  GLctx.enableVertexAttribArray(index);
}

function _glDisableVertexAttribArray(index) {
  GLctx.disableVertexAttribArray(index);
}

function _glVertexAttribPointer(index, size, type, normalized, stride, ptr) {
  GLctx.vertexAttribPointer(index, size, type, normalized, stride, ptr);
}

function _glActiveTexture(x0) {
  GLctx.activeTexture(x0);
}
var GLEmulation = {
  fogStart: 0,
  fogEnd: 1,
  fogDensity: 1,
  fogColor: null,
  fogMode: 2048,
  fogEnabled: false,
  vaos: [],
  currentVao: null,
  enabledVertexAttribArrays: {},
  hasRunInit: false,
  init: function () {
    // Do not activate immediate/emulation code (e.g. replace glDrawElements) when in FULL_ES2 mode.
    // We do not need full emulation, we instead emulate client-side arrays etc. in FULL_ES2 code in
    // a straightforward manner, and avoid not having a bound buffer be ambiguous between es2 emulation
    // code and legacy gl emulation code.

    if (GLEmulation.hasRunInit) {
      return;
    }
    GLEmulation.hasRunInit = true;

    GLEmulation.fogColor = new Float32Array(4);

    // Add some emulation workarounds
    Module.printErr(
      "WARNING: using emscripten GL emulation. This is a collection of limited workarounds, do not expect it to work."
    );
    Module.printErr(
      "WARNING: using emscripten GL emulation unsafe opts. If weirdness happens, try -s GL_UNSAFE_OPTS=0"
    );

    // XXX some of the capabilities we don't support may lead to incorrect rendering, if we do not emulate them in shaders
    var validCapabilities = {
      0x0b44: 1, // GL_CULL_FACE
      0x0be2: 1, // GL_BLEND
      0x0bd0: 1, // GL_DITHER,
      0x0b90: 1, // GL_STENCIL_TEST
      0x0b71: 1, // GL_DEPTH_TEST
      0x0c11: 1, // GL_SCISSOR_TEST
      0x8037: 1, // GL_POLYGON_OFFSET_FILL
      0x809e: 1, // GL_SAMPLE_ALPHA_TO_COVERAGE
      0x80a0: 1, // GL_SAMPLE_COVERAGE
    };

    var glEnable = _glEnable;
    _glEnable = _emscripten_glEnable = function _glEnable(cap) {
      // Clean up the renderer on any change to the rendering state. The optimization of
      // skipping renderer setup is aimed at the case of multiple glDraw* right after each other
      if (GLImmediate.lastRenderer) GLImmediate.lastRenderer.cleanup();
      if (cap == 0x0b60 /* GL_FOG */) {
        if (GLEmulation.fogEnabled != true) {
          GLImmediate.currentRenderer = null; // Fog parameter is part of the FFP shader state, we must re-lookup the renderer to use.
          GLEmulation.fogEnabled = true;
        }
        return;
      } else if (cap == 0x0de1 /* GL_TEXTURE_2D */) {
        // XXX not according to spec, and not in desktop GL, but works in some GLES1.x apparently, so support
        // it by forwarding to glEnableClientState
        /* Actually, let's not, for now. (This sounds exceedingly broken)
             * This is in gl_ps_workaround2.c.
            _glEnableClientState(cap);
            */
        return;
      } else if (!(cap in validCapabilities)) {
        return;
      }
      glEnable(cap);
    };

    var glDisable = _glDisable;
    _glDisable = _emscripten_glDisable = function _glDisable(cap) {
      if (GLImmediate.lastRenderer) GLImmediate.lastRenderer.cleanup();
      if (cap == 0x0b60 /* GL_FOG */) {
        if (GLEmulation.fogEnabled != false) {
          GLImmediate.currentRenderer = null; // Fog parameter is part of the FFP shader state, we must re-lookup the renderer to use.
          GLEmulation.fogEnabled = false;
        }
        return;
      } else if (cap == 0x0de1 /* GL_TEXTURE_2D */) {
        // XXX not according to spec, and not in desktop GL, but works in some GLES1.x apparently, so support
        // it by forwarding to glDisableClientState
        /* Actually, let's not, for now. (This sounds exceedingly broken)
             * This is in gl_ps_workaround2.c.
            _glDisableClientState(cap);
            */
        return;
      } else if (!(cap in validCapabilities)) {
        return;
      }
      glDisable(cap);
    };
    _glIsEnabled = _emscripten_glIsEnabled = function _glIsEnabled(cap) {
      if (cap == 0x0b60 /* GL_FOG */) {
        return GLEmulation.fogEnabled ? 1 : 0;
      } else if (!(cap in validCapabilities)) {
        return 0;
      }
      return GLctx.isEnabled(cap);
    };

    var glGetBooleanv = _glGetBooleanv;
    _glGetBooleanv = _emscripten_glGetBooleanv = function _glGetBooleanv(
      pname,
      p
    ) {
      var attrib = GLEmulation.getAttributeFromCapability(pname);
      if (attrib !== null) {
        var result = GLImmediate.enabledClientAttributes[attrib];
        HEAP8[p] = result === true ? 1 : 0;
        return;
      }
      glGetBooleanv(pname, p);
    };

    var glGetIntegerv = _glGetIntegerv;
    _glGetIntegerv = _emscripten_glGetIntegerv = function _glGetIntegerv(
      pname,
      params
    ) {
      switch (pname) {
        case 0x84e2:
          pname = GLctx.MAX_TEXTURE_IMAGE_UNITS /* fake it */;
          break; // GL_MAX_TEXTURE_UNITS
        case 0x8b4a: {
          // GL_MAX_VERTEX_UNIFORM_COMPONENTS_ARB
          var result = GLctx.getParameter(GLctx.MAX_VERTEX_UNIFORM_VECTORS);
          HEAP32[params >> 2] = result * 4; // GLES gives num of 4-element vectors, GL wants individual components, so multiply
          return;
        }
        case 0x8b49: {
          // GL_MAX_FRAGMENT_UNIFORM_COMPONENTS_ARB
          var result = GLctx.getParameter(GLctx.MAX_FRAGMENT_UNIFORM_VECTORS);
          HEAP32[params >> 2] = result * 4; // GLES gives num of 4-element vectors, GL wants individual components, so multiply
          return;
        }
        case 0x8b4b: {
          // GL_MAX_VARYING_FLOATS_ARB
          var result = GLctx.getParameter(GLctx.MAX_VARYING_VECTORS);
          HEAP32[params >> 2] = result * 4; // GLES gives num of 4-element vectors, GL wants individual components, so multiply
          return;
        }
        case 0x8871:
          pname = GLctx.MAX_COMBINED_TEXTURE_IMAGE_UNITS /* close enough */;
          break; // GL_MAX_TEXTURE_COORDS
        case 0x807a: {
          // GL_VERTEX_ARRAY_SIZE
          var attribute = GLImmediate.clientAttributes[GLImmediate.VERTEX];
          HEAP32[params >> 2] = attribute ? attribute.size : 0;
          return;
        }
        case 0x807b: {
          // GL_VERTEX_ARRAY_TYPE
          var attribute = GLImmediate.clientAttributes[GLImmediate.VERTEX];
          HEAP32[params >> 2] = attribute ? attribute.type : 0;
          return;
        }
        case 0x807c: {
          // GL_VERTEX_ARRAY_STRIDE
          var attribute = GLImmediate.clientAttributes[GLImmediate.VERTEX];
          HEAP32[params >> 2] = attribute ? attribute.stride : 0;
          return;
        }
        case 0x8081: {
          // GL_COLOR_ARRAY_SIZE
          var attribute = GLImmediate.clientAttributes[GLImmediate.COLOR];
          HEAP32[params >> 2] = attribute ? attribute.size : 0;
          return;
        }
        case 0x8082: {
          // GL_COLOR_ARRAY_TYPE
          var attribute = GLImmediate.clientAttributes[GLImmediate.COLOR];
          HEAP32[params >> 2] = attribute ? attribute.type : 0;
          return;
        }
        case 0x8083: {
          // GL_COLOR_ARRAY_STRIDE
          var attribute = GLImmediate.clientAttributes[GLImmediate.COLOR];
          HEAP32[params >> 2] = attribute ? attribute.stride : 0;
          return;
        }
        case 0x8088: {
          // GL_TEXTURE_COORD_ARRAY_SIZE
          var attribute =
            GLImmediate.clientAttributes[
              GLImmediate.TEXTURE0 + GLImmediate.clientActiveTexture
            ];
          HEAP32[params >> 2] = attribute ? attribute.size : 0;
          return;
        }
        case 0x8089: {
          // GL_TEXTURE_COORD_ARRAY_TYPE
          var attribute =
            GLImmediate.clientAttributes[
              GLImmediate.TEXTURE0 + GLImmediate.clientActiveTexture
            ];
          HEAP32[params >> 2] = attribute ? attribute.type : 0;
          return;
        }
        case 0x808a: {
          // GL_TEXTURE_COORD_ARRAY_STRIDE
          var attribute =
            GLImmediate.clientAttributes[
              GLImmediate.TEXTURE0 + GLImmediate.clientActiveTexture
            ];
          HEAP32[params >> 2] = attribute ? attribute.stride : 0;
          return;
        }
      }
      glGetIntegerv(pname, params);
    };

    var glGetString = _glGetString;
    _glGetString = _emscripten_glGetString = function _glGetString(name_) {
      if (GL.stringCache[name_]) return GL.stringCache[name_];
      switch (name_) {
        case 0x1f03 /* GL_EXTENSIONS */: // Add various extensions that we can support
          var ret = allocate(
            intArrayFromString(
              GLctx.getSupportedExtensions().join(" ") +
                " GL_EXT_texture_env_combine GL_ARB_texture_env_crossbar GL_ATI_texture_env_combine3 GL_NV_texture_env_combine4 GL_EXT_texture_env_dot3 GL_ARB_multitexture GL_ARB_vertex_buffer_object GL_EXT_framebuffer_object GL_ARB_vertex_program GL_ARB_fragment_program GL_ARB_shading_language_100 GL_ARB_shader_objects GL_ARB_vertex_shader GL_ARB_fragment_shader GL_ARB_texture_cube_map GL_EXT_draw_range_elements" +
                (GL.compressionExt
                  ? " GL_ARB_texture_compression GL_EXT_texture_compression_s3tc"
                  : "") +
                (GL.anisotropicExt ? " GL_EXT_texture_filter_anisotropic" : "")
            ),
            "i8",
            ALLOC_NORMAL
          );
          GL.stringCache[name_] = ret;
          return ret;
      }
      return glGetString(name_);
    };

    // Do some automatic rewriting to work around GLSL differences. Note that this must be done in
    // tandem with the rest of the program, by itself it cannot suffice.
    // Note that we need to remember shader types for this rewriting, saving sources makes it easier to debug.
    GL.shaderInfos = {};
    var glCreateShader = _glCreateShader;
    _glCreateShader = _emscripten_glCreateShader = function _glCreateShader(
      shaderType
    ) {
      var id = glCreateShader(shaderType);
      GL.shaderInfos[id] = {
        type: shaderType,
        ftransform: false,
      };
      return id;
    };

    function ensurePrecision(source) {
      if (!/precision +(low|medium|high)p +float *;/.test(source)) {
        source = "precision mediump float;\n" + source;
      }
      return source;
    }

    var glShaderSource = _glShaderSource;
    _glShaderSource = _emscripten_glShaderSource = function _glShaderSource(
      shader,
      count,
      string,
      length
    ) {
      var source = GL.getSource(shader, count, string, length);
      // XXX We add attributes and uniforms to shaders. The program can ask for the # of them, and see the
      // ones we generated, potentially confusing it? Perhaps we should hide them.
      if (GL.shaderInfos[shader].type == GLctx.VERTEX_SHADER) {
        // Replace ftransform() with explicit project/modelview transforms, and add position and matrix info.
        var has_pm = source.search(/u_projection/) >= 0;
        var has_mm = source.search(/u_modelView/) >= 0;
        var has_pv = source.search(/a_position/) >= 0;
        var need_pm = 0,
          need_mm = 0,
          need_pv = 0;
        var old = source;
        source = source.replace(
          /ftransform\(\)/g,
          "(u_projection * u_modelView * a_position)"
        );
        if (old != source) need_pm = need_mm = need_pv = 1;
        old = source;
        source = source.replace(/gl_ProjectionMatrix/g, "u_projection");
        if (old != source) need_pm = 1;
        old = source;
        source = source.replace(
          /gl_ModelViewMatrixTranspose\[2\]/g,
          "vec4(u_modelView[0][2], u_modelView[1][2], u_modelView[2][2], u_modelView[3][2])"
        ); // XXX extremely inefficient
        if (old != source) need_mm = 1;
        old = source;
        source = source.replace(/gl_ModelViewMatrix/g, "u_modelView");
        if (old != source) need_mm = 1;
        old = source;
        source = source.replace(/gl_Vertex/g, "a_position");
        if (old != source) need_pv = 1;
        old = source;
        source = source.replace(
          /gl_ModelViewProjectionMatrix/g,
          "(u_projection * u_modelView)"
        );
        if (old != source) need_pm = need_mm = 1;
        if (need_pv && !has_pv)
          source = "attribute vec4 a_position; \n" + source;
        if (need_mm && !has_mm)
          source = "uniform mat4 u_modelView; \n" + source;
        if (need_pm && !has_pm)
          source = "uniform mat4 u_projection; \n" + source;
        GL.shaderInfos[shader].ftransform = need_pm || need_mm || need_pv; // we will need to provide the fixed function stuff as attributes and uniforms
        for (var i = 0; i < GLImmediate.MAX_TEXTURES; i++) {
          // XXX To handle both regular texture mapping and cube mapping, we use vec4 for tex coordinates.
          var old = source;
          var need_vtc = source.search("v_texCoord" + i) == -1;
          source = source
            .replace(
              new RegExp("gl_TexCoord\\[" + i + "\\]", "g"),
              "v_texCoord" + i
            )
            .replace(new RegExp("gl_MultiTexCoord" + i, "g"), "a_texCoord" + i);
          if (source != old) {
            source = "attribute vec4 a_texCoord" + i + "; \n" + source;
            if (need_vtc) {
              source = "varying vec4 v_texCoord" + i + ";   \n" + source;
            }
          }

          old = source;
          source = source.replace(
            new RegExp("gl_TextureMatrix\\[" + i + "\\]", "g"),
            "u_textureMatrix" + i
          );
          if (source != old) {
            source = "uniform mat4 u_textureMatrix" + i + "; \n" + source;
          }
        }
        if (source.indexOf("gl_FrontColor") >= 0) {
          source =
            "varying vec4 v_color; \n" +
            source.replace(/gl_FrontColor/g, "v_color");
        }
        if (source.indexOf("gl_Color") >= 0) {
          source =
            "attribute vec4 a_color; \n" +
            source.replace(/gl_Color/g, "a_color");
        }
        if (source.indexOf("gl_Normal") >= 0) {
          source =
            "attribute vec3 a_normal; \n" +
            source.replace(/gl_Normal/g, "a_normal");
        }
        // fog
        if (source.indexOf("gl_FogFragCoord") >= 0) {
          source =
            "varying float v_fogFragCoord;   \n" +
            source.replace(/gl_FogFragCoord/g, "v_fogFragCoord");
        }
        source = ensurePrecision(source);
      } else {
        // Fragment shader
        for (var i = 0; i < GLImmediate.MAX_TEXTURES; i++) {
          var old = source;
          source = source.replace(
            new RegExp("gl_TexCoord\\[" + i + "\\]", "g"),
            "v_texCoord" + i
          );
          if (source != old) {
            source = "varying vec4 v_texCoord" + i + ";   \n" + source;
          }
        }
        if (source.indexOf("gl_Color") >= 0) {
          source =
            "varying vec4 v_color; \n" + source.replace(/gl_Color/g, "v_color");
        }
        if (source.indexOf("gl_Fog.color") >= 0) {
          source =
            "uniform vec4 u_fogColor;   \n" +
            source.replace(/gl_Fog.color/g, "u_fogColor");
        }
        if (source.indexOf("gl_Fog.end") >= 0) {
          source =
            "uniform float u_fogEnd;   \n" +
            source.replace(/gl_Fog.end/g, "u_fogEnd");
        }
        if (source.indexOf("gl_Fog.scale") >= 0) {
          source =
            "uniform float u_fogScale;   \n" +
            source.replace(/gl_Fog.scale/g, "u_fogScale");
        }
        if (source.indexOf("gl_Fog.density") >= 0) {
          source =
            "uniform float u_fogDensity;   \n" +
            source.replace(/gl_Fog.density/g, "u_fogDensity");
        }
        if (source.indexOf("gl_FogFragCoord") >= 0) {
          source =
            "varying float v_fogFragCoord;   \n" +
            source.replace(/gl_FogFragCoord/g, "v_fogFragCoord");
        }
        source = ensurePrecision(source);
      }
      GLctx.shaderSource(GL.shaders[shader], source);
    };

    var glCompileShader = _glCompileShader;
    _glCompileShader = _emscripten_glCompileShader = function _glCompileShader(
      shader
    ) {
      GLctx.compileShader(GL.shaders[shader]);
    };

    GL.programShaders = {};
    var glAttachShader = _glAttachShader;
    _glAttachShader = _emscripten_glAttachShader = function _glAttachShader(
      program,
      shader
    ) {
      if (!GL.programShaders[program]) GL.programShaders[program] = [];
      GL.programShaders[program].push(shader);
      glAttachShader(program, shader);
    };

    var glDetachShader = _glDetachShader;
    _glDetachShader = _emscripten_glDetachShader = function _glDetachShader(
      program,
      shader
    ) {
      var programShader = GL.programShaders[program];
      if (!programShader) {
        Module.printErr(
          "WARNING: _glDetachShader received invalid program: " + program
        );
        return;
      }
      var index = programShader.indexOf(shader);
      programShader.splice(index, 1);
      glDetachShader(program, shader);
    };

    var glUseProgram = _glUseProgram;
    _glUseProgram = _emscripten_glUseProgram = function _glUseProgram(program) {
      if (GL.currProgram != program) {
        GLImmediate.currentRenderer = null; // This changes the FFP emulation shader program, need to recompute that.
        GL.currProgram = program;
        GLImmediate.fixedFunctionProgram = 0;
        glUseProgram(program);
      }
    };

    var glDeleteProgram = _glDeleteProgram;
    _glDeleteProgram = _emscripten_glDeleteProgram = function _glDeleteProgram(
      program
    ) {
      glDeleteProgram(program);
      if (program == GL.currProgram) {
        GLImmediate.currentRenderer = null; // This changes the FFP emulation shader program, need to recompute that.
        GL.currProgram = 0;
      }
    };

    // If attribute 0 was not bound, bind it to 0 for WebGL performance reasons. Track if 0 is free for that.
    var zeroUsedPrograms = {};
    var glBindAttribLocation = _glBindAttribLocation;
    _glBindAttribLocation = _emscripten_glBindAttribLocation =
      function _glBindAttribLocation(program, index, name) {
        if (index == 0) zeroUsedPrograms[program] = true;
        glBindAttribLocation(program, index, name);
      };
    var glLinkProgram = _glLinkProgram;
    _glLinkProgram = _emscripten_glLinkProgram = function _glLinkProgram(
      program
    ) {
      if (!(program in zeroUsedPrograms)) {
        GLctx.bindAttribLocation(GL.programs[program], 0, "a_position");
      }
      glLinkProgram(program);
    };

    var glBindBuffer = _glBindBuffer;
    _glBindBuffer = _emscripten_glBindBuffer = function _glBindBuffer(
      target,
      buffer
    ) {
      glBindBuffer(target, buffer);
      if (target == GLctx.ARRAY_BUFFER) {
        if (GLEmulation.currentVao) {
          GLEmulation.currentVao.arrayBuffer = buffer;
        }
      } else if (target == GLctx.ELEMENT_ARRAY_BUFFER) {
        if (GLEmulation.currentVao)
          GLEmulation.currentVao.elementArrayBuffer = buffer;
      }
    };

    var glGetFloatv = _glGetFloatv;
    _glGetFloatv = _emscripten_glGetFloatv = function _glGetFloatv(
      pname,
      params
    ) {
      if (pname == 0x0ba6) {
        // GL_MODELVIEW_MATRIX
        HEAPF32.set(GLImmediate.matrix[0 /*m*/], params >> 2);
      } else if (pname == 0x0ba7) {
        // GL_PROJECTION_MATRIX
        HEAPF32.set(GLImmediate.matrix[1 /*p*/], params >> 2);
      } else if (pname == 0x0ba8) {
        // GL_TEXTURE_MATRIX
        HEAPF32.set(
          GLImmediate.matrix[2 /*t*/ + GLImmediate.clientActiveTexture],
          params >> 2
        );
      } else if (pname == 0x0b66) {
        // GL_FOG_COLOR
        HEAPF32.set(GLEmulation.fogColor, params >> 2);
      } else if (pname == 0x0b63) {
        // GL_FOG_START
        HEAPF32[params >> 2] = GLEmulation.fogStart;
      } else if (pname == 0x0b64) {
        // GL_FOG_END
        HEAPF32[params >> 2] = GLEmulation.fogEnd;
      } else if (pname == 0x0b62) {
        // GL_FOG_DENSITY
        HEAPF32[params >> 2] = GLEmulation.fogDensity;
      } else if (pname == 0x0b65) {
        // GL_FOG_MODE
        HEAPF32[params >> 2] = GLEmulation.fogMode;
      } else {
        glGetFloatv(pname, params);
      }
    };

    var glHint = _glHint;
    _glHint = _emscripten_glHint = function _glHint(target, mode) {
      if (target == 0x84ef) {
        // GL_TEXTURE_COMPRESSION_HINT
        return;
      }
      glHint(target, mode);
    };

    var glEnableVertexAttribArray = _glEnableVertexAttribArray;
    _glEnableVertexAttribArray = _emscripten_glEnableVertexAttribArray =
      function _glEnableVertexAttribArray(index) {
        glEnableVertexAttribArray(index);
        GLEmulation.enabledVertexAttribArrays[index] = 1;
        if (GLEmulation.currentVao)
          GLEmulation.currentVao.enabledVertexAttribArrays[index] = 1;
      };

    var glDisableVertexAttribArray = _glDisableVertexAttribArray;
    _glDisableVertexAttribArray = _emscripten_glDisableVertexAttribArray =
      function _glDisableVertexAttribArray(index) {
        glDisableVertexAttribArray(index);
        delete GLEmulation.enabledVertexAttribArrays[index];
        if (GLEmulation.currentVao)
          delete GLEmulation.currentVao.enabledVertexAttribArrays[index];
      };

    var glVertexAttribPointer = _glVertexAttribPointer;
    _glVertexAttribPointer = _emscripten_glVertexAttribPointer =
      function _glVertexAttribPointer(
        index,
        size,
        type,
        normalized,
        stride,
        pointer
      ) {
        glVertexAttribPointer(index, size, type, normalized, stride, pointer);
        if (GLEmulation.currentVao) {
          // TODO: avoid object creation here? likely not hot though
          GLEmulation.currentVao.vertexAttribPointers[index] = [
            index,
            size,
            type,
            normalized,
            stride,
            pointer,
          ];
        }
      };
  },
  getAttributeFromCapability: function (cap) {
    var attrib = null;
    switch (cap) {
      case 0x0de1: // GL_TEXTURE_2D - XXX not according to spec, and not in desktop GL, but works in some GLES1.x apparently, so support it
      // Fall through:
      case 0x8078: // GL_TEXTURE_COORD_ARRAY
        attrib = GLImmediate.TEXTURE0 + GLImmediate.clientActiveTexture;
        break;
      case 0x8074: // GL_VERTEX_ARRAY
        attrib = GLImmediate.VERTEX;
        break;
      case 0x8075: // GL_NORMAL_ARRAY
        attrib = GLImmediate.NORMAL;
        break;
      case 0x8076: // GL_COLOR_ARRAY
        attrib = GLImmediate.COLOR;
        break;
    }
    return attrib;
  },
};
var GLImmediate = {
  MapTreeLib: null,
  spawnMapTreeLib: function () {
    /* A naive implementation of a map backed by an array, and accessed by
     * naive iteration along the array. (hashmap with only one bucket)
     */
    function CNaiveListMap() {
      var list = [];

      this.insert = function CNaiveListMap_insert(key, val) {
        if (this.contains(key | 0)) return false;
        list.push([key, val]);
        return true;
      };

      var __contains_i;
      this.contains = function CNaiveListMap_contains(key) {
        for (__contains_i = 0; __contains_i < list.length; ++__contains_i) {
          if (list[__contains_i][0] === key) return true;
        }
        return false;
      };

      var __get_i;
      this.get = function CNaiveListMap_get(key) {
        for (__get_i = 0; __get_i < list.length; ++__get_i) {
          if (list[__get_i][0] === key) return list[__get_i][1];
        }
        return undefined;
      };
    }

    /* A tree of map nodes.
          Uses `KeyView`s to allow descending the tree without garbage.
          Example: {
            // Create our map object.
            var map = new ObjTreeMap();
  
            // Grab the static keyView for the map.
            var keyView = map.GetStaticKeyView();
  
            // Let's make a map for:
            // root: <undefined>
            //   1: <undefined>
            //     2: <undefined>
            //       5: "Three, sir!"
            //       3: "Three!"
  
            // Note how we can chain together `Reset` and `Next` to
            // easily descend based on multiple key fragments.
            keyView.Reset().Next(1).Next(2).Next(5).Set("Three, sir!");
            keyView.Reset().Next(1).Next(2).Next(3).Set("Three!");
          }
        */
    function CMapTree() {
      function CNLNode() {
        var map = new CNaiveListMap();

        this.child = function CNLNode_child(keyFrag) {
          if (!map.contains(keyFrag | 0)) {
            map.insert(keyFrag | 0, new CNLNode());
          }
          return map.get(keyFrag | 0);
        };

        this.value = undefined;
        this.get = function CNLNode_get() {
          return this.value;
        };

        this.set = function CNLNode_set(val) {
          this.value = val;
        };
      }

      function CKeyView(root) {
        var cur;

        this.reset = function CKeyView_reset() {
          cur = root;
          return this;
        };
        this.reset();

        this.next = function CKeyView_next(keyFrag) {
          cur = cur.child(keyFrag);
          return this;
        };

        this.get = function CKeyView_get() {
          return cur.get();
        };

        this.set = function CKeyView_set(val) {
          cur.set(val);
        };
      }

      var root;
      var staticKeyView;

      this.createKeyView = function CNLNode_createKeyView() {
        return new CKeyView(root);
      };

      this.clear = function CNLNode_clear() {
        root = new CNLNode();
        staticKeyView = this.createKeyView();
      };
      this.clear();

      this.getStaticKeyView = function CNLNode_getStaticKeyView() {
        staticKeyView.reset();
        return staticKeyView;
      };
    }

    // Exports:
    return {
      create: function () {
        return new CMapTree();
      },
    };
  },
  TexEnvJIT: null,
  spawnTexEnvJIT: function () {
    // GL defs:
    var GL_TEXTURE0 = 0x84c0;
    var GL_TEXTURE_1D = 0x0de0;
    var GL_TEXTURE_2D = 0x0de1;
    var GL_TEXTURE_3D = 0x806f;
    var GL_TEXTURE_CUBE_MAP = 0x8513;
    var GL_TEXTURE_ENV = 0x2300;
    var GL_TEXTURE_ENV_MODE = 0x2200;
    var GL_TEXTURE_ENV_COLOR = 0x2201;
    var GL_TEXTURE_CUBE_MAP_POSITIVE_X = 0x8515;
    var GL_TEXTURE_CUBE_MAP_NEGATIVE_X = 0x8516;
    var GL_TEXTURE_CUBE_MAP_POSITIVE_Y = 0x8517;
    var GL_TEXTURE_CUBE_MAP_NEGATIVE_Y = 0x8518;
    var GL_TEXTURE_CUBE_MAP_POSITIVE_Z = 0x8519;
    var GL_TEXTURE_CUBE_MAP_NEGATIVE_Z = 0x851a;

    var GL_SRC0_RGB = 0x8580;
    var GL_SRC1_RGB = 0x8581;
    var GL_SRC2_RGB = 0x8582;

    var GL_SRC0_ALPHA = 0x8588;
    var GL_SRC1_ALPHA = 0x8589;
    var GL_SRC2_ALPHA = 0x858a;

    var GL_OPERAND0_RGB = 0x8590;
    var GL_OPERAND1_RGB = 0x8591;
    var GL_OPERAND2_RGB = 0x8592;

    var GL_OPERAND0_ALPHA = 0x8598;
    var GL_OPERAND1_ALPHA = 0x8599;
    var GL_OPERAND2_ALPHA = 0x859a;

    var GL_COMBINE_RGB = 0x8571;
    var GL_COMBINE_ALPHA = 0x8572;

    var GL_RGB_SCALE = 0x8573;
    var GL_ALPHA_SCALE = 0x0d1c;

    // env.mode
    var GL_ADD = 0x0104;
    var GL_BLEND = 0x0be2;
    var GL_REPLACE = 0x1e01;
    var GL_MODULATE = 0x2100;
    var GL_DECAL = 0x2101;
    var GL_COMBINE = 0x8570;

    // env.color/alphaCombiner
    //var GL_ADD         = 0x0104;
    //var GL_REPLACE     = 0x1E01;
    //var GL_MODULATE    = 0x2100;
    var GL_SUBTRACT = 0x84e7;
    var GL_INTERPOLATE = 0x8575;

    // env.color/alphaSrc
    var GL_TEXTURE = 0x1702;
    var GL_CONSTANT = 0x8576;
    var GL_PRIMARY_COLOR = 0x8577;
    var GL_PREVIOUS = 0x8578;

    // env.color/alphaOp
    var GL_SRC_COLOR = 0x0300;
    var GL_ONE_MINUS_SRC_COLOR = 0x0301;
    var GL_SRC_ALPHA = 0x0302;
    var GL_ONE_MINUS_SRC_ALPHA = 0x0303;

    var GL_RGB = 0x1907;
    var GL_RGBA = 0x1908;

    // Our defs:
    var TEXENVJIT_NAMESPACE_PREFIX = "tej_";
    // Not actually constant, as they can be changed between JIT passes:
    var TEX_UNIT_UNIFORM_PREFIX = "uTexUnit";
    var TEX_COORD_VARYING_PREFIX = "vTexCoord";
    var PRIM_COLOR_VARYING = "vPrimColor";
    var TEX_MATRIX_UNIFORM_PREFIX = "uTexMatrix";

    // Static vars:
    var s_texUnits = null; //[];
    var s_activeTexture = 0;

    var s_requiredTexUnitsForPass = [];

    // Static funcs:
    function abort(info) {
      assert(false, "[TexEnvJIT] ABORT: " + info);
    }

    function abort_noSupport(info) {
      abort("No support: " + info);
    }

    function abort_sanity(info) {
      abort("Sanity failure: " + info);
    }

    function genTexUnitSampleExpr(texUnitID) {
      var texUnit = s_texUnits[texUnitID];
      var texType = texUnit.getTexType();

      var func = null;
      switch (texType) {
        case GL_TEXTURE_1D:
          func = "texture2D";
          break;
        case GL_TEXTURE_2D:
          func = "texture2D";
          break;
        case GL_TEXTURE_3D:
          return abort_noSupport("No support for 3D textures.");
        case GL_TEXTURE_CUBE_MAP:
          func = "textureCube";
          break;
        default:
          return abort_sanity("Unknown texType: 0x" + texType.toString(16));
      }

      var texCoordExpr = TEX_COORD_VARYING_PREFIX + texUnitID;
      if (TEX_MATRIX_UNIFORM_PREFIX != null) {
        texCoordExpr =
          "(" +
          TEX_MATRIX_UNIFORM_PREFIX +
          texUnitID +
          " * " +
          texCoordExpr +
          ")";
      }
      return (
        func +
        "(" +
        TEX_UNIT_UNIFORM_PREFIX +
        texUnitID +
        ", " +
        texCoordExpr +
        ".xy)"
      );
    }

    function getTypeFromCombineOp(op) {
      switch (op) {
        case GL_SRC_COLOR:
        case GL_ONE_MINUS_SRC_COLOR:
          return "vec3";
        case GL_SRC_ALPHA:
        case GL_ONE_MINUS_SRC_ALPHA:
          return "float";
      }

      return abort_noSupport("Unsupported combiner op: 0x" + op.toString(16));
    }

    function getCurTexUnit() {
      return s_texUnits[s_activeTexture];
    }

    function genCombinerSourceExpr(
      texUnitID,
      constantExpr,
      previousVar,
      src,
      op
    ) {
      var srcExpr = null;
      switch (src) {
        case GL_TEXTURE:
          srcExpr = genTexUnitSampleExpr(texUnitID);
          break;
        case GL_CONSTANT:
          srcExpr = constantExpr;
          break;
        case GL_PRIMARY_COLOR:
          srcExpr = PRIM_COLOR_VARYING;
          break;
        case GL_PREVIOUS:
          srcExpr = previousVar;
          break;
        default:
          return abort_noSupport(
            "Unsupported combiner src: 0x" + src.toString(16)
          );
      }

      var expr = null;
      switch (op) {
        case GL_SRC_COLOR:
          expr = srcExpr + ".rgb";
          break;
        case GL_ONE_MINUS_SRC_COLOR:
          expr = "(vec3(1.0) - " + srcExpr + ".rgb)";
          break;
        case GL_SRC_ALPHA:
          expr = srcExpr + ".a";
          break;
        case GL_ONE_MINUS_SRC_ALPHA:
          expr = "(1.0 - " + srcExpr + ".a)";
          break;
        default:
          return abort_noSupport(
            "Unsupported combiner op: 0x" + op.toString(16)
          );
      }

      return expr;
    }

    function valToFloatLiteral(val) {
      if (val == Math.round(val)) return val + ".0";
      return val;
    }

    // Classes:
    function CTexEnv() {
      this.mode = GL_MODULATE;
      this.colorCombiner = GL_MODULATE;
      this.alphaCombiner = GL_MODULATE;
      this.colorScale = 1;
      this.alphaScale = 1;
      this.envColor = [0, 0, 0, 0];

      this.colorSrc = [GL_TEXTURE, GL_PREVIOUS, GL_CONSTANT];
      this.alphaSrc = [GL_TEXTURE, GL_PREVIOUS, GL_CONSTANT];
      this.colorOp = [GL_SRC_COLOR, GL_SRC_COLOR, GL_SRC_ALPHA];
      this.alphaOp = [GL_SRC_ALPHA, GL_SRC_ALPHA, GL_SRC_ALPHA];

      // Map GLenums to small values to efficiently pack the enums to bits for tighter access.
      this.traverseKey = {
        // mode
        0x1e01 /* GL_REPLACE */: 0,
        0x2100 /* GL_MODULATE */: 1,
        0x0104 /* GL_ADD */: 2,
        0x0be2 /* GL_BLEND */: 3,
        0x2101 /* GL_DECAL */: 4,
        0x8570 /* GL_COMBINE */: 5,

        // additional color and alpha combiners
        0x84e7 /* GL_SUBTRACT */: 3,
        0x8575 /* GL_INTERPOLATE */: 4,

        // color and alpha src
        0x1702 /* GL_TEXTURE */: 0,
        0x8576 /* GL_CONSTANT */: 1,
        0x8577 /* GL_PRIMARY_COLOR */: 2,
        0x8578 /* GL_PREVIOUS */: 3,

        // color and alpha op
        0x0300 /* GL_SRC_COLOR */: 0,
        0x0301 /* GL_ONE_MINUS_SRC_COLOR */: 1,
        0x0302 /* GL_SRC_ALPHA */: 2,
        0x0300 /* GL_ONE_MINUS_SRC_ALPHA */: 3,
      };

      // The tuple (key0,key1,key2) uniquely identifies the state of the variables in CTexEnv.
      // -1 on key0 denotes 'the whole cached key is dirty'
      this.key0 = -1;
      this.key1 = 0;
      this.key2 = 0;

      this.computeKey0 = function () {
        var k = this.traverseKey;
        var key = k[this.mode] * 1638400; // 6 distinct values.
        key += k[this.colorCombiner] * 327680; // 5 distinct values.
        key += k[this.alphaCombiner] * 65536; // 5 distinct values.
        // The above three fields have 6*5*5=150 distinct values -> 8 bits.
        key += (this.colorScale - 1) * 16384; // 10 bits used.
        key += (this.alphaScale - 1) * 4096; // 12 bits used.
        key += k[this.colorSrc[0]] * 1024; // 14
        key += k[this.colorSrc[1]] * 256; // 16
        key += k[this.colorSrc[2]] * 64; // 18
        key += k[this.alphaSrc[0]] * 16; // 20
        key += k[this.alphaSrc[1]] * 4; // 22
        key += k[this.alphaSrc[2]]; // 24 bits used total.
        return key;
      };
      this.computeKey1 = function () {
        var k = this.traverseKey;
        key = k[this.colorOp[0]] * 4096;
        key += k[this.colorOp[1]] * 1024;
        key += k[this.colorOp[2]] * 256;
        key += k[this.alphaOp[0]] * 16;
        key += k[this.alphaOp[1]] * 4;
        key += k[this.alphaOp[2]];
        return key;
      };
      // TODO: remove this. The color should not be part of the key!
      this.computeKey2 = function () {
        return (
          this.envColor[0] * 16777216 +
          this.envColor[1] * 65536 +
          this.envColor[2] * 256 +
          1 +
          this.envColor[3]
        );
      };
      this.recomputeKey = function () {
        this.key0 = this.computeKey0();
        this.key1 = this.computeKey1();
        this.key2 = this.computeKey2();
      };
      this.invalidateKey = function () {
        this.key0 = -1; // The key of this texture unit must be recomputed when rendering the next time.
        GLImmediate.currentRenderer = null; // The currently used renderer must be re-evaluated at next render.
      };
    }

    function CTexUnit() {
      this.env = new CTexEnv();
      this.enabled_tex1D = false;
      this.enabled_tex2D = false;
      this.enabled_tex3D = false;
      this.enabled_texCube = false;
      this.texTypesEnabled = 0; // A bitfield combination of the four flags above, used for fast access to operations.

      this.traverseState = function CTexUnit_traverseState(keyView) {
        if (this.texTypesEnabled) {
          if (this.env.key0 == -1) {
            this.env.recomputeKey();
          }
          keyView.next(this.texTypesEnabled | (this.env.key0 << 4));
          keyView.next(this.env.key1);
          keyView.next(this.env.key2);
        } else {
          // For correctness, must traverse a zero value, theoretically a subsequent integer key could collide with this value otherwise.
          keyView.next(0);
        }
      };
    }

    // Class impls:
    CTexUnit.prototype.enabled = function CTexUnit_enabled() {
      return this.texTypesEnabled;
    };

    CTexUnit.prototype.genPassLines = function CTexUnit_genPassLines(
      passOutputVar,
      passInputVar,
      texUnitID
    ) {
      if (!this.enabled()) {
        return ["vec4 " + passOutputVar + " = " + passInputVar + ";"];
      }
      var lines = this.env
        .genPassLines(passOutputVar, passInputVar, texUnitID)
        .join("\n");

      var texLoadLines = "";
      var texLoadRegex = /(texture.*?\(.*?\))/g;
      var loadCounter = 0;
      var load;

      // As an optimization, merge duplicate identical texture loads to one var.
      while ((load = texLoadRegex.exec(lines))) {
        var texLoadExpr = load[1];
        var secondOccurrence = lines.slice(load.index + 1).indexOf(texLoadExpr);
        if (secondOccurrence != -1) {
          // And also has a second occurrence of same load expression..
          // Create new var to store the common load.
          var prefix = TEXENVJIT_NAMESPACE_PREFIX + "env" + texUnitID + "_";
          var texLoadVar = prefix + "texload" + loadCounter++;
          var texLoadLine = "vec4 " + texLoadVar + " = " + texLoadExpr + ";\n";
          texLoadLines += texLoadLine + "\n"; // Store the generated texture load statements in a temp string to not confuse regex search in progress.
          lines = lines.split(texLoadExpr).join(texLoadVar);
          // Reset regex search, since we modified the string.
          texLoadRegex = /(texture.*\(.*\))/g;
        }
      }
      return [texLoadLines + lines];
    };

    CTexUnit.prototype.getTexType = function CTexUnit_getTexType() {
      if (this.enabled_texCube) {
        return GL_TEXTURE_CUBE_MAP;
      } else if (this.enabled_tex3D) {
        return GL_TEXTURE_3D;
      } else if (this.enabled_tex2D) {
        return GL_TEXTURE_2D;
      } else if (this.enabled_tex1D) {
        return GL_TEXTURE_1D;
      }
      return 0;
    };

    CTexEnv.prototype.genPassLines = function CTexEnv_genPassLines(
      passOutputVar,
      passInputVar,
      texUnitID
    ) {
      switch (this.mode) {
        case GL_REPLACE: {
          /* RGB:
           * Cv = Cs
           * Av = Ap // Note how this is different, and that we'll
           *            need to track the bound texture internalFormat
           *            to get this right.
           *
           * RGBA:
           * Cv = Cs
           * Av = As
           */
          return [
            "vec4 " +
              passOutputVar +
              " = " +
              genTexUnitSampleExpr(texUnitID) +
              ";",
          ];
        }
        case GL_ADD: {
          /* RGBA:
           * Cv = Cp + Cs
           * Av = ApAs
           */
          var prefix = TEXENVJIT_NAMESPACE_PREFIX + "env" + texUnitID + "_";
          var texVar = prefix + "tex";
          var colorVar = prefix + "color";
          var alphaVar = prefix + "alpha";

          return [
            "vec4 " + texVar + " = " + genTexUnitSampleExpr(texUnitID) + ";",
            "vec3 " +
              colorVar +
              " = " +
              passInputVar +
              ".rgb + " +
              texVar +
              ".rgb;",
            "float " +
              alphaVar +
              " = " +
              passInputVar +
              ".a * " +
              texVar +
              ".a;",
            "vec4 " +
              passOutputVar +
              " = vec4(" +
              colorVar +
              ", " +
              alphaVar +
              ");",
          ];
        }
        case GL_MODULATE: {
          /* RGBA:
           * Cv = CpCs
           * Av = ApAs
           */
          var line = [
            "vec4 " + passOutputVar,
            " = ",
            passInputVar,
            " * ",
            genTexUnitSampleExpr(texUnitID),
            ";",
          ];
          return [line.join("")];
        }
        case GL_DECAL: {
          /* RGBA:
           * Cv = Cp(1 - As) + CsAs
           * Av = Ap
           */
          var prefix = TEXENVJIT_NAMESPACE_PREFIX + "env" + texUnitID + "_";
          var texVar = prefix + "tex";
          var colorVar = prefix + "color";
          var alphaVar = prefix + "alpha";

          return [
            "vec4 " + texVar + " = " + genTexUnitSampleExpr(texUnitID) + ";",
            [
              "vec3 " + colorVar + " = ",
              passInputVar + ".rgb * (1.0 - " + texVar + ".a)",
              " + ",
              texVar + ".rgb * " + texVar + ".a",
              ";",
            ].join(""),
            "float " + alphaVar + " = " + passInputVar + ".a;",
            "vec4 " +
              passOutputVar +
              " = vec4(" +
              colorVar +
              ", " +
              alphaVar +
              ");",
          ];
        }
        case GL_BLEND: {
          /* RGBA:
           * Cv = Cp(1 - Cs) + CcCs
           * Av = As
           */
          var prefix = TEXENVJIT_NAMESPACE_PREFIX + "env" + texUnitID + "_";
          var texVar = prefix + "tex";
          var colorVar = prefix + "color";
          var alphaVar = prefix + "alpha";

          return [
            "vec4 " + texVar + " = " + genTexUnitSampleExpr(texUnitID) + ";",
            [
              "vec3 " + colorVar + " = ",
              passInputVar + ".rgb * (1.0 - " + texVar + ".rgb)",
              " + ",
              PRIM_COLOR_VARYING + ".rgb * " + texVar + ".rgb",
              ";",
            ].join(""),
            "float " + alphaVar + " = " + texVar + ".a;",
            "vec4 " +
              passOutputVar +
              " = vec4(" +
              colorVar +
              ", " +
              alphaVar +
              ");",
          ];
        }
        case GL_COMBINE: {
          var prefix = TEXENVJIT_NAMESPACE_PREFIX + "env" + texUnitID + "_";
          var colorVar = prefix + "color";
          var alphaVar = prefix + "alpha";
          var colorLines = this.genCombinerLines(
            true,
            colorVar,
            passInputVar,
            texUnitID,
            this.colorCombiner,
            this.colorSrc,
            this.colorOp
          );
          var alphaLines = this.genCombinerLines(
            false,
            alphaVar,
            passInputVar,
            texUnitID,
            this.alphaCombiner,
            this.alphaSrc,
            this.alphaOp
          );

          // Generate scale, but avoid generating an identity op that multiplies by one.
          var scaledColor =
            this.colorScale == 1
              ? colorVar
              : colorVar + " * " + valToFloatLiteral(this.colorScale);
          var scaledAlpha =
            this.alphaScale == 1
              ? alphaVar
              : alphaVar + " * " + valToFloatLiteral(this.alphaScale);

          var line = [
            "vec4 " + passOutputVar,
            " = ",
            "vec4(",
            scaledColor,
            ", ",
            scaledAlpha,
            ")",
            ";",
          ].join("");
          return [].concat(colorLines, alphaLines, [line]);
        }
      }

      return abort_noSupport(
        "Unsupported TexEnv mode: 0x" + this.mode.toString(16)
      );
    };

    CTexEnv.prototype.genCombinerLines = function CTexEnv_getCombinerLines(
      isColor,
      outputVar,
      passInputVar,
      texUnitID,
      combiner,
      srcArr,
      opArr
    ) {
      var argsNeeded = null;
      switch (combiner) {
        case GL_REPLACE:
          argsNeeded = 1;
          break;

        case GL_MODULATE:
        case GL_ADD:
        case GL_SUBTRACT:
          argsNeeded = 2;
          break;

        case GL_INTERPOLATE:
          argsNeeded = 3;
          break;

        default:
          return abort_noSupport(
            "Unsupported combiner: 0x" + combiner.toString(16)
          );
      }

      var constantExpr = [
        "vec4(",
        valToFloatLiteral(this.envColor[0]),
        ", ",
        valToFloatLiteral(this.envColor[1]),
        ", ",
        valToFloatLiteral(this.envColor[2]),
        ", ",
        valToFloatLiteral(this.envColor[3]),
        ")",
      ].join("");
      var src0Expr =
        argsNeeded >= 1
          ? genCombinerSourceExpr(
              texUnitID,
              constantExpr,
              passInputVar,
              srcArr[0],
              opArr[0]
            )
          : null;
      var src1Expr =
        argsNeeded >= 2
          ? genCombinerSourceExpr(
              texUnitID,
              constantExpr,
              passInputVar,
              srcArr[1],
              opArr[1]
            )
          : null;
      var src2Expr =
        argsNeeded >= 3
          ? genCombinerSourceExpr(
              texUnitID,
              constantExpr,
              passInputVar,
              srcArr[2],
              opArr[2]
            )
          : null;

      var outputType = isColor ? "vec3" : "float";
      var lines = null;
      switch (combiner) {
        case GL_REPLACE: {
          var line = [outputType + " " + outputVar, " = ", src0Expr, ";"];
          lines = [line.join("")];
          break;
        }
        case GL_MODULATE: {
          var line = [
            outputType + " " + outputVar + " = ",
            src0Expr + " * " + src1Expr,
            ";",
          ];
          lines = [line.join("")];
          break;
        }
        case GL_ADD: {
          var line = [
            outputType + " " + outputVar + " = ",
            src0Expr + " + " + src1Expr,
            ";",
          ];
          lines = [line.join("")];
          break;
        }
        case GL_SUBTRACT: {
          var line = [
            outputType + " " + outputVar + " = ",
            src0Expr + " - " + src1Expr,
            ";",
          ];
          lines = [line.join("")];
          break;
        }
        case GL_INTERPOLATE: {
          var prefix = TEXENVJIT_NAMESPACE_PREFIX + "env" + texUnitID + "_";
          var arg2Var = prefix + "colorSrc2";
          var arg2Line =
            getTypeFromCombineOp(this.colorOp[2]) +
            " " +
            arg2Var +
            " = " +
            src2Expr +
            ";";

          var line = [
            outputType + " " + outputVar,
            " = ",
            src0Expr + " * " + arg2Var,
            " + ",
            src1Expr + " * (1.0 - " + arg2Var + ")",
            ";",
          ];
          lines = [arg2Line, line.join("")];
          break;
        }

        default:
          return abort_sanity("Unmatched TexEnv.colorCombiner?");
      }

      return lines;
    };

    return {
      // Exports:
      init: function (gl, specifiedMaxTextureImageUnits) {
        var maxTexUnits = 0;
        if (specifiedMaxTextureImageUnits) {
          maxTexUnits = specifiedMaxTextureImageUnits;
        } else if (gl) {
          maxTexUnits = gl.getParameter(gl.MAX_TEXTURE_IMAGE_UNITS);
        }
        s_texUnits = [];
        for (var i = 0; i < maxTexUnits; i++) {
          s_texUnits.push(new CTexUnit());
        }
      },

      setGLSLVars: function (
        uTexUnitPrefix,
        vTexCoordPrefix,
        vPrimColor,
        uTexMatrixPrefix
      ) {
        TEX_UNIT_UNIFORM_PREFIX = uTexUnitPrefix;
        TEX_COORD_VARYING_PREFIX = vTexCoordPrefix;
        PRIM_COLOR_VARYING = vPrimColor;
        TEX_MATRIX_UNIFORM_PREFIX = uTexMatrixPrefix;
      },

      genAllPassLines: function (resultDest, indentSize) {
        indentSize = indentSize || 0;

        s_requiredTexUnitsForPass.length = 0; // Clear the list.
        var lines = [];
        var lastPassVar = PRIM_COLOR_VARYING;
        for (var i = 0; i < s_texUnits.length; i++) {
          if (!s_texUnits[i].enabled()) continue;

          s_requiredTexUnitsForPass.push(i);

          var prefix = TEXENVJIT_NAMESPACE_PREFIX + "env" + i + "_";
          var passOutputVar = prefix + "result";

          var newLines = s_texUnits[i].genPassLines(
            passOutputVar,
            lastPassVar,
            i
          );
          lines = lines.concat(newLines, [""]);

          lastPassVar = passOutputVar;
        }
        lines.push(resultDest + " = " + lastPassVar + ";");

        var indent = "";
        for (var i = 0; i < indentSize; i++) indent += " ";

        var output = indent + lines.join("\n" + indent);

        return output;
      },

      getUsedTexUnitList: function () {
        return s_requiredTexUnitsForPass;
      },

      traverseState: function (keyView) {
        for (var i = 0; i < s_texUnits.length; i++) {
          s_texUnits[i].traverseState(keyView);
        }
      },

      getTexUnitType: function (texUnitID) {
        return s_texUnits[texUnitID].getTexType();
      },

      // Hooks:
      hook_activeTexture: function (texture) {
        s_activeTexture = texture - GL_TEXTURE0;
      },

      hook_enable: function (cap) {
        var cur = getCurTexUnit();
        switch (cap) {
          case GL_TEXTURE_1D:
            if (!cur.enabled_tex1D) {
              GLImmediate.currentRenderer = null; // Renderer state changed, and must be recreated or looked up again.
              cur.enabled_tex1D = true;
              cur.texTypesEnabled |= 1;
            }
            break;
          case GL_TEXTURE_2D:
            if (!cur.enabled_tex2D) {
              GLImmediate.currentRenderer = null;
              cur.enabled_tex2D = true;
              cur.texTypesEnabled |= 2;
            }
            break;
          case GL_TEXTURE_3D:
            if (!cur.enabled_tex3D) {
              GLImmediate.currentRenderer = null;
              cur.enabled_tex3D = true;
              cur.texTypesEnabled |= 4;
            }
            break;
          case GL_TEXTURE_CUBE_MAP:
            if (!cur.enabled_texCube) {
              GLImmediate.currentRenderer = null;
              cur.enabled_texCube = true;
              cur.texTypesEnabled |= 8;
            }
            break;
        }
      },

      hook_disable: function (cap) {
        var cur = getCurTexUnit();
        switch (cap) {
          case GL_TEXTURE_1D:
            if (cur.enabled_tex1D) {
              GLImmediate.currentRenderer = null; // Renderer state changed, and must be recreated or looked up again.
              cur.enabled_tex1D = false;
              cur.texTypesEnabled &= ~1;
            }
            break;
          case GL_TEXTURE_2D:
            if (cur.enabled_tex2D) {
              GLImmediate.currentRenderer = null;
              cur.enabled_tex2D = false;
              cur.texTypesEnabled &= ~2;
            }
            break;
          case GL_TEXTURE_3D:
            if (cur.enabled_tex3D) {
              GLImmediate.currentRenderer = null;
              cur.enabled_tex3D = false;
              cur.texTypesEnabled &= ~4;
            }
            break;
          case GL_TEXTURE_CUBE_MAP:
            if (cur.enabled_texCube) {
              GLImmediate.currentRenderer = null;
              cur.enabled_texCube = false;
              cur.texTypesEnabled &= ~8;
            }
            break;
        }
      },

      hook_texEnvf: function (target, pname, param) {
        if (target != GL_TEXTURE_ENV) return;

        var env = getCurTexUnit().env;
        switch (pname) {
          case GL_RGB_SCALE:
            if (env.colorScale != param) {
              env.invalidateKey(); // We changed FFP emulation renderer state.
              env.colorScale = param;
            }
            break;
          case GL_ALPHA_SCALE:
            if (env.alphaScale != param) {
              env.invalidateKey();
              env.alphaScale = param;
            }
            break;

          default:
            Module.printErr(
              "WARNING: Unhandled `pname` in call to `glTexEnvf`."
            );
        }
      },

      hook_texEnvi: function (target, pname, param) {
        if (target != GL_TEXTURE_ENV) return;

        var env = getCurTexUnit().env;
        switch (pname) {
          case GL_TEXTURE_ENV_MODE:
            if (env.mode != param) {
              env.invalidateKey(); // We changed FFP emulation renderer state.
              env.mode = param;
            }
            break;

          case GL_COMBINE_RGB:
            if (env.colorCombiner != param) {
              env.invalidateKey();
              env.colorCombiner = param;
            }
            break;
          case GL_COMBINE_ALPHA:
            if (env.alphaCombiner != param) {
              env.invalidateKey();
              env.alphaCombiner = param;
            }
            break;

          case GL_SRC0_RGB:
            if (env.colorSrc[0] != param) {
              env.invalidateKey();
              env.colorSrc[0] = param;
            }
            break;
          case GL_SRC1_RGB:
            if (env.colorSrc[1] != param) {
              env.invalidateKey();
              env.colorSrc[1] = param;
            }
            break;
          case GL_SRC2_RGB:
            if (env.colorSrc[2] != param) {
              env.invalidateKey();
              env.colorSrc[2] = param;
            }
            break;

          case GL_SRC0_ALPHA:
            if (env.alphaSrc[0] != param) {
              env.invalidateKey();
              env.alphaSrc[0] = param;
            }
            break;
          case GL_SRC1_ALPHA:
            if (env.alphaSrc[1] != param) {
              env.invalidateKey();
              env.alphaSrc[1] = param;
            }
            break;
          case GL_SRC2_ALPHA:
            if (env.alphaSrc[2] != param) {
              env.invalidateKey();
              env.alphaSrc[2] = param;
            }
            break;

          case GL_OPERAND0_RGB:
            if (env.colorOp[0] != param) {
              env.invalidateKey();
              env.colorOp[0] = param;
            }
            break;
          case GL_OPERAND1_RGB:
            if (env.colorOp[1] != param) {
              env.invalidateKey();
              env.colorOp[1] = param;
            }
            break;
          case GL_OPERAND2_RGB:
            if (env.colorOp[2] != param) {
              env.invalidateKey();
              env.colorOp[2] = param;
            }
            break;

          case GL_OPERAND0_ALPHA:
            if (env.alphaOp[0] != param) {
              env.invalidateKey();
              env.alphaOp[0] = param;
            }
            break;
          case GL_OPERAND1_ALPHA:
            if (env.alphaOp[1] != param) {
              env.invalidateKey();
              env.alphaOp[1] = param;
            }
            break;
          case GL_OPERAND2_ALPHA:
            if (env.alphaOp[2] != param) {
              env.invalidateKey();
              env.alphaOp[2] = param;
            }
            break;

          case GL_RGB_SCALE:
            if (env.colorScale != param) {
              env.invalidateKey();
              env.colorScale = param;
            }
            break;
          case GL_ALPHA_SCALE:
            if (env.alphaScale != param) {
              env.invalidateKey();
              env.alphaScale = param;
            }
            break;

          default:
            Module.printErr(
              "WARNING: Unhandled `pname` in call to `glTexEnvi`."
            );
        }
      },

      hook_texEnvfv: function (target, pname, params) {
        if (target != GL_TEXTURE_ENV) return;

        var env = getCurTexUnit().env;
        switch (pname) {
          case GL_TEXTURE_ENV_COLOR: {
            for (var i = 0; i < 4; i++) {
              var param = HEAPF32[(params + i * 4) >> 2];
              if (env.envColor[i] != param) {
                env.invalidateKey(); // We changed FFP emulation renderer state.
                env.envColor[i] = param;
              }
            }
            break;
          }
          default:
            Module.printErr(
              "WARNING: Unhandled `pname` in call to `glTexEnvfv`."
            );
        }
      },

      hook_getTexEnviv: function (target, pname, param) {
        if (target != GL_TEXTURE_ENV) return;

        var env = getCurTexUnit().env;
        switch (pname) {
          case GL_TEXTURE_ENV_MODE:
            HEAP32[param >> 2] = env.mode;
            return;

          case GL_TEXTURE_ENV_COLOR:
            HEAP32[param >> 2] = Math.max(
              Math.min(env.envColor[0] * 255, 255, -255)
            );
            HEAP32[(param + 1) >> 2] = Math.max(
              Math.min(env.envColor[1] * 255, 255, -255)
            );
            HEAP32[(param + 2) >> 2] = Math.max(
              Math.min(env.envColor[2] * 255, 255, -255)
            );
            HEAP32[(param + 3) >> 2] = Math.max(
              Math.min(env.envColor[3] * 255, 255, -255)
            );
            return;

          case GL_COMBINE_RGB:
            HEAP32[param >> 2] = env.colorCombiner;
            return;

          case GL_COMBINE_ALPHA:
            HEAP32[param >> 2] = env.alphaCombiner;
            return;

          case GL_SRC0_RGB:
            HEAP32[param >> 2] = env.colorSrc[0];
            return;

          case GL_SRC1_RGB:
            HEAP32[param >> 2] = env.colorSrc[1];
            return;

          case GL_SRC2_RGB:
            HEAP32[param >> 2] = env.colorSrc[2];
            return;

          case GL_SRC0_ALPHA:
            HEAP32[param >> 2] = env.alphaSrc[0];
            return;

          case GL_SRC1_ALPHA:
            HEAP32[param >> 2] = env.alphaSrc[1];
            return;

          case GL_SRC2_ALPHA:
            HEAP32[param >> 2] = env.alphaSrc[2];
            return;

          case GL_OPERAND0_RGB:
            HEAP32[param >> 2] = env.colorOp[0];
            return;

          case GL_OPERAND1_RGB:
            HEAP32[param >> 2] = env.colorOp[1];
            return;

          case GL_OPERAND2_RGB:
            HEAP32[param >> 2] = env.colorOp[2];
            return;

          case GL_OPERAND0_ALPHA:
            HEAP32[param >> 2] = env.alphaOp[0];
            return;

          case GL_OPERAND1_ALPHA:
            HEAP32[param >> 2] = env.alphaOp[1];
            return;

          case GL_OPERAND2_ALPHA:
            HEAP32[param >> 2] = env.alphaOp[2];
            return;

          case GL_RGB_SCALE:
            HEAP32[param >> 2] = env.colorScale;
            return;

          case GL_ALPHA_SCALE:
            HEAP32[param >> 2] = env.alphaScale;
            return;

          default:
            Module.printErr(
              "WARNING: Unhandled `pname` in call to `glGetTexEnvi`."
            );
        }
      },

      hook_getTexEnvfv: function (target, pname, param) {
        if (target != GL_TEXTURE_ENV) return;

        var env = getCurTexUnit().env;
        switch (pname) {
          case GL_TEXTURE_ENV_COLOR:
            HEAPF32[param >> 2] = env.envColor[0];
            HEAPF32[(param + 4) >> 2] = env.envColor[1];
            HEAPF32[(param + 8) >> 2] = env.envColor[2];
            HEAPF32[(param + 12) >> 2] = env.envColor[3];
            return;
        }
      },
    };
  },
  vertexData: null,
  vertexDataU8: null,
  tempData: null,
  indexData: null,
  vertexCounter: 0,
  mode: -1,
  rendererCache: null,
  rendererComponents: [],
  rendererComponentPointer: 0,
  lastRenderer: null,
  lastArrayBuffer: null,
  lastProgram: null,
  lastStride: -1,
  matrix: [],
  matrixStack: [],
  currentMatrix: 0,
  tempMatrix: null,
  matricesModified: false,
  useTextureMatrix: false,
  VERTEX: 0,
  NORMAL: 1,
  COLOR: 2,
  TEXTURE0: 3,
  NUM_ATTRIBUTES: -1,
  MAX_TEXTURES: -1,
  totalEnabledClientAttributes: 0,
  enabledClientAttributes: [0, 0],
  clientAttributes: [],
  liveClientAttributes: [],
  currentRenderer: null,
  modifiedClientAttributes: false,
  clientActiveTexture: 0,
  clientColor: null,
  usedTexUnitList: [],
  fixedFunctionProgram: null,
  setClientAttribute: function setClientAttribute(
    name,
    size,
    type,
    stride,
    pointer
  ) {
    var attrib = GLImmediate.clientAttributes[name];
    if (!attrib) {
      for (var i = 0; i <= name; i++) {
        // keep flat
        if (!GLImmediate.clientAttributes[i]) {
          GLImmediate.clientAttributes[i] = {
            name: name,
            size: size,
            type: type,
            stride: stride,
            pointer: pointer,
            offset: 0,
          };
        }
      }
    } else {
      attrib.name = name;
      attrib.size = size;
      attrib.type = type;
      attrib.stride = stride;
      attrib.pointer = pointer;
      attrib.offset = 0;
    }
    GLImmediate.modifiedClientAttributes = true;
  },
  addRendererComponent: function addRendererComponent(name, size, type) {
    if (!GLImmediate.rendererComponents[name]) {
      GLImmediate.rendererComponents[name] = 1;
      GLImmediate.enabledClientAttributes[name] = true;
      GLImmediate.setClientAttribute(
        name,
        size,
        type,
        0,
        GLImmediate.rendererComponentPointer
      );
      GLImmediate.rendererComponentPointer +=
        size * GL.byteSizeByType[type - GL.byteSizeByTypeRoot];
    } else {
      GLImmediate.rendererComponents[name]++;
    }
  },
  disableBeginEndClientAttributes: function disableBeginEndClientAttributes() {
    for (var i = 0; i < GLImmediate.NUM_ATTRIBUTES; i++) {
      if (GLImmediate.rendererComponents[i])
        GLImmediate.enabledClientAttributes[i] = false;
    }
  },
  getRenderer: function getRenderer() {
    // If no FFP state has changed that would have forced to re-evaluate which FFP emulation shader to use,
    // we have the currently used renderer in cache, and can immediately return that.
    if (GLImmediate.currentRenderer) {
      return GLImmediate.currentRenderer;
    }
    // return a renderer object given the liveClientAttributes
    // we maintain a cache of renderers, optimized to not generate garbage
    var attributes = GLImmediate.liveClientAttributes;
    var cacheMap = GLImmediate.rendererCache;
    var keyView = cacheMap.getStaticKeyView().reset();

    // By attrib state:
    var enabledAttributesKey = 0;
    for (var i = 0; i < attributes.length; i++) {
      enabledAttributesKey |= 1 << attributes[i].name;
    }

    // By fog state:
    var fogParam = 0;
    if (GLEmulation.fogEnabled) {
      switch (GLEmulation.fogMode) {
        case 0x0801: // GL_EXP2
          fogParam = 1;
          break;
        case 0x2601: // GL_LINEAR
          fogParam = 2;
          break;
        default: // default to GL_EXP
          fogParam = 3;
          break;
      }
    }
    keyView.next((enabledAttributesKey << 2) | fogParam);

    // By cur program:
    keyView.next(GL.currProgram);
    if (!GL.currProgram) {
      GLImmediate.TexEnvJIT.traverseState(keyView);
    }

    // If we don't already have it, create it.
    var renderer = keyView.get();
    if (!renderer) {
      renderer = GLImmediate.createRenderer();
      GLImmediate.currentRenderer = renderer;
      keyView.set(renderer);
      return renderer;
    }
    GLImmediate.currentRenderer = renderer; // Cache the currently used renderer, so later lookups without state changes can get this fast.
    return renderer;
  },
  createRenderer: function createRenderer(renderer) {
    var useCurrProgram = !!GL.currProgram;
    var hasTextures = false;
    for (var i = 0; i < GLImmediate.MAX_TEXTURES; i++) {
      var texAttribName = GLImmediate.TEXTURE0 + i;
      if (!GLImmediate.enabledClientAttributes[texAttribName]) continue;

      hasTextures = true;
    }

    var ret = {
      init: function init() {
        // For fixed-function shader generation.
        var uTexUnitPrefix = "u_texUnit";
        var aTexCoordPrefix = "a_texCoord";
        var vTexCoordPrefix = "v_texCoord";
        var vPrimColor = "v_color";
        var uTexMatrixPrefix = GLImmediate.useTextureMatrix
          ? "u_textureMatrix"
          : null;

        if (useCurrProgram) {
          if (
            GL.shaderInfos[GL.programShaders[GL.currProgram][0]].type ==
            GLctx.VERTEX_SHADER
          ) {
            this.vertexShader =
              GL.shaders[GL.programShaders[GL.currProgram][0]];
            this.fragmentShader =
              GL.shaders[GL.programShaders[GL.currProgram][1]];
          } else {
            this.vertexShader =
              GL.shaders[GL.programShaders[GL.currProgram][1]];
            this.fragmentShader =
              GL.shaders[GL.programShaders[GL.currProgram][0]];
          }
          this.program = GL.programs[GL.currProgram];
          this.usedTexUnitList = [];
        } else {
          // IMPORTANT NOTE: If you parameterize the shader source based on any runtime values
          // in order to create the least expensive shader possible based on the features being
          // used, you should also update the code in the beginning of getRenderer to make sure
          // that you cache the renderer based on the said parameters.
          if (GLEmulation.fogEnabled) {
            switch (GLEmulation.fogMode) {
              case 0x0801: // GL_EXP2
                // fog = exp(-(gl_Fog.density * gl_FogFragCoord)^2)
                var fogFormula =
                  "  float fog = exp(-u_fogDensity * u_fogDensity * ecDistance * ecDistance); \n";
                break;
              case 0x2601: // GL_LINEAR
                // fog = (gl_Fog.end - gl_FogFragCoord) * gl_fog.scale
                var fogFormula =
                  "  float fog = (u_fogEnd - ecDistance) * u_fogScale; \n";
                break;
              default: // default to GL_EXP
                // fog = exp(-gl_Fog.density * gl_FogFragCoord)
                var fogFormula =
                  "  float fog = exp(-u_fogDensity * ecDistance); \n";
                break;
            }
          }

          GLImmediate.TexEnvJIT.setGLSLVars(
            uTexUnitPrefix,
            vTexCoordPrefix,
            vPrimColor,
            uTexMatrixPrefix
          );
          var fsTexEnvPass = GLImmediate.TexEnvJIT.genAllPassLines(
            "gl_FragColor",
            2
          );

          var texUnitAttribList = "";
          var texUnitVaryingList = "";
          var texUnitUniformList = "";
          var vsTexCoordInits = "";
          this.usedTexUnitList = GLImmediate.TexEnvJIT.getUsedTexUnitList();
          for (var i = 0; i < this.usedTexUnitList.length; i++) {
            var texUnit = this.usedTexUnitList[i];
            texUnitAttribList +=
              "attribute vec4 " + aTexCoordPrefix + texUnit + ";\n";
            texUnitVaryingList +=
              "varying vec4 " + vTexCoordPrefix + texUnit + ";\n";
            texUnitUniformList +=
              "uniform sampler2D " + uTexUnitPrefix + texUnit + ";\n";
            vsTexCoordInits +=
              "  " +
              vTexCoordPrefix +
              texUnit +
              " = " +
              aTexCoordPrefix +
              texUnit +
              ";\n";

            if (GLImmediate.useTextureMatrix) {
              texUnitUniformList +=
                "uniform mat4 " + uTexMatrixPrefix + texUnit + ";\n";
            }
          }

          var vsFogVaryingInit = null;
          if (GLEmulation.fogEnabled) {
            vsFogVaryingInit = "  v_fogFragCoord = abs(ecPosition.z);\n";
          }

          var vsSource = [
            "attribute vec4 a_position;",
            "attribute vec4 a_color;",
            "varying vec4 v_color;",
            texUnitAttribList,
            texUnitVaryingList,
            GLEmulation.fogEnabled ? "varying float v_fogFragCoord;" : null,
            "uniform mat4 u_modelView;",
            "uniform mat4 u_projection;",
            "void main()",
            "{",
            "  vec4 ecPosition = u_modelView * a_position;", // eye-coordinate position
            "  gl_Position = u_projection * ecPosition;",
            "  v_color = a_color;",
            vsTexCoordInits,
            vsFogVaryingInit,
            "}",
            "",
          ]
            .join("\n")
            .replace(/\n\n+/g, "\n");

          this.vertexShader = GLctx.createShader(GLctx.VERTEX_SHADER);
          GLctx.shaderSource(this.vertexShader, vsSource);
          GLctx.compileShader(this.vertexShader);

          var fogHeaderIfNeeded = null;
          if (GLEmulation.fogEnabled) {
            fogHeaderIfNeeded = [
              "",
              "varying float v_fogFragCoord; ",
              "uniform vec4 u_fogColor;      ",
              "uniform float u_fogEnd;       ",
              "uniform float u_fogScale;     ",
              "uniform float u_fogDensity;   ",
              "float ffog(in float ecDistance) { ",
              fogFormula,
              "  fog = clamp(fog, 0.0, 1.0); ",
              "  return fog;                 ",
              "}",
              "",
            ].join("\n");
          }

          var fogPass = null;
          if (GLEmulation.fogEnabled) {
            fogPass =
              "gl_FragColor = vec4(mix(u_fogColor.rgb, gl_FragColor.rgb, ffog(v_fogFragCoord)), gl_FragColor.a);\n";
          }

          var fsSource = [
            "precision mediump float;",
            texUnitVaryingList,
            texUnitUniformList,
            "varying vec4 v_color;",
            fogHeaderIfNeeded,
            "void main()",
            "{",
            fsTexEnvPass,
            fogPass,
            "}",
            "",
          ]
            .join("\n")
            .replace(/\n\n+/g, "\n");

          this.fragmentShader = GLctx.createShader(GLctx.FRAGMENT_SHADER);
          GLctx.shaderSource(this.fragmentShader, fsSource);
          GLctx.compileShader(this.fragmentShader);

          this.program = GLctx.createProgram();
          GLctx.attachShader(this.program, this.vertexShader);
          GLctx.attachShader(this.program, this.fragmentShader);

          // As optimization, bind all attributes to prespecified locations, so that the FFP emulation
          // code can submit attributes to any generated FFP shader without having to examine each shader in turn.
          // These prespecified locations are only assumed if GL_FFP_ONLY is specified, since user could also create their
          // own shaders that didn't have attributes in the same locations.
          GLctx.bindAttribLocation(
            this.program,
            GLImmediate.VERTEX,
            "a_position"
          );
          GLctx.bindAttribLocation(this.program, GLImmediate.COLOR, "a_color");
          GLctx.bindAttribLocation(
            this.program,
            GLImmediate.NORMAL,
            "a_normal"
          );
          var maxVertexAttribs = GLctx.getParameter(GLctx.MAX_VERTEX_ATTRIBS);
          for (
            var i = 0;
            i < GLImmediate.MAX_TEXTURES &&
            GLImmediate.TEXTURE0 + i < maxVertexAttribs;
            i++
          ) {
            GLctx.bindAttribLocation(
              this.program,
              GLImmediate.TEXTURE0 + i,
              "a_texCoord" + i
            );
            GLctx.bindAttribLocation(
              this.program,
              GLImmediate.TEXTURE0 + i,
              aTexCoordPrefix + i
            );
          }
          GLctx.linkProgram(this.program);
        }

        // Stores an array that remembers which matrix uniforms are up-to-date in this FFP renderer, so they don't need to be resubmitted
        // each time we render with this program.
        this.textureMatrixVersion = [
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        ];

        this.positionLocation = GLctx.getAttribLocation(
          this.program,
          "a_position"
        );

        this.texCoordLocations = [];

        for (var i = 0; i < GLImmediate.MAX_TEXTURES; i++) {
          if (!GLImmediate.enabledClientAttributes[GLImmediate.TEXTURE0 + i]) {
            this.texCoordLocations[i] = -1;
            continue;
          }

          if (useCurrProgram) {
            this.texCoordLocations[i] = GLctx.getAttribLocation(
              this.program,
              "a_texCoord" + i
            );
          } else {
            this.texCoordLocations[i] = GLctx.getAttribLocation(
              this.program,
              aTexCoordPrefix + i
            );
          }
        }
        this.colorLocation = GLctx.getAttribLocation(this.program, "a_color");
        if (!useCurrProgram) {
          // Temporarily switch to the program so we can set our sampler uniforms early.
          var prevBoundProg = GLctx.getParameter(GLctx.CURRENT_PROGRAM);
          GLctx.useProgram(this.program);
          {
            for (var i = 0; i < this.usedTexUnitList.length; i++) {
              var texUnitID = this.usedTexUnitList[i];
              var texSamplerLoc = GLctx.getUniformLocation(
                this.program,
                uTexUnitPrefix + texUnitID
              );
              GLctx.uniform1i(texSamplerLoc, texUnitID);
            }
          }
          // The default color attribute value is not the same as the default for all other attribute streams (0,0,0,1) but (1,1,1,1),
          // so explicitly set it right at start.
          GLctx.vertexAttrib4fv(this.colorLocation, [1, 1, 1, 1]);
          GLctx.useProgram(prevBoundProg);
        }

        this.textureMatrixLocations = [];
        for (var i = 0; i < GLImmediate.MAX_TEXTURES; i++) {
          this.textureMatrixLocations[i] = GLctx.getUniformLocation(
            this.program,
            "u_textureMatrix" + i
          );
        }
        this.normalLocation = GLctx.getAttribLocation(this.program, "a_normal");

        this.modelViewLocation = GLctx.getUniformLocation(
          this.program,
          "u_modelView"
        );
        this.projectionLocation = GLctx.getUniformLocation(
          this.program,
          "u_projection"
        );

        this.hasTextures = hasTextures;
        this.hasNormal =
          GLImmediate.enabledClientAttributes[GLImmediate.NORMAL] &&
          GLImmediate.clientAttributes[GLImmediate.NORMAL].size > 0 &&
          this.normalLocation >= 0;
        this.hasColor = this.colorLocation === 0 || this.colorLocation > 0;

        this.floatType = GLctx.FLOAT; // minor optimization

        this.fogColorLocation = GLctx.getUniformLocation(
          this.program,
          "u_fogColor"
        );
        this.fogEndLocation = GLctx.getUniformLocation(
          this.program,
          "u_fogEnd"
        );
        this.fogScaleLocation = GLctx.getUniformLocation(
          this.program,
          "u_fogScale"
        );
        this.fogDensityLocation = GLctx.getUniformLocation(
          this.program,
          "u_fogDensity"
        );
        this.hasFog = !!(
          this.fogColorLocation ||
          this.fogEndLocation ||
          this.fogScaleLocation ||
          this.fogDensityLocation
        );
      },

      prepare: function prepare() {
        // Calculate the array buffer
        var arrayBuffer;
        if (!GL.currArrayBuffer) {
          var start = GLImmediate.firstVertex * GLImmediate.stride;
          var end = GLImmediate.lastVertex * GLImmediate.stride;
          arrayBuffer = GL.getTempVertexBuffer(end);
          // TODO: consider using the last buffer we bound, if it was larger. downside is larger buffer, but we might avoid rebinding and preparing
        } else {
          arrayBuffer = GL.currArrayBuffer;
        }

        // If the array buffer is unchanged and the renderer as well, then we can avoid all the work here
        // XXX We use some heuristics here, and this may not work in all cases. Try disabling GL_UNSAFE_OPTS if you
        // have odd glitches
        var lastRenderer = GLImmediate.lastRenderer;
        var canSkip =
          this == lastRenderer &&
          arrayBuffer == GLImmediate.lastArrayBuffer &&
          (GL.currProgram || this.program) == GLImmediate.lastProgram &&
          GLImmediate.stride == GLImmediate.lastStride &&
          !GLImmediate.matricesModified;
        if (!canSkip && lastRenderer) lastRenderer.cleanup();
        if (!GL.currArrayBuffer) {
          // Bind the array buffer and upload data after cleaning up the previous renderer

          if (arrayBuffer != GLImmediate.lastArrayBuffer) {
            GLctx.bindBuffer(GLctx.ARRAY_BUFFER, arrayBuffer);
            GLImmediate.lastArrayBuffer = arrayBuffer;
          }

          GLctx.bufferSubData(
            GLctx.ARRAY_BUFFER,
            start,
            GLImmediate.vertexData.subarray(start >> 2, end >> 2)
          );
        }
        if (canSkip) return;
        GLImmediate.lastRenderer = this;
        GLImmediate.lastProgram = GL.currProgram || this.program;
        GLImmediate.lastStride == GLImmediate.stride;
        GLImmediate.matricesModified = false;

        if (!GL.currProgram) {
          if (GLImmediate.fixedFunctionProgram != this.program) {
            GLctx.useProgram(this.program);
            GLImmediate.fixedFunctionProgram = this.program;
          }
        }

        if (
          this.modelViewLocation &&
          this.modelViewMatrixVersion != GLImmediate.matrixVersion[0 /*m*/]
        ) {
          this.modelViewMatrixVersion = GLImmediate.matrixVersion[0 /*m*/];
          GLctx.uniformMatrix4fv(
            this.modelViewLocation,
            false,
            GLImmediate.matrix[0 /*m*/]
          );
        }
        if (
          this.projectionLocation &&
          this.projectionMatrixVersion != GLImmediate.matrixVersion[1 /*p*/]
        ) {
          this.projectionMatrixVersion = GLImmediate.matrixVersion[1 /*p*/];
          GLctx.uniformMatrix4fv(
            this.projectionLocation,
            false,
            GLImmediate.matrix[1 /*p*/]
          );
        }

        var clientAttributes = GLImmediate.clientAttributes;
        var posAttr = clientAttributes[GLImmediate.VERTEX];

        GLctx.vertexAttribPointer(
          this.positionLocation,
          posAttr.size,
          posAttr.type,
          false,
          GLImmediate.stride,
          posAttr.offset
        );
        GLctx.enableVertexAttribArray(this.positionLocation);
        if (this.hasNormal) {
          var normalAttr = clientAttributes[GLImmediate.NORMAL];
          GLctx.vertexAttribPointer(
            this.normalLocation,
            normalAttr.size,
            normalAttr.type,
            true,
            GLImmediate.stride,
            normalAttr.offset
          );
          GLctx.enableVertexAttribArray(this.normalLocation);
        }
        if (this.hasTextures) {
          for (var i = 0; i < GLImmediate.MAX_TEXTURES; i++) {
            var attribLoc = this.texCoordLocations[i];
            if (attribLoc === undefined || attribLoc < 0) continue;
            var texAttr = clientAttributes[GLImmediate.TEXTURE0 + i];

            if (texAttr.size) {
              GLctx.vertexAttribPointer(
                attribLoc,
                texAttr.size,
                texAttr.type,
                false,
                GLImmediate.stride,
                texAttr.offset
              );
              GLctx.enableVertexAttribArray(attribLoc);
            } else {
              // These two might be dangerous, but let's try them.
              GLctx.vertexAttrib4f(attribLoc, 0, 0, 0, 1);
              GLctx.disableVertexAttribArray(attribLoc);
            }
            var t = 2 /*t*/ + i;
            if (
              this.textureMatrixLocations[i] &&
              this.textureMatrixVersion[t] != GLImmediate.matrixVersion[t]
            ) {
              // XXX might we need this even without the condition we are currently in?
              this.textureMatrixVersion[t] = GLImmediate.matrixVersion[t];
              GLctx.uniformMatrix4fv(
                this.textureMatrixLocations[i],
                false,
                GLImmediate.matrix[t]
              );
            }
          }
        }
        if (GLImmediate.enabledClientAttributes[GLImmediate.COLOR]) {
          var colorAttr = clientAttributes[GLImmediate.COLOR];
          GLctx.vertexAttribPointer(
            this.colorLocation,
            colorAttr.size,
            colorAttr.type,
            true,
            GLImmediate.stride,
            colorAttr.offset
          );
          GLctx.enableVertexAttribArray(this.colorLocation);
        } else if (this.hasColor) {
          GLctx.disableVertexAttribArray(this.colorLocation);
          GLctx.vertexAttrib4fv(this.colorLocation, GLImmediate.clientColor);
        }
        if (this.hasFog) {
          if (this.fogColorLocation)
            GLctx.uniform4fv(this.fogColorLocation, GLEmulation.fogColor);
          if (this.fogEndLocation)
            GLctx.uniform1f(this.fogEndLocation, GLEmulation.fogEnd);
          if (this.fogScaleLocation)
            GLctx.uniform1f(
              this.fogScaleLocation,
              1 / (GLEmulation.fogEnd - GLEmulation.fogStart)
            );
          if (this.fogDensityLocation)
            GLctx.uniform1f(this.fogDensityLocation, GLEmulation.fogDensity);
        }
      },

      cleanup: function cleanup() {
        GLctx.disableVertexAttribArray(this.positionLocation);
        if (this.hasTextures) {
          for (var i = 0; i < GLImmediate.MAX_TEXTURES; i++) {
            if (
              GLImmediate.enabledClientAttributes[GLImmediate.TEXTURE0 + i] &&
              this.texCoordLocations[i] >= 0
            ) {
              GLctx.disableVertexAttribArray(this.texCoordLocations[i]);
            }
          }
        }
        if (this.hasColor) {
          GLctx.disableVertexAttribArray(this.colorLocation);
        }
        if (this.hasNormal) {
          GLctx.disableVertexAttribArray(this.normalLocation);
        }
        if (!GL.currProgram) {
          GLctx.useProgram(null);
          GLImmediate.fixedFunctionProgram = 0;
        }
        if (!GL.currArrayBuffer) {
          GLctx.bindBuffer(GLctx.ARRAY_BUFFER, null);
          GLImmediate.lastArrayBuffer = null;
        }

        GLImmediate.lastRenderer = null;
        GLImmediate.lastProgram = null;
        GLImmediate.matricesModified = true;
      },
    };
    ret.init();
    return ret;
  },
  setupFuncs: function () {
    // Replace some functions with immediate-mode aware versions. If there are no client
    // attributes enabled, and we use webgl-friendly modes (no GL_QUADS), then no need
    // for emulation
    _glDrawArrays = _emscripten_glDrawArrays = function _glDrawArrays(
      mode,
      first,
      count
    ) {
      if (GLImmediate.totalEnabledClientAttributes == 0 && mode <= 6) {
        GLctx.drawArrays(mode, first, count);
        return;
      }
      GLImmediate.prepareClientAttributes(count, false);
      GLImmediate.mode = mode;
      if (!GL.currArrayBuffer) {
        GLImmediate.vertexData = HEAPF32.subarray(
          GLImmediate.vertexPointer >> 2,
          (GLImmediate.vertexPointer + (first + count) * GLImmediate.stride) >>
            2
        ); // XXX assuming float
        GLImmediate.firstVertex = first;
        GLImmediate.lastVertex = first + count;
      }
      GLImmediate.flush(null, first);
      GLImmediate.mode = -1;
    };

    _glDrawElements = _emscripten_glDrawElements = function _glDrawElements(
      mode,
      count,
      type,
      indices,
      start,
      end
    ) {
      // start, end are given if we come from glDrawRangeElements
      if (
        GLImmediate.totalEnabledClientAttributes == 0 &&
        mode <= 6 &&
        GL.currElementArrayBuffer
      ) {
        GLctx.drawElements(mode, count, type, indices);
        return;
      }
      GLImmediate.prepareClientAttributes(count, false);
      GLImmediate.mode = mode;
      if (!GL.currArrayBuffer) {
        GLImmediate.firstVertex = end ? start : TOTAL_MEMORY; // if we don't know the start, set an invalid value and we will calculate it later from the indices
        GLImmediate.lastVertex = end ? end + 1 : 0;
        GLImmediate.vertexData = HEAPF32.subarray(
          GLImmediate.vertexPointer >> 2,
          (end
            ? GLImmediate.vertexPointer + (end + 1) * GLImmediate.stride
            : TOTAL_MEMORY) >> 2
        ); // XXX assuming float
      }
      GLImmediate.flush(count, 0, indices);
      GLImmediate.mode = -1;
    };

    // TexEnv stuff needs to be prepared early, so do it here.
    // init() is too late for -O2, since it freezes the GL functions
    // by that point.
    GLImmediate.MapTreeLib = GLImmediate.spawnMapTreeLib();
    GLImmediate.spawnMapTreeLib = null;

    GLImmediate.TexEnvJIT = GLImmediate.spawnTexEnvJIT();
    GLImmediate.spawnTexEnvJIT = null;

    GLImmediate.setupHooks();
  },
  setupHooks: function () {
    if (!GLEmulation.hasRunInit) {
      GLEmulation.init();
    }

    var glActiveTexture = _glActiveTexture;
    _glActiveTexture = _emscripten_glActiveTexture = function _glActiveTexture(
      texture
    ) {
      GLImmediate.TexEnvJIT.hook_activeTexture(texture);
      glActiveTexture(texture);
    };

    var glEnable = _glEnable;
    _glEnable = _emscripten_glEnable = function _glEnable(cap) {
      GLImmediate.TexEnvJIT.hook_enable(cap);
      glEnable(cap);
    };
    var glDisable = _glDisable;
    _glDisable = _emscripten_glDisable = function _glDisable(cap) {
      GLImmediate.TexEnvJIT.hook_disable(cap);
      glDisable(cap);
    };

    var glTexEnvf =
      typeof _glTexEnvf != "undefined" ? _glTexEnvf : function () {};
    _glTexEnvf = _emscripten_glTexEnvf = function _glTexEnvf(
      target,
      pname,
      param
    ) {
      GLImmediate.TexEnvJIT.hook_texEnvf(target, pname, param);
      // Don't call old func, since we are the implementor.
      //glTexEnvf(target, pname, param);
    };
    var glTexEnvi =
      typeof _glTexEnvi != "undefined" ? _glTexEnvi : function () {};
    _glTexEnvi = _emscripten_glTexEnvi = function _glTexEnvi(
      target,
      pname,
      param
    ) {
      GLImmediate.TexEnvJIT.hook_texEnvi(target, pname, param);
      // Don't call old func, since we are the implementor.
      //glTexEnvi(target, pname, param);
    };
    var glTexEnvfv =
      typeof _glTexEnvfv != "undefined" ? _glTexEnvfv : function () {};
    _glTexEnvfv = _emscripten_glTexEnvfv = function _glTexEnvfv(
      target,
      pname,
      param
    ) {
      GLImmediate.TexEnvJIT.hook_texEnvfv(target, pname, param);
      // Don't call old func, since we are the implementor.
      //glTexEnvfv(target, pname, param);
    };

    _glGetTexEnviv = function _glGetTexEnviv(target, pname, param) {
      GLImmediate.TexEnvJIT.hook_getTexEnviv(target, pname, param);
    };

    _glGetTexEnvfv = function _glGetTexEnvfv(target, pname, param) {
      GLImmediate.TexEnvJIT.hook_getTexEnvfv(target, pname, param);
    };

    var glGetIntegerv = _glGetIntegerv;
    _glGetIntegerv = _emscripten_glGetIntegerv = function _glGetIntegerv(
      pname,
      params
    ) {
      switch (pname) {
        case 0x8b8d: {
          // GL_CURRENT_PROGRAM
          // Just query directly so we're working with WebGL objects.
          var cur = GLctx.getParameter(GLctx.CURRENT_PROGRAM);
          if (cur == GLImmediate.fixedFunctionProgram) {
            // Pretend we're not using a program.
            HEAP32[params >> 2] = 0;
            return;
          }
          break;
        }
      }
      glGetIntegerv(pname, params);
    };
  },
  initted: false,
  init: function () {
    Module.printErr(
      "WARNING: using emscripten GL immediate mode emulation. This is very limited in what it supports"
    );
    GLImmediate.initted = true;

    if (!Module.useWebGL) return; // a 2D canvas may be currently used TODO: make sure we are actually called in that case

    // User can override the maximum number of texture units that we emulate. Using fewer texture units increases runtime performance
    // slightly, so it is advantageous to choose as small value as needed.
    GLImmediate.MAX_TEXTURES =
      Module["GL_MAX_TEXTURE_IMAGE_UNITS"] ||
      GLctx.getParameter(GLctx.MAX_TEXTURE_IMAGE_UNITS);

    GLImmediate.TexEnvJIT.init(GLctx, GLImmediate.MAX_TEXTURES);

    GLImmediate.NUM_ATTRIBUTES =
      3 /*pos+normal+color attributes*/ + GLImmediate.MAX_TEXTURES;
    GLImmediate.clientAttributes = [];
    GLEmulation.enabledClientAttribIndices = [];
    for (var i = 0; i < GLImmediate.NUM_ATTRIBUTES; i++) {
      GLImmediate.clientAttributes.push({});
      GLEmulation.enabledClientAttribIndices.push(false);
    }

    // Initialize matrix library
    // When user sets a matrix, increment a 'version number' on the new data, and when rendering, submit
    // the matrices to the shader program only if they have an old version of the data.
    GLImmediate.matrix = [];
    GLImmediate.matrixStack = [];
    GLImmediate.matrixVersion = [];
    for (var i = 0; i < 2 + GLImmediate.MAX_TEXTURES; i++) {
      // Modelview, Projection, plus one matrix for each texture coordinate.
      GLImmediate.matrixStack.push([]);
      GLImmediate.matrixVersion.push(0);
      GLImmediate.matrix.push(GLImmediate.matrixLib.mat4.create());
      GLImmediate.matrixLib.mat4.identity(GLImmediate.matrix[i]);
    }

    // Renderer cache
    GLImmediate.rendererCache = GLImmediate.MapTreeLib.create();

    // Buffers for data
    GLImmediate.tempData = new Float32Array(GL.MAX_TEMP_BUFFER_SIZE >> 2);
    GLImmediate.indexData = new Uint16Array(GL.MAX_TEMP_BUFFER_SIZE >> 1);

    GLImmediate.vertexDataU8 = new Uint8Array(GLImmediate.tempData.buffer);

    GL.generateTempBuffers(true);

    GLImmediate.clientColor = new Float32Array([1, 1, 1, 1]);
  },
  prepareClientAttributes: function prepareClientAttributes(count, beginEnd) {
    // If no client attributes were modified since we were last called, do nothing. Note that this
    // does not work for glBegin/End, where we generate renderer components dynamically and then
    // disable them ourselves, but it does help with glDrawElements/Arrays.
    if (!GLImmediate.modifiedClientAttributes) {
      GLImmediate.vertexCounter = (GLImmediate.stride * count) / 4; // XXX assuming float
      return;
    }
    GLImmediate.modifiedClientAttributes = false;

    // The role of prepareClientAttributes is to examine the set of client-side vertex attribute buffers
    // that user code has submitted, and to prepare them to be uploaded to a VBO in GPU memory
    // (since WebGL does not support client-side rendering, i.e. rendering from vertex data in CPU memory)
    // User can submit vertex data generally in three different configurations:
    // 1. Fully planar: all attributes are in their own separate tightly-packed arrays in CPU memory.
    // 2. Fully interleaved: all attributes share a single array where data is interleaved something like (pos,uv,normal), (pos,uv,normal), ...
    // 3. Complex hybrid: Multiple separate arrays that either are sparsely strided, and/or partially interleave vertex attributes.

    // For simplicity, we support the case (2) as the fast case. For (1) and (3), we do a memory copy of the
    // vertex data here to prepare a relayouted buffer that is of the structure in case (2). The reason
    // for this is that it allows the emulation code to get away with using just one VBO buffer for rendering,
    // and not have to maintain multiple ones. Therefore cases (1) and (3) will be very slow, and case (2) is fast.

    // Detect which case we are in by using a quick heuristic by examining the strides of the buffers. If all the buffers have identical
    // stride, we assume we have case (2), otherwise we have something more complex.
    var clientStartPointer = 0x7fffffff;
    var bytes = 0; // Total number of bytes taken up by a single vertex.
    var minStride = 0x7fffffff;
    var maxStride = 0;
    var attributes = GLImmediate.liveClientAttributes;
    attributes.length = 0;
    for (var i = 0; i < 3 + GLImmediate.MAX_TEXTURES; i++) {
      if (GLImmediate.enabledClientAttributes[i]) {
        var attr = GLImmediate.clientAttributes[i];
        attributes.push(attr);
        clientStartPointer = Math.min(clientStartPointer, attr.pointer);
        attr.sizeBytes =
          attr.size * GL.byteSizeByType[attr.type - GL.byteSizeByTypeRoot];
        bytes += attr.sizeBytes;
        minStride = Math.min(minStride, attr.stride);
        maxStride = Math.max(maxStride, attr.stride);
      }
    }

    if ((minStride != maxStride || maxStride < bytes) && !beginEnd) {
      // We are in cases (1) or (3): slow path, shuffle the data around into a single interleaved vertex buffer.
      // The immediate-mode glBegin()/glEnd() vertex submission gets automatically generated in appropriate layout,
      // so never need to come down this path if that was used.
      if (!GLImmediate.restrideBuffer)
        GLImmediate.restrideBuffer = _malloc(GL.MAX_TEMP_BUFFER_SIZE);
      var start = GLImmediate.restrideBuffer;
      bytes = 0;
      // calculate restrided offsets and total size
      for (var i = 0; i < attributes.length; i++) {
        var attr = attributes[i];
        var size = attr.sizeBytes;
        if (size % 4 != 0) size += 4 - (size % 4); // align everything
        attr.offset = bytes;
        bytes += size;
      }
      // copy out the data (we need to know the stride for that, and define attr.pointer)
      for (var i = 0; i < attributes.length; i++) {
        var attr = attributes[i];
        var srcStride = Math.max(attr.sizeBytes, attr.stride);
        if ((srcStride & 3) == 0 && (attr.sizeBytes & 3) == 0) {
          var size4 = attr.sizeBytes >> 2;
          var srcStride4 = Math.max(attr.sizeBytes, attr.stride) >> 2;
          for (var j = 0; j < count; j++) {
            for (var k = 0; k < size4; k++) {
              // copy in chunks of 4 bytes, our alignment makes this possible
              HEAP32[((start + attr.offset + bytes * j) >> 2) + k] =
                HEAP32[(attr.pointer >> 2) + j * srcStride4 + k];
            }
          }
        } else {
          for (var j = 0; j < count; j++) {
            for (var k = 0; k < attr.sizeBytes; k++) {
              // source data was not aligned to multiples of 4, must copy byte by byte.
              HEAP8[start + attr.offset + bytes * j + k] =
                HEAP8[attr.pointer + j * srcStride + k];
            }
          }
        }
        attr.pointer = start + attr.offset;
      }
      GLImmediate.stride = bytes;
      GLImmediate.vertexPointer = start;
    } else {
      // case (2): fast path, all data is interleaved to a single vertex array so we can get away with a single VBO upload.
      if (GL.currArrayBuffer) {
        GLImmediate.vertexPointer = 0;
      } else {
        GLImmediate.vertexPointer = clientStartPointer;
      }
      for (var i = 0; i < attributes.length; i++) {
        var attr = attributes[i];
        attr.offset = attr.pointer - GLImmediate.vertexPointer; // Compute what will be the offset of this attribute in the VBO after we upload.
      }
      GLImmediate.stride = Math.max(maxStride, bytes);
    }
    if (!beginEnd) {
      GLImmediate.vertexCounter = (GLImmediate.stride * count) / 4; // XXX assuming float
    }
  },
  flush: function flush(numProvidedIndexes, startIndex, ptr) {
    startIndex = startIndex || 0;
    ptr = ptr || 0;

    var renderer = GLImmediate.getRenderer();

    // Generate index data in a format suitable for GLES 2.0/WebGL
    var numVertexes = (4 * GLImmediate.vertexCounter) / GLImmediate.stride;
    var emulatedElementArrayBuffer = false;
    var numIndexes = 0;
    if (numProvidedIndexes) {
      numIndexes = numProvidedIndexes;
      if (
        !GL.currArrayBuffer &&
        GLImmediate.firstVertex > GLImmediate.lastVertex
      ) {
        // Figure out the first and last vertex from the index data
        for (var i = 0; i < numProvidedIndexes; i++) {
          var currIndex = HEAPU16[(ptr + i * 2) >> 1];
          GLImmediate.firstVertex = Math.min(
            GLImmediate.firstVertex,
            currIndex
          );
          GLImmediate.lastVertex = Math.max(
            GLImmediate.lastVertex,
            currIndex + 1
          );
        }
      }
      if (!GL.currElementArrayBuffer) {
        // If no element array buffer is bound, then indices is a literal pointer to clientside data
        var indexBuffer = GL.getTempIndexBuffer(numProvidedIndexes << 1);
        GLctx.bindBuffer(GLctx.ELEMENT_ARRAY_BUFFER, indexBuffer);
        GLctx.bufferSubData(
          GLctx.ELEMENT_ARRAY_BUFFER,
          0,
          HEAPU16.subarray(ptr >> 1, (ptr + (numProvidedIndexes << 1)) >> 1)
        );
        ptr = 0;
        emulatedElementArrayBuffer = true;
      }
    } else if (GLImmediate.mode > 6) {
      // above GL_TRIANGLE_FAN are the non-GL ES modes
      if (GLImmediate.mode != 7)
        throw "unsupported immediate mode " + GLImmediate.mode; // GL_QUADS
      // GLImmediate.firstVertex is the first vertex we want. Quad indexes are in the pattern
      // 0 1 2, 0 2 3, 4 5 6, 4 6 7, so we need to look at index firstVertex * 1.5 to see it.
      // Then since indexes are 2 bytes each, that means 3
      ptr = GLImmediate.firstVertex * 3;
      var numQuads = numVertexes / 4;
      numIndexes = numQuads * 6; // 0 1 2, 0 2 3 pattern
      GLctx.bindBuffer(GLctx.ELEMENT_ARRAY_BUFFER, GL.tempQuadIndexBuffer);
      emulatedElementArrayBuffer = true;
    }

    renderer.prepare();

    if (numIndexes) {
      GLctx.drawElements(
        GLctx.TRIANGLES,
        numIndexes,
        GLctx.UNSIGNED_SHORT,
        ptr
      );
    } else {
      GLctx.drawArrays(GLImmediate.mode, startIndex, numVertexes);
    }

    if (emulatedElementArrayBuffer) {
      GLctx.bindBuffer(
        GLctx.ELEMENT_ARRAY_BUFFER,
        GL.buffers[GL.currElementArrayBuffer] || null
      );
    }
  },
};
GLImmediate.matrixLib = (function () {
  /**
   * @fileoverview gl-matrix - High performance matrix and vector operations for WebGL
   * @author Brandon Jones
   * @version 1.2.4
   */

  // Modifed for emscripten: Global scoping etc.

  /*
   * Copyright (c) 2011 Brandon Jones
   *
   * This software is provided 'as-is', without any express or implied
   * warranty. In no event will the authors be held liable for any damages
   * arising from the use of this software.
   *
   * Permission is granted to anyone to use this software for any purpose,
   * including commercial applications, and to alter it and redistribute it
   * freely, subject to the following restrictions:
   *
   *    1. The origin of this software must not be misrepresented; you must not
   *    claim that you wrote the original software. If you use this software
   *    in a product, an acknowledgment in the product documentation would be
   *    appreciated but is not required.
   *
   *    2. Altered source versions must be plainly marked as such, and must not
   *    be misrepresented as being the original software.
   *
   *    3. This notice may not be removed or altered from any source
   *    distribution.
   */

  /**
   * @class 3 Dimensional Vector
   * @name vec3
   */
  var vec3 = {};

  /**
   * @class 3x3 Matrix
   * @name mat3
   */
  var mat3 = {};

  /**
   * @class 4x4 Matrix
   * @name mat4
   */
  var mat4 = {};

  /**
   * @class Quaternion
   * @name quat4
   */
  var quat4 = {};

  var MatrixArray = Float32Array;

  /*
   * vec3
   */

  /**
   * Creates a new instance of a vec3 using the default array type
   * Any javascript array-like objects containing at least 3 numeric elements can serve as a vec3
   *
   * @param {vec3} [vec] vec3 containing values to initialize with
   *
   * @returns {vec3} New vec3
   */
  vec3.create = function (vec) {
    var dest = new MatrixArray(3);

    if (vec) {
      dest[0] = vec[0];
      dest[1] = vec[1];
      dest[2] = vec[2];
    } else {
      dest[0] = dest[1] = dest[2] = 0;
    }

    return dest;
  };

  /**
   * Copies the values of one vec3 to another
   *
   * @param {vec3} vec vec3 containing values to copy
   * @param {vec3} dest vec3 receiving copied values
   *
   * @returns {vec3} dest
   */
  vec3.set = function (vec, dest) {
    dest[0] = vec[0];
    dest[1] = vec[1];
    dest[2] = vec[2];

    return dest;
  };

  /**
   * Performs a vector addition
   *
   * @param {vec3} vec First operand
   * @param {vec3} vec2 Second operand
   * @param {vec3} [dest] vec3 receiving operation result. If not specified result is written to vec
   *
   * @returns {vec3} dest if specified, vec otherwise
   */
  vec3.add = function (vec, vec2, dest) {
    if (!dest || vec === dest) {
      vec[0] += vec2[0];
      vec[1] += vec2[1];
      vec[2] += vec2[2];
      return vec;
    }

    dest[0] = vec[0] + vec2[0];
    dest[1] = vec[1] + vec2[1];
    dest[2] = vec[2] + vec2[2];
    return dest;
  };

  /**
   * Performs a vector subtraction
   *
   * @param {vec3} vec First operand
   * @param {vec3} vec2 Second operand
   * @param {vec3} [dest] vec3 receiving operation result. If not specified result is written to vec
   *
   * @returns {vec3} dest if specified, vec otherwise
   */
  vec3.subtract = function (vec, vec2, dest) {
    if (!dest || vec === dest) {
      vec[0] -= vec2[0];
      vec[1] -= vec2[1];
      vec[2] -= vec2[2];
      return vec;
    }

    dest[0] = vec[0] - vec2[0];
    dest[1] = vec[1] - vec2[1];
    dest[2] = vec[2] - vec2[2];
    return dest;
  };

  /**
   * Performs a vector multiplication
   *
   * @param {vec3} vec First operand
   * @param {vec3} vec2 Second operand
   * @param {vec3} [dest] vec3 receiving operation result. If not specified result is written to vec
   *
   * @returns {vec3} dest if specified, vec otherwise
   */
  vec3.multiply = function (vec, vec2, dest) {
    if (!dest || vec === dest) {
      vec[0] *= vec2[0];
      vec[1] *= vec2[1];
      vec[2] *= vec2[2];
      return vec;
    }

    dest[0] = vec[0] * vec2[0];
    dest[1] = vec[1] * vec2[1];
    dest[2] = vec[2] * vec2[2];
    return dest;
  };

  /**
   * Negates the components of a vec3
   *
   * @param {vec3} vec vec3 to negate
   * @param {vec3} [dest] vec3 receiving operation result. If not specified result is written to vec
   *
   * @returns {vec3} dest if specified, vec otherwise
   */
  vec3.negate = function (vec, dest) {
    if (!dest) {
      dest = vec;
    }

    dest[0] = -vec[0];
    dest[1] = -vec[1];
    dest[2] = -vec[2];
    return dest;
  };

  /**
   * Multiplies the components of a vec3 by a scalar value
   *
   * @param {vec3} vec vec3 to scale
   * @param {number} val Value to scale by
   * @param {vec3} [dest] vec3 receiving operation result. If not specified result is written to vec
   *
   * @returns {vec3} dest if specified, vec otherwise
   */
  vec3.scale = function (vec, val, dest) {
    if (!dest || vec === dest) {
      vec[0] *= val;
      vec[1] *= val;
      vec[2] *= val;
      return vec;
    }

    dest[0] = vec[0] * val;
    dest[1] = vec[1] * val;
    dest[2] = vec[2] * val;
    return dest;
  };

  /**
   * Generates a unit vector of the same direction as the provided vec3
   * If vector length is 0, returns [0, 0, 0]
   *
   * @param {vec3} vec vec3 to normalize
   * @param {vec3} [dest] vec3 receiving operation result. If not specified result is written to vec
   *
   * @returns {vec3} dest if specified, vec otherwise
   */
  vec3.normalize = function (vec, dest) {
    if (!dest) {
      dest = vec;
    }

    var x = vec[0],
      y = vec[1],
      z = vec[2],
      len = Math.sqrt(x * x + y * y + z * z);

    if (!len) {
      dest[0] = 0;
      dest[1] = 0;
      dest[2] = 0;
      return dest;
    } else if (len === 1) {
      dest[0] = x;
      dest[1] = y;
      dest[2] = z;
      return dest;
    }

    len = 1 / len;
    dest[0] = x * len;
    dest[1] = y * len;
    dest[2] = z * len;
    return dest;
  };

  /**
   * Generates the cross product of two vec3s
   *
   * @param {vec3} vec First operand
   * @param {vec3} vec2 Second operand
   * @param {vec3} [dest] vec3 receiving operation result. If not specified result is written to vec
   *
   * @returns {vec3} dest if specified, vec otherwise
   */
  vec3.cross = function (vec, vec2, dest) {
    if (!dest) {
      dest = vec;
    }

    var x = vec[0],
      y = vec[1],
      z = vec[2],
      x2 = vec2[0],
      y2 = vec2[1],
      z2 = vec2[2];

    dest[0] = y * z2 - z * y2;
    dest[1] = z * x2 - x * z2;
    dest[2] = x * y2 - y * x2;
    return dest;
  };

  /**
   * Caclulates the length of a vec3
   *
   * @param {vec3} vec vec3 to calculate length of
   *
   * @returns {number} Length of vec
   */
  vec3.length = function (vec) {
    var x = vec[0],
      y = vec[1],
      z = vec[2];
    return Math.sqrt(x * x + y * y + z * z);
  };

  /**
   * Caclulates the dot product of two vec3s
   *
   * @param {vec3} vec First operand
   * @param {vec3} vec2 Second operand
   *
   * @returns {number} Dot product of vec and vec2
   */
  vec3.dot = function (vec, vec2) {
    return vec[0] * vec2[0] + vec[1] * vec2[1] + vec[2] * vec2[2];
  };

  /**
   * Generates a unit vector pointing from one vector to another
   *
   * @param {vec3} vec Origin vec3
   * @param {vec3} vec2 vec3 to point to
   * @param {vec3} [dest] vec3 receiving operation result. If not specified result is written to vec
   *
   * @returns {vec3} dest if specified, vec otherwise
   */
  vec3.direction = function (vec, vec2, dest) {
    if (!dest) {
      dest = vec;
    }

    var x = vec[0] - vec2[0],
      y = vec[1] - vec2[1],
      z = vec[2] - vec2[2],
      len = Math.sqrt(x * x + y * y + z * z);

    if (!len) {
      dest[0] = 0;
      dest[1] = 0;
      dest[2] = 0;
      return dest;
    }

    len = 1 / len;
    dest[0] = x * len;
    dest[1] = y * len;
    dest[2] = z * len;
    return dest;
  };

  /**
   * Performs a linear interpolation between two vec3
   *
   * @param {vec3} vec First vector
   * @param {vec3} vec2 Second vector
   * @param {number} lerp Interpolation amount between the two inputs
   * @param {vec3} [dest] vec3 receiving operation result. If not specified result is written to vec
   *
   * @returns {vec3} dest if specified, vec otherwise
   */
  vec3.lerp = function (vec, vec2, lerp, dest) {
    if (!dest) {
      dest = vec;
    }

    dest[0] = vec[0] + lerp * (vec2[0] - vec[0]);
    dest[1] = vec[1] + lerp * (vec2[1] - vec[1]);
    dest[2] = vec[2] + lerp * (vec2[2] - vec[2]);

    return dest;
  };

  /**
   * Calculates the euclidian distance between two vec3
   *
   * Params:
   * @param {vec3} vec First vector
   * @param {vec3} vec2 Second vector
   *
   * @returns {number} Distance between vec and vec2
   */
  vec3.dist = function (vec, vec2) {
    var x = vec2[0] - vec[0],
      y = vec2[1] - vec[1],
      z = vec2[2] - vec[2];

    return Math.sqrt(x * x + y * y + z * z);
  };

  /**
   * Projects the specified vec3 from screen space into object space
   * Based on the <a href="http://webcvs.freedesktop.org/mesa/Mesa/src/glu/mesa/project.c?revision=1.4&view=markup">Mesa gluUnProject implementation</a>
   *
   * @param {vec3} vec Screen-space vector to project
   * @param {mat4} view View matrix
   * @param {mat4} proj Projection matrix
   * @param {vec4} viewport Viewport as given to gl.viewport [x, y, width, height]
   * @param {vec3} [dest] vec3 receiving unprojected result. If not specified result is written to vec
   *
   * @returns {vec3} dest if specified, vec otherwise
   */
  vec3.unproject = function (vec, view, proj, viewport, dest) {
    if (!dest) {
      dest = vec;
    }

    var m = mat4.create();
    var v = new MatrixArray(4);

    v[0] = ((vec[0] - viewport[0]) * 2.0) / viewport[2] - 1.0;
    v[1] = ((vec[1] - viewport[1]) * 2.0) / viewport[3] - 1.0;
    v[2] = 2.0 * vec[2] - 1.0;
    v[3] = 1.0;

    mat4.multiply(proj, view, m);
    if (!mat4.inverse(m)) {
      return null;
    }

    mat4.multiplyVec4(m, v);
    if (v[3] === 0.0) {
      return null;
    }

    dest[0] = v[0] / v[3];
    dest[1] = v[1] / v[3];
    dest[2] = v[2] / v[3];

    return dest;
  };

  /**
   * Returns a string representation of a vector
   *
   * @param {vec3} vec Vector to represent as a string
   *
   * @returns {string} String representation of vec
   */
  vec3.str = function (vec) {
    return "[" + vec[0] + ", " + vec[1] + ", " + vec[2] + "]";
  };

  /*
   * mat3
   */

  /**
   * Creates a new instance of a mat3 using the default array type
   * Any javascript array-like object containing at least 9 numeric elements can serve as a mat3
   *
   * @param {mat3} [mat] mat3 containing values to initialize with
   *
   * @returns {mat3} New mat3
   */
  mat3.create = function (mat) {
    var dest = new MatrixArray(9);

    if (mat) {
      dest[0] = mat[0];
      dest[1] = mat[1];
      dest[2] = mat[2];
      dest[3] = mat[3];
      dest[4] = mat[4];
      dest[5] = mat[5];
      dest[6] = mat[6];
      dest[7] = mat[7];
      dest[8] = mat[8];
    }

    return dest;
  };

  /**
   * Copies the values of one mat3 to another
   *
   * @param {mat3} mat mat3 containing values to copy
   * @param {mat3} dest mat3 receiving copied values
   *
   * @returns {mat3} dest
   */
  mat3.set = function (mat, dest) {
    dest[0] = mat[0];
    dest[1] = mat[1];
    dest[2] = mat[2];
    dest[3] = mat[3];
    dest[4] = mat[4];
    dest[5] = mat[5];
    dest[6] = mat[6];
    dest[7] = mat[7];
    dest[8] = mat[8];
    return dest;
  };

  /**
   * Sets a mat3 to an identity matrix
   *
   * @param {mat3} dest mat3 to set
   *
   * @returns dest if specified, otherwise a new mat3
   */
  mat3.identity = function (dest) {
    if (!dest) {
      dest = mat3.create();
    }
    dest[0] = 1;
    dest[1] = 0;
    dest[2] = 0;
    dest[3] = 0;
    dest[4] = 1;
    dest[5] = 0;
    dest[6] = 0;
    dest[7] = 0;
    dest[8] = 1;
    return dest;
  };

  /**
   * Transposes a mat3 (flips the values over the diagonal)
   *
   * Params:
   * @param {mat3} mat mat3 to transpose
   * @param {mat3} [dest] mat3 receiving transposed values. If not specified result is written to mat
   *
   * @returns {mat3} dest is specified, mat otherwise
   */
  mat3.transpose = function (mat, dest) {
    // If we are transposing ourselves we can skip a few steps but have to cache some values
    if (!dest || mat === dest) {
      var a01 = mat[1],
        a02 = mat[2],
        a12 = mat[5];

      mat[1] = mat[3];
      mat[2] = mat[6];
      mat[3] = a01;
      mat[5] = mat[7];
      mat[6] = a02;
      mat[7] = a12;
      return mat;
    }

    dest[0] = mat[0];
    dest[1] = mat[3];
    dest[2] = mat[6];
    dest[3] = mat[1];
    dest[4] = mat[4];
    dest[5] = mat[7];
    dest[6] = mat[2];
    dest[7] = mat[5];
    dest[8] = mat[8];
    return dest;
  };

  /**
   * Copies the elements of a mat3 into the upper 3x3 elements of a mat4
   *
   * @param {mat3} mat mat3 containing values to copy
   * @param {mat4} [dest] mat4 receiving copied values
   *
   * @returns {mat4} dest if specified, a new mat4 otherwise
   */
  mat3.toMat4 = function (mat, dest) {
    if (!dest) {
      dest = mat4.create();
    }

    dest[15] = 1;
    dest[14] = 0;
    dest[13] = 0;
    dest[12] = 0;

    dest[11] = 0;
    dest[10] = mat[8];
    dest[9] = mat[7];
    dest[8] = mat[6];

    dest[7] = 0;
    dest[6] = mat[5];
    dest[5] = mat[4];
    dest[4] = mat[3];

    dest[3] = 0;
    dest[2] = mat[2];
    dest[1] = mat[1];
    dest[0] = mat[0];

    return dest;
  };

  /**
   * Returns a string representation of a mat3
   *
   * @param {mat3} mat mat3 to represent as a string
   *
   * @param {string} String representation of mat
   */
  mat3.str = function (mat) {
    return (
      "[" +
      mat[0] +
      ", " +
      mat[1] +
      ", " +
      mat[2] +
      ", " +
      mat[3] +
      ", " +
      mat[4] +
      ", " +
      mat[5] +
      ", " +
      mat[6] +
      ", " +
      mat[7] +
      ", " +
      mat[8] +
      "]"
    );
  };

  /*
   * mat4
   */

  /**
   * Creates a new instance of a mat4 using the default array type
   * Any javascript array-like object containing at least 16 numeric elements can serve as a mat4
   *
   * @param {mat4} [mat] mat4 containing values to initialize with
   *
   * @returns {mat4} New mat4
   */
  mat4.create = function (mat) {
    var dest = new MatrixArray(16);

    if (mat) {
      dest[0] = mat[0];
      dest[1] = mat[1];
      dest[2] = mat[2];
      dest[3] = mat[3];
      dest[4] = mat[4];
      dest[5] = mat[5];
      dest[6] = mat[6];
      dest[7] = mat[7];
      dest[8] = mat[8];
      dest[9] = mat[9];
      dest[10] = mat[10];
      dest[11] = mat[11];
      dest[12] = mat[12];
      dest[13] = mat[13];
      dest[14] = mat[14];
      dest[15] = mat[15];
    }

    return dest;
  };

  /**
   * Copies the values of one mat4 to another
   *
   * @param {mat4} mat mat4 containing values to copy
   * @param {mat4} dest mat4 receiving copied values
   *
   * @returns {mat4} dest
   */
  mat4.set = function (mat, dest) {
    dest[0] = mat[0];
    dest[1] = mat[1];
    dest[2] = mat[2];
    dest[3] = mat[3];
    dest[4] = mat[4];
    dest[5] = mat[5];
    dest[6] = mat[6];
    dest[7] = mat[7];
    dest[8] = mat[8];
    dest[9] = mat[9];
    dest[10] = mat[10];
    dest[11] = mat[11];
    dest[12] = mat[12];
    dest[13] = mat[13];
    dest[14] = mat[14];
    dest[15] = mat[15];
    return dest;
  };

  /**
   * Sets a mat4 to an identity matrix
   *
   * @param {mat4} dest mat4 to set
   *
   * @returns {mat4} dest
   */
  mat4.identity = function (dest) {
    if (!dest) {
      dest = mat4.create();
    }
    dest[0] = 1;
    dest[1] = 0;
    dest[2] = 0;
    dest[3] = 0;
    dest[4] = 0;
    dest[5] = 1;
    dest[6] = 0;
    dest[7] = 0;
    dest[8] = 0;
    dest[9] = 0;
    dest[10] = 1;
    dest[11] = 0;
    dest[12] = 0;
    dest[13] = 0;
    dest[14] = 0;
    dest[15] = 1;
    return dest;
  };

  /**
   * Transposes a mat4 (flips the values over the diagonal)
   *
   * @param {mat4} mat mat4 to transpose
   * @param {mat4} [dest] mat4 receiving transposed values. If not specified result is written to mat
   *
   * @param {mat4} dest is specified, mat otherwise
   */
  mat4.transpose = function (mat, dest) {
    // If we are transposing ourselves we can skip a few steps but have to cache some values
    if (!dest || mat === dest) {
      var a01 = mat[1],
        a02 = mat[2],
        a03 = mat[3],
        a12 = mat[6],
        a13 = mat[7],
        a23 = mat[11];

      mat[1] = mat[4];
      mat[2] = mat[8];
      mat[3] = mat[12];
      mat[4] = a01;
      mat[6] = mat[9];
      mat[7] = mat[13];
      mat[8] = a02;
      mat[9] = a12;
      mat[11] = mat[14];
      mat[12] = a03;
      mat[13] = a13;
      mat[14] = a23;
      return mat;
    }

    dest[0] = mat[0];
    dest[1] = mat[4];
    dest[2] = mat[8];
    dest[3] = mat[12];
    dest[4] = mat[1];
    dest[5] = mat[5];
    dest[6] = mat[9];
    dest[7] = mat[13];
    dest[8] = mat[2];
    dest[9] = mat[6];
    dest[10] = mat[10];
    dest[11] = mat[14];
    dest[12] = mat[3];
    dest[13] = mat[7];
    dest[14] = mat[11];
    dest[15] = mat[15];
    return dest;
  };

  /**
   * Calculates the determinant of a mat4
   *
   * @param {mat4} mat mat4 to calculate determinant of
   *
   * @returns {number} determinant of mat
   */
  mat4.determinant = function (mat) {
    // Cache the matrix values (makes for huge speed increases!)
    var a00 = mat[0],
      a01 = mat[1],
      a02 = mat[2],
      a03 = mat[3],
      a10 = mat[4],
      a11 = mat[5],
      a12 = mat[6],
      a13 = mat[7],
      a20 = mat[8],
      a21 = mat[9],
      a22 = mat[10],
      a23 = mat[11],
      a30 = mat[12],
      a31 = mat[13],
      a32 = mat[14],
      a33 = mat[15];

    return (
      a30 * a21 * a12 * a03 -
      a20 * a31 * a12 * a03 -
      a30 * a11 * a22 * a03 +
      a10 * a31 * a22 * a03 +
      a20 * a11 * a32 * a03 -
      a10 * a21 * a32 * a03 -
      a30 * a21 * a02 * a13 +
      a20 * a31 * a02 * a13 +
      a30 * a01 * a22 * a13 -
      a00 * a31 * a22 * a13 -
      a20 * a01 * a32 * a13 +
      a00 * a21 * a32 * a13 +
      a30 * a11 * a02 * a23 -
      a10 * a31 * a02 * a23 -
      a30 * a01 * a12 * a23 +
      a00 * a31 * a12 * a23 +
      a10 * a01 * a32 * a23 -
      a00 * a11 * a32 * a23 -
      a20 * a11 * a02 * a33 +
      a10 * a21 * a02 * a33 +
      a20 * a01 * a12 * a33 -
      a00 * a21 * a12 * a33 -
      a10 * a01 * a22 * a33 +
      a00 * a11 * a22 * a33
    );
  };

  /**
   * Calculates the inverse matrix of a mat4
   *
   * @param {mat4} mat mat4 to calculate inverse of
   * @param {mat4} [dest] mat4 receiving inverse matrix. If not specified result is written to mat
   *
   * @param {mat4} dest is specified, mat otherwise, null if matrix cannot be inverted
   */
  mat4.inverse = function (mat, dest) {
    if (!dest) {
      dest = mat;
    }

    // Cache the matrix values (makes for huge speed increases!)
    var a00 = mat[0],
      a01 = mat[1],
      a02 = mat[2],
      a03 = mat[3],
      a10 = mat[4],
      a11 = mat[5],
      a12 = mat[6],
      a13 = mat[7],
      a20 = mat[8],
      a21 = mat[9],
      a22 = mat[10],
      a23 = mat[11],
      a30 = mat[12],
      a31 = mat[13],
      a32 = mat[14],
      a33 = mat[15],
      b00 = a00 * a11 - a01 * a10,
      b01 = a00 * a12 - a02 * a10,
      b02 = a00 * a13 - a03 * a10,
      b03 = a01 * a12 - a02 * a11,
      b04 = a01 * a13 - a03 * a11,
      b05 = a02 * a13 - a03 * a12,
      b06 = a20 * a31 - a21 * a30,
      b07 = a20 * a32 - a22 * a30,
      b08 = a20 * a33 - a23 * a30,
      b09 = a21 * a32 - a22 * a31,
      b10 = a21 * a33 - a23 * a31,
      b11 = a22 * a33 - a23 * a32,
      d = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06,
      invDet;

    // Calculate the determinant
    if (!d) {
      return null;
    }
    invDet = 1 / d;

    dest[0] = (a11 * b11 - a12 * b10 + a13 * b09) * invDet;
    dest[1] = (-a01 * b11 + a02 * b10 - a03 * b09) * invDet;
    dest[2] = (a31 * b05 - a32 * b04 + a33 * b03) * invDet;
    dest[3] = (-a21 * b05 + a22 * b04 - a23 * b03) * invDet;
    dest[4] = (-a10 * b11 + a12 * b08 - a13 * b07) * invDet;
    dest[5] = (a00 * b11 - a02 * b08 + a03 * b07) * invDet;
    dest[6] = (-a30 * b05 + a32 * b02 - a33 * b01) * invDet;
    dest[7] = (a20 * b05 - a22 * b02 + a23 * b01) * invDet;
    dest[8] = (a10 * b10 - a11 * b08 + a13 * b06) * invDet;
    dest[9] = (-a00 * b10 + a01 * b08 - a03 * b06) * invDet;
    dest[10] = (a30 * b04 - a31 * b02 + a33 * b00) * invDet;
    dest[11] = (-a20 * b04 + a21 * b02 - a23 * b00) * invDet;
    dest[12] = (-a10 * b09 + a11 * b07 - a12 * b06) * invDet;
    dest[13] = (a00 * b09 - a01 * b07 + a02 * b06) * invDet;
    dest[14] = (-a30 * b03 + a31 * b01 - a32 * b00) * invDet;
    dest[15] = (a20 * b03 - a21 * b01 + a22 * b00) * invDet;

    return dest;
  };

  /**
   * Copies the upper 3x3 elements of a mat4 into another mat4
   *
   * @param {mat4} mat mat4 containing values to copy
   * @param {mat4} [dest] mat4 receiving copied values
   *
   * @returns {mat4} dest is specified, a new mat4 otherwise
   */
  mat4.toRotationMat = function (mat, dest) {
    if (!dest) {
      dest = mat4.create();
    }

    dest[0] = mat[0];
    dest[1] = mat[1];
    dest[2] = mat[2];
    dest[3] = mat[3];
    dest[4] = mat[4];
    dest[5] = mat[5];
    dest[6] = mat[6];
    dest[7] = mat[7];
    dest[8] = mat[8];
    dest[9] = mat[9];
    dest[10] = mat[10];
    dest[11] = mat[11];
    dest[12] = 0;
    dest[13] = 0;
    dest[14] = 0;
    dest[15] = 1;

    return dest;
  };

  /**
   * Copies the upper 3x3 elements of a mat4 into a mat3
   *
   * @param {mat4} mat mat4 containing values to copy
   * @param {mat3} [dest] mat3 receiving copied values
   *
   * @returns {mat3} dest is specified, a new mat3 otherwise
   */
  mat4.toMat3 = function (mat, dest) {
    if (!dest) {
      dest = mat3.create();
    }

    dest[0] = mat[0];
    dest[1] = mat[1];
    dest[2] = mat[2];
    dest[3] = mat[4];
    dest[4] = mat[5];
    dest[5] = mat[6];
    dest[6] = mat[8];
    dest[7] = mat[9];
    dest[8] = mat[10];

    return dest;
  };

  /**
   * Calculates the inverse of the upper 3x3 elements of a mat4 and copies the result into a mat3
   * The resulting matrix is useful for calculating transformed normals
   *
   * Params:
   * @param {mat4} mat mat4 containing values to invert and copy
   * @param {mat3} [dest] mat3 receiving values
   *
   * @returns {mat3} dest is specified, a new mat3 otherwise, null if the matrix cannot be inverted
   */
  mat4.toInverseMat3 = function (mat, dest) {
    // Cache the matrix values (makes for huge speed increases!)
    var a00 = mat[0],
      a01 = mat[1],
      a02 = mat[2],
      a10 = mat[4],
      a11 = mat[5],
      a12 = mat[6],
      a20 = mat[8],
      a21 = mat[9],
      a22 = mat[10],
      b01 = a22 * a11 - a12 * a21,
      b11 = -a22 * a10 + a12 * a20,
      b21 = a21 * a10 - a11 * a20,
      d = a00 * b01 + a01 * b11 + a02 * b21,
      id;

    if (!d) {
      return null;
    }
    id = 1 / d;

    if (!dest) {
      dest = mat3.create();
    }

    dest[0] = b01 * id;
    dest[1] = (-a22 * a01 + a02 * a21) * id;
    dest[2] = (a12 * a01 - a02 * a11) * id;
    dest[3] = b11 * id;
    dest[4] = (a22 * a00 - a02 * a20) * id;
    dest[5] = (-a12 * a00 + a02 * a10) * id;
    dest[6] = b21 * id;
    dest[7] = (-a21 * a00 + a01 * a20) * id;
    dest[8] = (a11 * a00 - a01 * a10) * id;

    return dest;
  };

  /**
   * Performs a matrix multiplication
   *
   * @param {mat4} mat First operand
   * @param {mat4} mat2 Second operand
   * @param {mat4} [dest] mat4 receiving operation result. If not specified result is written to mat
   *
   * @returns {mat4} dest if specified, mat otherwise
   */
  mat4.multiply = function (mat, mat2, dest) {
    if (!dest) {
      dest = mat;
    }

    // Cache the matrix values (makes for huge speed increases!)
    var a00 = mat[0],
      a01 = mat[1],
      a02 = mat[2],
      a03 = mat[3],
      a10 = mat[4],
      a11 = mat[5],
      a12 = mat[6],
      a13 = mat[7],
      a20 = mat[8],
      a21 = mat[9],
      a22 = mat[10],
      a23 = mat[11],
      a30 = mat[12],
      a31 = mat[13],
      a32 = mat[14],
      a33 = mat[15],
      b00 = mat2[0],
      b01 = mat2[1],
      b02 = mat2[2],
      b03 = mat2[3],
      b10 = mat2[4],
      b11 = mat2[5],
      b12 = mat2[6],
      b13 = mat2[7],
      b20 = mat2[8],
      b21 = mat2[9],
      b22 = mat2[10],
      b23 = mat2[11],
      b30 = mat2[12],
      b31 = mat2[13],
      b32 = mat2[14],
      b33 = mat2[15];

    dest[0] = b00 * a00 + b01 * a10 + b02 * a20 + b03 * a30;
    dest[1] = b00 * a01 + b01 * a11 + b02 * a21 + b03 * a31;
    dest[2] = b00 * a02 + b01 * a12 + b02 * a22 + b03 * a32;
    dest[3] = b00 * a03 + b01 * a13 + b02 * a23 + b03 * a33;
    dest[4] = b10 * a00 + b11 * a10 + b12 * a20 + b13 * a30;
    dest[5] = b10 * a01 + b11 * a11 + b12 * a21 + b13 * a31;
    dest[6] = b10 * a02 + b11 * a12 + b12 * a22 + b13 * a32;
    dest[7] = b10 * a03 + b11 * a13 + b12 * a23 + b13 * a33;
    dest[8] = b20 * a00 + b21 * a10 + b22 * a20 + b23 * a30;
    dest[9] = b20 * a01 + b21 * a11 + b22 * a21 + b23 * a31;
    dest[10] = b20 * a02 + b21 * a12 + b22 * a22 + b23 * a32;
    dest[11] = b20 * a03 + b21 * a13 + b22 * a23 + b23 * a33;
    dest[12] = b30 * a00 + b31 * a10 + b32 * a20 + b33 * a30;
    dest[13] = b30 * a01 + b31 * a11 + b32 * a21 + b33 * a31;
    dest[14] = b30 * a02 + b31 * a12 + b32 * a22 + b33 * a32;
    dest[15] = b30 * a03 + b31 * a13 + b32 * a23 + b33 * a33;

    return dest;
  };

  /**
   * Transforms a vec3 with the given matrix
   * 4th vector component is implicitly '1'
   *
   * @param {mat4} mat mat4 to transform the vector with
   * @param {vec3} vec vec3 to transform
   * @param {vec3} [dest] vec3 receiving operation result. If not specified result is written to vec
   *
   * @returns {vec3} dest if specified, vec otherwise
   */
  mat4.multiplyVec3 = function (mat, vec, dest) {
    if (!dest) {
      dest = vec;
    }

    var x = vec[0],
      y = vec[1],
      z = vec[2];

    dest[0] = mat[0] * x + mat[4] * y + mat[8] * z + mat[12];
    dest[1] = mat[1] * x + mat[5] * y + mat[9] * z + mat[13];
    dest[2] = mat[2] * x + mat[6] * y + mat[10] * z + mat[14];

    return dest;
  };

  /**
   * Transforms a vec4 with the given matrix
   *
   * @param {mat4} mat mat4 to transform the vector with
   * @param {vec4} vec vec4 to transform
   * @param {vec4} [dest] vec4 receiving operation result. If not specified result is written to vec
   *
   * @returns {vec4} dest if specified, vec otherwise
   */
  mat4.multiplyVec4 = function (mat, vec, dest) {
    if (!dest) {
      dest = vec;
    }

    var x = vec[0],
      y = vec[1],
      z = vec[2],
      w = vec[3];

    dest[0] = mat[0] * x + mat[4] * y + mat[8] * z + mat[12] * w;
    dest[1] = mat[1] * x + mat[5] * y + mat[9] * z + mat[13] * w;
    dest[2] = mat[2] * x + mat[6] * y + mat[10] * z + mat[14] * w;
    dest[3] = mat[3] * x + mat[7] * y + mat[11] * z + mat[15] * w;

    return dest;
  };

  /**
   * Translates a matrix by the given vector
   *
   * @param {mat4} mat mat4 to translate
   * @param {vec3} vec vec3 specifying the translation
   * @param {mat4} [dest] mat4 receiving operation result. If not specified result is written to mat
   *
   * @returns {mat4} dest if specified, mat otherwise
   */
  mat4.translate = function (mat, vec, dest) {
    var x = vec[0],
      y = vec[1],
      z = vec[2],
      a00,
      a01,
      a02,
      a03,
      a10,
      a11,
      a12,
      a13,
      a20,
      a21,
      a22,
      a23;

    if (!dest || mat === dest) {
      mat[12] = mat[0] * x + mat[4] * y + mat[8] * z + mat[12];
      mat[13] = mat[1] * x + mat[5] * y + mat[9] * z + mat[13];
      mat[14] = mat[2] * x + mat[6] * y + mat[10] * z + mat[14];
      mat[15] = mat[3] * x + mat[7] * y + mat[11] * z + mat[15];
      return mat;
    }

    a00 = mat[0];
    a01 = mat[1];
    a02 = mat[2];
    a03 = mat[3];
    a10 = mat[4];
    a11 = mat[5];
    a12 = mat[6];
    a13 = mat[7];
    a20 = mat[8];
    a21 = mat[9];
    a22 = mat[10];
    a23 = mat[11];

    dest[0] = a00;
    dest[1] = a01;
    dest[2] = a02;
    dest[3] = a03;
    dest[4] = a10;
    dest[5] = a11;
    dest[6] = a12;
    dest[7] = a13;
    dest[8] = a20;
    dest[9] = a21;
    dest[10] = a22;
    dest[11] = a23;

    dest[12] = a00 * x + a10 * y + a20 * z + mat[12];
    dest[13] = a01 * x + a11 * y + a21 * z + mat[13];
    dest[14] = a02 * x + a12 * y + a22 * z + mat[14];
    dest[15] = a03 * x + a13 * y + a23 * z + mat[15];
    return dest;
  };

  /**
   * Scales a matrix by the given vector
   *
   * @param {mat4} mat mat4 to scale
   * @param {vec3} vec vec3 specifying the scale for each axis
   * @param {mat4} [dest] mat4 receiving operation result. If not specified result is written to mat
   *
   * @param {mat4} dest if specified, mat otherwise
   */
  mat4.scale = function (mat, vec, dest) {
    var x = vec[0],
      y = vec[1],
      z = vec[2];

    if (!dest || mat === dest) {
      mat[0] *= x;
      mat[1] *= x;
      mat[2] *= x;
      mat[3] *= x;
      mat[4] *= y;
      mat[5] *= y;
      mat[6] *= y;
      mat[7] *= y;
      mat[8] *= z;
      mat[9] *= z;
      mat[10] *= z;
      mat[11] *= z;
      return mat;
    }

    dest[0] = mat[0] * x;
    dest[1] = mat[1] * x;
    dest[2] = mat[2] * x;
    dest[3] = mat[3] * x;
    dest[4] = mat[4] * y;
    dest[5] = mat[5] * y;
    dest[6] = mat[6] * y;
    dest[7] = mat[7] * y;
    dest[8] = mat[8] * z;
    dest[9] = mat[9] * z;
    dest[10] = mat[10] * z;
    dest[11] = mat[11] * z;
    dest[12] = mat[12];
    dest[13] = mat[13];
    dest[14] = mat[14];
    dest[15] = mat[15];
    return dest;
  };

  /**
   * Rotates a matrix by the given angle around the specified axis
   * If rotating around a primary axis (X,Y,Z) one of the specialized rotation functions should be used instead for performance
   *
   * @param {mat4} mat mat4 to rotate
   * @param {number} angle Angle (in radians) to rotate
   * @param {vec3} axis vec3 representing the axis to rotate around
   * @param {mat4} [dest] mat4 receiving operation result. If not specified result is written to mat
   *
   * @returns {mat4} dest if specified, mat otherwise
   */
  mat4.rotate = function (mat, angle, axis, dest) {
    var x = axis[0],
      y = axis[1],
      z = axis[2],
      len = Math.sqrt(x * x + y * y + z * z),
      s,
      c,
      t,
      a00,
      a01,
      a02,
      a03,
      a10,
      a11,
      a12,
      a13,
      a20,
      a21,
      a22,
      a23,
      b00,
      b01,
      b02,
      b10,
      b11,
      b12,
      b20,
      b21,
      b22;

    if (!len) {
      return null;
    }
    if (len !== 1) {
      len = 1 / len;
      x *= len;
      y *= len;
      z *= len;
    }

    s = Math.sin(angle);
    c = Math.cos(angle);
    t = 1 - c;

    a00 = mat[0];
    a01 = mat[1];
    a02 = mat[2];
    a03 = mat[3];
    a10 = mat[4];
    a11 = mat[5];
    a12 = mat[6];
    a13 = mat[7];
    a20 = mat[8];
    a21 = mat[9];
    a22 = mat[10];
    a23 = mat[11];

    // Construct the elements of the rotation matrix
    b00 = x * x * t + c;
    b01 = y * x * t + z * s;
    b02 = z * x * t - y * s;
    b10 = x * y * t - z * s;
    b11 = y * y * t + c;
    b12 = z * y * t + x * s;
    b20 = x * z * t + y * s;
    b21 = y * z * t - x * s;
    b22 = z * z * t + c;

    if (!dest) {
      dest = mat;
    } else if (mat !== dest) {
      // If the source and destination differ, copy the unchanged last row
      dest[12] = mat[12];
      dest[13] = mat[13];
      dest[14] = mat[14];
      dest[15] = mat[15];
    }

    // Perform rotation-specific matrix multiplication
    dest[0] = a00 * b00 + a10 * b01 + a20 * b02;
    dest[1] = a01 * b00 + a11 * b01 + a21 * b02;
    dest[2] = a02 * b00 + a12 * b01 + a22 * b02;
    dest[3] = a03 * b00 + a13 * b01 + a23 * b02;

    dest[4] = a00 * b10 + a10 * b11 + a20 * b12;
    dest[5] = a01 * b10 + a11 * b11 + a21 * b12;
    dest[6] = a02 * b10 + a12 * b11 + a22 * b12;
    dest[7] = a03 * b10 + a13 * b11 + a23 * b12;

    dest[8] = a00 * b20 + a10 * b21 + a20 * b22;
    dest[9] = a01 * b20 + a11 * b21 + a21 * b22;
    dest[10] = a02 * b20 + a12 * b21 + a22 * b22;
    dest[11] = a03 * b20 + a13 * b21 + a23 * b22;
    return dest;
  };

  /**
   * Rotates a matrix by the given angle around the X axis
   *
   * @param {mat4} mat mat4 to rotate
   * @param {number} angle Angle (in radians) to rotate
   * @param {mat4} [dest] mat4 receiving operation result. If not specified result is written to mat
   *
   * @returns {mat4} dest if specified, mat otherwise
   */
  mat4.rotateX = function (mat, angle, dest) {
    var s = Math.sin(angle),
      c = Math.cos(angle),
      a10 = mat[4],
      a11 = mat[5],
      a12 = mat[6],
      a13 = mat[7],
      a20 = mat[8],
      a21 = mat[9],
      a22 = mat[10],
      a23 = mat[11];

    if (!dest) {
      dest = mat;
    } else if (mat !== dest) {
      // If the source and destination differ, copy the unchanged rows
      dest[0] = mat[0];
      dest[1] = mat[1];
      dest[2] = mat[2];
      dest[3] = mat[3];

      dest[12] = mat[12];
      dest[13] = mat[13];
      dest[14] = mat[14];
      dest[15] = mat[15];
    }

    // Perform axis-specific matrix multiplication
    dest[4] = a10 * c + a20 * s;
    dest[5] = a11 * c + a21 * s;
    dest[6] = a12 * c + a22 * s;
    dest[7] = a13 * c + a23 * s;

    dest[8] = a10 * -s + a20 * c;
    dest[9] = a11 * -s + a21 * c;
    dest[10] = a12 * -s + a22 * c;
    dest[11] = a13 * -s + a23 * c;
    return dest;
  };

  /**
   * Rotates a matrix by the given angle around the Y axis
   *
   * @param {mat4} mat mat4 to rotate
   * @param {number} angle Angle (in radians) to rotate
   * @param {mat4} [dest] mat4 receiving operation result. If not specified result is written to mat
   *
   * @returns {mat4} dest if specified, mat otherwise
   */
  mat4.rotateY = function (mat, angle, dest) {
    var s = Math.sin(angle),
      c = Math.cos(angle),
      a00 = mat[0],
      a01 = mat[1],
      a02 = mat[2],
      a03 = mat[3],
      a20 = mat[8],
      a21 = mat[9],
      a22 = mat[10],
      a23 = mat[11];

    if (!dest) {
      dest = mat;
    } else if (mat !== dest) {
      // If the source and destination differ, copy the unchanged rows
      dest[4] = mat[4];
      dest[5] = mat[5];
      dest[6] = mat[6];
      dest[7] = mat[7];

      dest[12] = mat[12];
      dest[13] = mat[13];
      dest[14] = mat[14];
      dest[15] = mat[15];
    }

    // Perform axis-specific matrix multiplication
    dest[0] = a00 * c + a20 * -s;
    dest[1] = a01 * c + a21 * -s;
    dest[2] = a02 * c + a22 * -s;
    dest[3] = a03 * c + a23 * -s;

    dest[8] = a00 * s + a20 * c;
    dest[9] = a01 * s + a21 * c;
    dest[10] = a02 * s + a22 * c;
    dest[11] = a03 * s + a23 * c;
    return dest;
  };

  /**
   * Rotates a matrix by the given angle around the Z axis
   *
   * @param {mat4} mat mat4 to rotate
   * @param {number} angle Angle (in radians) to rotate
   * @param {mat4} [dest] mat4 receiving operation result. If not specified result is written to mat
   *
   * @returns {mat4} dest if specified, mat otherwise
   */
  mat4.rotateZ = function (mat, angle, dest) {
    var s = Math.sin(angle),
      c = Math.cos(angle),
      a00 = mat[0],
      a01 = mat[1],
      a02 = mat[2],
      a03 = mat[3],
      a10 = mat[4],
      a11 = mat[5],
      a12 = mat[6],
      a13 = mat[7];

    if (!dest) {
      dest = mat;
    } else if (mat !== dest) {
      // If the source and destination differ, copy the unchanged last row
      dest[8] = mat[8];
      dest[9] = mat[9];
      dest[10] = mat[10];
      dest[11] = mat[11];

      dest[12] = mat[12];
      dest[13] = mat[13];
      dest[14] = mat[14];
      dest[15] = mat[15];
    }

    // Perform axis-specific matrix multiplication
    dest[0] = a00 * c + a10 * s;
    dest[1] = a01 * c + a11 * s;
    dest[2] = a02 * c + a12 * s;
    dest[3] = a03 * c + a13 * s;

    dest[4] = a00 * -s + a10 * c;
    dest[5] = a01 * -s + a11 * c;
    dest[6] = a02 * -s + a12 * c;
    dest[7] = a03 * -s + a13 * c;

    return dest;
  };

  /**
   * Generates a frustum matrix with the given bounds
   *
   * @param {number} left Left bound of the frustum
   * @param {number} right Right bound of the frustum
   * @param {number} bottom Bottom bound of the frustum
   * @param {number} top Top bound of the frustum
   * @param {number} near Near bound of the frustum
   * @param {number} far Far bound of the frustum
   * @param {mat4} [dest] mat4 frustum matrix will be written into
   *
   * @returns {mat4} dest if specified, a new mat4 otherwise
   */
  mat4.frustum = function (left, right, bottom, top, near, far, dest) {
    if (!dest) {
      dest = mat4.create();
    }
    var rl = right - left,
      tb = top - bottom,
      fn = far - near;
    dest[0] = (near * 2) / rl;
    dest[1] = 0;
    dest[2] = 0;
    dest[3] = 0;
    dest[4] = 0;
    dest[5] = (near * 2) / tb;
    dest[6] = 0;
    dest[7] = 0;
    dest[8] = (right + left) / rl;
    dest[9] = (top + bottom) / tb;
    dest[10] = -(far + near) / fn;
    dest[11] = -1;
    dest[12] = 0;
    dest[13] = 0;
    dest[14] = -(far * near * 2) / fn;
    dest[15] = 0;
    return dest;
  };

  /**
   * Generates a perspective projection matrix with the given bounds
   *
   * @param {number} fovy Vertical field of view
   * @param {number} aspect Aspect ratio. typically viewport width/height
   * @param {number} near Near bound of the frustum
   * @param {number} far Far bound of the frustum
   * @param {mat4} [dest] mat4 frustum matrix will be written into
   *
   * @returns {mat4} dest if specified, a new mat4 otherwise
   */
  mat4.perspective = function (fovy, aspect, near, far, dest) {
    var top = near * Math.tan((fovy * Math.PI) / 360.0),
      right = top * aspect;
    return mat4.frustum(-right, right, -top, top, near, far, dest);
  };

  /**
   * Generates a orthogonal projection matrix with the given bounds
   *
   * @param {number} left Left bound of the frustum
   * @param {number} right Right bound of the frustum
   * @param {number} bottom Bottom bound of the frustum
   * @param {number} top Top bound of the frustum
   * @param {number} near Near bound of the frustum
   * @param {number} far Far bound of the frustum
   * @param {mat4} [dest] mat4 frustum matrix will be written into
   *
   * @returns {mat4} dest if specified, a new mat4 otherwise
   */
  mat4.ortho = function (left, right, bottom, top, near, far, dest) {
    if (!dest) {
      dest = mat4.create();
    }
    var rl = right - left,
      tb = top - bottom,
      fn = far - near;
    dest[0] = 2 / rl;
    dest[1] = 0;
    dest[2] = 0;
    dest[3] = 0;
    dest[4] = 0;
    dest[5] = 2 / tb;
    dest[6] = 0;
    dest[7] = 0;
    dest[8] = 0;
    dest[9] = 0;
    dest[10] = -2 / fn;
    dest[11] = 0;
    dest[12] = -(left + right) / rl;
    dest[13] = -(top + bottom) / tb;
    dest[14] = -(far + near) / fn;
    dest[15] = 1;
    return dest;
  };

  /**
   * Generates a look-at matrix with the given eye position, focal point, and up axis
   *
   * @param {vec3} eye Position of the viewer
   * @param {vec3} center Point the viewer is looking at
   * @param {vec3} up vec3 pointing "up"
   * @param {mat4} [dest] mat4 frustum matrix will be written into
   *
   * @returns {mat4} dest if specified, a new mat4 otherwise
   */
  mat4.lookAt = function (eye, center, up, dest) {
    if (!dest) {
      dest = mat4.create();
    }

    var x0,
      x1,
      x2,
      y0,
      y1,
      y2,
      z0,
      z1,
      z2,
      len,
      eyex = eye[0],
      eyey = eye[1],
      eyez = eye[2],
      upx = up[0],
      upy = up[1],
      upz = up[2],
      centerx = center[0],
      centery = center[1],
      centerz = center[2];

    if (eyex === centerx && eyey === centery && eyez === centerz) {
      return mat4.identity(dest);
    }

    //vec3.direction(eye, center, z);
    z0 = eyex - centerx;
    z1 = eyey - centery;
    z2 = eyez - centerz;

    // normalize (no check needed for 0 because of early return)
    len = 1 / Math.sqrt(z0 * z0 + z1 * z1 + z2 * z2);
    z0 *= len;
    z1 *= len;
    z2 *= len;

    //vec3.normalize(vec3.cross(up, z, x));
    x0 = upy * z2 - upz * z1;
    x1 = upz * z0 - upx * z2;
    x2 = upx * z1 - upy * z0;
    len = Math.sqrt(x0 * x0 + x1 * x1 + x2 * x2);
    if (!len) {
      x0 = 0;
      x1 = 0;
      x2 = 0;
    } else {
      len = 1 / len;
      x0 *= len;
      x1 *= len;
      x2 *= len;
    }

    //vec3.normalize(vec3.cross(z, x, y));
    y0 = z1 * x2 - z2 * x1;
    y1 = z2 * x0 - z0 * x2;
    y2 = z0 * x1 - z1 * x0;

    len = Math.sqrt(y0 * y0 + y1 * y1 + y2 * y2);
    if (!len) {
      y0 = 0;
      y1 = 0;
      y2 = 0;
    } else {
      len = 1 / len;
      y0 *= len;
      y1 *= len;
      y2 *= len;
    }

    dest[0] = x0;
    dest[1] = y0;
    dest[2] = z0;
    dest[3] = 0;
    dest[4] = x1;
    dest[5] = y1;
    dest[6] = z1;
    dest[7] = 0;
    dest[8] = x2;
    dest[9] = y2;
    dest[10] = z2;
    dest[11] = 0;
    dest[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);
    dest[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);
    dest[14] = -(z0 * eyex + z1 * eyey + z2 * eyez);
    dest[15] = 1;

    return dest;
  };

  /**
   * Creates a matrix from a quaternion rotation and vector translation
   * This is equivalent to (but much faster than):
   *
   *     mat4.identity(dest);
   *     mat4.translate(dest, vec);
   *     var quatMat = mat4.create();
   *     quat4.toMat4(quat, quatMat);
   *     mat4.multiply(dest, quatMat);
   *
   * @param {quat4} quat Rotation quaternion
   * @param {vec3} vec Translation vector
   * @param {mat4} [dest] mat4 receiving operation result. If not specified result is written to a new mat4
   *
   * @returns {mat4} dest if specified, a new mat4 otherwise
   */
  mat4.fromRotationTranslation = function (quat, vec, dest) {
    if (!dest) {
      dest = mat4.create();
    }

    // Quaternion math
    var x = quat[0],
      y = quat[1],
      z = quat[2],
      w = quat[3],
      x2 = x + x,
      y2 = y + y,
      z2 = z + z,
      xx = x * x2,
      xy = x * y2,
      xz = x * z2,
      yy = y * y2,
      yz = y * z2,
      zz = z * z2,
      wx = w * x2,
      wy = w * y2,
      wz = w * z2;

    dest[0] = 1 - (yy + zz);
    dest[1] = xy + wz;
    dest[2] = xz - wy;
    dest[3] = 0;
    dest[4] = xy - wz;
    dest[5] = 1 - (xx + zz);
    dest[6] = yz + wx;
    dest[7] = 0;
    dest[8] = xz + wy;
    dest[9] = yz - wx;
    dest[10] = 1 - (xx + yy);
    dest[11] = 0;
    dest[12] = vec[0];
    dest[13] = vec[1];
    dest[14] = vec[2];
    dest[15] = 1;

    return dest;
  };

  /**
   * Returns a string representation of a mat4
   *
   * @param {mat4} mat mat4 to represent as a string
   *
   * @returns {string} String representation of mat
   */
  mat4.str = function (mat) {
    return (
      "[" +
      mat[0] +
      ", " +
      mat[1] +
      ", " +
      mat[2] +
      ", " +
      mat[3] +
      ", " +
      mat[4] +
      ", " +
      mat[5] +
      ", " +
      mat[6] +
      ", " +
      mat[7] +
      ", " +
      mat[8] +
      ", " +
      mat[9] +
      ", " +
      mat[10] +
      ", " +
      mat[11] +
      ", " +
      mat[12] +
      ", " +
      mat[13] +
      ", " +
      mat[14] +
      ", " +
      mat[15] +
      "]"
    );
  };

  /*
   * quat4
   */

  /**
   * Creates a new instance of a quat4 using the default array type
   * Any javascript array containing at least 4 numeric elements can serve as a quat4
   *
   * @param {quat4} [quat] quat4 containing values to initialize with
   *
   * @returns {quat4} New quat4
   */
  quat4.create = function (quat) {
    var dest = new MatrixArray(4);

    if (quat) {
      dest[0] = quat[0];
      dest[1] = quat[1];
      dest[2] = quat[2];
      dest[3] = quat[3];
    }

    return dest;
  };

  /**
   * Copies the values of one quat4 to another
   *
   * @param {quat4} quat quat4 containing values to copy
   * @param {quat4} dest quat4 receiving copied values
   *
   * @returns {quat4} dest
   */
  quat4.set = function (quat, dest) {
    dest[0] = quat[0];
    dest[1] = quat[1];
    dest[2] = quat[2];
    dest[3] = quat[3];

    return dest;
  };

  /**
   * Calculates the W component of a quat4 from the X, Y, and Z components.
   * Assumes that quaternion is 1 unit in length.
   * Any existing W component will be ignored.
   *
   * @param {quat4} quat quat4 to calculate W component of
   * @param {quat4} [dest] quat4 receiving calculated values. If not specified result is written to quat
   *
   * @returns {quat4} dest if specified, quat otherwise
   */
  quat4.calculateW = function (quat, dest) {
    var x = quat[0],
      y = quat[1],
      z = quat[2];

    if (!dest || quat === dest) {
      quat[3] = -Math.sqrt(Math.abs(1.0 - x * x - y * y - z * z));
      return quat;
    }
    dest[0] = x;
    dest[1] = y;
    dest[2] = z;
    dest[3] = -Math.sqrt(Math.abs(1.0 - x * x - y * y - z * z));
    return dest;
  };

  /**
   * Calculates the dot product of two quaternions
   *
   * @param {quat4} quat First operand
   * @param {quat4} quat2 Second operand
   *
   * @return {number} Dot product of quat and quat2
   */
  quat4.dot = function (quat, quat2) {
    return (
      quat[0] * quat2[0] +
      quat[1] * quat2[1] +
      quat[2] * quat2[2] +
      quat[3] * quat2[3]
    );
  };

  /**
   * Calculates the inverse of a quat4
   *
   * @param {quat4} quat quat4 to calculate inverse of
   * @param {quat4} [dest] quat4 receiving inverse values. If not specified result is written to quat
   *
   * @returns {quat4} dest if specified, quat otherwise
   */
  quat4.inverse = function (quat, dest) {
    var q0 = quat[0],
      q1 = quat[1],
      q2 = quat[2],
      q3 = quat[3],
      dot = q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3,
      invDot = dot ? 1.0 / dot : 0;

    // TODO: Would be faster to return [0,0,0,0] immediately if dot == 0

    if (!dest || quat === dest) {
      quat[0] *= -invDot;
      quat[1] *= -invDot;
      quat[2] *= -invDot;
      quat[3] *= invDot;
      return quat;
    }
    dest[0] = -quat[0] * invDot;
    dest[1] = -quat[1] * invDot;
    dest[2] = -quat[2] * invDot;
    dest[3] = quat[3] * invDot;
    return dest;
  };

  /**
   * Calculates the conjugate of a quat4
   * If the quaternion is normalized, this function is faster than quat4.inverse and produces the same result.
   *
   * @param {quat4} quat quat4 to calculate conjugate of
   * @param {quat4} [dest] quat4 receiving conjugate values. If not specified result is written to quat
   *
   * @returns {quat4} dest if specified, quat otherwise
   */
  quat4.conjugate = function (quat, dest) {
    if (!dest || quat === dest) {
      quat[0] *= -1;
      quat[1] *= -1;
      quat[2] *= -1;
      return quat;
    }
    dest[0] = -quat[0];
    dest[1] = -quat[1];
    dest[2] = -quat[2];
    dest[3] = quat[3];
    return dest;
  };

  /**
   * Calculates the length of a quat4
   *
   * Params:
   * @param {quat4} quat quat4 to calculate length of
   *
   * @returns Length of quat
   */
  quat4.length = function (quat) {
    var x = quat[0],
      y = quat[1],
      z = quat[2],
      w = quat[3];
    return Math.sqrt(x * x + y * y + z * z + w * w);
  };

  /**
   * Generates a unit quaternion of the same direction as the provided quat4
   * If quaternion length is 0, returns [0, 0, 0, 0]
   *
   * @param {quat4} quat quat4 to normalize
   * @param {quat4} [dest] quat4 receiving operation result. If not specified result is written to quat
   *
   * @returns {quat4} dest if specified, quat otherwise
   */
  quat4.normalize = function (quat, dest) {
    if (!dest) {
      dest = quat;
    }

    var x = quat[0],
      y = quat[1],
      z = quat[2],
      w = quat[3],
      len = Math.sqrt(x * x + y * y + z * z + w * w);
    if (len === 0) {
      dest[0] = 0;
      dest[1] = 0;
      dest[2] = 0;
      dest[3] = 0;
      return dest;
    }
    len = 1 / len;
    dest[0] = x * len;
    dest[1] = y * len;
    dest[2] = z * len;
    dest[3] = w * len;

    return dest;
  };

  /**
   * Performs quaternion addition
   *
   * @param {quat4} quat First operand
   * @param {quat4} quat2 Second operand
   * @param {quat4} [dest] quat4 receiving operation result. If not specified result is written to quat
   *
   * @returns {quat4} dest if specified, quat otherwise
   */
  quat4.add = function (quat, quat2, dest) {
    if (!dest || quat === dest) {
      quat[0] += quat2[0];
      quat[1] += quat2[1];
      quat[2] += quat2[2];
      quat[3] += quat2[3];
      return quat;
    }
    dest[0] = quat[0] + quat2[0];
    dest[1] = quat[1] + quat2[1];
    dest[2] = quat[2] + quat2[2];
    dest[3] = quat[3] + quat2[3];
    return dest;
  };

  /**
   * Performs a quaternion multiplication
   *
   * @param {quat4} quat First operand
   * @param {quat4} quat2 Second operand
   * @param {quat4} [dest] quat4 receiving operation result. If not specified result is written to quat
   *
   * @returns {quat4} dest if specified, quat otherwise
   */
  quat4.multiply = function (quat, quat2, dest) {
    if (!dest) {
      dest = quat;
    }

    var qax = quat[0],
      qay = quat[1],
      qaz = quat[2],
      qaw = quat[3],
      qbx = quat2[0],
      qby = quat2[1],
      qbz = quat2[2],
      qbw = quat2[3];

    dest[0] = qax * qbw + qaw * qbx + qay * qbz - qaz * qby;
    dest[1] = qay * qbw + qaw * qby + qaz * qbx - qax * qbz;
    dest[2] = qaz * qbw + qaw * qbz + qax * qby - qay * qbx;
    dest[3] = qaw * qbw - qax * qbx - qay * qby - qaz * qbz;

    return dest;
  };

  /**
   * Transforms a vec3 with the given quaternion
   *
   * @param {quat4} quat quat4 to transform the vector with
   * @param {vec3} vec vec3 to transform
   * @param {vec3} [dest] vec3 receiving operation result. If not specified result is written to vec
   *
   * @returns dest if specified, vec otherwise
   */
  quat4.multiplyVec3 = function (quat, vec, dest) {
    if (!dest) {
      dest = vec;
    }

    var x = vec[0],
      y = vec[1],
      z = vec[2],
      qx = quat[0],
      qy = quat[1],
      qz = quat[2],
      qw = quat[3],
      // calculate quat * vec
      ix = qw * x + qy * z - qz * y,
      iy = qw * y + qz * x - qx * z,
      iz = qw * z + qx * y - qy * x,
      iw = -qx * x - qy * y - qz * z;

    // calculate result * inverse quat
    dest[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;
    dest[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;
    dest[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;

    return dest;
  };

  /**
   * Multiplies the components of a quaternion by a scalar value
   *
   * @param {quat4} quat to scale
   * @param {number} val Value to scale by
   * @param {quat4} [dest] quat4 receiving operation result. If not specified result is written to quat
   *
   * @returns {quat4} dest if specified, quat otherwise
   */
  quat4.scale = function (quat, val, dest) {
    if (!dest || quat === dest) {
      quat[0] *= val;
      quat[1] *= val;
      quat[2] *= val;
      quat[3] *= val;
      return quat;
    }
    dest[0] = quat[0] * val;
    dest[1] = quat[1] * val;
    dest[2] = quat[2] * val;
    dest[3] = quat[3] * val;
    return dest;
  };

  /**
   * Calculates a 3x3 matrix from the given quat4
   *
   * @param {quat4} quat quat4 to create matrix from
   * @param {mat3} [dest] mat3 receiving operation result
   *
   * @returns {mat3} dest if specified, a new mat3 otherwise
   */
  quat4.toMat3 = function (quat, dest) {
    if (!dest) {
      dest = mat3.create();
    }

    var x = quat[0],
      y = quat[1],
      z = quat[2],
      w = quat[3],
      x2 = x + x,
      y2 = y + y,
      z2 = z + z,
      xx = x * x2,
      xy = x * y2,
      xz = x * z2,
      yy = y * y2,
      yz = y * z2,
      zz = z * z2,
      wx = w * x2,
      wy = w * y2,
      wz = w * z2;

    dest[0] = 1 - (yy + zz);
    dest[1] = xy + wz;
    dest[2] = xz - wy;

    dest[3] = xy - wz;
    dest[4] = 1 - (xx + zz);
    dest[5] = yz + wx;

    dest[6] = xz + wy;
    dest[7] = yz - wx;
    dest[8] = 1 - (xx + yy);

    return dest;
  };

  /**
   * Calculates a 4x4 matrix from the given quat4
   *
   * @param {quat4} quat quat4 to create matrix from
   * @param {mat4} [dest] mat4 receiving operation result
   *
   * @returns {mat4} dest if specified, a new mat4 otherwise
   */
  quat4.toMat4 = function (quat, dest) {
    if (!dest) {
      dest = mat4.create();
    }

    var x = quat[0],
      y = quat[1],
      z = quat[2],
      w = quat[3],
      x2 = x + x,
      y2 = y + y,
      z2 = z + z,
      xx = x * x2,
      xy = x * y2,
      xz = x * z2,
      yy = y * y2,
      yz = y * z2,
      zz = z * z2,
      wx = w * x2,
      wy = w * y2,
      wz = w * z2;

    dest[0] = 1 - (yy + zz);
    dest[1] = xy + wz;
    dest[2] = xz - wy;
    dest[3] = 0;

    dest[4] = xy - wz;
    dest[5] = 1 - (xx + zz);
    dest[6] = yz + wx;
    dest[7] = 0;

    dest[8] = xz + wy;
    dest[9] = yz - wx;
    dest[10] = 1 - (xx + yy);
    dest[11] = 0;

    dest[12] = 0;
    dest[13] = 0;
    dest[14] = 0;
    dest[15] = 1;

    return dest;
  };

  /**
   * Performs a spherical linear interpolation between two quat4
   *
   * @param {quat4} quat First quaternion
   * @param {quat4} quat2 Second quaternion
   * @param {number} slerp Interpolation amount between the two inputs
   * @param {quat4} [dest] quat4 receiving operation result. If not specified result is written to quat
   *
   * @returns {quat4} dest if specified, quat otherwise
   */
  quat4.slerp = function (quat, quat2, slerp, dest) {
    if (!dest) {
      dest = quat;
    }

    var cosHalfTheta =
        quat[0] * quat2[0] +
        quat[1] * quat2[1] +
        quat[2] * quat2[2] +
        quat[3] * quat2[3],
      halfTheta,
      sinHalfTheta,
      ratioA,
      ratioB;

    if (Math.abs(cosHalfTheta) >= 1.0) {
      if (dest !== quat) {
        dest[0] = quat[0];
        dest[1] = quat[1];
        dest[2] = quat[2];
        dest[3] = quat[3];
      }
      return dest;
    }

    halfTheta = Math.acos(cosHalfTheta);
    sinHalfTheta = Math.sqrt(1.0 - cosHalfTheta * cosHalfTheta);

    if (Math.abs(sinHalfTheta) < 0.001) {
      dest[0] = quat[0] * 0.5 + quat2[0] * 0.5;
      dest[1] = quat[1] * 0.5 + quat2[1] * 0.5;
      dest[2] = quat[2] * 0.5 + quat2[2] * 0.5;
      dest[3] = quat[3] * 0.5 + quat2[3] * 0.5;
      return dest;
    }

    ratioA = Math.sin((1 - slerp) * halfTheta) / sinHalfTheta;
    ratioB = Math.sin(slerp * halfTheta) / sinHalfTheta;

    dest[0] = quat[0] * ratioA + quat2[0] * ratioB;
    dest[1] = quat[1] * ratioA + quat2[1] * ratioB;
    dest[2] = quat[2] * ratioA + quat2[2] * ratioB;
    dest[3] = quat[3] * ratioA + quat2[3] * ratioB;

    return dest;
  };

  /**
   * Returns a string representation of a quaternion
   *
   * @param {quat4} quat quat4 to represent as a string
   *
   * @returns {string} String representation of quat
   */
  quat4.str = function (quat) {
    return (
      "[" + quat[0] + ", " + quat[1] + ", " + quat[2] + ", " + quat[3] + "]"
    );
  };

  return {
    vec3: vec3,
    mat3: mat3,
    mat4: mat4,
    quat4: quat4,
  };
})();

var GLImmediateSetup = {};
function _glBegin(mode) {
  // Push the old state:
  GLImmediate.enabledClientAttributes_preBegin =
    GLImmediate.enabledClientAttributes;
  GLImmediate.enabledClientAttributes = [];

  GLImmediate.clientAttributes_preBegin = GLImmediate.clientAttributes;
  GLImmediate.clientAttributes = [];
  for (var i = 0; i < GLImmediate.clientAttributes_preBegin.length; i++) {
    GLImmediate.clientAttributes.push({});
  }

  GLImmediate.mode = mode;
  GLImmediate.vertexCounter = 0;
  var components = (GLImmediate.rendererComponents = []);
  for (var i = 0; i < GLImmediate.NUM_ATTRIBUTES; i++) {
    components[i] = 0;
  }
  GLImmediate.rendererComponentPointer = 0;
  GLImmediate.vertexData = GLImmediate.tempData;
}

function _emscripten_glVertex3f(x, y, z) {
  GLImmediate.vertexData[GLImmediate.vertexCounter++] = x;
  GLImmediate.vertexData[GLImmediate.vertexCounter++] = y;
  GLImmediate.vertexData[GLImmediate.vertexCounter++] = z || 0;
  GLImmediate.addRendererComponent(GLImmediate.VERTEX, 3, GLctx.FLOAT);
}
function _glVertex3fv(p) {
  _emscripten_glVertex3f(
    HEAPF32[p >> 2],
    HEAPF32[(p + 4) >> 2],
    HEAPF32[(p + 8) >> 2]
  );
}

function _glEnd() {
  GLImmediate.prepareClientAttributes(
    GLImmediate.rendererComponents[GLImmediate.VERTEX],
    true
  );
  GLImmediate.firstVertex = 0;
  GLImmediate.lastVertex =
    GLImmediate.vertexCounter / (GLImmediate.stride >> 2);
  GLImmediate.flush();
  GLImmediate.disableBeginEndClientAttributes();
  GLImmediate.mode = -1;

  // Pop the old state:
  GLImmediate.enabledClientAttributes =
    GLImmediate.enabledClientAttributes_preBegin;
  GLImmediate.clientAttributes = GLImmediate.clientAttributes_preBegin;
  GLImmediate.currentRenderer = null; // The set of active client attributes changed, we must re-lookup the renderer to use.
  GLImmediate.modifiedClientAttributes = true;
}

function _emscripten_glColor4f(r, g, b, a) {
  r = Math.max(Math.min(r, 1), 0);
  g = Math.max(Math.min(g, 1), 0);
  b = Math.max(Math.min(b, 1), 0);
  a = Math.max(Math.min(a, 1), 0);

  // TODO: make ub the default, not f, save a few mathops
  if (GLImmediate.mode >= 0) {
    var start = GLImmediate.vertexCounter << 2;
    GLImmediate.vertexDataU8[start + 0] = r * 255;
    GLImmediate.vertexDataU8[start + 1] = g * 255;
    GLImmediate.vertexDataU8[start + 2] = b * 255;
    GLImmediate.vertexDataU8[start + 3] = a * 255;
    GLImmediate.vertexCounter++;
    GLImmediate.addRendererComponent(GLImmediate.COLOR, 4, GLctx.UNSIGNED_BYTE);
  } else {
    GLImmediate.clientColor[0] = r;
    GLImmediate.clientColor[1] = g;
    GLImmediate.clientColor[2] = b;
    GLImmediate.clientColor[3] = a;
  }
}
function _glColor3f(r, g, b) {
  _emscripten_glColor4f(r, g, b, 1);
}

function _glLoadIdentity() {
  GLImmediate.matricesModified = true;
  GLImmediate.matrixVersion[GLImmediate.currentMatrix] =
    (GLImmediate.matrixVersion[GLImmediate.currentMatrix] + 1) | 0;
  GLImmediate.matrixLib.mat4.identity(
    GLImmediate.matrix[GLImmediate.currentMatrix]
  );
}

function _glVertex3f(x, y, z) {
  GLImmediate.vertexData[GLImmediate.vertexCounter++] = x;
  GLImmediate.vertexData[GLImmediate.vertexCounter++] = y;
  GLImmediate.vertexData[GLImmediate.vertexCounter++] = z || 0;
  GLImmediate.addRendererComponent(GLImmediate.VERTEX, 3, GLctx.FLOAT);
}

function _SDL_SetGammaRamp(redTable, greenTable, blueTable) {
  return -1;
}

function _SDL_WM_IconifyWindow() {
  throw "SDL_WM_IconifyWindow TODO";
}

function _SDL_GetVideoInfo() {
  // %struct.SDL_VideoInfo = type { i32, i32, %struct.SDL_PixelFormat*, i32, i32 } - 5 fields of quantum size
  var ret = _malloc(5 * Runtime.QUANTUM_SIZE);
  HEAP32[(ret + Runtime.QUANTUM_SIZE * 0) >> 2] = 0; // TODO
  HEAP32[(ret + Runtime.QUANTUM_SIZE * 1) >> 2] = 0; // TODO
  HEAP32[(ret + Runtime.QUANTUM_SIZE * 2) >> 2] = 0;
  HEAP32[(ret + Runtime.QUANTUM_SIZE * 3) >> 2] = Module["canvas"].width;
  HEAP32[(ret + Runtime.QUANTUM_SIZE * 4) >> 2] = Module["canvas"].height;
  return ret;
}

function _SDL_GL_SetAttribute(attr, value) {
  if (!(attr in SDL.glAttributes)) {
    abort(
      "Unknown SDL GL attribute (" +
        attr +
        "). Please check if your SDL version is supported."
    );
  }

  SDL.glAttributes[attr] = value;
}

function _SDL_WM_SetCaption(title, icon) {
  title = title && Pointer_stringify(title);
  icon = icon && Pointer_stringify(icon);
}

function _SDL_SetVideoMode(width, height, depth, flags) {
  [
    "mousedown",
    "mouseup",
    "mousemove",
    "DOMMouseScroll",
    "mousewheel",
    "mouseout",
  ].forEach(function (event) {
    Module["canvas"].addEventListener(event, SDL.receiveEvent, true);
  });

  // (0,0) means 'use fullscreen' in native; in Emscripten, use the current canvas size.
  if (width == 0 && height == 0) {
    var canvas = Module["canvas"];
    width = canvas.width;
    height = canvas.height;
  }

  Browser.setCanvasSize(width, height, true);
  // Free the old surface first.
  if (SDL.screen) {
    SDL.freeSurface(SDL.screen);
    SDL.screen = null;
  }
  SDL.screen = SDL.makeSurface(width, height, flags, true, "screen");
  if (!SDL.addedResizeListener) {
    SDL.addedResizeListener = true;
    Browser.resizeListeners.push(function (w, h) {
      SDL.receiveEvent({
        type: "resize",
        w: w,
        h: h,
      });
    });
  }
  return SDL.screen;
}

function _SDL_SetGamma(r, g, b) {
  return -1;
}

function _SDL_GL_SwapBuffers() {}

function _SDL_GetVideoSurface() {
  return SDL.screen;
}

function _SDL_WM_ToggleFullScreen(surf) {
  if (Browser.isFullScreen) {
    Module["canvas"].cancelFullScreen();
    return 1;
  } else {
    if (!SDL.canRequestFullscreen) {
      return 0;
    }
    SDL.isRequestingFullscreen = true;
    return 1;
  }
}

function _SDL_ListModes(format, flags) {
  return -1; // -1 == all modes are ok. TODO
}

function _emscripten_glPixelStorei(pname, param) {
  if (pname == 0x0d05 /* GL_PACK_ALIGNMENT */) {
    GL.packAlignment = param;
  } else if (pname == 0x0cf5 /* GL_UNPACK_ALIGNMENT */) {
    GL.unpackAlignment = param;
  }
  GLctx.pixelStorei(pname, param);
}

function _emscripten_glGetString(name_) {
  if (GL.stringCache[name_]) return GL.stringCache[name_];
  var ret;
  switch (name_) {
    case 0x1f00 /* GL_VENDOR */:
    case 0x1f01 /* GL_RENDERER */:
    case 0x1f02 /* GL_VERSION */:
      ret = allocate(
        intArrayFromString(GLctx.getParameter(name_)),
        "i8",
        ALLOC_NORMAL
      );
      break;
    case 0x1f03 /* GL_EXTENSIONS */:
      var exts = GLctx.getSupportedExtensions();
      var gl_exts = [];
      for (i in exts) {
        gl_exts.push(exts[i]);
        gl_exts.push("GL_" + exts[i]);
      }
      ret = allocate(intArrayFromString(gl_exts.join(" ")), "i8", ALLOC_NORMAL);
      break;
    case 0x8b8c /* GL_SHADING_LANGUAGE_VERSION */:
      ret = allocate(
        intArrayFromString("OpenGL ES GLSL 1.00 (WebGL)"),
        "i8",
        ALLOC_NORMAL
      );
      break;
    default:
      GL.recordError(0x0500 /*GL_INVALID_ENUM*/);
      return 0;
  }
  GL.stringCache[name_] = ret;
  return ret;
}

function _emscripten_glGetIntegerv(name_, p) {
  return GL.get(name_, p, "Integer");
}

function _emscripten_glGetFloatv(name_, p) {
  return GL.get(name_, p, "Float");
}

function _emscripten_glGetBooleanv(name_, p) {
  return GL.get(name_, p, "Boolean");
}

function _emscripten_glGenTextures(n, textures) {
  for (var i = 0; i < n; i++) {
    var id = GL.getNewId(GL.textures);
    var texture = GLctx.createTexture();
    texture.name = id;
    GL.textures[id] = texture;
    HEAP32[(textures + i * 4) >> 2] = id;
  }
}

function _emscripten_glDeleteTextures(n, textures) {
  for (var i = 0; i < n; i++) {
    var id = HEAP32[(textures + i * 4) >> 2];
    var texture = GL.textures[id];
    GLctx.deleteTexture(texture);
    texture.name = 0;
    GL.textures[id] = null;
  }
}

function _emscripten_glCompressedTexImage2D(
  target,
  level,
  internalFormat,
  width,
  height,
  border,
  imageSize,
  data
) {
  if (data) {
    data = HEAPU8.subarray(data, data + imageSize);
  } else {
    data = null;
  }
  // N.b. using array notation explicitly to not confuse Closure minification.
  GLctx["compressedTexImage2D"](
    target,
    level,
    internalFormat,
    width,
    height,
    border,
    data
  );
}

function _emscripten_glCompressedTexSubImage2D(
  target,
  level,
  xoffset,
  yoffset,
  width,
  height,
  format,
  imageSize,
  data
) {
  if (data) {
    data = HEAPU8.subarray(data, data + imageSize);
  } else {
    data = null;
  }
  CLctx["compressedTexSubImage2D"](
    target,
    level,
    xoffset,
    yoffset,
    width,
    height,
    data
  );
}

function _emscripten_glTexImage2D(
  target,
  level,
  internalFormat,
  width,
  height,
  border,
  format,
  type,
  pixels
) {
  if (pixels) {
    var data = GL.getTexPixelData(
      type,
      format,
      width,
      height,
      pixels,
      internalFormat
    );
    pixels = data.pixels;
    internalFormat = data.internalFormat;
  } else {
    pixels = null;
  }
  GLctx.texImage2D(
    target,
    level,
    internalFormat,
    width,
    height,
    border,
    format,
    type,
    pixels
  );
}

function _emscripten_glTexSubImage2D(
  target,
  level,
  xoffset,
  yoffset,
  width,
  height,
  format,
  type,
  pixels
) {
  if (pixels) {
    var data = GL.getTexPixelData(type, format, width, height, pixels, -1);
    pixels = data.pixels;
  } else {
    pixels = null;
  }
  GLctx.texSubImage2D(
    target,
    level,
    xoffset,
    yoffset,
    width,
    height,
    format,
    type,
    pixels
  );
}

function _emscripten_glReadPixels(x, y, width, height, format, type, pixels) {
  var sizePerPixel;
  switch (format) {
    case 0x1907 /* GL_RGB */:
      sizePerPixel = 3;
      break;
    case 0x1908 /* GL_RGBA */:
      sizePerPixel = 4;
      break;
    default:
      GL.recordError(0x0500 /*GL_INVALID_ENUM*/);
      return;
  }
  var totalSize = width * height * sizePerPixel;
  GLctx.readPixels(
    x,
    y,
    width,
    height,
    format,
    type,
    HEAPU8.subarray(pixels, pixels + totalSize)
  );
}

function _emscripten_glBindTexture(target, texture) {
  GLctx.bindTexture(target, texture ? GL.textures[texture] : null);
}

function _emscripten_glGetTexParameterfv(target, pname, params) {
  HEAPF32[params >> 2] = GLctx.getTexParameter(target, pname);
}

function _emscripten_glGetTexParameteriv(target, pname, params) {
  HEAP32[params >> 2] = GLctx.getTexParameter(target, pname);
}

function _emscripten_glTexParameterfv(target, pname, params) {
  var param = HEAPF32[params >> 2];
  GLctx.texParameterf(target, pname, param);
}

function _emscripten_glTexParameteriv(target, pname, params) {
  var param = HEAP32[params >> 2];
  GLctx.texParameteri(target, pname, param);
}

function _emscripten_glIsTexture(texture) {
  var texture = GL.textures[texture];
  if (!texture) return 0;
  return GLctx.isTexture(texture);
}

function _emscripten_glGenBuffers(n, buffers) {
  for (var i = 0; i < n; i++) {
    var id = GL.getNewId(GL.buffers);
    var buffer = GLctx.createBuffer();
    buffer.name = id;
    GL.buffers[id] = buffer;
    HEAP32[(buffers + i * 4) >> 2] = id;
  }
}

function _emscripten_glDeleteBuffers(n, buffers) {
  for (var i = 0; i < n; i++) {
    var id = HEAP32[(buffers + i * 4) >> 2];
    var buffer = GL.buffers[id];

    // From spec: "glDeleteBuffers silently ignores 0's and names that do not
    // correspond to existing buffer objects."
    if (!buffer) continue;

    GLctx.deleteBuffer(buffer);
    buffer.name = 0;
    GL.buffers[id] = null;

    if (id == GL.currArrayBuffer) GL.currArrayBuffer = 0;
    if (id == GL.currElementArrayBuffer) GL.currElementArrayBuffer = 0;
  }
}

function _emscripten_glGetBufferParameteriv(target, value, data) {
  HEAP32[data >> 2] = GLctx.getBufferParameter(target, value);
}

function _emscripten_glBufferData(target, size, data, usage) {
  switch (
    usage // fix usages, WebGL only has *_DRAW
  ) {
    case 0x88e1: // GL_STREAM_READ
    case 0x88e2: // GL_STREAM_COPY
      usage = 0x88e0; // GL_STREAM_DRAW
      break;
    case 0x88e5: // GL_STATIC_READ
    case 0x88e6: // GL_STATIC_COPY
      usage = 0x88e4; // GL_STATIC_DRAW
      break;
    case 0x88e9: // GL_DYNAMIC_READ
    case 0x88ea: // GL_DYNAMIC_COPY
      usage = 0x88e8; // GL_DYNAMIC_DRAW
      break;
  }
  if (!data) {
    GLctx.bufferData(target, size, usage);
  } else {
    GLctx.bufferData(target, HEAPU8.subarray(data, data + size), usage);
  }
}

function _emscripten_glBufferSubData(target, offset, size, data) {
  GLctx.bufferSubData(target, offset, HEAPU8.subarray(data, data + size));
}

function _emscripten_glIsBuffer(buffer) {
  var b = GL.buffers[buffer];
  if (!b) return 0;
  return GLctx.isBuffer(b);
}

function _emscripten_glGenRenderbuffers(n, renderbuffers) {
  for (var i = 0; i < n; i++) {
    var id = GL.getNewId(GL.renderbuffers);
    var renderbuffer = GLctx.createRenderbuffer();
    renderbuffer.name = id;
    GL.renderbuffers[id] = renderbuffer;
    HEAP32[(renderbuffers + i * 4) >> 2] = id;
  }
}

function _emscripten_glDeleteRenderbuffers(n, renderbuffers) {
  for (var i = 0; i < n; i++) {
    var id = HEAP32[(renderbuffers + i * 4) >> 2];
    var renderbuffer = GL.renderbuffers[id];
    GLctx.deleteRenderbuffer(renderbuffer);
    renderbuffer.name = 0;
    GL.renderbuffers[id] = null;
  }
}

function _emscripten_glBindRenderbuffer(target, renderbuffer) {
  GLctx.bindRenderbuffer(
    target,
    renderbuffer ? GL.renderbuffers[renderbuffer] : null
  );
}

function _emscripten_glGetRenderbufferParameteriv(target, pname, params) {
  HEAP32[params >> 2] = GLctx.getRenderbufferParameter(target, pname);
}

function _emscripten_glIsRenderbuffer(renderbuffer) {
  var rb = GL.renderbuffers[renderbuffer];
  if (!rb) return 0;
  return GLctx.isRenderbuffer(rb);
}

function _emscripten_glGetUniformfv(program, location, params) {
  var data = GLctx.getUniform(GL.programs[program], GL.uniforms[location]);
  if (typeof data == "number") {
    HEAPF32[params >> 2] = data;
  } else {
    for (var i = 0; i < data.length; i++) {
      HEAPF32[(params + i) >> 2] = data[i];
    }
  }
}

function _emscripten_glGetUniformiv(program, location, params) {
  var data = GLctx.getUniform(GL.programs[program], GL.uniforms[location]);
  if (typeof data == "number" || typeof data == "boolean") {
    HEAP32[params >> 2] = data;
  } else {
    for (var i = 0; i < data.length; i++) {
      HEAP32[(params + i) >> 2] = data[i];
    }
  }
}

function _emscripten_glGetUniformLocation(program, name) {
  name = Pointer_stringify(name);

  var arrayOffset = 0;
  // If user passed an array accessor "[index]", parse the array index off the accessor.
  if (name.indexOf("]", name.length - 1) !== -1) {
    var ls = name.lastIndexOf("[");
    var arrayIndex = name.slice(ls + 1, -1);
    if (arrayIndex.length > 0) {
      arrayOffset = parseInt(arrayIndex);
      if (arrayOffset < 0) {
        return -1;
      }
    }
    name = name.slice(0, ls);
  }

  var ptable = GL.programInfos[program];
  if (!ptable) {
    return -1;
  }
  var utable = ptable.uniforms;
  var uniformInfo = utable[name]; // returns pair [ dimension_of_uniform_array, uniform_location ]
  if (uniformInfo && arrayOffset < uniformInfo[0]) {
    // Check if user asked for an out-of-bounds element, i.e. for 'vec4 colors[3];' user could ask for 'colors[10]' which should return -1.
    return uniformInfo[1] + arrayOffset;
  } else {
    return -1;
  }
}

function _emscripten_glGetVertexAttribfv(index, pname, params) {
  var data = GLctx.getVertexAttrib(index, pname);
  if (typeof data == "number") {
    HEAPF32[params >> 2] = data;
  } else {
    for (var i = 0; i < data.length; i++) {
      HEAPF32[(params + i) >> 2] = data[i];
    }
  }
}

function _emscripten_glGetVertexAttribiv(index, pname, params) {
  var data = GLctx.getVertexAttrib(index, pname);
  if (typeof data == "number" || typeof data == "boolean") {
    HEAP32[params >> 2] = data;
  } else {
    for (var i = 0; i < data.length; i++) {
      HEAP32[(params + i) >> 2] = data[i];
    }
  }
}

function _emscripten_glGetVertexAttribPointerv(index, pname, pointer) {
  HEAP32[pointer >> 2] = GLctx.getVertexAttribOffset(index, pname);
}

function _emscripten_glGetActiveUniform(
  program,
  index,
  bufSize,
  length,
  size,
  type,
  name
) {
  program = GL.programs[program];
  var info = GLctx.getActiveUniform(program, index);

  var infoname = info.name.slice(0, Math.max(0, bufSize - 1));
  writeStringToMemory(infoname, name);

  if (length) {
    HEAP32[length >> 2] = infoname.length;
  }
  if (size) {
    HEAP32[size >> 2] = info.size;
  }
  if (type) {
    HEAP32[type >> 2] = info.type;
  }
}

function _emscripten_glUniform1f(location, v0) {
  location = GL.uniforms[location];
  GLctx.uniform1f(location, v0);
}

function _emscripten_glUniform2f(location, v0, v1) {
  location = GL.uniforms[location];
  GLctx.uniform2f(location, v0, v1);
}

function _emscripten_glUniform3f(location, v0, v1, v2) {
  location = GL.uniforms[location];
  GLctx.uniform3f(location, v0, v1, v2);
}

function _emscripten_glUniform4f(location, v0, v1, v2, v3) {
  location = GL.uniforms[location];
  GLctx.uniform4f(location, v0, v1, v2, v3);
}

function _emscripten_glUniform1i(location, v0) {
  location = GL.uniforms[location];
  GLctx.uniform1i(location, v0);
}

function _emscripten_glUniform2i(location, v0, v1) {
  location = GL.uniforms[location];
  GLctx.uniform2i(location, v0, v1);
}

function _emscripten_glUniform3i(location, v0, v1, v2) {
  location = GL.uniforms[location];
  GLctx.uniform3i(location, v0, v1, v2);
}

function _emscripten_glUniform4i(location, v0, v1, v2, v3) {
  location = GL.uniforms[location];
  GLctx.uniform4i(location, v0, v1, v2, v3);
}

function _emscripten_glUniform1iv(location, count, value) {
  location = GL.uniforms[location];
  value = HEAP32.subarray(value >> 2, (value + count * 4) >> 2);
  GLctx.uniform1iv(location, value);
}

function _emscripten_glUniform2iv(location, count, value) {
  location = GL.uniforms[location];
  count *= 2;
  value = HEAP32.subarray(value >> 2, (value + count * 4) >> 2);
  GLctx.uniform2iv(location, value);
}

function _emscripten_glUniform3iv(location, count, value) {
  location = GL.uniforms[location];
  count *= 3;
  value = HEAP32.subarray(value >> 2, (value + count * 4) >> 2);
  GLctx.uniform3iv(location, value);
}

function _emscripten_glUniform4iv(location, count, value) {
  location = GL.uniforms[location];
  count *= 4;
  value = HEAP32.subarray(value >> 2, (value + count * 4) >> 2);
  GLctx.uniform4iv(location, value);
}

function _emscripten_glUniform1fv(location, count, value) {
  location = GL.uniforms[location];
  var view;
  if (count == 1) {
    // avoid allocation for the common case of uploading one uniform
    view = GL.miniTempBufferViews[0];
    view[0] = HEAPF32[value >> 2];
  } else {
    view = HEAPF32.subarray(value >> 2, (value + count * 4) >> 2);
  }
  GLctx.uniform1fv(location, view);
}

function _emscripten_glUniform2fv(location, count, value) {
  location = GL.uniforms[location];
  var view;
  if (count == 1) {
    // avoid allocation for the common case of uploading one uniform
    view = GL.miniTempBufferViews[1];
    view[0] = HEAPF32[value >> 2];
    view[1] = HEAPF32[(value + 4) >> 2];
  } else {
    view = HEAPF32.subarray(value >> 2, (value + count * 8) >> 2);
  }
  GLctx.uniform2fv(location, view);
}

function _emscripten_glUniform3fv(location, count, value) {
  location = GL.uniforms[location];
  var view;
  if (count == 1) {
    // avoid allocation for the common case of uploading one uniform
    view = GL.miniTempBufferViews[2];
    view[0] = HEAPF32[value >> 2];
    view[1] = HEAPF32[(value + 4) >> 2];
    view[2] = HEAPF32[(value + 8) >> 2];
  } else {
    view = HEAPF32.subarray(value >> 2, (value + count * 12) >> 2);
  }
  GLctx.uniform3fv(location, view);
}

function _emscripten_glUniform4fv(location, count, value) {
  location = GL.uniforms[location];
  var view;
  if (count == 1) {
    // avoid allocation for the common case of uploading one uniform
    view = GL.miniTempBufferViews[3];
    view[0] = HEAPF32[value >> 2];
    view[1] = HEAPF32[(value + 4) >> 2];
    view[2] = HEAPF32[(value + 8) >> 2];
    view[3] = HEAPF32[(value + 12) >> 2];
  } else {
    view = HEAPF32.subarray(value >> 2, (value + count * 16) >> 2);
  }
  GLctx.uniform4fv(location, view);
}

function _emscripten_glUniformMatrix2fv(location, count, transpose, value) {
  location = GL.uniforms[location];
  var view;
  if (count == 1) {
    // avoid allocation for the common case of uploading one uniform matrix
    view = GL.miniTempBufferViews[3];
    for (var i = 0; i < 4; i++) {
      view[i] = HEAPF32[(value + i * 4) >> 2];
    }
  } else {
    view = HEAPF32.subarray(value >> 2, (value + count * 16) >> 2);
  }
  GLctx.uniformMatrix2fv(location, transpose, view);
}

function _emscripten_glUniformMatrix3fv(location, count, transpose, value) {
  location = GL.uniforms[location];
  var view;
  if (count == 1) {
    // avoid allocation for the common case of uploading one uniform matrix
    view = GL.miniTempBufferViews[8];
    for (var i = 0; i < 9; i++) {
      view[i] = HEAPF32[(value + i * 4) >> 2];
    }
  } else {
    view = HEAPF32.subarray(value >> 2, (value + count * 36) >> 2);
  }
  GLctx.uniformMatrix3fv(location, transpose, view);
}

function _emscripten_glUniformMatrix4fv(location, count, transpose, value) {
  location = GL.uniforms[location];
  var view;
  if (count == 1) {
    // avoid allocation for the common case of uploading one uniform matrix
    view = GL.miniTempBufferViews[15];
    for (var i = 0; i < 16; i++) {
      view[i] = HEAPF32[(value + i * 4) >> 2];
    }
  } else {
    view = HEAPF32.subarray(value >> 2, (value + count * 64) >> 2);
  }
  GLctx.uniformMatrix4fv(location, transpose, view);
}

function _emscripten_glBindBuffer(target, buffer) {
  var bufferObj = buffer ? GL.buffers[buffer] : null;

  if (target == GLctx.ARRAY_BUFFER) {
    GLImmediate.lastArrayBuffer = GL.currArrayBuffer = buffer;
  } else if (target == GLctx.ELEMENT_ARRAY_BUFFER) {
    GL.currElementArrayBuffer = buffer;
  }

  GLctx.bindBuffer(target, bufferObj);
}

function _emscripten_glVertexAttrib1fv(index, v) {
  v = HEAPF32.subarray(v >> 2, (v + 4) >> 2);
  GLctx.vertexAttrib1fv(index, v);
}

function _emscripten_glVertexAttrib2fv(index, v) {
  v = HEAPF32.subarray(v >> 2, (v + 8) >> 2);
  GLctx.vertexAttrib2fv(index, v);
}

function _emscripten_glVertexAttrib3fv(index, v) {
  v = HEAPF32.subarray(v >> 2, (v + 12) >> 2);
  GLctx.vertexAttrib3fv(index, v);
}

function _emscripten_glVertexAttrib4fv(index, v) {
  v = HEAPF32.subarray(v >> 2, (v + 16) >> 2);
  GLctx.vertexAttrib4fv(index, v);
}

function _emscripten_glGetAttribLocation(program, name) {
  program = GL.programs[program];
  name = Pointer_stringify(name);
  return GLctx.getAttribLocation(program, name);
}

function _emscripten_glGetActiveAttrib(
  program,
  index,
  bufSize,
  length,
  size,
  type,
  name
) {
  program = GL.programs[program];
  var info = GLctx.getActiveAttrib(program, index);

  var infoname = info.name.slice(0, Math.max(0, bufSize - 1));
  writeStringToMemory(infoname, name);

  if (length) {
    HEAP32[length >> 2] = infoname.length;
  }
  if (size) {
    HEAP32[size >> 2] = info.size;
  }
  if (type) {
    HEAP32[type >> 2] = info.type;
  }
}

function _emscripten_glCreateShader(shaderType) {
  var id = GL.getNewId(GL.shaders);
  GL.shaders[id] = GLctx.createShader(shaderType);
  return id;
}

function _emscripten_glDeleteShader(shader) {
  GLctx.deleteShader(GL.shaders[shader]);
  GL.shaders[shader] = null;
}

function _emscripten_glGetAttachedShaders(program, maxCount, count, shaders) {
  var result = GLctx.getAttachedShaders(GL.programs[program]);
  var len = result.length;
  if (len > maxCount) {
    len = maxCount;
  }
  HEAP32[count >> 2] = len;
  for (var i = 0; i < len; ++i) {
    var id = GL.shaders.indexOf(result[i]);
    HEAP32[(shaders + i * 4) >> 2] = id;
  }
}

function _emscripten_glShaderSource(shader, count, string, length) {
  var source = GL.getSource(shader, count, string, length);
  GLctx.shaderSource(GL.shaders[shader], source);
}

function _emscripten_glGetShaderSource(shader, bufSize, length, source) {
  var result = GLctx.getShaderSource(GL.shaders[shader]);
  result = result.slice(0, Math.max(0, bufSize - 1));
  writeStringToMemory(result, source);
  if (length) {
    HEAP32[length >> 2] = result.length;
  }
}

function _emscripten_glCompileShader(shader) {
  GLctx.compileShader(GL.shaders[shader]);
}

function _emscripten_glGetShaderInfoLog(shader, maxLength, length, infoLog) {
  var log = GLctx.getShaderInfoLog(GL.shaders[shader]);
  // Work around a bug in Chromium which causes getShaderInfoLog to return null
  if (!log) log = "(unknown error)";
  log = log.substr(0, maxLength - 1);
  writeStringToMemory(log, infoLog);
  if (length) {
    HEAP32[length >> 2] = log.length;
  }
}

function _emscripten_glGetShaderiv(shader, pname, p) {
  if (pname == 0x8b84) {
    // GL_INFO_LOG_LENGTH
    var log = GLctx.getShaderInfoLog(GL.shaders[shader]);
    // Work around a bug in Chromium which causes getShaderInfoLog to return null
    if (!log) log = "(unknown error)";
    HEAP32[p >> 2] = log.length + 1;
  } else {
    HEAP32[p >> 2] = GLctx.getShaderParameter(GL.shaders[shader], pname);
  }
}

function _emscripten_glGetProgramiv(program, pname, p) {
  if (pname == 0x8b84) {
    // GL_INFO_LOG_LENGTH
    HEAP32[p >> 2] = GLctx.getProgramInfoLog(GL.programs[program]).length + 1;
  } else if (pname == 0x8b87 /* GL_ACTIVE_UNIFORM_MAX_LENGTH */) {
    var ptable = GL.programInfos[program];
    if (ptable) {
      HEAP32[p >> 2] = ptable.maxUniformLength;
      return;
    } else if (program < GL.counter) {
      GL.recordError(0x0502 /* GL_INVALID_OPERATION */);
    } else {
      GL.recordError(0x0501 /* GL_INVALID_VALUE */);
    }
  } else if (pname == 0x8b8a /* GL_ACTIVE_ATTRIBUTE_MAX_LENGTH */) {
    var ptable = GL.programInfos[program];
    if (ptable) {
      if (ptable.maxAttributeLength == -1) {
        var program = GL.programs[program];
        var numAttribs = GLctx.getProgramParameter(
          program,
          GLctx.ACTIVE_ATTRIBUTES
        );
        ptable.maxAttributeLength = 0; // Spec says if there are no active attribs, 0 must be returned.
        for (var i = 0; i < numAttribs; ++i) {
          var activeAttrib = GLctx.getActiveAttrib(program, i);
          ptable.maxAttributeLength = Math.max(
            ptable.maxAttributeLength,
            activeAttrib.name.length + 1
          );
        }
      }
      HEAP32[p >> 2] = ptable.maxAttributeLength;
      return;
    } else if (program < GL.counter) {
      GL.recordError(0x0502 /* GL_INVALID_OPERATION */);
    } else {
      GL.recordError(0x0501 /* GL_INVALID_VALUE */);
    }
  } else {
    HEAP32[p >> 2] = GLctx.getProgramParameter(GL.programs[program], pname);
  }
}

function _emscripten_glIsShader(shader) {
  var s = GL.shaders[shader];
  if (!s) return 0;
  return GLctx.isShader(s);
}

function _emscripten_glCreateProgram() {
  var id = GL.getNewId(GL.programs);
  var program = GLctx.createProgram();
  program.name = id;
  GL.programs[id] = program;
  return id;
}

function _emscripten_glDeleteProgram(program) {
  var program = GL.programs[program];
  GLctx.deleteProgram(program);
  program.name = 0;
  GL.programs[program] = null;
  GL.programInfos[program] = null;
}

function _emscripten_glAttachShader(program, shader) {
  GLctx.attachShader(GL.programs[program], GL.shaders[shader]);
}

function _emscripten_glDetachShader(program, shader) {
  GLctx.detachShader(GL.programs[program], GL.shaders[shader]);
}

function _emscripten_glGetShaderPrecisionFormat() {
  throw "glGetShaderPrecisionFormat: TODO";
}

function _emscripten_glLinkProgram(program) {
  GLctx.linkProgram(GL.programs[program]);
  GL.programInfos[program] = null; // uniforms no longer keep the same names after linking
  GL.populateUniformTable(program);
}

function _emscripten_glGetProgramInfoLog(program, maxLength, length, infoLog) {
  var log = GLctx.getProgramInfoLog(GL.programs[program]);
  // Work around a bug in Chromium which causes getProgramInfoLog to return null
  if (!log) {
    log = "";
  }
  log = log.substr(0, maxLength - 1);
  writeStringToMemory(log, infoLog);
  if (length) {
    HEAP32[length >> 2] = log.length;
  }
}

function _emscripten_glUseProgram(program) {
  GLctx.useProgram(program ? GL.programs[program] : null);
}

function _emscripten_glValidateProgram(program) {
  GLctx.validateProgram(GL.programs[program]);
}

function _emscripten_glIsProgram(program) {
  var program = GL.programs[program];
  if (!program) return 0;
  return GLctx.isProgram(program);
}

function _emscripten_glBindAttribLocation(program, index, name) {
  name = Pointer_stringify(name);
  GLctx.bindAttribLocation(GL.programs[program], index, name);
}

function _emscripten_glBindFramebuffer(target, framebuffer) {
  GLctx.bindFramebuffer(
    target,
    framebuffer ? GL.framebuffers[framebuffer] : null
  );
}

function _emscripten_glGenFramebuffers(n, ids) {
  for (var i = 0; i < n; ++i) {
    var id = GL.getNewId(GL.framebuffers);
    var framebuffer = GLctx.createFramebuffer();
    framebuffer.name = id;
    GL.framebuffers[id] = framebuffer;
    HEAP32[(ids + i * 4) >> 2] = id;
  }
}

function _emscripten_glDeleteFramebuffers(n, framebuffers) {
  for (var i = 0; i < n; ++i) {
    var id = HEAP32[(framebuffers + i * 4) >> 2];
    var framebuffer = GL.framebuffers[id];
    GLctx.deleteFramebuffer(framebuffer);
    framebuffer.name = 0;
    GL.framebuffers[id] = null;
  }
}

function _emscripten_glFramebufferRenderbuffer(
  target,
  attachment,
  renderbuffertarget,
  renderbuffer
) {
  GLctx.framebufferRenderbuffer(
    target,
    attachment,
    renderbuffertarget,
    GL.renderbuffers[renderbuffer]
  );
}

function _emscripten_glFramebufferTexture2D(
  target,
  attachment,
  textarget,
  texture,
  level
) {
  GLctx.framebufferTexture2D(
    target,
    attachment,
    textarget,
    GL.textures[texture],
    level
  );
}

function _emscripten_glGetFramebufferAttachmentParameteriv(
  target,
  attachment,
  pname,
  params
) {
  var result = GLctx.getFramebufferAttachmentParameter(
    target,
    attachment,
    pname
  );
  HEAP32[params >> 2] = result;
}

function _emscripten_glIsFramebuffer(framebuffer) {
  var fb = GL.framebuffers[framebuffer];
  if (!fb) return 0;
  return GLctx.isFramebuffer(fb);
}

function _emscripten_glDeleteObjectARB(id) {
  if (GL.programs[id]) {
    _emscripten_glDeleteProgram(id);
  } else if (GL.shaders[id]) {
    _emscripten_glDeleteShader(id);
  } else {
    Module.printErr("WARNING: deleteObject received invalid id: " + id);
  }
}

function _emscripten_glGetObjectParameterivARB(id, type, result) {
  if (GL.programs[id]) {
    if (type == 0x8b84) {
      // GL_OBJECT_INFO_LOG_LENGTH_ARB
      HEAP32[result >> 2] = GLctx.getProgramInfoLog(GL.programs[id]).length;
      return;
    }
    _emscripten_glGetProgramiv(id, type, result);
  } else if (GL.shaders[id]) {
    if (type == 0x8b84) {
      // GL_OBJECT_INFO_LOG_LENGTH_ARB
      HEAP32[result >> 2] = GLctx.getShaderInfoLog(GL.shaders[id]).length;
      return;
    } else if (type == 0x8b88) {
      // GL_OBJECT_SHADER_SOURCE_LENGTH_ARB
      HEAP32[result >> 2] = GLctx.getShaderSource(GL.shaders[id]).length;
      return;
    }
    _emscripten_glGetShaderiv(id, type, result);
  } else {
    Module.printErr("WARNING: getObjectParameteriv received invalid id: " + id);
  }
}

function _emscripten_glGetInfoLogARB(id, maxLength, length, infoLog) {
  if (GL.programs[id]) {
    _emscripten_glGetProgramInfoLog(id, maxLength, length, infoLog);
  } else if (GL.shaders[id]) {
    _emscripten_glGetShaderInfoLog(id, maxLength, length, infoLog);
  } else {
    Module.printErr("WARNING: getObjectParameteriv received invalid id: " + id);
  }
}

function _emscripten_glBindProgramARB(type, id) {}

function _emscripten_glGetPointerv(name, p) {
  var attribute;
  switch (name) {
    case 0x808e: // GL_VERTEX_ARRAY_POINTER
      attribute = GLImmediate.clientAttributes[GLImmediate.VERTEX];
      break;
    case 0x8090: // GL_COLOR_ARRAY_POINTER
      attribute = GLImmediate.clientAttributes[GLImmediate.COLOR];
      break;
    case 0x8092: // GL_TEXTURE_COORD_ARRAY_POINTER
      attribute =
        GLImmediate.clientAttributes[
          GLImmediate.TEXTURE0 + GLImmediate.clientActiveTexture
        ];
      break;
    default:
      GL.recordError(0x0500 /*GL_INVALID_ENUM*/);
      return;
  }
  HEAP32[p >> 2] = attribute ? attribute.pointer : 0;
}

function _emscripten_glDrawElements(mode, count, type, indices) {
  GLctx.drawElements(mode, count, type, indices);
}
function _emscripten_glDrawRangeElements(
  mode,
  start,
  end,
  count,
  type,
  indices
) {
  _emscripten_glDrawElements(mode, count, type, indices, start, end);
}

function _emscripten_glEnableClientState(cap) {
  var attrib = GLEmulation.getAttributeFromCapability(cap);
  if (attrib === null) {
    return;
  }
  if (!GLImmediate.enabledClientAttributes[attrib]) {
    GLImmediate.enabledClientAttributes[attrib] = true;
    GLImmediate.totalEnabledClientAttributes++;
    GLImmediate.currentRenderer = null; // Will need to change current renderer, since the set of active vertex pointers changed.
    if (GLEmulation.currentVao)
      GLEmulation.currentVao.enabledClientStates[cap] = 1;
    GLImmediate.modifiedClientAttributes = true;
  }
}

function _emscripten_glVertexPointer(size, type, stride, pointer) {
  GLImmediate.setClientAttribute(
    GLImmediate.VERTEX,
    size,
    type,
    stride,
    pointer
  );
}

function _emscripten_glTexCoordPointer(size, type, stride, pointer) {
  GLImmediate.setClientAttribute(
    GLImmediate.TEXTURE0 + GLImmediate.clientActiveTexture,
    size,
    type,
    stride,
    pointer
  );
}

function _emscripten_glNormalPointer(type, stride, pointer) {
  GLImmediate.setClientAttribute(GLImmediate.NORMAL, 3, type, stride, pointer);
}

function _emscripten_glColorPointer(size, type, stride, pointer) {
  GLImmediate.setClientAttribute(
    GLImmediate.COLOR,
    size,
    type,
    stride,
    pointer
  );
}

function _emscripten_glClientActiveTexture(texture) {
  GLImmediate.clientActiveTexture = texture - 0x84c0; // GL_TEXTURE0
}

function _emscripten_glGenVertexArrays(n, vaos) {
  for (var i = 0; i < n; i++) {
    var id = GL.getNewId(GLEmulation.vaos);
    GLEmulation.vaos[id] = {
      id: id,
      arrayBuffer: 0,
      elementArrayBuffer: 0,
      enabledVertexAttribArrays: {},
      vertexAttribPointers: {},
      enabledClientStates: {},
    };
    HEAP32[(vaos + i * 4) >> 2] = id;
  }
}

function _emscripten_glDeleteVertexArrays(n, vaos) {
  for (var i = 0; i < n; i++) {
    var id = HEAP32[(vaos + i * 4) >> 2];
    GLEmulation.vaos[id] = null;
    if (GLEmulation.currentVao && GLEmulation.currentVao.id == id)
      GLEmulation.currentVao = null;
  }
}

function _emscripten_glEnableVertexAttribArray(index) {
  GLctx.enableVertexAttribArray(index);
}

function _emscripten_glVertexAttribPointer(
  index,
  size,
  type,
  normalized,
  stride,
  ptr
) {
  GLctx.vertexAttribPointer(index, size, type, normalized, stride, ptr);
}
function _emscripten_glBindVertexArray(vao) {
  // undo vao-related things, wipe the slate clean, both for vao of 0 or an actual vao
  GLEmulation.currentVao = null; // make sure the commands we run here are not recorded
  if (GLImmediate.lastRenderer) GLImmediate.lastRenderer.cleanup();
  _emscripten_glBindBuffer(GLctx.ARRAY_BUFFER, 0); // XXX if one was there before we were bound?
  _emscripten_glBindBuffer(GLctx.ELEMENT_ARRAY_BUFFER, 0);
  for (var vaa in GLEmulation.enabledVertexAttribArrays) {
    GLctx.disableVertexAttribArray(vaa);
  }
  GLEmulation.enabledVertexAttribArrays = {};
  GLImmediate.enabledClientAttributes = [0, 0];
  GLImmediate.totalEnabledClientAttributes = 0;
  GLImmediate.modifiedClientAttributes = true;
  if (vao) {
    // replay vao
    var info = GLEmulation.vaos[vao];
    _emscripten_glBindBuffer(GLctx.ARRAY_BUFFER, info.arrayBuffer); // XXX overwrite current binding?
    _emscripten_glBindBuffer(
      GLctx.ELEMENT_ARRAY_BUFFER,
      info.elementArrayBuffer
    );
    for (var vaa in info.enabledVertexAttribArrays) {
      _emscripten_glEnableVertexAttribArray(vaa);
    }
    for (var vaa in info.vertexAttribPointers) {
      _glVertexAttribPointer.apply(null, info.vertexAttribPointers[vaa]);
    }
    for (var attrib in info.enabledClientStates) {
      _emscripten_glEnableClientState(attrib | 0);
    }
    GLEmulation.currentVao = info; // set currentVao last, so the commands we ran here were not recorded
  }
}

function _emscripten_glMatrixMode(mode) {
  if (mode == 0x1700 /* GL_MODELVIEW */) {
    GLImmediate.currentMatrix = 0 /*m*/;
  } else if (mode == 0x1701 /* GL_PROJECTION */) {
    GLImmediate.currentMatrix = 1 /*p*/;
  } else if (mode == 0x1702) {
    // GL_TEXTURE
    GLImmediate.useTextureMatrix = true;
    GLImmediate.currentMatrix = 2 /*t*/ + GLImmediate.clientActiveTexture;
  } else {
    throw "Wrong mode " + mode + " passed to glMatrixMode";
  }
}

function _emscripten_glLoadIdentity() {
  GLImmediate.matricesModified = true;
  GLImmediate.matrixVersion[GLImmediate.currentMatrix] =
    (GLImmediate.matrixVersion[GLImmediate.currentMatrix] + 1) | 0;
  GLImmediate.matrixLib.mat4.identity(
    GLImmediate.matrix[GLImmediate.currentMatrix]
  );
}

function _emscripten_glLoadMatrixf(matrix) {
  GLImmediate.matricesModified = true;
  GLImmediate.matrixVersion[GLImmediate.currentMatrix] =
    (GLImmediate.matrixVersion[GLImmediate.currentMatrix] + 1) | 0;
  GLImmediate.matrixLib.mat4.set(
    HEAPF32.subarray(matrix >> 2, (matrix + 64) >> 2),
    GLImmediate.matrix[GLImmediate.currentMatrix]
  );
}

function _emscripten_glFrustum(left, right, bottom, top_, nearVal, farVal) {
  GLImmediate.matricesModified = true;
  GLImmediate.matrixVersion[GLImmediate.currentMatrix] =
    (GLImmediate.matrixVersion[GLImmediate.currentMatrix] + 1) | 0;
  GLImmediate.matrixLib.mat4.multiply(
    GLImmediate.matrix[GLImmediate.currentMatrix],
    GLImmediate.matrixLib.mat4.frustum(
      left,
      right,
      bottom,
      top_,
      nearVal,
      farVal
    )
  );
}

function _emscripten_glRotatef(angle, x, y, z) {
  GLImmediate.matricesModified = true;
  GLImmediate.matrixVersion[GLImmediate.currentMatrix] =
    (GLImmediate.matrixVersion[GLImmediate.currentMatrix] + 1) | 0;
  GLImmediate.matrixLib.mat4.rotate(
    GLImmediate.matrix[GLImmediate.currentMatrix],
    (angle * Math.PI) / 180,
    [x, y, z]
  );
}

function _emscripten_glDisableVertexAttribArray(index) {
  GLctx.disableVertexAttribArray(index);
}

function _emscripten_glDrawArrays(mode, first, count) {
  GLctx.drawArrays(mode, first, count);
}

function _emscripten_glShaderBinary() {
  GL.recordError(0x0500 /*GL_INVALID_ENUM*/);
}

function _emscripten_glReleaseShaderCompiler() {
  // NOP (as allowed by GLES 2.0 spec)
}

function _emscripten_glGetError() {
  // First return any GL error generated by the emscripten library_gl.js interop layer.
  if (GL.lastError) {
    var error = GL.lastError;
    GL.lastError = 0 /*GL_NO_ERROR*/;
    return error;
  } else {
    // If there were none, return the GL error from the browser GL context.
    return GLctx.getError();
  }
}

function _emscripten_glVertexAttribDivisor(index, divisor) {
  GL.instancedArraysExt.vertexAttribDivisorANGLE(index, divisor);
}

function _emscripten_glDrawArraysInstanced(mode, first, count, primcount) {
  GL.instancedArraysExt.drawArraysInstancedANGLE(mode, first, count, primcount);
}

function _emscripten_glDrawElementsInstanced(
  mode,
  count,
  type,
  indices,
  primcount
) {
  GL.instancedArraysExt.drawElementsInstancedANGLE(
    mode,
    count,
    type,
    indices,
    primcount
  );
}

function _emscripten_glFinish() {
  GLctx.finish();
}

function _emscripten_glFlush() {
  GLctx.flush();
}

function _emscripten_glClearDepth(x0) {
  GLctx.clearDepth(x0);
}

function _emscripten_glClearDepthf(x0) {
  GLctx.clearDepth(x0);
}

function _emscripten_glDepthFunc(x0) {
  GLctx.depthFunc(x0);
}

function _emscripten_glEnable(x0) {
  GLctx.enable(x0);
}

function _emscripten_glDisable(x0) {
  GLctx.disable(x0);
}

function _emscripten_glFrontFace(x0) {
  GLctx.frontFace(x0);
}

function _emscripten_glCullFace(x0) {
  GLctx.cullFace(x0);
}

function _emscripten_glClear(x0) {
  GLctx.clear(x0);
}

function _emscripten_glLineWidth(x0) {
  GLctx.lineWidth(x0);
}

function _emscripten_glClearStencil(x0) {
  GLctx.clearStencil(x0);
}

function _emscripten_glDepthMask(x0) {
  GLctx.depthMask(x0);
}

function _emscripten_glStencilMask(x0) {
  GLctx.stencilMask(x0);
}

function _emscripten_glCheckFramebufferStatus(x0) {
  return GLctx.checkFramebufferStatus(x0);
}

function _emscripten_glGenerateMipmap(x0) {
  GLctx.generateMipmap(x0);
}

function _emscripten_glActiveTexture(x0) {
  GLctx.activeTexture(x0);
}

function _emscripten_glBlendEquation(x0) {
  GLctx.blendEquation(x0);
}

function _emscripten_glIsEnabled(x0) {
  return GLctx.isEnabled(x0);
}

function _emscripten_glBlendFunc(x0, x1) {
  GLctx.blendFunc(x0, x1);
}

function _emscripten_glBlendEquationSeparate(x0, x1) {
  GLctx.blendEquationSeparate(x0, x1);
}

function _emscripten_glDepthRange(x0, x1) {
  GLctx.depthRange(x0, x1);
}

function _emscripten_glDepthRangef(x0, x1) {
  GLctx.depthRange(x0, x1);
}

function _emscripten_glStencilMaskSeparate(x0, x1) {
  GLctx.stencilMaskSeparate(x0, x1);
}

function _emscripten_glHint(x0, x1) {
  GLctx.hint(x0, x1);
}

function _emscripten_glPolygonOffset(x0, x1) {
  GLctx.polygonOffset(x0, x1);
}

function _emscripten_glVertexAttrib1f(x0, x1) {
  GLctx.vertexAttrib1f(x0, x1);
}

function _emscripten_glSampleCoverage(x0, x1) {
  GLctx.sampleCoverage(x0, x1);
}

function _emscripten_glTexParameteri(x0, x1, x2) {
  GLctx.texParameteri(x0, x1, x2);
}

function _emscripten_glTexParameterf(x0, x1, x2) {
  GLctx.texParameterf(x0, x1, x2);
}

function _emscripten_glVertexAttrib2f(x0, x1, x2) {
  GLctx.vertexAttrib2f(x0, x1, x2);
}

function _emscripten_glStencilFunc(x0, x1, x2) {
  GLctx.stencilFunc(x0, x1, x2);
}

function _emscripten_glStencilOp(x0, x1, x2) {
  GLctx.stencilOp(x0, x1, x2);
}

function _emscripten_glViewport(x0, x1, x2, x3) {
  GLctx.viewport(x0, x1, x2, x3);
}

function _emscripten_glClearColor(x0, x1, x2, x3) {
  GLctx.clearColor(x0, x1, x2, x3);
}

function _emscripten_glScissor(x0, x1, x2, x3) {
  GLctx.scissor(x0, x1, x2, x3);
}

function _emscripten_glVertexAttrib3f(x0, x1, x2, x3) {
  GLctx.vertexAttrib3f(x0, x1, x2, x3);
}

function _emscripten_glColorMask(x0, x1, x2, x3) {
  GLctx.colorMask(x0, x1, x2, x3);
}

function _emscripten_glRenderbufferStorage(x0, x1, x2, x3) {
  GLctx.renderbufferStorage(x0, x1, x2, x3);
}

function _emscripten_glBlendFuncSeparate(x0, x1, x2, x3) {
  GLctx.blendFuncSeparate(x0, x1, x2, x3);
}

function _emscripten_glBlendColor(x0, x1, x2, x3) {
  GLctx.blendColor(x0, x1, x2, x3);
}

function _emscripten_glStencilFuncSeparate(x0, x1, x2, x3) {
  GLctx.stencilFuncSeparate(x0, x1, x2, x3);
}

function _emscripten_glStencilOpSeparate(x0, x1, x2, x3) {
  GLctx.stencilOpSeparate(x0, x1, x2, x3);
}

function _emscripten_glVertexAttrib4f(x0, x1, x2, x3, x4) {
  GLctx.vertexAttrib4f(x0, x1, x2, x3, x4);
}

function _emscripten_glCopyTexImage2D(x0, x1, x2, x3, x4, x5, x6, x7) {
  GLctx.copyTexImage2D(x0, x1, x2, x3, x4, x5, x6, x7);
}

function _emscripten_glCopyTexSubImage2D(x0, x1, x2, x3, x4, x5, x6, x7) {
  GLctx.copyTexSubImage2D(x0, x1, x2, x3, x4, x5, x6, x7);
}

function _abort() {
  Module["abort"]();
}

function _sbrk(bytes) {
  // Implement a Linux-like 'memory area' for our 'process'.
  // Changes the size of the memory area by |bytes|; returns the
  // address of the previous top ('break') of the memory area
  // We control the "dynamic" memory - DYNAMIC_BASE to DYNAMICTOP
  var self = _sbrk;
  if (!self.called) {
    DYNAMICTOP = alignMemoryPage(DYNAMICTOP); // make sure we start out aligned
    self.called = true;
    assert(Runtime.dynamicAlloc);
    self.alloc = Runtime.dynamicAlloc;
    Runtime.dynamicAlloc = function () {
      abort("cannot dynamically allocate, sbrk now has control");
    };
  }
  var ret = DYNAMICTOP;
  if (bytes != 0) self.alloc(bytes);
  return ret; // Previous break location.
}

function _sysconf(name) {
  // long sysconf(int name);
  // http://pubs.opengroup.org/onlinepubs/009695399/functions/sysconf.html
  switch (name) {
    case 30:
      return PAGE_SIZE;
    case 132:
    case 133:
    case 12:
    case 137:
    case 138:
    case 15:
    case 235:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 149:
    case 13:
    case 10:
    case 236:
    case 153:
    case 9:
    case 21:
    case 22:
    case 159:
    case 154:
    case 14:
    case 77:
    case 78:
    case 139:
    case 80:
    case 81:
    case 79:
    case 82:
    case 68:
    case 67:
    case 164:
    case 11:
    case 29:
    case 47:
    case 48:
    case 95:
    case 52:
    case 51:
    case 46:
      return 200809;
    case 27:
    case 246:
    case 127:
    case 128:
    case 23:
    case 24:
    case 160:
    case 161:
    case 181:
    case 182:
    case 242:
    case 183:
    case 184:
    case 243:
    case 244:
    case 245:
    case 165:
    case 178:
    case 179:
    case 49:
    case 50:
    case 168:
    case 169:
    case 175:
    case 170:
    case 171:
    case 172:
    case 97:
    case 76:
    case 32:
    case 173:
    case 35:
      return -1;
    case 176:
    case 177:
    case 7:
    case 155:
    case 8:
    case 157:
    case 125:
    case 126:
    case 92:
    case 93:
    case 129:
    case 130:
    case 131:
    case 94:
    case 91:
      return 1;
    case 74:
    case 60:
    case 69:
    case 70:
    case 4:
      return 1024;
    case 31:
    case 42:
    case 72:
      return 32;
    case 87:
    case 26:
    case 33:
      return 2147483647;
    case 34:
    case 1:
      return 47839;
    case 38:
    case 36:
      return 99;
    case 43:
    case 37:
      return 2048;
    case 0:
      return 2097152;
    case 3:
      return 65536;
    case 28:
      return 32768;
    case 44:
      return 32767;
    case 75:
      return 16384;
    case 39:
      return 1000;
    case 89:
      return 700;
    case 71:
      return 256;
    case 40:
      return 255;
    case 2:
      return 100;
    case 180:
      return 64;
    case 25:
      return 20;
    case 5:
      return 16;
    case 6:
      return 6;
    case 73:
      return 4;
    case 84:
      return 1;
  }
  ___setErrNo(ERRNO_CODES.EINVAL);
  return -1;
}

function _copysign(a, b) {
  return __reallyNegative(a) === __reallyNegative(b) ? a : -a;
}
var _copysignl = _copysign;

var _fmodl = _fmod;

___errno_state = Runtime.staticAlloc(4);
HEAP32[___errno_state >> 2] = 0;
(function () {
  "use strict";
  function n(e) {
    throw e;
  }
  var p = void 0,
    aa = this;
  function r(e, c) {
    var d = e.split("."),
      b = aa;
    !(d[0] in b) && b.execScript && b.execScript("var " + d[0]);
    for (var a; d.length && (a = d.shift()); )
      !d.length && c !== p ? (b[a] = c) : (b = b[a] ? b[a] : (b[a] = {}));
  }
  var u =
    "undefined" !== typeof Uint8Array &&
    "undefined" !== typeof Uint16Array &&
    "undefined" !== typeof Uint32Array;
  new (u ? Uint8Array : Array)(256);
  var v;
  for (v = 0; 256 > v; ++v)
    for (var w = v, ba = 7, w = w >>> 1; w; w >>>= 1) --ba;
  function x(e, c, d) {
    var b,
      a = "number" === typeof c ? c : (c = 0),
      f = "number" === typeof d ? d : e.length;
    b = -1;
    for (a = f & 7; a--; ++c) b = (b >>> 8) ^ y[(b ^ e[c]) & 255];
    for (a = f >> 3; a--; c += 8)
      (b = (b >>> 8) ^ y[(b ^ e[c]) & 255]),
        (b = (b >>> 8) ^ y[(b ^ e[c + 1]) & 255]),
        (b = (b >>> 8) ^ y[(b ^ e[c + 2]) & 255]),
        (b = (b >>> 8) ^ y[(b ^ e[c + 3]) & 255]),
        (b = (b >>> 8) ^ y[(b ^ e[c + 4]) & 255]),
        (b = (b >>> 8) ^ y[(b ^ e[c + 5]) & 255]),
        (b = (b >>> 8) ^ y[(b ^ e[c + 6]) & 255]),
        (b = (b >>> 8) ^ y[(b ^ e[c + 7]) & 255]);
    return (b ^ 4294967295) >>> 0;
  }
  var z = [
      0, 1996959894, 3993919788, 2567524794, 124634137, 1886057615, 3915621685,
      2657392035, 249268274, 2044508324, 3772115230, 2547177864, 162941995,
      2125561021, 3887607047, 2428444049, 498536548, 1789927666, 4089016648,
      2227061214, 450548861, 1843258603, 4107580753, 2211677639, 325883990,
      1684777152, 4251122042, 2321926636, 335633487, 1661365465, 4195302755,
      2366115317, 997073096, 1281953886, 3579855332, 2724688242, 1006888145,
      1258607687, 3524101629, 2768942443, 901097722, 1119000684, 3686517206,
      2898065728, 853044451, 1172266101, 3705015759, 2882616665, 651767980,
      1373503546, 3369554304, 3218104598, 565507253, 1454621731, 3485111705,
      3099436303, 671266974, 1594198024, 3322730930, 2970347812, 795835527,
      1483230225, 3244367275, 3060149565, 1994146192, 31158534, 2563907772,
      4023717930, 1907459465, 112637215, 2680153253, 3904427059, 2013776290,
      251722036, 2517215374, 3775830040, 2137656763, 141376813, 2439277719,
      3865271297, 1802195444, 476864866, 2238001368, 4066508878, 1812370925,
      453092731, 2181625025, 4111451223, 1706088902, 314042704, 2344532202,
      4240017532, 1658658271, 366619977, 2362670323, 4224994405, 1303535960,
      984961486, 2747007092, 3569037538, 1256170817, 1037604311, 2765210733,
      3554079995, 1131014506, 879679996, 2909243462, 3663771856, 1141124467,
      855842277, 2852801631, 3708648649, 1342533948, 654459306, 3188396048,
      3373015174, 1466479909, 544179635, 3110523913, 3462522015, 1591671054,
      702138776, 2966460450, 3352799412, 1504918807, 783551873, 3082640443,
      3233442989, 3988292384, 2596254646, 62317068, 1957810842, 3939845945,
      2647816111, 81470997, 1943803523, 3814918930, 2489596804, 225274430,
      2053790376, 3826175755, 2466906013, 167816743, 2097651377, 4027552580,
      2265490386, 503444072, 1762050814, 4150417245, 2154129355, 426522225,
      1852507879, 4275313526, 2312317920, 282753626, 1742555852, 4189708143,
      2394877945, 397917763, 1622183637, 3604390888, 2714866558, 953729732,
      1340076626, 3518719985, 2797360999, 1068828381, 1219638859, 3624741850,
      2936675148, 906185462, 1090812512, 3747672003, 2825379669, 829329135,
      1181335161, 3412177804, 3160834842, 628085408, 1382605366, 3423369109,
      3138078467, 570562233, 1426400815, 3317316542, 2998733608, 733239954,
      1555261956, 3268935591, 3050360625, 752459403, 1541320221, 2607071920,
      3965973030, 1969922972, 40735498, 2617837225, 3943577151, 1913087877,
      83908371, 2512341634, 3803740692, 2075208622, 213261112, 2463272603,
      3855990285, 2094854071, 198958881, 2262029012, 4057260610, 1759359992,
      534414190, 2176718541, 4139329115, 1873836001, 414664567, 2282248934,
      4279200368, 1711684554, 285281116, 2405801727, 4167216745, 1634467795,
      376229701, 2685067896, 3608007406, 1308918612, 956543938, 2808555105,
      3495958263, 1231636301, 1047427035, 2932959818, 3654703836, 1088359270,
      936918e3, 2847714899, 3736837829, 1202900863, 817233897, 3183342108,
      3401237130, 1404277552, 615818150, 3134207493, 3453421203, 1423857449,
      601450431, 3009837614, 3294710456, 1567103746, 711928724, 3020668471,
      3272380065, 1510334235, 755167117,
    ],
    y = u ? new Uint32Array(z) : z;
  function A() {}
  A.prototype.getName = function () {
    return this.name;
  };
  A.prototype.getData = function () {
    return this.data;
  };
  A.prototype.G = function () {
    return this.H;
  };
  r("Zlib.GunzipMember", A);
  r("Zlib.GunzipMember.prototype.getName", A.prototype.getName);
  r("Zlib.GunzipMember.prototype.getData", A.prototype.getData);
  r("Zlib.GunzipMember.prototype.getMtime", A.prototype.G);
  function C(e) {
    var c = e.length,
      d = 0,
      b = Number.POSITIVE_INFINITY,
      a,
      f,
      g,
      k,
      m,
      q,
      t,
      h,
      l;
    for (h = 0; h < c; ++h) e[h] > d && (d = e[h]), e[h] < b && (b = e[h]);
    a = 1 << d;
    f = new (u ? Uint32Array : Array)(a);
    g = 1;
    k = 0;
    for (m = 2; g <= d; ) {
      for (h = 0; h < c; ++h)
        if (e[h] === g) {
          q = 0;
          t = k;
          for (l = 0; l < g; ++l) (q = (q << 1) | (t & 1)), (t >>= 1);
          for (l = q; l < a; l += m) f[l] = (g << 16) | h;
          ++k;
        }
      ++g;
      k <<= 1;
      m <<= 1;
    }
    return [f, d, b];
  }
  var D = [],
    E;
  for (E = 0; 288 > E; E++)
    switch (!0) {
      case 143 >= E:
        D.push([E + 48, 8]);
        break;
      case 255 >= E:
        D.push([E - 144 + 400, 9]);
        break;
      case 279 >= E:
        D.push([E - 256 + 0, 7]);
        break;
      case 287 >= E:
        D.push([E - 280 + 192, 8]);
        break;
      default:
        n("invalid literal: " + E);
    }
  var ca = (function () {
    function e(a) {
      switch (!0) {
        case 3 === a:
          return [257, a - 3, 0];
        case 4 === a:
          return [258, a - 4, 0];
        case 5 === a:
          return [259, a - 5, 0];
        case 6 === a:
          return [260, a - 6, 0];
        case 7 === a:
          return [261, a - 7, 0];
        case 8 === a:
          return [262, a - 8, 0];
        case 9 === a:
          return [263, a - 9, 0];
        case 10 === a:
          return [264, a - 10, 0];
        case 12 >= a:
          return [265, a - 11, 1];
        case 14 >= a:
          return [266, a - 13, 1];
        case 16 >= a:
          return [267, a - 15, 1];
        case 18 >= a:
          return [268, a - 17, 1];
        case 22 >= a:
          return [269, a - 19, 2];
        case 26 >= a:
          return [270, a - 23, 2];
        case 30 >= a:
          return [271, a - 27, 2];
        case 34 >= a:
          return [272, a - 31, 2];
        case 42 >= a:
          return [273, a - 35, 3];
        case 50 >= a:
          return [274, a - 43, 3];
        case 58 >= a:
          return [275, a - 51, 3];
        case 66 >= a:
          return [276, a - 59, 3];
        case 82 >= a:
          return [277, a - 67, 4];
        case 98 >= a:
          return [278, a - 83, 4];
        case 114 >= a:
          return [279, a - 99, 4];
        case 130 >= a:
          return [280, a - 115, 4];
        case 162 >= a:
          return [281, a - 131, 5];
        case 194 >= a:
          return [282, a - 163, 5];
        case 226 >= a:
          return [283, a - 195, 5];
        case 257 >= a:
          return [284, a - 227, 5];
        case 258 === a:
          return [285, a - 258, 0];
        default:
          n("invalid length: " + a);
      }
    }
    var c = [],
      d,
      b;
    for (d = 3; 258 >= d; d++)
      (b = e(d)), (c[d] = (b[2] << 24) | (b[1] << 16) | b[0]);
    return c;
  })();
  u && new Uint32Array(ca);
  function G(e, c) {
    this.i = [];
    this.j = 32768;
    this.d = this.f = this.c = this.n = 0;
    this.input = u ? new Uint8Array(e) : e;
    this.o = !1;
    this.k = H;
    this.w = !1;
    if (c || !(c = {}))
      c.index && (this.c = c.index),
        c.bufferSize && (this.j = c.bufferSize),
        c.bufferType && (this.k = c.bufferType),
        c.resize && (this.w = c.resize);
    switch (this.k) {
      case I:
        this.a = 32768;
        this.b = new (u ? Uint8Array : Array)(32768 + this.j + 258);
        break;
      case H:
        this.a = 0;
        this.b = new (u ? Uint8Array : Array)(this.j);
        this.e = this.D;
        this.q = this.A;
        this.l = this.C;
        break;
      default:
        n(Error("invalid inflate mode"));
    }
  }
  var I = 0,
    H = 1;
  G.prototype.g = function () {
    for (; !this.o; ) {
      var e = J(this, 3);
      e & 1 && (this.o = !0);
      e >>>= 1;
      switch (e) {
        case 0:
          var c = this.input,
            d = this.c,
            b = this.b,
            a = this.a,
            f = p,
            g = p,
            k = p,
            m = b.length,
            q = p;
          this.d = this.f = 0;
          f = c[d++];
          f === p &&
            n(Error("invalid uncompressed block header: LEN (first byte)"));
          g = f;
          f = c[d++];
          f === p &&
            n(Error("invalid uncompressed block header: LEN (second byte)"));
          g |= f << 8;
          f = c[d++];
          f === p &&
            n(Error("invalid uncompressed block header: NLEN (first byte)"));
          k = f;
          f = c[d++];
          f === p &&
            n(Error("invalid uncompressed block header: NLEN (second byte)"));
          k |= f << 8;
          g === ~k &&
            n(Error("invalid uncompressed block header: length verify"));
          d + g > c.length && n(Error("input buffer is broken"));
          switch (this.k) {
            case I:
              for (; a + g > b.length; ) {
                q = m - a;
                g -= q;
                if (u) b.set(c.subarray(d, d + q), a), (a += q), (d += q);
                else for (; q--; ) b[a++] = c[d++];
                this.a = a;
                b = this.e();
                a = this.a;
              }
              break;
            case H:
              for (; a + g > b.length; ) b = this.e({ t: 2 });
              break;
            default:
              n(Error("invalid inflate mode"));
          }
          if (u) b.set(c.subarray(d, d + g), a), (a += g), (d += g);
          else for (; g--; ) b[a++] = c[d++];
          this.c = d;
          this.a = a;
          this.b = b;
          break;
        case 1:
          this.l(da, ea);
          break;
        case 2:
          fa(this);
          break;
        default:
          n(Error("unknown BTYPE: " + e));
      }
    }
    return this.q();
  };
  var K = [16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15],
    L = u ? new Uint16Array(K) : K,
    N = [
      3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31, 35, 43, 51, 59,
      67, 83, 99, 115, 131, 163, 195, 227, 258, 258, 258,
    ],
    O = u ? new Uint16Array(N) : N,
    P = [
      0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5,
      5, 5, 5, 0, 0, 0,
    ],
    Q = u ? new Uint8Array(P) : P,
    T = [
      1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193, 257, 385, 513,
      769, 1025, 1537, 2049, 3073, 4097, 6145, 8193, 12289, 16385, 24577,
    ],
    ga = u ? new Uint16Array(T) : T,
    ha = [
      0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10,
      11, 11, 12, 12, 13, 13,
    ],
    U = u ? new Uint8Array(ha) : ha,
    V = new (u ? Uint8Array : Array)(288),
    W,
    ia;
  W = 0;
  for (ia = V.length; W < ia; ++W)
    V[W] = 143 >= W ? 8 : 255 >= W ? 9 : 279 >= W ? 7 : 8;
  var da = C(V),
    X = new (u ? Uint8Array : Array)(30),
    Y,
    ja;
  Y = 0;
  for (ja = X.length; Y < ja; ++Y) X[Y] = 5;
  var ea = C(X);
  function J(e, c) {
    for (var d = e.f, b = e.d, a = e.input, f = e.c, g; b < c; )
      (g = a[f++]),
        g === p && n(Error("input buffer is broken")),
        (d |= g << b),
        (b += 8);
    g = d & ((1 << c) - 1);
    e.f = d >>> c;
    e.d = b - c;
    e.c = f;
    return g;
  }
  function Z(e, c) {
    for (
      var d = e.f, b = e.d, a = e.input, f = e.c, g = c[0], k = c[1], m, q, t;
      b < k;

    ) {
      m = a[f++];
      if (m === p) break;
      d |= m << b;
      b += 8;
    }
    q = g[d & ((1 << k) - 1)];
    t = q >>> 16;
    e.f = d >> t;
    e.d = b - t;
    e.c = f;
    return q & 65535;
  }
  function fa(e) {
    function c(a, c, b) {
      var d, e, f, g;
      for (g = 0; g < a; )
        switch (((d = Z(this, c)), d)) {
          case 16:
            for (f = 3 + J(this, 2); f--; ) b[g++] = e;
            break;
          case 17:
            for (f = 3 + J(this, 3); f--; ) b[g++] = 0;
            e = 0;
            break;
          case 18:
            for (f = 11 + J(this, 7); f--; ) b[g++] = 0;
            e = 0;
            break;
          default:
            e = b[g++] = d;
        }
      return b;
    }
    var d = J(e, 5) + 257,
      b = J(e, 5) + 1,
      a = J(e, 4) + 4,
      f = new (u ? Uint8Array : Array)(L.length),
      g,
      k,
      m,
      q;
    for (q = 0; q < a; ++q) f[L[q]] = J(e, 3);
    g = C(f);
    k = new (u ? Uint8Array : Array)(d);
    m = new (u ? Uint8Array : Array)(b);
    e.l(C(c.call(e, d, g, k)), C(c.call(e, b, g, m)));
  }
  G.prototype.l = function (e, c) {
    var d = this.b,
      b = this.a;
    this.r = e;
    for (var a = d.length - 258, f, g, k, m; 256 !== (f = Z(this, e)); )
      if (256 > f)
        b >= a && ((this.a = b), (d = this.e()), (b = this.a)), (d[b++] = f);
      else {
        g = f - 257;
        m = O[g];
        0 < Q[g] && (m += J(this, Q[g]));
        f = Z(this, c);
        k = ga[f];
        0 < U[f] && (k += J(this, U[f]));
        b >= a && ((this.a = b), (d = this.e()), (b = this.a));
        for (; m--; ) d[b] = d[b++ - k];
      }
    for (; 8 <= this.d; ) (this.d -= 8), this.c--;
    this.a = b;
  };
  G.prototype.C = function (e, c) {
    var d = this.b,
      b = this.a;
    this.r = e;
    for (var a = d.length, f, g, k, m; 256 !== (f = Z(this, e)); )
      if (256 > f) b >= a && ((d = this.e()), (a = d.length)), (d[b++] = f);
      else {
        g = f - 257;
        m = O[g];
        0 < Q[g] && (m += J(this, Q[g]));
        f = Z(this, c);
        k = ga[f];
        0 < U[f] && (k += J(this, U[f]));
        b + m > a && ((d = this.e()), (a = d.length));
        for (; m--; ) d[b] = d[b++ - k];
      }
    for (; 8 <= this.d; ) (this.d -= 8), this.c--;
    this.a = b;
  };
  G.prototype.e = function () {
    var e = new (u ? Uint8Array : Array)(this.a - 32768),
      c = this.a - 32768,
      d,
      b,
      a = this.b;
    if (u) e.set(a.subarray(32768, e.length));
    else {
      d = 0;
      for (b = e.length; d < b; ++d) e[d] = a[d + 32768];
    }
    this.i.push(e);
    this.n += e.length;
    if (u) a.set(a.subarray(c, c + 32768));
    else for (d = 0; 32768 > d; ++d) a[d] = a[c + d];
    this.a = 32768;
    return a;
  };
  G.prototype.D = function (e) {
    var c,
      d = (this.input.length / this.c + 1) | 0,
      b,
      a,
      f,
      g = this.input,
      k = this.b;
    e &&
      ("number" === typeof e.t && (d = e.t),
      "number" === typeof e.z && (d += e.z));
    2 > d
      ? ((b = (g.length - this.c) / this.r[2]),
        (f = (258 * (b / 2)) | 0),
        (a = f < k.length ? k.length + f : k.length << 1))
      : (a = k.length * d);
    u ? ((c = new Uint8Array(a)), c.set(k)) : (c = k);
    return (this.b = c);
  };
  G.prototype.q = function () {
    var e = 0,
      c = this.b,
      d = this.i,
      b,
      a = new (u ? Uint8Array : Array)(this.n + (this.a - 32768)),
      f,
      g,
      k,
      m;
    if (0 === d.length)
      return u ? this.b.subarray(32768, this.a) : this.b.slice(32768, this.a);
    f = 0;
    for (g = d.length; f < g; ++f) {
      b = d[f];
      k = 0;
      for (m = b.length; k < m; ++k) a[e++] = b[k];
    }
    f = 32768;
    for (g = this.a; f < g; ++f) a[e++] = c[f];
    this.i = [];
    return (this.buffer = a);
  };
  G.prototype.A = function () {
    var e,
      c = this.a;
    u
      ? this.w
        ? ((e = new Uint8Array(c)), e.set(this.b.subarray(0, c)))
        : (e = this.b.subarray(0, c))
      : (this.b.length > c && (this.b.length = c), (e = this.b));
    return (this.buffer = e);
  };
  function $(e) {
    this.input = e;
    this.c = 0;
    this.m = [];
    this.s = !1;
  }
  $.prototype.F = function () {
    this.s || this.g();
    return this.m.slice();
  };
  $.prototype.g = function () {
    for (var e = this.input.length; this.c < e; ) {
      var c = new A(),
        d = p,
        b = p,
        a = p,
        f = p,
        g = p,
        k = p,
        m = p,
        q = p,
        t = p,
        h = this.input,
        l = this.c;
      c.u = h[l++];
      c.v = h[l++];
      (31 !== c.u || 139 !== c.v) &&
        n(Error("invalid file signature:" + c.u + "," + c.v));
      c.p = h[l++];
      switch (c.p) {
        case 8:
          break;
        default:
          n(Error("unknown compression method: " + c.p));
      }
      c.h = h[l++];
      q = h[l++] | (h[l++] << 8) | (h[l++] << 16) | (h[l++] << 24);
      c.H = new Date(1e3 * q);
      c.N = h[l++];
      c.M = h[l++];
      0 < (c.h & 4) && ((c.I = h[l++] | (h[l++] << 8)), (l += c.I));
      if (0 < (c.h & 8)) {
        m = [];
        for (k = 0; 0 < (g = h[l++]); ) m[k++] = String.fromCharCode(g);
        c.name = m.join("");
      }
      if (0 < (c.h & 16)) {
        m = [];
        for (k = 0; 0 < (g = h[l++]); ) m[k++] = String.fromCharCode(g);
        c.J = m.join("");
      }
      0 < (c.h & 2) &&
        ((c.B = x(h, 0, l) & 65535),
        c.B !== (h[l++] | (h[l++] << 8)) && n(Error("invalid header crc16")));
      d =
        h[h.length - 4] |
        (h[h.length - 3] << 8) |
        (h[h.length - 2] << 16) |
        (h[h.length - 1] << 24);
      h.length - l - 4 - 4 < 512 * d && (f = d);
      b = new G(h, { index: l, bufferSize: f });
      c.data = a = b.g();
      l = b.c;
      c.K = t =
        (h[l++] | (h[l++] << 8) | (h[l++] << 16) | (h[l++] << 24)) >>> 0;
      x(a, p, p) !== t &&
        n(
          Error(
            "invalid CRC-32 checksum: 0x" +
              x(a, p, p).toString(16) +
              " / 0x" +
              t.toString(16)
          )
        );
      c.L = d =
        (h[l++] | (h[l++] << 8) | (h[l++] << 16) | (h[l++] << 24)) >>> 0;
      (a.length & 4294967295) !== d &&
        n(Error("invalid input size: " + (a.length & 4294967295) + " / " + d));
      this.m.push(c);
      this.c = l;
    }
    this.s = !0;
    var F = this.m,
      s,
      M,
      R = 0,
      S = 0,
      B;
    s = 0;
    for (M = F.length; s < M; ++s) S += F[s].data.length;
    if (u) {
      B = new Uint8Array(S);
      for (s = 0; s < M; ++s) B.set(F[s].data, R), (R += F[s].data.length);
    } else {
      B = [];
      for (s = 0; s < M; ++s) B[s] = F[s].data;
      B = Array.prototype.concat.apply([], B);
    }
    return B;
  };
  r("Zlib.Gunzip", $);
  r("Zlib.Gunzip.prototype.decompress", $.prototype.g);
  r("Zlib.Gunzip.prototype.getMembers", $.prototype.F);
}).call(typeof window !== "undefined" ? window : global);
(function (e) {
  function n(e) {
    var t = [];
    for (var n = 0; n < e.length; n++) {
      var r = e[n];
      if (r === 0) {
        break;
      }
      t.push(r);
    }
    return String.fromCharCode.apply(null, t);
  }
  function r(e) {
    var t = n(e);
    t = parseInt(t, 8);
    return isNaN(t) ? null : t;
  }
  var t = 512;
  var i = function (e) {
    var n =
      e instanceof ArrayBuffer ||
      (typeof Buffer !== "undefined" && e instanceof Buffer);
    var r = e instanceof Int8Array || e instanceof Uint8Array;
    if (!n && !r) {
      throw new Error(
        "Must specify a valid ArrayBuffer, Buffer, INT8Array or Int8Array."
      );
    }
    this.INT8 = r ? e : new Int8Array(e);
    this.headers = {};
    this.pos = 0;
    var i = 0;
    while (i < 2) {
      var s = this.pos;
      var o = this._readHeader();
      if (!o.name) {
        i++;
        continue;
      }
      this.headers[o.name] = o;
      this.pos += Math.ceil(o.size / t) * t;
    }
  };
  i.prototype._readHeader = function () {
    var e = {
      name: n(this.INT8.subarray(this.pos, (this.pos += 100))),
      mode: r(this.INT8.subarray(this.pos, (this.pos += 8))),
      uid: r(this.INT8.subarray(this.pos, (this.pos += 8))),
      gid: r(this.INT8.subarray(this.pos, (this.pos += 8))),
      size: r(this.INT8.subarray(this.pos, (this.pos += 12))),
      mtime: r(this.INT8.subarray(this.pos, (this.pos += 12))),
      chksum: r(this.INT8.subarray(this.pos, (this.pos += 8))),
      typeflag: n(this.INT8.subarray(this.pos, (this.pos += 1))),
      linkname: n(this.INT8.subarray(this.pos, (this.pos += 100))),
      magic: n(this.INT8.subarray(this.pos, (this.pos += 6))),
      version: n(this.INT8.subarray(this.pos, (this.pos += 2))),
      uname: n(this.INT8.subarray(this.pos, (this.pos += 32))),
      gname: n(this.INT8.subarray(this.pos, (this.pos += 32))),
      devmajor: r(this.INT8.subarray(this.pos, (this.pos += 8))),
      devminor: r(this.INT8.subarray(this.pos, (this.pos += 8))),
      prefix: n(this.INT8.subarray(this.pos, (this.pos += 155))),
    };
    this.pos += 12;
    e.offset = this.pos;
    return e;
  };
  i.prototype.getMembers = function () {
    return this.headers;
  };
  i.prototype.getContent = function (e) {
    var t = this.headers[e];
    if (!t) {
      return null;
    }
    return this.INT8.subarray(t.offset, t.offset + t.size);
  };
  e.Tar = i;
  if (typeof define !== "undefined" && define.amd) {
    define(function () {
      return i;
    });
  } else if (typeof module !== "undefined" && module.exports) {
    module.exports = i;
  }
})(typeof window !== "undefined" ? window : global);
Module["requestFullScreen"] = function Module_requestFullScreen(
  lockPointer,
  resizeCanvas
) {
  Browser.requestFullScreen(lockPointer, resizeCanvas);
};
Module["requestAnimationFrame"] = function Module_requestAnimationFrame(func) {
  Browser.requestAnimationFrame(func);
};
Module["setCanvasSize"] = function Module_setCanvasSize(
  width,
  height,
  noUpdates
) {
  Browser.setCanvasSize(width, height, noUpdates);
};
Module["pauseMainLoop"] = function Module_pauseMainLoop() {
  Browser.mainLoop.pause();
};
Module["resumeMainLoop"] = function Module_resumeMainLoop() {
  Browser.mainLoop.resume();
};
Module["getUserMedia"] = function Module_getUserMedia() {
  Browser.getUserMedia();
};
FS.staticInit();
__ATINIT__.unshift({
  func: function () {
    if (!Module["noFSInit"] && !FS.init.initialized) FS.init();
  },
});
__ATMAIN__.push({
  func: function () {
    FS.ignorePermissions = false;
  },
});
__ATEXIT__.push({
  func: function () {
    FS.quit();
  },
});
Module["FS_createFolder"] = FS.createFolder;
Module["FS_createPath"] = FS.createPath;
Module["FS_createDataFile"] = FS.createDataFile;
Module["FS_createPreloadedFile"] = FS.createPreloadedFile;
Module["FS_createLazyFile"] = FS.createLazyFile;
Module["FS_createLink"] = FS.createLink;
Module["FS_createDevice"] = FS.createDevice;
__ATINIT__.unshift({
  func: function () {
    TTY.init();
  },
});
__ATEXIT__.push({
  func: function () {
    TTY.shutdown();
  },
});
TTY.utf8 = new Runtime.UTF8Processor();
if (ENVIRONMENT_IS_NODE) {
  var fs = require("fs");
  NODEFS.staticInit();
}
_fputc.ret = allocate([0], "i8", ALLOC_STATIC);
__ATINIT__.push({
  func: function () {
    SOCKFS.root = FS.mount(SOCKFS, {}, null);
  },
});
___buildEnvironment(ENV);
var GLctx;
GL.init();
GLImmediate.setupFuncs();
Browser.moduleContextCreatedCallbacks.push(function () {
  GLImmediate.init();
});
GLEmulation.init();
STACK_BASE = STACKTOP = Runtime.alignMemory(STATICTOP);

staticSealed = true; // seal the static portion of memory

STACK_MAX = STACK_BASE + 5242880;

DYNAMIC_BASE = DYNAMICTOP = Runtime.alignMemory(STACK_MAX);

assert(DYNAMIC_BASE < TOTAL_MEMORY, "TOTAL_MEMORY not big enough for stack");

var cttz_i8 = allocate(
  [
    8, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 4, 0, 1, 0, 2, 0, 1, 0, 3,
    0, 1, 0, 2, 0, 1, 0, 5, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 4, 0,
    1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 6, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1,
    0, 2, 0, 1, 0, 4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 5, 0, 1, 0,
    2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2,
    0, 1, 0, 7, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 4, 0, 1, 0, 2, 0,
    1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 5, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1,
    0, 4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 6, 0, 1, 0, 2, 0, 1, 0,
    3, 0, 1, 0, 2, 0, 1, 0, 4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 5,
    0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 4, 0, 1, 0, 2, 0, 1, 0, 3, 0,
    1, 0, 2, 0, 1, 0,
  ],
  "i8",
  ALLOC_DYNAMIC
);

var Math_min = Math.min;
function invoke_iiiiiiii(index, a1, a2, a3, a4, a5, a6, a7) {
  try {
    return Module["dynCall_iiiiiiii"](index, a1, a2, a3, a4, a5, a6, a7);
  } catch (e) {
    if (typeof e !== "number" && e !== "longjmp") throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiiiif(index, a1, a2, a3, a4, a5, a6) {
  try {
    return Module["dynCall_iiiiiif"](index, a1, a2, a3, a4, a5, a6);
  } catch (e) {
    if (typeof e !== "number" && e !== "longjmp") throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vif(index, a1, a2) {
  try {
    Module["dynCall_vif"](index, a1, a2);
  } catch (e) {
    if (typeof e !== "number" && e !== "longjmp") throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiiifi(index, a1, a2, a3, a4, a5, a6, a7, a8) {
  try {
    Module["dynCall_viiiiiifi"](index, a1, a2, a3, a4, a5, a6, a7, a8);
  } catch (e) {
    if (typeof e !== "number" && e !== "longjmp") throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vf(index, a1) {
  try {
    Module["dynCall_vf"](index, a1);
  } catch (e) {
    if (typeof e !== "number" && e !== "longjmp") throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiii(index, a1, a2, a3, a4, a5) {
  try {
    Module["dynCall_viiiii"](index, a1, a2, a3, a4, a5);
  } catch (e) {
    if (typeof e !== "number" && e !== "longjmp") throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiiiiiiiifiii(
  index,
  a1,
  a2,
  a3,
  a4,
  a5,
  a6,
  a7,
  a8,
  a9,
  a10,
  a11,
  a12,
  a13
) {
  try {
    return Module["dynCall_iiiiiiiiiifiii"](
      index,
      a1,
      a2,
      a3,
      a4,
      a5,
      a6,
      a7,
      a8,
      a9,
      a10,
      a11,
      a12,
      a13
    );
  } catch (e) {
    if (typeof e !== "number" && e !== "longjmp") throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vii(index, a1, a2) {
  try {
    Module["dynCall_vii"](index, a1, a2);
  } catch (e) {
    if (typeof e !== "number" && e !== "longjmp") throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiiiii(index, a1, a2, a3, a4, a5, a6) {
  try {
    return Module["dynCall_iiiiiii"](index, a1, a2, a3, a4, a5, a6);
  } catch (e) {
    if (typeof e !== "number" && e !== "longjmp") throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_ii(index, a1) {
  try {
    return Module["dynCall_ii"](index, a1);
  } catch (e) {
    if (typeof e !== "number" && e !== "longjmp") throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vffffffffi(index, a1, a2, a3, a4, a5, a6, a7, a8, a9) {
  try {
    Module["dynCall_vffffffffi"](index, a1, a2, a3, a4, a5, a6, a7, a8, a9);
  } catch (e) {
    if (typeof e !== "number" && e !== "longjmp") throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiiiiiiii(
  index,
  a1,
  a2,
  a3,
  a4,
  a5,
  a6,
  a7,
  a8,
  a9,
  a10,
  a11
) {
  try {
    Module["dynCall_viiiiiiiiiii"](
      index,
      a1,
      a2,
      a3,
      a4,
      a5,
      a6,
      a7,
      a8,
      a9,
      a10,
      a11
    );
  } catch (e) {
    if (typeof e !== "number" && e !== "longjmp") throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viifi(index, a1, a2, a3, a4) {
  try {
    Module["dynCall_viifi"](index, a1, a2, a3, a4);
  } catch (e) {
    if (typeof e !== "number" && e !== "longjmp") throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vd(index, a1) {
  try {
    Module["dynCall_vd"](index, a1);
  } catch (e) {
    if (typeof e !== "number" && e !== "longjmp") throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiiiiiiiiiiii(
  index,
  a1,
  a2,
  a3,
  a4,
  a5,
  a6,
  a7,
  a8,
  a9,
  a10,
  a11,
  a12,
  a13
) {
  try {
    return Module["dynCall_iiiiiiiiiiiiii"](
      index,
      a1,
      a2,
      a3,
      a4,
      a5,
      a6,
      a7,
      a8,
      a9,
      a10,
      a11,
      a12,
      a13
    );
  } catch (e) {
    if (typeof e !== "number" && e !== "longjmp") throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiifi(index, a1, a2, a3, a4) {
  try {
    return Module["dynCall_iiifi"](index, a1, a2, a3, a4);
  } catch (e) {
    if (typeof e !== "number" && e !== "longjmp") throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_if(index, a1) {
  try {
    return Module["dynCall_if"](index, a1);
  } catch (e) {
    if (typeof e !== "number" && e !== "longjmp") throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiii(index, a1, a2, a3) {
  try {
    return Module["dynCall_iiii"](index, a1, a2, a3);
  } catch (e) {
    if (typeof e !== "number" && e !== "longjmp") throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viffff(index, a1, a2, a3, a4, a5) {
  try {
    Module["dynCall_viffff"](index, a1, a2, a3, a4, a5);
  } catch (e) {
    if (typeof e !== "number" && e !== "longjmp") throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiiiiiiiiii(
  index,
  a1,
  a2,
  a3,
  a4,
  a5,
  a6,
  a7,
  a8,
  a9,
  a10,
  a11
) {
  try {
    return Module["dynCall_iiiiiiiiiiii"](
      index,
      a1,
      a2,
      a3,
      a4,
      a5,
      a6,
      a7,
      a8,
      a9,
      a10,
      a11
    );
  } catch (e) {
    if (typeof e !== "number" && e !== "longjmp") throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viffi(index, a1, a2, a3, a4) {
  try {
    Module["dynCall_viffi"](index, a1, a2, a3, a4);
  } catch (e) {
    if (typeof e !== "number" && e !== "longjmp") throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vi(index, a1) {
  try {
    Module["dynCall_vi"](index, a1);
  } catch (e) {
    if (typeof e !== "number" && e !== "longjmp") throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vifi(index, a1, a2, a3) {
  try {
    Module["dynCall_vifi"](index, a1, a2, a3);
  } catch (e) {
    if (typeof e !== "number" && e !== "longjmp") throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vifff(index, a1, a2, a3, a4) {
  try {
    Module["dynCall_vifff"](index, a1, a2, a3, a4);
  } catch (e) {
    if (typeof e !== "number" && e !== "longjmp") throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_fii(index, a1, a2) {
  try {
    return Module["dynCall_fii"](index, a1, a2);
  } catch (e) {
    if (typeof e !== "number" && e !== "longjmp") throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vdd(index, a1, a2) {
  try {
    Module["dynCall_vdd"](index, a1, a2);
  } catch (e) {
    if (typeof e !== "number" && e !== "longjmp") throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiiiii(index, a1, a2, a3, a4, a5, a6, a7, a8) {
  try {
    Module["dynCall_viiiiiiii"](index, a1, a2, a3, a4, a5, a6, a7, a8);
  } catch (e) {
    if (typeof e !== "number" && e !== "longjmp") throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiiifi(index, a1, a2, a3, a4, a5, a6) {
  try {
    return Module["dynCall_iiiiifi"](index, a1, a2, a3, a4, a5, a6);
  } catch (e) {
    if (typeof e !== "number" && e !== "longjmp") throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viff(index, a1, a2, a3) {
  try {
    Module["dynCall_viff"](index, a1, a2, a3);
  } catch (e) {
    if (typeof e !== "number" && e !== "longjmp") throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiiiiiiiiiii(
  index,
  a1,
  a2,
  a3,
  a4,
  a5,
  a6,
  a7,
  a8,
  a9,
  a10,
  a11,
  a12
) {
  try {
    return Module["dynCall_iiiiiiiiiiiii"](
      index,
      a1,
      a2,
      a3,
      a4,
      a5,
      a6,
      a7,
      a8,
      a9,
      a10,
      a11,
      a12
    );
  } catch (e) {
    if (typeof e !== "number" && e !== "longjmp") throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiifi(index, a1, a2, a3, a4, a5) {
  try {
    return Module["dynCall_iiiifi"](index, a1, a2, a3, a4, a5);
  } catch (e) {
    if (typeof e !== "number" && e !== "longjmp") throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iif(index, a1, a2) {
  try {
    return Module["dynCall_iif"](index, a1, a2);
  } catch (e) {
    if (typeof e !== "number" && e !== "longjmp") throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiiii(index, a1, a2, a3, a4, a5, a6, a7) {
  try {
    Module["dynCall_viiiiiii"](index, a1, a2, a3, a4, a5, a6, a7);
  } catch (e) {
    if (typeof e !== "number" && e !== "longjmp") throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_fiiff(index, a1, a2, a3, a4) {
  try {
    return Module["dynCall_fiiff"](index, a1, a2, a3, a4);
  } catch (e) {
    if (typeof e !== "number" && e !== "longjmp") throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiiiiii(index, a1, a2, a3, a4, a5, a6, a7, a8, a9) {
  try {
    Module["dynCall_viiiiiiiii"](index, a1, a2, a3, a4, a5, a6, a7, a8, a9);
  } catch (e) {
    if (typeof e !== "number" && e !== "longjmp") throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiiiiiii(index, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10) {
  try {
    Module["dynCall_viiiiiiiiii"](
      index,
      a1,
      a2,
      a3,
      a4,
      a5,
      a6,
      a7,
      a8,
      a9,
      a10
    );
  } catch (e) {
    if (typeof e !== "number" && e !== "longjmp") throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iii(index, a1, a2) {
  try {
    return Module["dynCall_iii"](index, a1, a2);
  } catch (e) {
    if (typeof e !== "number" && e !== "longjmp") throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiii(index, a1, a2, a3, a4, a5, a6) {
  try {
    Module["dynCall_viiiiii"](index, a1, a2, a3, a4, a5, a6);
  } catch (e) {
    if (typeof e !== "number" && e !== "longjmp") throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vfi(index, a1, a2) {
  try {
    Module["dynCall_vfi"](index, a1, a2);
  } catch (e) {
    if (typeof e !== "number" && e !== "longjmp") throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_f(index) {
  try {
    return Module["dynCall_f"](index);
  } catch (e) {
    if (typeof e !== "number" && e !== "longjmp") throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_i(index) {
  try {
    return Module["dynCall_i"](index);
  } catch (e) {
    if (typeof e !== "number" && e !== "longjmp") throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vff(index, a1, a2) {
  try {
    Module["dynCall_vff"](index, a1, a2);
  } catch (e) {
    if (typeof e !== "number" && e !== "longjmp") throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vffff(index, a1, a2, a3, a4) {
  try {
    Module["dynCall_vffff"](index, a1, a2, a3, a4);
  } catch (e) {
    if (typeof e !== "number" && e !== "longjmp") throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiiii(index, a1, a2, a3, a4, a5) {
  try {
    return Module["dynCall_iiiiii"](index, a1, a2, a3, a4, a5);
  } catch (e) {
    if (typeof e !== "number" && e !== "longjmp") throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vdddddd(index, a1, a2, a3, a4, a5, a6) {
  try {
    Module["dynCall_vdddddd"](index, a1, a2, a3, a4, a5, a6);
  } catch (e) {
    if (typeof e !== "number" && e !== "longjmp") throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viii(index, a1, a2, a3) {
  try {
    Module["dynCall_viii"](index, a1, a2, a3);
  } catch (e) {
    if (typeof e !== "number" && e !== "longjmp") throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_v(index) {
  try {
    Module["dynCall_v"](index);
  } catch (e) {
    if (typeof e !== "number" && e !== "longjmp") throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiiiiiii(index, a1, a2, a3, a4, a5, a6, a7, a8) {
  try {
    return Module["dynCall_iiiiiiiii"](index, a1, a2, a3, a4, a5, a6, a7, a8);
  } catch (e) {
    if (typeof e !== "number" && e !== "longjmp") throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiii(index, a1, a2, a3, a4) {
  try {
    return Module["dynCall_iiiii"](index, a1, a2, a3, a4);
  } catch (e) {
    if (typeof e !== "number" && e !== "longjmp") throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viif(index, a1, a2, a3) {
  try {
    Module["dynCall_viif"](index, a1, a2, a3);
  } catch (e) {
    if (typeof e !== "number" && e !== "longjmp") throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiii(index, a1, a2, a3, a4) {
  try {
    Module["dynCall_viiii"](index, a1, a2, a3, a4);
  } catch (e) {
    if (typeof e !== "number" && e !== "longjmp") throw e;
    asm["setThrew"](1, 0);
  }
}

function asmPrintInt(x, y) {
  Module.print("int " + x + "," + y); // + ' ' + new Error().stack);
}
function asmPrintFloat(x, y) {
  Module.print("float " + x + "," + y); // + ' ' + new Error().stack);
}
// EMSCRIPTEN_START_ASM
var asm = (function (global, env, buffer) {
  "use asm";
  var a = new global.Int8Array(buffer);
  var b = new global.Int16Array(buffer);
  var c = new global.Int32Array(buffer);
  var d = new global.Uint8Array(buffer);
  var e = new global.Uint16Array(buffer);
  var f = new global.Uint32Array(buffer);
  var g = new global.Float32Array(buffer);
  var h = new global.Float64Array(buffer);
  var i = env.STACKTOP | 0;
  var j = env.STACK_MAX | 0;
  var k = env.tempDoublePtr | 0;
  var l = env.ABORT | 0;
  var m = env.cttz_i8 | 0;
  var n = env.ctlz_i8 | 0;
  var o = env.___rand_seed | 0;
  var p = env._stderr | 0;
  var q = env._stdout | 0;
  var r = env._in6addr_any | 0;
  var s = +env.NaN;
  var t = +env.Infinity;
  var u = 0;
  var v = 0;
  var w = 0;
  var x = 0;
  var y = 0,
    z = 0,
    A = 0,
    B = 0,
    C = 0.0,
    D = 0,
    E = 0,
    F = 0,
    G = 0.0;
  var H = 0;
  var I = 0;
  var J = 0;
  var K = 0;
  var L = 0;
  var M = 0;
  var N = 0;
  var O = 0;
  var P = 0;
  var Q = 0;
  var R = global.Math.floor;
  var S = global.Math.abs;
  var T = global.Math.sqrt;
  var U = global.Math.pow;
  var V = global.Math.cos;
  var W = global.Math.sin;
  var X = global.Math.tan;
  var Y = global.Math.acos;
  var Z = global.Math.asin;
  var _ = global.Math.atan;
  var $ = global.Math.atan2;
  var aa = global.Math.exp;
  var ba = global.Math.log;
  var ca = global.Math.ceil;
  var da = global.Math.imul;
  var ea = env.abort;
  var fa = env.assert;
  var ga = env.asmPrintInt;
  var ha = env.asmPrintFloat;
  var ia = env.min;
  var ja = env.jsCall;
  var ka = env.invoke_iiiiiiii;
  var la = env.invoke_iiiiiif;
  var ma = env.invoke_vif;
  var na = env.invoke_viiiiiifi;
  var oa = env.invoke_vf;
  var pa = env.invoke_viiiii;
  var qa = env.invoke_iiiiiiiiiifiii;
  var ra = env.invoke_vii;
  var sa = env.invoke_iiiiiii;
  var ta = env.invoke_ii;
  var ua = env.invoke_vffffffffi;
  var va = env.invoke_viiiiiiiiiii;
  var wa = env.invoke_viifi;
  var xa = env.invoke_vd;
  var ya = env.invoke_iiiiiiiiiiiiii;
  var za = env.invoke_iiifi;
  var Aa = env.invoke_if;
  var Ba = env.invoke_iiii;
  var Ca = env.invoke_viffff;
  var Da = env.invoke_iiiiiiiiiiii;
  var Ea = env.invoke_viffi;
  var Fa = env.invoke_vi;
  var Ga = env.invoke_vifi;
  var Ha = env.invoke_vifff;
  var Ia = env.invoke_fii;
  var Ja = env.invoke_vdd;
  var Ka = env.invoke_viiiiiiii;
  var La = env.invoke_iiiiifi;
  var Ma = env.invoke_viff;
  var Na = env.invoke_iiiiiiiiiiiii;
  var Oa = env.invoke_iiiifi;
  var Pa = env.invoke_iif;
  var Qa = env.invoke_viiiiiii;
  var Ra = env.invoke_fiiff;
  var Sa = env.invoke_viiiiiiiii;
  var Ta = env.invoke_viiiiiiiiii;
  var Ua = env.invoke_iii;
  var Va = env.invoke_viiiiii;
  var Wa = env.invoke_vfi;
  var Xa = env.invoke_f;
  var Ya = env.invoke_i;
  var Za = env.invoke_vff;
  var _a = env.invoke_vffff;
  var $a = env.invoke_iiiiii;
  var ab = env.invoke_vdddddd;
  var bb = env.invoke_viii;
  var cb = env.invoke_v;
  var db = env.invoke_iiiiiiiii;
  var eb = env.invoke_iiiii;
  var fb = env.invoke_viif;
  var gb = env.invoke_viiii;
  var hb = env._getaddrinfo;
  var ib = env._emscripten_glStencilMaskSeparate;
  var jb = env.__scanString;
  var kb = env._fclose;
  var lb = env._emscripten_glGetInfoLogARB;
  var mb = env._SDL_JoystickNumBalls;
  var nb = env._emscripten_glStencilFunc;
  var ob = env._SDL_ShowCursor;
  var pb = env._emscripten_glVertexPointer;
  var qb = env._emscripten_glUniform3iv;
  var rb = env._send;
  var sb = env._mktime;
  var tb = env._emscripten_glTexParameterf;
  var ub = env._dlerror;
  var vb = env._emscripten_glTexParameteri;
  var wb = env._glCompileShader;
  var xb = env._isspace;
  var yb = env._localtime;
  var zb = env._emscripten_glFrustum;
  var Ab = env._Sys_LowPhysicalMemory;
  var Bb = env._emscripten_glGetTexParameterfv;
  var Cb = env._emscripten_glBindRenderbuffer;
  var Db = env._emscripten_glCopyTexImage2D;
  var Eb = env._emscripten_glTexParameterfv;
  var Fb = env._recvfrom;
  var Gb = env._emscripten_glGetObjectParameterivARB;
  var Hb = env._glCreateShader;
  var Ib = env._round;
  var Jb = env._emscripten_glBindAttribLocation;
  var Kb = env._snprintf;
  var Lb = env._glHint;
  var Mb = env._SDL_AudioDriverName;
  var Nb = env._emscripten_glGetVertexAttribPointerv;
  var Ob = env._emscripten_glVertexAttrib3f;
  var Pb = env._alSource3f;
  var Qb = env._clock;
  var Rb = env._emscripten_glCopyTexSubImage2D;
  var Sb = env._glDeleteProgram;
  var Tb = env._glLoadIdentity;
  var Ub = env._alSourcePlay;
  var Vb = env._glColor3f;
  var Wb = env._glVertex3f;
  var Xb = env._SDL_VideoDriverName;
  var Yb = env._copysign;
  var Zb = env._localtime_r;
  var _b = env._emscripten_glDeleteShader;
  var $b = env._glGetString;
  var ac = env._emscripten_glDeleteBuffers;
  var bc = env._emscripten_glTexParameteriv;
  var cc = env._emscripten_glUniformMatrix2fv;
  var dc = env._dlopen;
  var ec = env._emscripten_glGetShaderPrecisionFormat;
  var fc = env._emscripten_glUniformMatrix4fv;
  var gc = env._emscripten_glEnableClientState;
  var hc = env._emscripten_glShaderSource;
  var ic = env._Sys_SetEnv;
  var jc = env._emscripten_glShaderBinary;
  var kc = env._emscripten_glStencilMask;
  var lc = env._emscripten_glIsProgram;
  var mc = env._glBegin;
  var nc = env._alSourceStop;
  var oc = env._select;
  var pc = env._llvm_pow_f32;
  var qc = env._sysconf;
  var rc = env._emscripten_glReleaseShaderCompiler;
  var sc = env._glClear;
  var tc = env._SDL_JoystickGetBall;
  var uc = env._Sys_PlatformInit;
  var vc = env._Sys_DefaultHomePath;
  var wc = env._SDL_GetAppState;
  var xc = env._glIsEnabled;
  var yc = env._alSourceUnqueueBuffers;
  var zc = env._SDL_GetError;
  var Ac = env._alGetSourcef;
  var Bc = env._alGetSourcei;
  var Cc = env._SDL_GetVideoSurface;
  var Dc = env._SDL_WM_SetCaption;
  var Ec = env._VM_ResumeCompiled;
  var Fc = env.___errno_location;
  var Gc = env._strerror;
  var Hc = env._emscripten_glGetTexParameteriv;
  var Ic = env.__parseInt;
  var Jc = env._Sys_RandomBytes;
  var Kc = env._SDL_EnableUNICODE;
  var Lc = env._emscripten_glUniform4f;
  var Mc = env._glDisableVertexAttribArray;
  var Nc = env._emscripten_glHint;
  var Oc = env._dlsym;
  var Pc = env._emscripten_glMatrixMode;
  var Qc = env._abort;
  var Rc = env._fprintf;
  var Sc = env._tan;
  var Tc = env._alGenBuffers;
  var Uc = env._emscripten_glPolygonOffset;
  var Vc = env._emscripten_glIsBuffer;
  var Wc = env._strncat;
  var Xc = env._glEnable;
  var Yc = env._alBufferData;
  var Zc = env._emscripten_glTexSubImage2D;
  var _c = env._write;
  var $c = env._alDopplerVelocity;
  var ad = env._emscripten_glUniform2f;
  var bd = env._sin;
  var cd = env._Sys_GetCurrentUser;
  var dd = env._emscripten_glDeleteRenderbuffers;
  var ed = env._emscripten_set_main_loop;
  var fd = env._emscripten_glDepthRangef;
  var gd = env._emscripten_glDepthRange;
  var hd = env._gethostbyname;
  var id = env._ioctl;
  var jd = env._glPolygonOffset;
  var kd = env._unlink;
  var ld = env.__exit;
  var md = env._glDepthRange;
  var nd = env._pwrite;
  var od = env._VM_CallCompiled;
  var pd = env._glDrawBuffer;
  var qd = env._emscripten_glUniform4i;
  var rd = env._atan2;
  var sd = env._emscripten_glBindProgramARB;
  var td = env._emscripten_glBindTexture;
  var ud = env._emscripten_glVertexAttrib3fv;
  var vd = env._emscripten_glIsFramebuffer;
  var wd = env._SDL_JoystickNumHats;
  var xd = env._SDL_JoystickOpen;
  var yd = env._emscripten_glRotatef;
  var zd = env._emscripten_glGetFramebufferAttachmentParameteriv;
  var Ad = env._fwrite;
  var Bd = env._emscripten_glGetShaderInfoLog;
  var Cd = env._SDL_WarpMouse;
  var Dd = env._emscripten_glGetRenderbufferParameteriv;
  var Ed = env._emscripten_glStencilOpSeparate;
  var Fd = env._emscripten_glCompressedTexSubImage2D;
  var Gd = env._SDL_UnlockAudio;
  var Hd = env._SDL_HasAltiVec;
  var Id = env._alcGetString;
  var Jd = env.__inet_ntop6_raw;
  var Kd = env._SDL_SetGamma;
  var Ld = env._emscripten_glIsEnabled;
  var Md = env._alSourceQueueBuffers;
  var Nd = env._glClearStencil;
  var Od = env._alcIsExtensionPresent;
  var Pd = env._glGenTextures;
  var Qd = env._emscripten_glVertexAttrib4f;
  var Rd = env._emscripten_glUniform2i;
  var Sd = env._SDL_SetGammaRamp;
  var Td = env._fmod;
  var Ud = env._sendto;
  var Vd = env._emscripten_glClear;
  var Wd = env._memchr;
  var Xd = env._llvm_va_end;
  var Yd = env._emscripten_glBindBuffer;
  var Zd = env._emscripten_glDrawArraysInstanced;
  var _d = env._glVertexAttribPointer;
  var $d = env._connect;
  var ae = env._SDL_GetKeyboardState;
  var be = env._emscripten_glGetUniformiv;
  var ce = env._emscripten_glFrontFace;
  var de = env._emscripten_glActiveTexture;
  var ee = env._emscripten_exit_with_live_runtime;
  var fe = env._sprintf;
  var ge = env._strrchr;
  var he = env._glTexEnvf;
  var ie = env._emscripten_glRenderbufferStorage;
  var je = env._ferror;
  var ke = env._llvm_uadd_with_overflow_i32;
  var le = env._glCopyTexImage2D;
  var me = env._asctime_r;
  var ne = env._recv;
  var oe = env._emscripten_glGetShaderiv;
  var pe = env._emscripten_glUniformMatrix3fv;
  var qe = env._putchar;
  var re = env._emscripten_glGenFramebuffers;
  var se = env._emscripten_glBlendEquationSeparate;
  var te = env._emscripten_glDrawRangeElements;
  var ue = env._emscripten_glGenTextures;
  var ve = env._Sys_GetClipboardData;
  var we = env._floorf;
  var xe = env._emscripten_glGetActiveUniform;
  var ye = env._rint;
  var ze = env._alcCreateContext;
  var Ae = env._alcCloseDevice;
  var Be = env._SDL_SetVideoMode;
  var Ce = env._open;
  var De = env._emscripten_glDrawArrays;
  var Ee = env._emscripten_glClearDepth;
  var Fe = env._isalnum;
  var Ge = env._SDL_GetVideoInfo;
  var He = env._exp2;
  var Ie = env._qsort;
  var Je = env._emscripten_glGetUniformLocation;
  var Ke = env._emscripten_glVertexAttrib4fv;
  var Le = env._emscripten_glScissor;
  var Me = env._SDL_WM_IconifyWindow;
  var Ne = env._emscripten_glEnable;
  var Oe = env._glPolygonMode;
  var Pe = env._emscripten_glBufferData;
  var Qe = env._emscripten_glDeleteFramebuffers;
  var Re = env._emscripten_glGetShaderSource;
  var Se = env._strerror_r;
  var Te = env._SDL_Quit;
  var Ue = env._llvm_bswap_i32;
  var Ve = env._bind;
  var We = env._SDL_OpenAudio;
  var Xe = env._vsnprintf;
  var Ye = env._emscripten_glGetFloatv;
  var Ze = env._alDopplerFactor;
  var _e = env._emscripten_glUniform3fv;
  var $e = env._emscripten_glDrawElementsInstanced;
  var af = env._emscripten_glDrawElements;
  var bf = env._SDL_GetKeyName;
  var cf = env._glColor4f;
  var df = env._emscripten_glCreateProgram;
  var ef = env._emscripten_glCompressedTexImage2D;
  var ff = env.___buildEnvironment;
  var gf = env._Sys_ListFiles;
  var hf = env._fseek;
  var jf = env._glFinish;
  var kf = env._emscripten_glBlendFuncSeparate;
  var lf = env._emscripten_glLoadMatrixf;
  var mf = env._emscripten_glGetProgramInfoLog;
  var nf = env._glCullFace;
  var of = env._SDL_ListModes;
  var pf = env._glViewport;
  var qf = env._SDL_Linked_Version;
  var rf = env._VM_IsSuspendedCompiled;
  var sf = env._if_nametoindex;
  var tf = env._strpbrk;
  var uf = env._emscripten_glFlush;
  var vf = env._emscripten_glCreateShader;
  var wf = env._Sys_Milliseconds;
  var xf = env._glClearDepth;
  var yf = env.__inet_ntop4_raw;
  var zf = env._emscripten_glIsShader;
  var Af = env._glTexParameterf;
  var Bf = env._glTexParameteri;
  var Cf = env._emscripten_glColorMask;
  var Df = env._exp;
  var Ef = env._Sys_FS_Startup;
  var Ff = env._SDL_JoystickUpdate;
  var Gf = env._Sys_Mkfifo;
  var Hf = env._vfprintf;
  var If = env._SDL_JoystickGetAxis;
  var Jf = env._emscripten_glIsRenderbuffer;
  var Kf = env._SDL_JoystickGetButton;
  var Lf = env._glLinkProgram;
  var Mf = env._glBindTexture;
  var Nf = env._strtol;
  var Of = env._fputc;
  var Pf = env._SDL_GL_GetProcAddress;
  var Qf = env._glDetachShader;
  var Rf = env._emscripten_glBlendEquation;
  var Sf = env._fputs;
  var Tf = env._emscripten_glIsTexture;
  var Uf = env._glDeleteTextures;
  var Vf = env._SDL_NumJoysticks;
  var Wf = env._ceil;
  var Xf = env._Sys_ErrorDialog;
  var Yf = env._emscripten_glViewport;
  var Zf = env._SDL_PumpEvents;
  var _f = env._dlclose;
  var $f = env._llvm_pow_f64;
  var ag = env._fileno;
  var bg = env._SDL_PauseAudio;
  var cg = env._remove;
  var dg = env._emscripten_glLinkProgram;
  var eg = env._emscripten_glUniform3f;
  var fg = env._emscripten_glBlendFunc;
  var gg = env._emscripten_glUniform3i;
  var hg = env._emscripten_glStencilOp;
  var ig = env._alcDestroyContext;
  var jg = env._glTexSubImage2D;
  var kg = env._glDisable;
  var lg = env._VM_Compile;
  var mg = env._emscripten_glEnableVertexAttribArray;
  var ng = env._alDeleteBuffers;
  var og = env._SDL_JoystickClose;
  var pg = env._SDL_CloseAudio;
  var qg = env._close;
  var rg = env._SDL_HasRDTSC;
  var sg = env._strchr;
  var tg = env._emscripten_glColorPointer;
  var ug = env._VM_SuspendCompiled;
  var vg = env.___setErrNo;
  var wg = env._emscripten_glNormalPointer;
  var xg = env._Sys_Cwd;
  var yg = env._glAttachShader;
  var zg = env._emscripten_glGetVertexAttribfv;
  var Ag = env._glDrawElements;
  var Bg = env._emscripten_memcpy_big;
  var Cg = env._setsockopt;
  var Dg = env._cos;
  var Eg = env._SDL_JoystickGetHat;
  var Fg = env._Sys_FS_Shutdown;
  var Gg = env._emscripten_glGetVertexAttribiv;
  var Hg = env._glReadBuffer;
  var Ig = env._mkport;
  var Jg = env._emscripten_glGetPointerv;
  var Kg = env._alSourcefv;
  var Lg = env._emscripten_glStencilFuncSeparate;
  var Mg = env._tzset;
  var Ng = env._fabsf;
  var Og = env.__inet_pton4_raw;
  var Pg = env._glUseProgram;
  var Qg = env._emscripten_glDisableVertexAttribArray;
  var Rg = env._toupper;
  var Sg = env._emscripten_glGetProgramiv;
  var Tg = env._glVertex3fv;
  var Ug = env._emscripten_glGenRenderbuffers;
  var Vg = env._emscripten_glDepthFunc;
  var Wg = env._SDL_GL_SetAttribute;
  var Xg = env._gethostname;
  var Yg = env._emscripten_glClearColor;
  var Zg = env._emscripten_glUniform4iv;
  var _g = env._emscripten_glLoadIdentity;
  var $g = env._emscripten_glVertexAttribDivisor;
  var ah = env._alDistanceModel;
  var bh = env._Sys_PlatformExit;
  var ch = env._glEnableVertexAttribArray;
  var dh = env._glReadPixels;
  var eh = env._SDL_HasSSE;
  var fh = env._alListenerfv;
  var gh = env._gai_strerror;
  var hh = env.__formatString;
  var ih = env._SDL_GL_SwapBuffers;
  var jh = env._emscripten_glClearStencil;
  var kh = env._emscripten_glDetachShader;
  var lh = env._emscripten_glDeleteVertexArrays;
  var mh = env._alGenSources;
  var nh = env._glStencilFunc;
  var oh = env._emscripten_glGenerateMipmap;
  var ph = env._emscripten_glCullFace;
  var qh = env._rename;
  var rh = env._SDL_QuitSubSystem;
  var sh = env._emscripten_glUseProgram;
  var th = env._srand;
  var uh = env._emscripten_glUniform2fv;
  var vh = env._alDeleteSources;
  var wh = env._emscripten_glFramebufferRenderbuffer;
  var xh = env.__write_sockaddr;
  var yh = env._emscripten_glUniform2iv;
  var zh = env._emscripten_glVertexAttrib1fv;
  var Ah = env._fabs;
  var Bh = env._sqrt;
  var Ch = env._Sys_GLimpSafeInit;
  var Dh = env._glBlendFunc;
  var Eh = env._ceilf;
  var Fh = env._emscripten_glGetBufferParameteriv;
  var Gh = env._longjmp;
  var Hh = env._emscripten_glDepthMask;
  var Ih = env._VM_Destroy;
  var Jh = env._emscripten_glUniform1fv;
  var Kh = env._Sys_GLimpInit;
  var Lh = env._glEnd;
  var Mh = env._glScissor;
  var Nh = env._glGetBooleanv;
  var Oh = env._emscripten_glCheckFramebufferStatus;
  var Ph = env._emscripten_glDeleteProgram;
  var Qh = env._emscripten_glDisable;
  var Rh = env._llvm_lifetime_end;
  var Sh = env._lseek;
  var Th = env._glClearColor;
  var Uh = env._emscripten_glGetActiveAttrib;
  var Vh = env._emscripten_glLineWidth;
  var Wh = env._emscripten_glGetString;
  var Xh = env._emscripten_glGetAttribLocation;
  var Yh = env._fflush;
  var Zh = env._emscripten_glGetIntegerv;
  var _h = env._SDL_Has3DNow;
  var $h = env._emscripten_glClientActiveTexture;
  var ai = env.__inet_pton6_raw;
  var bi = env._emscripten_glReadPixels;
  var ci = env._emscripten_glGetError;
  var di = env._emscripten_glFramebufferTexture2D;
  var ei = env._SDL_WasInit;
  var fi = env._read;
  var gi = env._alSourcei;
  var hi = env._alSourcef;
  var ii = env._strstr;
  var ji = env._ctime;
  var ki = env._fsync;
  var li = env._emscripten_glVertex3f;
  var mi = env._signal;
  var ni = env._glDepthFunc;
  var oi = env._SDL_LockAudio;
  var pi = env._emscripten_glClearDepthf;
  var qi = env._sscanf;
  var ri = env._SDL_JoystickName;
  var si = env._alGetError;
  var ti = env._SDL_EnableKeyRepeat;
  var ui = env._Sys_Mkdir;
  var vi = env._Sys_Dialog;
  var wi = env._emscripten_glGetUniformfv;
  var xi = env._glColorMask;
  var yi = env.__getFloat;
  var zi = env._alcMakeContextCurrent;
  var Ai = env._freeaddrinfo;
  var Bi = env._pread;
  var Ci = env._SDL_JoystickNumAxes;
  var Di = env._emscripten_glFinish;
  var Ei = env._emscripten_glUniform1iv;
  var Fi = env._emscripten_glTexCoordPointer;
  var Gi = env._Sys_PID;
  var Hi = env._SDL_PeepEvents;
  var Ii = env._ftell;
  var Ji = env._exit;
  var Ki = env._asctime;
  var Li = env._emscripten_glVertexAttrib1f;
  var Mi = env._alcOpenDevice;
  var Ni = env._glBindAttribLocation;
  var Oi = env._SDL_WM_GrabInput;
  var Pi = env._getnameinfo;
  var Qi = env._emscripten_glBlendColor;
  var Ri = env._emscripten_glVertexAttrib2f;
  var Si = env._emscripten_glUniform4fv;
  var Ti = env._socket;
  var Ui = env._SDL_HasSSE2;
  var Vi = env._SDL_Init;
  var Wi = env._acos;
  var Xi = env._Sys_FreeFileList;
  var Yi = env._emscripten_glUniform1i;
  var Zi = env._emscripten_glVertexAttrib2fv;
  var _i = env._emscripten_glDeleteObjectARB;
  var $i = env._SDL_JoystickNumButtons;
  var aj = env._emscripten_glUniform1f;
  var bj = env._emscripten_glVertexAttribPointer;
  var cj = env._glShaderSource;
  var dj = env._fopen;
  var ej = env._sqrtf;
  var fj = env._emscripten_glGenBuffers;
  var gj = env._log;
  var hj = env._SDL_PollEvent;
  var ij = env._glActiveTexture;
  var jj = env._rmdir;
  var kj = env._glBindBuffer;
  var lj = env._emscripten_glAttachShader;
  var mj = env._getenv;
  var nj = env._glGetError;
  var oj = env._atoi;
  var pj = env._alGetString;
  var qj = env._glStencilOp;
  var rj = env._glGetFloatv;
  var sj = env._emscripten_glBindFramebuffer;
  var tj = env._Sys_PIDIsRunning;
  var uj = env._emscripten_glBufferSubData;
  var vj = env._SDL_HasMMX;
  var wj = env._sbrk;
  var xj = env._glGetIntegerv;
  var yj = env._llvm_lifetime_start;
  var zj = env._emscripten_glColor4f;
  var Aj = env._htonl;
  var Bj = env._glTexImage2D;
  var Cj = env._glStencilMask;
  var Dj = env._fread;
  var Ej = env._SDL_WM_ToggleFullScreen;
  var Fj = env._emscripten_glGetAttachedShaders;
  var Gj = env.__read_sockaddr;
  var Hj = env._htons;
  var Ij = env.__reallyNegative;
  var Jj = env._glTexParameterfv;
  var Kj = env._emscripten_glBindVertexArray;
  var Lj = env._floor;
  var Mj = env._emscripten_glSampleCoverage;
  var Nj = env._emscripten_glTexImage2D;
  var Oj = env._emscripten_glGenVertexArrays;
  var Pj = env._Sys_Dirname;
  var Qj = env._SDL_JoystickEventState;
  var Rj = env._glDepthMask;
  var Sj = env._emscripten_glValidateProgram;
  var Tj = env._emscripten_glPixelStorei;
  var Uj = env._emscripten_glDeleteTextures;
  var Vj = env._setvbuf;
  var Wj = env._llvm_bswap_i16;
  var Xj = env._time;
  var Yj = env._emscripten_glGetBooleanv;
  var Zj = env._Sys_FOpen;
  var _j = env._emscripten_glCompileShader;
  var $j = 0.0;
  // EMSCRIPTEN_START_FUNCS
  function ao(a, b) {
    a = a | 0;
    b = b | 0;
    var d = 0,
      e = 0,
      f = 0,
      g = 0,
      h = 0;
    d = i;
    c[(20453240 + ((a * 12) | 0)) >> 2] = 1;
    e = (20453244 + ((a * 12) | 0)) | 0;
    f = c[e >> 2] | 0;
    c[e >> 2] = f + 1;
    do {
      if ((f | 0) == 0) {
        if (((a | 0) == 335) | ((a | 0) == 175) | ((a | 0) == 129)) {
          break;
        }
        c[7094374] = (c[7094374] | 0) + 1;
        g = 4;
      } else {
        g = 4;
      }
    } while (0);
    do {
      if ((g | 0) == 4) {
        if (((c[5113718] | 0) != 0) & ((a | 0) == 13)) {
          nt(143648, +(((bt(143648) | 0) == 0) | 0));
          i = d;
          return;
        }
        if ((a | 0) != 340) {
          if (!(((c[5113724] | 0) != 0) & ((a | 0) == 27))) {
            break;
          }
        }
        Ol();
        c[7094374] = 0;
        f = 0;
        do {
          if (!(((f | 0) == 335) | ((f | 0) == 175) | ((f | 0) == 129))) {
            e = (20453240 + ((f * 12) | 0)) | 0;
            if ((c[e >> 2] | 0) != 0) {
              co(f, 0);
            }
            c[e >> 2] = 0;
            c[(20453244 + ((f * 12) | 0)) >> 2] = 0;
          }
          f = (f + 1) | 0;
        } while ((f | 0) < 341);
        i = d;
        return;
      }
    } while (0);
    do {
      if (((a | 0) < 128) | ((a | 0) == 178)) {
        if (
          !(
            (((c[5759928] | 0) != 0) | ((c[5720394] | 0) == 9)) &
            ((c[5114336] | 0) == 0)
          )
        ) {
          g = 18;
          break;
        }
        if (!(+at(143448) == 0.0)) {
          g = 18;
          break;
        }
        kt(143176, 28378656);
      } else {
        g = 18;
      }
    } while (0);
    do {
      if ((g | 0) == 18) {
        if ((a | 0) == 27) {
          break;
        }
        $n(a, 1, b);
        f = c[5114336] | 0;
        if (((f & 1) | 0) != 0) {
          Fn(a);
          i = d;
          return;
        }
        if (((f & 2) | 0) != 0) {
          e = c[236124] | 0;
          if ((e | 0) == 0) {
            i = d;
            return;
          }
          oD(
            e,
            3,
            ((h = i),
            (i = (i + 16) | 0),
            (c[h >> 2] = a),
            (c[(h + 8) >> 2] = 1),
            h) | 0
          ) | 0;
          i = h;
          i = d;
          return;
        }
        if (((f & 8) | 0) != 0) {
          e = c[6924864] | 0;
          if ((e | 0) == 0) {
            i = d;
            return;
          }
          oD(
            e,
            6,
            ((h = i),
            (i = (i + 16) | 0),
            (c[h >> 2] = a),
            (c[(h + 8) >> 2] = 1),
            h) | 0
          ) | 0;
          i = h;
          i = d;
          return;
        }
        if (((f & 4) | 0) != 0) {
          Hn(a);
          i = d;
          return;
        }
        if ((c[5720394] | 0) != 1) {
          i = d;
          return;
        }
        Fn(a);
        i = d;
        return;
      }
    } while (0);
    a = c[5114336] | 0;
    if (((a & 4) | 0) != 0) {
      Hn(27);
      i = d;
      return;
    }
    if (((a & 8) | 0) != 0) {
      b = a & -9;
      if ((a | 0) != (b | 0)) {
        c[7094374] = 0;
        g = 0;
        do {
          if (!(((g | 0) == 335) | ((g | 0) == 175) | ((g | 0) == 129))) {
            f = (20453240 + ((g * 12) | 0)) | 0;
            if ((c[f >> 2] | 0) != 0) {
              co(g, 0);
            }
            c[f >> 2] = 0;
            c[(20453244 + ((g * 12) | 0)) >> 2] = 0;
          }
          g = (g + 1) | 0;
        } while ((g | 0) < 341);
      }
      c[5114336] = b;
      oD(
        c[6924864] | 0,
        8,
        ((h = i), (i = (i + 8) | 0), (c[h >> 2] = 0), h) | 0
      ) | 0;
      i = h;
      i = d;
      return;
    }
    if (((a & 2) | 0) != 0) {
      oD(
        c[236124] | 0,
        3,
        ((h = i),
        (i = (i + 16) | 0),
        (c[h >> 2] = 27),
        (c[(h + 8) >> 2] = 1),
        h) | 0
      ) | 0;
      i = h;
      i = d;
      return;
    }
    a = c[5720394] | 0;
    if (!(((a | 0) != 8) | ((c[5759928] | 0) != 0))) {
      oD(
        c[236124] | 0,
        7,
        ((h = i), (i = (i + 8) | 0), (c[h >> 2] = 2), h) | 0
      ) | 0;
      i = h;
      i = d;
      return;
    }
    if ((a | 0) == 1) {
      i = d;
      return;
    }
    Ao();
    Ax();
    oD(c[236124] | 0, 7, ((h = i), (i = (i + 8) | 0), (c[h >> 2] = 1), h) | 0) |
      0;
    i = h;
    i = d;
    return;
  }
  function bo() {
    var a = 0,
      b = 0;
    c[7094374] = 0;
    a = 0;
    do {
      if (!(((a | 0) == 335) | ((a | 0) == 175) | ((a | 0) == 129))) {
        b = (20453240 + ((a * 12) | 0)) | 0;
        if ((c[b >> 2] | 0) != 0) {
          co(a, 0);
        }
        c[b >> 2] = 0;
        c[(20453244 + ((a * 12) | 0)) >> 2] = 0;
      }
      a = (a + 1) | 0;
    } while ((a | 0) < 341);
    return;
  }
  function co(a, b) {
    a = a | 0;
    b = b | 0;
    var d = 0,
      e = 0,
      f = 0,
      g = 0;
    d = i;
    c[(20453244 + ((a * 12) | 0)) >> 2] = 0;
    c[(20453240 + ((a * 12) | 0)) >> 2] = 0;
    if (((a | 0) == 335) | ((a | 0) == 175) | ((a | 0) == 129)) {
      e = c[7094374] | 0;
    } else {
      f = ((c[7094374] | 0) - 1) | 0;
      c[7094374] = f;
      e = f;
    }
    if ((e | 0) < 0) {
      c[7094374] = 0;
    }
    if ((a | 0) == 340) {
      i = d;
      return;
    }
    if (((a | 0) == 27) & ((c[5113724] | 0) != 0)) {
      i = d;
      return;
    }
    $n(a, 0, b);
    b = c[5114336] | 0;
    e = c[236124] | 0;
    if ((((b & 2) | 0) != 0) & ((e | 0) != 0)) {
      oD(
        e,
        3,
        ((g = i),
        (i = (i + 16) | 0),
        (c[g >> 2] = a),
        (c[(g + 8) >> 2] = 0),
        g) | 0
      ) | 0;
      i = g;
      i = d;
      return;
    }
    e = c[6924864] | 0;
    if (!((((b & 8) | 0) != 0) & ((e | 0) != 0))) {
      i = d;
      return;
    }
    oD(
      e,
      6,
      ((g = i), (i = (i + 16) | 0), (c[g >> 2] = a), (c[(g + 8) >> 2] = 0), g) |
        0
    ) | 0;
    i = g;
    i = d;
    return;
  }
  function eo(a, b, c) {
    a = a | 0;
    b = b | 0;
    c = c | 0;
    if ((b | 0) == 0) {
      co(a, c);
      return;
    } else {
      ao(a, c);
      return;
    }
  }
  function fo(a) {
    a = a | 0;
    var b = 0,
      d = 0,
      e = 0;
    b = i;
    if ((a | 0) == 127) {
      i = b;
      return;
    }
    d = c[5114336] | 0;
    if (((d & 1) | 0) != 0) {
      Dn(20492144, a);
      i = b;
      return;
    }
    if (((d & 2) | 0) != 0) {
      oD(
        c[236124] | 0,
        3,
        ((e = i),
        (i = (i + 16) | 0),
        (c[e >> 2] = a | 1024),
        (c[(e + 8) >> 2] = 1),
        e) | 0
      ) | 0;
      i = e;
      i = b;
      return;
    }
    if (((d & 4) | 0) != 0) {
      Dn(27699184, a);
      i = b;
      return;
    }
    if ((c[5720394] | 0) != 1) {
      i = b;
      return;
    }
    Dn(20492144, a);
    i = b;
    return;
  }
  function go() {
    var b = 0,
      d = 0,
      e = 0,
      f = 0,
      g = 0,
      h = 0,
      j = 0,
      k = 0,
      l = 0,
      m = 0,
      n = 0,
      o = 0,
      p = 0,
      q = 0;
    b = i;
    i = (i + 16) | 0;
    d = b | 0;
    e = (b + 8) | 0;
    f = cu(142848, e, 0) | 0;
    c[5425942] = f;
    g = c[e >> 2] | 0;
    if ((g | 0) == 0) {
      Sr(142504, ((h = i), (i = (i + 8) | 0), (c[h >> 2] = 142848), h) | 0);
      i = h;
      i = b;
      return;
    }
    do {
      if ((f | 0) < 1025) {
        j = fu(21703776, f, g) | 0;
        if ((j | 0) != (c[5425942] | 0)) {
          k = 15;
          break;
        }
        c[d >> 2] = 21703776;
        j = 31;
        l = 0;
        while (1) {
          m = bC(d) | 0;
          if ((a[m] | 0) == 0) {
            n = j;
            o = l;
            break;
          }
          c[(20462608 + ((j * 268) | 0)) >> 2] = oj(m | 0) | 0;
          m = bC(d) | 0;
          if ((a[m] | 0) == 0) {
            n = j;
            o = l;
            break;
          }
          c[(20462612 + ((j * 268) | 0)) >> 2] = oj(m | 0) | 0;
          m = bC(d) | 0;
          if ((a[m] | 0) == 0) {
            n = j;
            o = l;
            break;
          }
          p = oj(m | 0) | 0;
          m = c[d >> 2] | 0;
          q = (m + 1) | 0;
          c[d >> 2] = q;
          if (p >>> 0 > (((o$(21703776) | 0) + 21703776 - q) | 0) >>> 0) {
            k = 10;
            break;
          }
          m$((20462620 + ((j * 268) | 0)) | 0, q | 0, p) | 0;
          a[(20462620 + ((j * 268) | 0) + p) | 0] = 0;
          c[d >> 2] = m + (p + 1);
          p = (l + 1) | 0;
          m = (j - 1) | 0;
          if ((j | 0) > 0) {
            j = m;
            l = p;
          } else {
            n = m;
            o = p;
            break;
          }
        }
        if ((k | 0) == 10) {
          Tr(
            142336,
            ((h = i),
            (i = (i + 1) | 0),
            (i = (i + 7) & -8),
            (c[h >> 2] = 0),
            h) | 0
          );
          i = h;
          n = j;
          o = l;
        }
        s$(
          20462608,
          (20462608 + ((((n + 1) | 0) * 268) | 0)) | 0,
          (o * 268) | 0 | 0
        ) | 0;
        if ((o | 0) < 32) {
          p = o;
          do {
            Ns((20462608 + ((p * 268) | 0)) | 0);
            p = (p + 1) | 0;
          } while ((p | 0) < 32);
        }
        c[4939840] = o;
        c[5115650] = o;
      } else {
        k = 15;
      }
    } while (0);
    if ((k | 0) == 15) {
      Sr(142504, ((h = i), (i = (i + 8) | 0), (c[h >> 2] = 142848), h) | 0);
      i = h;
    }
    Yt(c[e >> 2] | 0);
    i = b;
    return;
  }
  function ho() {
    c[5497074] = 1;
    return;
  }
  function io(a, b) {
    a = a | 0;
    b = b | 0;
    var d = 0,
      e = 0,
      f = 0,
      g = 0;
    d = i;
    e = c[5721690] | 0;
    f = (e - (c[5721691] | 0)) | 0;
    g = (b | 0) != 0;
    do {
      if (!(g & ((f | 0) > 64))) {
        if (((f | 0) > 63) & (g ^ 1)) {
          break;
        }
        b = (e + 1) | 0;
        c[5721690] = b;
        TB((22886768 + ((b & 63) << 10)) | 0, a, 1024);
        i = d;
        return;
      }
    } while (0);
    if ((c[5458544] | 0) == 0) {
      Ur(
        1,
        141040,
        ((a = i), (i = (i + 1) | 0), (i = (i + 7) & -8), (c[a >> 2] = 0), a) | 0
      );
      i = a;
    } else {
      i = d;
      return;
    }
  }
  function jo() {
    var a = 0,
      b = 0,
      d = 0,
      e = 0;
    a = i;
    i = (i + 8) | 0;
    b = a | 0;
    if ((c[5759927] | 0) == 0) {
      Sr(
        175248,
        ((d = i), (i = (i + 1) | 0), (i = (i + 7) & -8), (c[d >> 2] = 0), d) | 0
      );
      i = d;
      i = a;
      return;
    } else {
      c[b >> 2] = -1;
      e = b;
      gu(e, 4, c[5759931] | 0) | 0;
      gu(e, 4, c[5759931] | 0) | 0;
      Yt(c[5759931] | 0);
      c[5759931] = 0;
      c[5759927] = 0;
      c[5759926] = 0;
      Sr(
        148264,
        ((d = i), (i = (i + 1) | 0), (i = (i + 7) & -8), (c[d >> 2] = 0), d) | 0
      );
      i = d;
      i = a;
      return;
    }
  }
  function ko() {
    var a = 0,
      b = 0,
      d = 0,
      e = 0,
      f = 0,
      g = 0,
      h = 0,
      j = 0,
      k = 0,
      l = 0,
      m = 0,
      n = 0,
      o = 0,
      p = 0,
      q = 0,
      r = 0,
      s = 0,
      t = 0,
      u = 0;
    a = i;
    i = (i + 20728) | 0;
    b = (a + 20480) | 0;
    d = (a + 20512) | 0;
    e = (a + 20520) | 0;
    f = a | 0;
    g = (a + 4096) | 0;
    h = e;
    if ((nr() | 0) > 2) {
      Sr(
        119568,
        ((j = i), (i = (i + 1) | 0), (i = (i + 7) & -8), (c[j >> 2] = 0), j) | 0
      );
      i = j;
      k = 208;
      l = 0;
      m = 16384;
      n = 0;
      o = 4096;
      p = 0;
      i = a;
      return;
    }
    if ((c[5759927] | 0) != 0) {
      if ((c[5759926] | 0) != 0) {
        k = 208;
        l = 0;
        m = 16384;
        n = 0;
        o = 4096;
        p = 0;
        i = a;
        return;
      }
      Sr(
        108776,
        ((j = i), (i = (i + 1) | 0), (i = (i + 7) & -8), (c[j >> 2] = 0), j) | 0
      );
      i = j;
      k = 208;
      l = 0;
      m = 16384;
      n = 0;
      o = 4096;
      p = 0;
      i = a;
      return;
    }
    if ((c[5720394] | 0) != 8) {
      Sr(
        99432,
        ((j = i), (i = (i + 1) | 0), (i = (i + 7) & -8), (c[j >> 2] = 0), j) | 0
      );
      i = j;
      k = 208;
      l = 0;
      m = 16384;
      n = 0;
      o = 4096;
      p = 0;
      i = a;
      return;
    }
    do {
      if ((aw(22885688) | 0) != 0) {
        if (+at(57456) != 0.0) {
          break;
        }
        Sr(
          50848,
          ((j = i), (i = (i + 1) | 0), (i = (i + 7) & -8), (c[j >> 2] = 0), j) |
            0
        );
        i = j;
      }
    } while (0);
    if ((nr() | 0) == 2) {
      TB(21543848, or(1) | 0, 64);
      q = c[((c[5457224] | 0) + 32) >> 2] | 0;
      $B(
        f,
        4096,
        45864,
        ((j = i),
        (i = (i + 24) | 0),
        (c[j >> 2] = 21543848),
        (c[(j + 8) >> 2] = 185024),
        (c[(j + 16) >> 2] = q),
        j) | 0
      ) | 0;
      i = j;
    } else {
      q = 0;
      do {
        r = ((q | 0) / 1e3) | 0;
        s = (((r * -1e3) | 0) + q) | 0;
        t = ((s | 0) / 100) | 0;
        u = (s + ((t * -100) | 0)) | 0;
        s = ((u | 0) / 10) | 0;
        $B(
          21543848,
          64,
          130048,
          ((j = i),
          (i = (i + 32) | 0),
          (c[j >> 2] = r),
          (c[(j + 8) >> 2] = t),
          (c[(j + 16) >> 2] = s),
          (c[(j + 24) >> 2] = u + ((s * -10) | 0)),
          j) | 0
        ) | 0;
        i = j;
        s = c[((c[5457224] | 0) + 32) >> 2] | 0;
        $B(
          f,
          4096,
          45864,
          ((j = i),
          (i = (i + 24) | 0),
          (c[j >> 2] = 21543848),
          (c[(j + 8) >> 2] = 185024),
          (c[(j + 16) >> 2] = s),
          j) | 0
        ) | 0;
        i = j;
        q = (q + 1) | 0;
      } while (((Ut(f) | 0) != 0) & ((q | 0) < 1e4));
    }
    Sr(181192, ((j = i), (i = (i + 8) | 0), (c[j >> 2] = f), j) | 0);
    i = j;
    q = Zt(f) | 0;
    c[5759931] = q;
    if ((q | 0) == 0) {
      Sr(
        176408,
        ((j = i), (i = (i + 1) | 0), (i = (i + 7) & -8), (c[j >> 2] = 0), j) | 0
      );
      i = j;
      k = 208;
      l = 0;
      m = 16384;
      n = 0;
      o = 4096;
      p = 0;
      i = a;
      return;
    }
    c[5759927] = 1;
    c[5759926] = +at(172976) != 0.0;
    TB(23039640, 21543848, 64);
    c[5759929] = 1;
    hv(b, g, 16384);
    kv(b);
    sv(b, c[5721690] | 0);
    pv(b, 2);
    sv(b, c[5738077] | 0);
    g = 0;
    do {
      j = c[(23247696 + (g << 2)) >> 2] | 0;
      if ((j | 0) != 0) {
        pv(b, 3);
        rv(b, g);
        uv(b, (23251792 + j) | 0);
      }
      g = (g + 1) | 0;
    } while ((g | 0) < 1024);
    n$(h | 0, 0, 208) | 0;
    h = 0;
    do {
      g = (23287176 + ((h * 208) | 0)) | 0;
      if ((c[g >> 2] | 0) != 0) {
        pv(b, 4);
        Gv(b, e, g, 1);
      }
      h = (h + 1) | 0;
    } while ((h | 0) < 1024);
    pv(b, 8);
    sv(b, c[5720395] | 0);
    sv(b, c[5721689] | 0);
    pv(b, 8);
    c[d >> 2] = (c[5738076] | 0) - 1;
    h = d;
    gu(h, 4, c[5759931] | 0) | 0;
    e = (b + 20) | 0;
    c[d >> 2] = c[e >> 2];
    gu(h, 4, c[5759931] | 0) | 0;
    gu(c[(b + 12) >> 2] | 0, c[e >> 2] | 0, c[5759931] | 0) | 0;
    k = 208;
    l = 0;
    m = 16384;
    n = 0;
    o = 4096;
    p = 0;
    i = a;
    return;
  }
  function lo() {
    var b = 0,
      e = 0,
      f = 0,
      g = 0,
      j = 0,
      k = 0,
      l = 0.0,
      m = 0.0,
      n = 0.0,
      o = 0,
      p = 0,
      q = 0,
      r = 0.0,
      s = 0.0,
      t = 0.0,
      u = 0.0,
      v = 0.0,
      w = 0,
      x = 0.0,
      y = 0.0;
    b = i;
    i = (i + 1024) | 0;
    e = b | 0;
    f = c[5769186] | 0;
    if ((f | 0) == 0) {
      mo(1);
      no();
      g = 1024;
      j = 0;
      i = b;
      return;
    }
    if ((c[(f + 32) >> 2] | 0) == 0) {
      mo(1);
      no();
      g = 1024;
      j = 0;
      i = b;
      return;
    }
    f = wf() | 0;
    k = (f - (c[5759933] | 0)) | 0;
    if ((k | 0) <= 0) {
      mo(1);
      no();
      g = 1024;
      j = 0;
      i = b;
      return;
    }
    f = c[5759932] | 0;
    l = +(k | 0);
    m = l / 1.0e3;
    n = (+(f | 0) * 1.0e3) / l;
    o = c[5759936] | 0;
    l = +(k | 0) / +(f | 0);
    k = c[5759937] | 0;
    p = (f - 1) | 0;
    q = (p | 0) > 4096 ? 4096 : p;
    if ((q | 0) > 0) {
      r = 0.0;
      p = 0;
      do {
        r = r + +(d[(23039752 + p) | 0] | 0);
        p = (p + 1) | 0;
      } while ((p | 0) < (q | 0));
      s = +(q | 0);
      t = r / s;
      r = 0.0;
      p = 0;
      while (1) {
        u = +((d[(23039752 + p) | 0] | 0) >>> 0) - t;
        v = r + u * u;
        w = (p + 1) | 0;
        if ((w | 0) < (q | 0)) {
          r = v;
          p = w;
        } else {
          x = v;
          y = s;
          break;
        }
      }
    } else {
      x = 0.0;
      y = +(q | 0);
    }
    s = +T(x / y);
    $B(
      e,
      1024,
      169816,
      ((q = i),
      (i = (i + 56) | 0),
      (c[q >> 2] = f),
      (h[(q + 8) >> 3] = m),
      (h[(q + 16) >> 3] = n),
      (c[(q + 24) >> 2] = o),
      (h[(q + 32) >> 3] = l),
      (c[(q + 40) >> 2] = k),
      (h[(q + 48) >> 3] = s),
      q) | 0
    ) | 0;
    i = q;
    Sr(166448, ((q = i), (i = (i + 8) | 0), (c[q >> 2] = e), q) | 0);
    i = q;
    k = c[5769184] | 0;
    if ((k | 0) == 0) {
      mo(1);
      no();
      g = 1024;
      j = 0;
      i = b;
      return;
    }
    o = c[(k + 4) >> 2] | 0;
    if ((a[o] | 0) == 0) {
      mo(1);
      no();
      g = 1024;
      j = 0;
      i = b;
      return;
    }
    k = ((c[5759932] | 0) - 1) | 0;
    f = (k | 0) > 4096 ? 4096 : k;
    k = Zt(o) | 0;
    if ((k | 0) == 0) {
      Sr(
        155272,
        ((q = i),
        (i = (i + 8) | 0),
        (c[q >> 2] = c[((c[5769184] | 0) + 4) >> 2]),
        q) | 0
      );
      i = q;
      mo(1);
      no();
      g = 1024;
      j = 0;
      i = b;
      return;
    }
    hu(k, 163200, ((q = i), (i = (i + 8) | 0), (c[q >> 2] = e), q) | 0);
    i = q;
    if ((f | 0) > 0) {
      e = 0;
      do {
        hu(
          k,
          160416,
          ((q = i),
          (i = (i + 8) | 0),
          (c[q >> 2] = d[(23039752 + e) | 0] | 0),
          q) | 0
        );
        i = q;
        e = (e + 1) | 0;
      } while ((e | 0) < (f | 0));
    }
    Yt(k);
    Sr(
      157784,
      ((q = i),
      (i = (i + 8) | 0),
      (c[q >> 2] = c[((c[5769184] | 0) + 4) >> 2]),
      q) | 0
    );
    i = q;
    mo(1);
    no();
    g = 1024;
    j = 0;
    i = b;
    return;
  }
  function mo(b) {
    b = b | 0;
    var d = 0,
      e = 0,
      f = 0,
      g = 0,
      h = 0;
    d = i;
    i = (i + 16) | 0;
    e = d | 0;
    f = (d + 8) | 0;
    g = c[5458838] | 0;
    if ((g | 0) == 0) {
      i = d;
      return;
    }
    if ((c[(g + 32) >> 2] | 0) == 0) {
      i = d;
      return;
    }
    kt(126768, 125520);
    if ((c[5759927] | 0) != 0) {
      g = f;
      c[f >> 2] = -1;
      gu(g, 4, c[5759931] | 0) | 0;
      gu(g, 4, c[5759931] | 0) | 0;
      Yt(c[5759931] | 0);
      c[5759931] = 0;
      c[5759927] = 0;
      c[5759926] = 0;
      Sr(
        148264,
        ((h = i), (i = (i + 1) | 0), (i = (i + 7) & -8), (c[h >> 2] = 0), h) | 0
      );
      i = h;
    }
    g = c[5757535] | 0;
    if ((g | 0) != 0) {
      Yt(g);
      c[5757535] = 0;
    }
    a[23034240] = 0;
    a[23030144] = 0;
    kt(124600, 28378632);
    g = c[5759931] | 0;
    if ((g | 0) != 0) {
      Yt(g);
      c[5759931] = 0;
    }
    g = c[236124] | 0;
    if (!(((g | 0) == 0) | ((b | 0) == 0))) {
      oD(g, 7, ((h = i), (i = (i + 8) | 0), (c[h >> 2] = 0), h) | 0) | 0;
      i = h;
    }
    Il();
    Lx();
    if ((c[5720394] | 0) >>> 0 > 4 >>> 0) {
      g = c[5721690] | 0;
      do {
        if (((g - (c[5721691] | 0)) | 0) > 64) {
          if ((c[5458544] | 0) != 0) {
            break;
          }
          Ur(
            1,
            141040,
            ((h = i),
            (i = (i + 1) | 0),
            (i = (i + 7) & -8),
            (c[h >> 2] = 0),
            h) | 0
          );
          i = h;
        } else {
          b = (g + 1) | 0;
          c[5721690] = b;
          TB((22886768 + ((b & 63) << 10)) | 0, 123720, 1024);
        }
      } while (0);
      wn();
      wn();
      wn();
    }
    Pu(28378632, 28378632);
    n$(23247128, 0, 1956976) | 0;
    n$(22881576, 0, 195132) | 0;
    c[5720394] = 1;
    kt(122952, 125520);
    c[5811764] = 0;
    if ((cq() | 0) != 0) {
      Sp();
      bq() | 0;
    }
    g = Wt(132216, e) | 0;
    Yt(c[e >> 2] | 0);
    if ((g | 0) == 2048) {
      kt(140216, gv(132216, 2048, 0, 0) | 0);
      i = d;
      return;
    } else {
      kt(140216, 28378632);
      i = d;
      return;
    }
  }
  function no() {
    var b = 0,
      d = 0,
      e = 0,
      f = 0,
      g = 0;
    b = i;
    i = (i + 1024) | 0;
    d = b | 0;
    e = d | 0;
    TB(e, ct(134304) | 0, 1024);
    a[(d + 1023) | 0] = 0;
    Tr(132800, ((d = i), (i = (i + 8) | 0), (c[d >> 2] = e), d) | 0);
    i = d;
    if ((a[e] | 0) == 0) {
      f = 1024;
      g = 0;
      i = b;
      return;
    }
    kt(134304, 28378632);
    qr(e);
    qr(130576);
    tr();
    f = 1024;
    g = 0;
    i = b;
    return;
  }
  function oo() {
    var a = 0,
      b = 0,
      d = 0,
      e = 0,
      f = 0,
      g = 0,
      h = 0,
      j = 0;
    a = i;
    i = (i + 16424) | 0;
    b = a | 0;
    d = (a + 16416) | 0;
    e = c[5759931] | 0;
    if ((e | 0) == 0) {
      lo();
      f = 16384;
      g = 0;
      i = a;
      return;
    }
    if ((fu(d, 4, e) | 0) != 4) {
      lo();
      f = 16384;
      g = 0;
      i = a;
      return;
    }
    c[5738076] = c[d >> 2];
    hv(b, (a + 32) | 0, 16384);
    d = (b + 20) | 0;
    if ((fu(d, 4, c[5759931] | 0) | 0) != 4) {
      lo();
      f = 16384;
      g = 0;
      i = a;
      return;
    }
    e = c[d >> 2] | 0;
    if ((e | 0) == -1) {
      lo();
      f = 16384;
      g = 0;
      i = a;
      return;
    }
    if ((e | 0) > (c[(b + 16) >> 2] | 0)) {
      Ur(
        1,
        153272,
        ((h = i), (i = (i + 1) | 0), (i = (i + 7) & -8), (c[h >> 2] = 0), h) | 0
      );
      i = h;
    }
    j = fu(c[(b + 12) >> 2] | 0, e, c[5759931] | 0) | 0;
    if ((j | 0) == (c[d >> 2] | 0)) {
      c[5720397] = c[5497082];
      c[(b + 24) >> 2] = 0;
      Ep(b);
      f = 16384;
      g = 0;
      i = a;
      return;
    } else {
      Sr(
        151304,
        ((h = i), (i = (i + 1) | 0), (i = (i + 7) & -8), (c[h >> 2] = 0), h) | 0
      );
      i = h;
      lo();
      f = 16384;
      g = 0;
      i = a;
      return;
    }
  }
  function po() {
    var a = 0;
    a = c[5720394] | 0;
    if (((c[5759928] | 0) == 0) | (a >>> 0 > 6 >>> 0)) {
      return;
    }
    a: do {
      if (a >>> 0 < 6 >>> 0) {
        while (1) {
          oo();
          if ((c[6924866] | 0) != 0) {
            break;
          }
          if (!((c[5720394] | 0) >>> 0 < 6 >>> 0)) {
            break a;
          }
        }
        return;
      }
    } while (0);
    c[5759930] = 0;
    return;
  }
  function qo() {
    var b = 0,
      d = 0,
      e = 0,
      f = 0,
      g = 0,
      h = 0,
      j = 0,
      k = 0,
      l = 0,
      m = 0,
      n = 0,
      o = 0,
      p = 0,
      q = 0,
      r = 0,
      s = 0;
    b = i;
    i = (i + 8192) | 0;
    d = (b + 4096) | 0;
    e = b | 0;
    f = d | 0;
    if ((nr() | 0) != 2) {
      Sr(
        149e3,
        ((g = i), (i = (i + 1) | 0), (i = (i + 7) & -8), (c[g >> 2] = 0), g) | 0
      );
      i = g;
      h = 4096;
      j = 0;
      k = 4096;
      l = 0;
      i = b;
      return;
    }
    kt(146440, 144096);
    m = or(1) | 0;
    mo(1);
    n = ge(m | 0, 46) | 0;
    a: do {
      if ((n | 0) == 0) {
        o = 11;
      } else {
        if ((jC((n + 1) | 0, 185024, 3) | 0) != 0) {
          o = 11;
          break;
        }
        p = oj((n + 4) | 0) | 0;
        q = 0;
        while (1) {
          r = c[(30576 + (q << 2)) >> 2] | 0;
          s = (r | 0) == 0;
          if (s | ((r | 0) == (p | 0))) {
            break;
          } else {
            q = (q + 1) | 0;
          }
        }
        do {
          if (s) {
            if ((p | 0) == (c[((c[5457224] | 0) + 32) >> 2] | 0)) {
              break;
            }
            Sr(139128, ((g = i), (i = (i + 8) | 0), (c[g >> 2] = p), g) | 0);
            i = g;
            q = (n - m) | 0;
            r = q >>> 0 > 4095 >>> 0 ? 4095 : q;
            TB(f, m, (r + 1) | 0);
            a[(d + r) | 0] = 0;
            ro(f, e);
            break a;
          }
        } while (0);
        $B(
          e,
          4096,
          141400,
          ((g = i), (i = (i + 8) | 0), (c[g >> 2] = m), g) | 0
        ) | 0;
        i = g;
        cu(e, 23039724, 1) | 0;
      }
    } while (0);
    if ((o | 0) == 11) {
      ro(m, e);
    }
    if ((c[5759931] | 0) == 0) {
      Ur(1, 137216, ((g = i), (i = (i + 8) | 0), (c[g >> 2] = e), g) | 0);
      i = g;
    }
    TB(23039640, m, 64);
    hm();
    c[5720394] = 5;
    c[5759928] = 1;
    TB(22881592, m, 4096);
    m = c[5720394] | 0;
    if (((c[5759928] | 0) == 0) | (m >>> 0 > 6 >>> 0)) {
      h = 4096;
      j = 0;
      k = 4096;
      l = 0;
      i = b;
      return;
    }
    b: do {
      if (m >>> 0 < 6 >>> 0) {
        while (1) {
          oo();
          if ((c[6924866] | 0) != 0) {
            break;
          }
          if (!((c[5720394] | 0) >>> 0 < 6 >>> 0)) {
            break b;
          }
        }
        h = 4096;
        j = 0;
        k = 4096;
        l = 0;
        i = b;
        return;
      }
    } while (0);
    c[5759930] = 0;
    h = 4096;
    j = 0;
    k = 4096;
    l = 0;
    i = b;
    return;
  }
  function ro(a, b) {
    a = a | 0;
    b = b | 0;
    var d = 0,
      e = 0,
      f = 0,
      g = 0,
      h = 0,
      j = 0,
      k = 0;
    d = i;
    c[5759931] = 0;
    e = c[((c[5457224] | 0) + 32) >> 2] | 0;
    $B(
      b,
      4096,
      45864,
      ((f = i),
      (i = (i + 24) | 0),
      (c[f >> 2] = a),
      (c[(f + 8) >> 2] = 185024),
      (c[(f + 16) >> 2] = e),
      f) | 0
    ) | 0;
    i = f;
    cu(b, 23039724, 1) | 0;
    if ((c[5759931] | 0) != 0) {
      Sr(131144, ((f = i), (i = (i + 8) | 0), (c[f >> 2] = b), f) | 0);
      i = f;
      i = d;
      return;
    }
    Sr(131e3, ((f = i), (i = (i + 8) | 0), (c[f >> 2] = b), f) | 0);
    i = f;
    e = c[7644] | 0;
    if ((e | 0) == 0) {
      i = d;
      return;
    } else {
      g = 0;
      h = e;
    }
    while (1) {
      e = ((c[5457224] | 0) + 32) | 0;
      do {} while ((h | 0) == (c[e >> 2] | 0));
      $B(
        b,
        4096,
        45864,
        ((f = i),
        (i = (i + 24) | 0),
        (c[f >> 2] = a),
        (c[(f + 8) >> 2] = 185024),
        (c[(f + 16) >> 2] = h),
        f) | 0
      ) | 0;
      i = f;
      cu(b, 23039724, 1) | 0;
      if ((c[5759931] | 0) != 0) {
        break;
      }
      Sr(131e3, ((f = i), (i = (i + 8) | 0), (c[f >> 2] = b), f) | 0);
      i = f;
      e = (g + 1) | 0;
      j = c[(30576 + (e << 2)) >> 2] | 0;
      if ((j | 0) == 0) {
        k = 9;
        break;
      } else {
        g = e;
        h = j;
      }
    }
    if ((k | 0) == 9) {
      i = d;
      return;
    }
    Sr(131144, ((f = i), (i = (i + 8) | 0), (c[f >> 2] = b), f) | 0);
    i = f;
    i = d;
    return;
  }
  function so(a) {
    a = a | 0;
    var b = 0,
      d = 0,
      e = 0;
    b = i;
    i = (i + 8) | 0;
    d = b | 0;
    if ((cq() | 0) != 0) {
      bq() | 0;
    }
    if ((c[5759927] | 0) != 0) {
      e = d;
      c[d >> 2] = -1;
      gu(e, 4, c[5759931] | 0) | 0;
      gu(e, 4, c[5759931] | 0) | 0;
      Yt(c[5759931] | 0);
      c[5759931] = 0;
      c[5759927] = 0;
      c[5759926] = 0;
      Sr(
        148264,
        ((e = i), (i = (i + 1) | 0), (i = (i + 7) & -8), (c[e >> 2] = 0), e) | 0
      );
      i = e;
    }
    Ix();
    rl();
    Vp();
    e = c[4917244] | 0;
    d = (e | 0) == 0;
    do {
      if ((a | 0) == 0) {
        if (d) {
          break;
        }
        vk[e & 511](0);
      } else {
        if (!d) {
          vk[e & 511](1);
        }
        n$(19668976, 0, 124) | 0;
      }
    } while (0);
    c[5497078] = 0;
    c[5497079] = 0;
    c[5497075] = 0;
    c[5497077] = 0;
    i = b;
    return;
  }
  function to() {
    so(0);
    if ((c[((c[5451068] | 0) + 32) >> 2] | 0) == 0) {
      ms();
      lq();
      uo(0);
      return;
    } else {
      ps();
      uo(0);
      return;
    }
  }
  function uo(a) {
    a = a | 0;
    var b = 0;
    b = c[5458838] | 0;
    if ((b | 0) == 0) {
      return;
    }
    if ((c[(b + 32) >> 2] | 0) == 0) {
      return;
    }
    if ((c[5497075] | 0) == 0) {
      c[5497075] = 1;
      vk[c[4917245] & 511](22870084);
      c[5720354] = jk[c[4917248] & 255](174448) | 0;
      c[5720355] = jk[c[4917248] & 255](174248) | 0;
      c[5720356] = jk[c[4917248] & 255](174040) | 0;
      b = ((((c[5720347] | 0) / 8) | 0) - 2) | 0;
      c[5174] = b;
      c[5123038] = b;
    }
    if ((a | 0) != 0) {
      return;
    }
    if ((c[5497076] | 0) == 0) {
      c[5497076] = 1;
      Rx();
    }
    if ((c[5497077] | 0) == 0) {
      c[5497077] = 1;
      Jx();
    }
    if ((c[5497078] | c[((c[5458548] | 0) + 32) >> 2] | 0) != 0) {
      return;
    }
    c[5497078] = 1;
    Wp();
    return;
  }
  function vo() {
    if ((c[((c[5458548] | 0) + 32) >> 2] | 0) != 0) {
      c[5720394] = 1;
      In(1);
      return;
    }
    if ((c[((c[5458838] | 0) + 32) >> 2] | 0) == 0) {
      return;
    }
    hm();
    In(0);
    do {
      if ((c[5720394] | 0) >>> 0 > 4 >>> 0) {
        if ((VB(22881592, 129264) | 0) != 0) {
          break;
        }
        c[5720394] = 5;
        n$(22869028, 0, 1024) | 0;
        n$(22885728, 0, 1024) | 0;
        n$(23247696, 0, 20100) | 0;
        c[5720396] = -9999;
        Sp();
        return;
      }
    } while (0);
    kt(128184, 28378632);
    mo(1);
    TB(22881592, 129264, 4096);
    c[5720394] = 4;
    In(0);
    Sp();
    c[5721430] = -3e3;
    Uv(22881592, 22885688, 7) | 0;
    wo();
    return;
  }
  function wo() {
    var b = 0,
      d = 0,
      e = 0,
      f = 0,
      g = 0,
      h = 0,
      j = 0,
      k = 0,
      l = 0,
      m = 0,
      n = 0,
      o = 0,
      p = 0,
      q = 0,
      r = 0;
    b = i;
    i = (i + 2048) | 0;
    d = b | 0;
    e = (b + 1024) | 0;
    f = d | 0;
    g = e | 0;
    if ((c[5759928] | 0) != 0) {
      h = 1024;
      j = 0;
      k = 1024;
      l = 0;
      i = b;
      return;
    }
    m = c[5720394] | 0;
    if (((m - 3) | 0) >>> 0 > 1 >>> 0) {
      h = 1024;
      j = 0;
      k = 1024;
      l = 0;
      i = b;
      return;
    }
    n = c[5497082] | 0;
    if (((n - (c[5721430] | 0)) | 0) < 3e3) {
      h = 1024;
      j = 0;
      k = 1024;
      l = 0;
      i = b;
      return;
    }
    c[5721430] = n;
    c[5721431] = (c[5721431] | 0) + 1;
    if ((m | 0) == 3) {
      n = c[((c[5457508] | 0) + 4) >> 2] | 0;
      $B(
        g,
        1024,
        47136,
        ((o = i),
        (i = (i + 16) | 0),
        (c[o >> 2] = c[5721688]),
        (c[(o + 8) >> 2] = n),
        o) | 0
      ) | 0;
      i = o;
      Sv(
        0,
        22885688,
        166448,
        ((o = i), (i = (i + 8) | 0), (c[o >> 2] = g), o) | 0
      );
      i = o;
      h = 1024;
      j = 0;
      k = 1024;
      l = 0;
      i = b;
      return;
    } else if ((m | 0) == 4) {
      m = ~~+at(46800);
      TB(f, Dt(2) | 0, 1024);
      n =
        pC(
          46048,
          ((o = i),
          (i = (i + 8) | 0),
          (c[o >> 2] = c[((c[5457224] | 0) + 32) >> 2]),
          o) | 0
        ) | 0;
      i = o;
      vC(f, 46496, n);
      n = pC(46048, ((o = i), (i = (i + 8) | 0), (c[o >> 2] = m), o) | 0) | 0;
      i = o;
      vC(f, 45440, n);
      n =
        pC(
          46048,
          ((o = i), (i = (i + 8) | 0), (c[o >> 2] = c[5721688]), o) | 0
        ) | 0;
      i = o;
      vC(f, 45e3, n);
      n = e;
      c[n >> 2] = 1852731235;
      c[(n + 4) >> 2] = 544498533;
      a[(e + 8) | 0] = 34;
      n = a[f] | 0;
      a: do {
        if ((n << 24) >> 24 == 0) {
          p = 0;
        } else {
          m = 0;
          q = n;
          while (1) {
            a[(e + (m + 9)) | 0] = q;
            r = (m + 1) | 0;
            if (!(r >>> 0 < (o$(f | 0) | 0) >>> 0)) {
              p = r;
              break a;
            }
            m = r;
            q = a[(d + r) | 0] | 0;
          }
        }
      } while (0);
      a[(e + (p + 9)) | 0] = 34;
      d = (p + 10) | 0;
      a[(e + d) | 0] = 0;
      Tv(0, 22885688, g, d);
      c[5389062] = c[5389062] & -3;
      h = 1024;
      j = 0;
      k = 1024;
      l = 0;
      i = b;
      return;
    } else {
      Ur(
        0,
        44128,
        ((o = i), (i = (i + 1) | 0), (i = (i + 7) & -8), (c[o >> 2] = 0), o) | 0
      );
      i = o;
    }
  }
  function xo() {
    n$(23247128 | 0, 0 | 0, 1956976 | 0) | 0;
    return;
  }
  function yo(b) {
    b = b | 0;
    var d = 0,
      e = 0,
      f = 0,
      g = 0,
      h = 0,
      j = 0;
    d = i;
    e = or(0) | 0;
    f = a[e] | 0;
    if ((f << 24) >> 24 == 45) {
      i = d;
      return;
    }
    if (
      ((c[5759928] | 0) != 0) |
      ((c[5720394] | 0) >>> 0 < 5 >>> 0) |
      ((f << 24) >> 24 == 43)
    ) {
      Sr(122048, ((g = i), (i = (i + 8) | 0), (c[g >> 2] = e), g) | 0);
      i = g;
      i = d;
      return;
    }
    f = (nr() | 0) > 1;
    h = c[5721690] | 0;
    j = ((h - (c[5721691] | 0)) | 0) > 63;
    if (f) {
      if (!j) {
        f = (h + 1) | 0;
        c[5721690] = f;
        TB((22886768 + ((f & 63) << 10)) | 0, b, 1024);
        i = d;
        return;
      }
      if ((c[5458544] | 0) == 0) {
        Ur(
          1,
          141040,
          ((g = i), (i = (i + 1) | 0), (i = (i + 7) & -8), (c[g >> 2] = 0), g) |
            0
        );
        i = g;
      } else {
        i = d;
        return;
      }
    } else {
      if (!j) {
        j = (h + 1) | 0;
        c[5721690] = j;
        TB((22886768 + ((j & 63) << 10)) | 0, e, 1024);
        i = d;
        return;
      }
      if ((c[5458544] | 0) == 0) {
        Ur(
          1,
          141040,
          ((g = i), (i = (i + 1) | 0), (i = (i + 7) & -8), (c[g >> 2] = 0), g) |
            0
        );
        i = g;
      } else {
        i = d;
        return;
      }
    }
  }
  function zo() {
    var a = 0,
      b = 0,
      d = 0,
      e = 0,
      f = 0;
    a = i;
    if (((c[5720394] | 0) != 8) | ((c[5759928] | 0) != 0)) {
      Sr(
        121168,
        ((b = i), (i = (i + 1) | 0), (i = (i + 7) & -8), (c[b >> 2] = 0), b) | 0
      );
      i = b;
      i = a;
      return;
    }
    if ((nr() | 0) <= 1) {
      i = a;
      return;
    }
    d = xr() | 0;
    e = c[5721690] | 0;
    if (((e - (c[5721691] | 0)) | 0) <= 63) {
      f = (e + 1) | 0;
      c[5721690] = f;
      TB((22886768 + ((f & 63) << 10)) | 0, d, 1024);
      i = a;
      return;
    }
    if ((c[5458544] | 0) == 0) {
      Ur(
        1,
        141040,
        ((b = i), (i = (i + 1) | 0), (i = (i + 7) & -8), (c[b >> 2] = 0), b) | 0
      );
      i = b;
    } else {
      i = a;
      return;
    }
  }
  function Ao() {
    var a = 0,
      b = 0;
    a = i;
    Il();
    kt(120032, 118640);
    b = c[5720394] | 0;
    if (((b | 0) == 9) | ((b | 0) == 1)) {
      i = a;
      return;
    } else {
      Ur(
        3,
        117496,
        ((a = i), (i = (i + 1) | 0), (i = (i + 7) & -8), (c[a >> 2] = 0), a) | 0
      );
      i = a;
    }
  }
  function Bo() {
    var b = 0,
      d = 0,
      e = 0;
    b = i;
    if ((a[23208720] | 0) == 0) {
      i = b;
      return;
    }
    kt(120032, 118640);
    d =
      pC(116384, ((e = i), (i = (i + 8) | 0), (c[e >> 2] = 23208720), e) | 0) |
      0;
    i = e;
    qr(d);
    i = b;
    return;
  }
  function Co() {
    var d = 0,
      e = 0,
      f = 0,
      g = 0,
      h = 0,
      j = 0,
      k = 0,
      l = 0,
      m = 0;
    d = i;
    i = (i + 16) | 0;
    e = d | 0;
    f = (d + 8) | 0;
    g = nr() | 0;
    if (((g - 2) | 0) >>> 0 > 1 >>> 0) {
      Sr(
        114952,
        ((h = i), (i = (i + 1) | 0), (i = (i + 7) & -8), (c[h >> 2] = 0), h) | 0
      );
      i = h;
      i = d;
      return;
    }
    j = or(1) | 0;
    if ((g | 0) == 2) {
      k = 7;
      l = j;
    } else {
      do {
        if ((k$(j, 113736) | 0) == 0) {
          m = 4;
        } else {
          if ((k$(or(1) | 0, 112808) | 0) == 0) {
            m = 5;
            break;
          }
          Sr(
            111928,
            ((h = i),
            (i = (i + 1) | 0),
            (i = (i + 7) & -8),
            (c[h >> 2] = 0),
            h) | 0
          );
          i = h;
          m = 7;
        }
      } while (0);
      k = m;
      l = or(2) | 0;
    }
    TB(23208720, xr() | 0, 4096);
    kt(120032, 118640);
    a[22885728] = 0;
    do {
      if ((c[((c[5451068] | 0) + 32) >> 2] | 0) != 0) {
        if ((k$(l, 129264) | 0) != 0) {
          break;
        }
        MA(111144);
      }
    } while (0);
    kt(146440, 125520);
    WA(0);
    mo(1);
    hm();
    TB(22881592, l, 4096);
    if ((Uv(22881592, 22885688, k) | 0) == 0) {
      Sr(
        110416,
        ((h = i), (i = (i + 1) | 0), (i = (i + 7) & -8), (c[h >> 2] = 0), h) | 0
      );
      i = h;
      c[5720394] = 1;
      i = d;
      return;
    }
    if ((b[11442856] | 0) == 0) {
      b[11442856] = YB(27960) | 0;
    }
    k = _v(22885688) | 0;
    Sr(
      109136,
      ((h = i),
      (i = (i + 16) | 0),
      (c[h >> 2] = 22881592),
      (c[(h + 8) >> 2] = k),
      h) | 0
    );
    i = h;
    do {
      if ((c[((c[5811744] | 0) + 32) >> 2] | 0) == 0) {
        h = Wt(132216, f) | 0;
        Yt(c[f >> 2] | 0);
        if ((h | 0) == 2048) {
          kt(140216, gv(132216, 2048, 0, 0) | 0);
          break;
        } else {
          kt(140216, 28378632);
          break;
        }
      } else {
        h = o$(k | 0) | 0;
        m = Wt(132216, e) | 0;
        Yt(c[e >> 2] | 0);
        if ((m | 0) == 2048) {
          kt(140216, gv(132216, 2048, k, h) | 0);
          break;
        } else {
          kt(140216, 28378632);
          break;
        }
      }
    } while (0);
    if ((aw(22885688) | 0) == 0) {
      c[5720394] = 3;
      k = (v$() | 0) << 16;
      e = k ^ (v$() | 0);
      c[5721688] = e ^ (Bs() | 0);
    } else {
      c[5720394] = 4;
    }
    In(0);
    c[5721430] = -99999;
    c[5721431] = 0;
    kt(108064, l);
    i = d;
    return;
  }
  function Do() {
    var d = 0,
      e = 0,
      f = 0,
      g = 0,
      h = 0,
      j = 0,
      k = 0;
    d = i;
    i = (i + 1056) | 0;
    e = d | 0;
    f = (d + 1024) | 0;
    g = e | 0;
    if ((c[((c[4917282] | 0) + 4) >> 2] | 0) == 0) {
      Sr(
        107160,
        ((h = i), (i = (i + 1) | 0), (i = (i + 7) & -8), (c[h >> 2] = 0), h) | 0
      );
      i = h;
      j = 1024;
      k = 0;
      i = d;
      return;
    }
    c[e >> 2] = -1;
    a[(e + 4) | 0] = 0;
    XB(g, 1024, 106112);
    XB(g, 1024, c[((c[4917282] | 0) + 4) >> 2] | 0);
    XB(g, 1024, 105288);
    XB(g, 1024, ((Br() | 0) + 5) | 0);
    do {
      if ((c[5720394] | 0) >>> 0 > 4 >>> 0) {
        m$(f | 0, 23043864, 32) | 0;
      } else {
        e = c[((c[4917284] | 0) + 4) >> 2] | 0;
        if ((a[e] | 0) == 0) {
          Sr(
            104408,
            ((h = i),
            (i = (i + 1) | 0),
            (i = (i + 7) & -8),
            (c[h >> 2] = 0),
            h) | 0
          );
          i = h;
          j = 1024;
          k = 0;
          i = d;
          return;
        } else {
          Uv(e, f, 7) | 0;
          e = (f + 24) | 0;
          if ((b[e >> 1] | 0) != 0) {
            break;
          }
          b[e >> 1] = YB(27960) | 0;
          break;
        }
      }
    } while (0);
    Nv(0, ((o$(g | 0) | 0) + 1) | 0, g, f);
    j = 1024;
    k = 0;
    i = d;
    return;
  }
  function Eo() {
    var a = 0,
      b = 0,
      d = 0,
      e = 0,
      f = 0,
      g = 0,
      h = 0;
    a = i;
    i = (i + 1024) | 0;
    b = a | 0;
    d = c[5817473] | 0;
    e = Mu() | 0;
    $B(
      b,
      1024,
      103472,
      ((f = i), (i = (i + 16) | 0), (c[f >> 2] = d), (c[(f + 8) >> 2] = e), f) |
        0
    ) | 0;
    i = f;
    e = c[5721690] | 0;
    if (((e - (c[5721691] | 0)) | 0) <= 63) {
      d = (e + 1) | 0;
      c[5721690] = d;
      TB((22886768 + ((d & 63) << 10)) | 0, b, 1024);
      g = 1024;
      h = 0;
      i = a;
      return;
    }
    if ((c[5458544] | 0) == 0) {
      Ur(
        1,
        141040,
        ((f = i), (i = (i + 1) | 0), (i = (i + 7) & -8), (c[f >> 2] = 0), f) | 0
      );
      i = f;
    } else {
      g = 1024;
      h = 0;
      i = a;
      return;
    }
  }
  function Fo(a, b) {
    a = a | 0;
    b = b | 0;
    var d = 0,
      e = 0;
    d = i;
    e = c[a >> 2] | 0;
    if ((e | 0) != 0) {
      W_(e);
    }
    W_(a);
    c[6924866] = (c[6924866] | 0) - 1;
    if ((b | 0) != 0) {
      i = d;
      return;
    }
    if ((c[((c[5451068] | 0) + 32) >> 2] | 0) == 0) {
      ms();
    } else {
      ps();
    }
    Vp();
    rl();
    b = c[4917244] | 0;
    if ((b | 0) != 0) {
      vk[b & 511](1);
    }
    n$(19668976, 0, 124) | 0;
    b = c[5721690] | 0;
    do {
      if (((b - (c[5721691] | 0)) | 0) > 63) {
        if ((c[5458544] | 0) != 0) {
          break;
        }
        Ur(
          1,
          141040,
          ((a = i), (i = (i + 1) | 0), (i = (i + 7) & -8), (c[a >> 2] = 0), a) |
            0
        );
        i = a;
      } else {
        a = (b + 1) | 0;
        c[5721690] = a;
        TB((22886768 + ((a & 63) << 10)) | 0, 102688, 1024);
      }
    } while (0);
    Ou(6);
    c[5497075] = 0;
    c[5497078] = 0;
    c[5497079] = 0;
    c[5497077] = 0;
    kt(101760, 118640);
    Go();
    uo(0);
    switch (c[5720394] | 0) {
      case 9:
      case 5:
      case 4:
      case 3:
      case 2:
      case 1:
      case 0: {
        i = d;
        return;
      }
      default: {
      }
    }
    c[5497079] = 1;
    tl();
    i = d;
    return;
  }
  function Go() {
    var a = 0,
      b = 0,
      d = 0,
      e = 0;
    a = i;
    i = (i + 160) | 0;
    b = a | 0;
    Sr(
      173800,
      ((d = i), (i = (i + 1) | 0), (i = (i + 7) & -8), (c[d >> 2] = 0), d) | 0
    );
    i = d;
    c[(b + 52) >> 2] = 130;
    c[(b + 56) >> 2] = 96;
    c[(b + 60) >> 2] = 34;
    c[(b + 64) >> 2] = 130;
    c[(b + 68) >> 2] = 172;
    c[b >> 2] = 66;
    c[(b + 4) >> 2] = 84;
    c[(b + 8) >> 2] = 6;
    c[(b + 24) >> 2] = 84;
    c[(b + 28) >> 2] = 280;
    c[(b + 12) >> 2] = 76;
    c[(b + 16) >> 2] = 6;
    c[(b + 20) >> 2] = 270;
    c[(b + 72) >> 2] = 88;
    c[(b + 76) >> 2] = 312;
    c[(b + 84) >> 2] = 18;
    c[(b + 88) >> 2] = 230;
    c[(b + 100) >> 2] = 106;
    c[(b + 96) >> 2] = 276;
    c[(b + 92) >> 2] = 22;
    c[(b + 80) >> 2] = 122;
    c[(b + 104) >> 2] = 76;
    c[(b + 32) >> 2] = 28;
    c[(b + 36) >> 2] = 166;
    c[(b + 40) >> 2] = 10;
    c[(b + 44) >> 2] = 4;
    c[(b + 48) >> 2] = 24;
    c[(b + 108) >> 2] = 20;
    c[(b + 112) >> 2] = 4;
    c[(b + 116) >> 2] = 132;
    c[(b + 120) >> 2] = 116;
    c[(b + 124) >> 2] = 182;
    c[(b + 128) >> 2] = 74;
    c[(b + 132) >> 2] = 408;
    c[(b + 136) >> 2] = 4;
    c[(b + 140) >> 2] = 162;
    c[(b + 144) >> 2] = 376;
    c[(b + 148) >> 2] = 126;
    c[(b + 152) >> 2] = 24;
    e = aS(8, b) | 0;
    Sr(
      173536,
      ((d = i), (i = (i + 1) | 0), (i = (i + 7) & -8), (c[d >> 2] = 0), d) | 0
    );
    i = d;
    if ((e | 0) == 0) {
      Ur(
        0,
        173080,
        ((d = i), (i = (i + 1) | 0), (i = (i + 7) & -8), (c[d >> 2] = 0), d) | 0
      );
      i = d;
    } else {
      m$(19668976, e | 0, 124) | 0;
      kt(101760, 118640);
      i = a;
      return;
    }
  }
  function Ho() {
    var a = 0,
      b = 0,
      d = 0,
      e = 0,
      f = 0,
      h = 0.0,
      j = 0.0,
      k = 0.0,
      l = 0.0,
      m = 0.0,
      n = 0.0,
      o = 0.0,
      p = 0.0,
      q = 0,
      r = 0,
      s = 0,
      t = 0,
      u = 0,
      v = 0,
      w = 0,
      x = 0,
      y = 0,
      z = 0,
      A = 0,
      B = 0,
      C = 0,
      D = 0,
      E = 0,
      F = 0,
      G = 0,
      H = 0,
      I = 0,
      J = 0,
      K = 0,
      L = 0,
      M = 0,
      N = 0,
      O = 0,
      P = 0,
      Q = 0,
      R = 0;
    a = i;
    i = (i + 8) | 0;
    b = a | 0;
    if ((k$(or(1) | 0, 100920) | 0) != 0) {
      if ((cq() | 0) != 0) {
        bq() | 0;
      }
      if ((c[5759927] | 0) != 0) {
        d = b;
        c[b >> 2] = -1;
        gu(d, 4, c[5759931] | 0) | 0;
        gu(d, 4, c[5759931] | 0) | 0;
        Yt(c[5759931] | 0);
        c[5759931] = 0;
        c[5759927] = 0;
        c[5759926] = 0;
        Sr(
          148264,
          ((e = i), (i = (i + 1) | 0), (i = (i + 7) & -8), (c[e >> 2] = 0), e) |
            0
        );
        i = e;
      }
      Ax();
      d = c[5721689] | 0;
      Wu(d, 1, Pr(36, 0) | 0);
      i = a;
      return;
    }
    vk[c[4917274] & 511](22870084);
    d = c[5720357] | 0;
    a: do {
      if ((d | 0) != 0) {
        b = c[(d + 11304) >> 2] | 0;
        f = c[(d + 11308) >> 2] | 0;
        m$(d | 0, 22870084, 11332) | 0;
        h = +(b | 0);
        j = h * 0.0015625;
        k = +(f | 0);
        l = k * 0.0020833333333333333;
        if (((b * 480) | 0 | 0) > ((f * 640) | 0 | 0)) {
          m = (h - k * 1.3333333333333333) * 0.5;
        } else {
          m = 0.0;
        }
        f = c[5720347] | 0;
        k = +(f | 0);
        h = k * 0.0015625;
        b = c[5720348] | 0;
        n = +(b | 0);
        o = n * 0.0020833333333333333;
        if (((f * 480) | 0 | 0) > ((b * 640) | 0 | 0)) {
          p = (k - n * 1.3333333333333333) * 0.5;
        } else {
          p = 0.0;
        }
        b = c[5720374] | 0;
        do {
          if ((b | 0) == 0) {
            f = c[5720357] | 0;
            q = (f + 11460) | 0;
            r = (f - 61968) | 0;
            f = 0;
            s = 0;
            t = 0;
            u = 0;
            while (1) {
              if ((f | 0) != 0) {
                v = u;
                w = t;
                x = s;
                y = 20;
                break;
              }
              z = r;
              A = 0;
              do {
                B = 0;
                C = 0;
                D = 0;
                E = 0;
                while (1) {
                  F = c[(186944 + ((A * 12) | 0) + (B << 2)) >> 2] | 0;
                  if ((F | 0) == 1) {
                    G = (z + (B << 2)) | 0;
                    if (+S(+(+g[G >> 2] - j)) < 0.0010000000474974513) {
                      H = G;
                      I = D;
                      J = C;
                    } else {
                      K = C;
                      L = D;
                      M = G;
                      N = 0;
                      O = 1;
                      break;
                    }
                  } else if ((F | 0) == 3) {
                    G = (z + (B << 2)) | 0;
                    if (+S(+(+g[G >> 2] - m)) < 0.0010000000474974513) {
                      H = E;
                      I = D;
                      J = G;
                    } else {
                      K = G;
                      L = D;
                      M = E;
                      N = 0;
                      O = 1;
                      break;
                    }
                  } else if ((F | 0) == 2) {
                    F = (z + (B << 2)) | 0;
                    if (+S(+(+g[F >> 2] - l)) < 0.0010000000474974513) {
                      H = E;
                      I = F;
                      J = C;
                    } else {
                      K = C;
                      L = F;
                      M = E;
                      N = 0;
                      O = 1;
                      break;
                    }
                  } else {
                    H = E;
                    I = D;
                    J = C;
                  }
                  F = (B + 1) | 0;
                  if (F >>> 0 > 2 >>> 0) {
                    K = J;
                    L = I;
                    M = H;
                    N = 1;
                    O = 0;
                    break;
                  } else {
                    B = F;
                    C = J;
                    D = I;
                    E = H;
                  }
                }
                A = (A + 1) | 0;
              } while (((A | 0) < 4) & O);
              A = (r + 1) | 0;
              if (((A | 0) != (q | 0)) & O) {
                r = A;
                f = N;
                s = M;
                t = L;
                u = K;
              } else {
                y = 19;
                break;
              }
            }
            if ((y | 0) == 19) {
              if (!O) {
                v = K;
                w = L;
                x = M;
                y = 20;
              }
            }
            do {
              if ((y | 0) == 20) {
                if ((x | 0) != 0) {
                  c[5720358] = 1;
                  u = c[5720374] | 0;
                  c[(22881436 + (u << 3)) >> 2] = x;
                  c[5720374] = u + 1;
                  Sr(
                    99776,
                    ((e = i), (i = (i + 8) | 0), (c[e >> 2] = x), e) | 0
                  );
                  i = e;
                }
                if ((w | 0) != 0) {
                  c[(22881432 + (c[5720374] << 3)) >> 2] = 2;
                  u = c[5720374] | 0;
                  c[(22881436 + (u << 3)) >> 2] = w;
                  c[5720374] = u + 1;
                  Sr(
                    92528,
                    ((e = i), (i = (i + 8) | 0), (c[e >> 2] = w), e) | 0
                  );
                  i = e;
                }
                if ((v | 0) == 0) {
                  break;
                }
                c[(22881432 + (c[5720374] << 3)) >> 2] = 3;
                u = c[5720374] | 0;
                c[(22881436 + (u << 3)) >> 2] = v;
                c[5720374] = u + 1;
                Sr(63912, ((e = i), (i = (i + 8) | 0), (c[e >> 2] = v), e) | 0);
                i = e;
              }
            } while (0);
            u = c[5720374] | 0;
            if ((u | 0) != 0) {
              P = u;
              break;
            }
            Sr(
              61912,
              ((e = i),
              (i = (i + 1) | 0),
              (i = (i + 7) & -8),
              (c[e >> 2] = 0),
              e) | 0
            );
            i = e;
            break a;
          } else {
            P = b;
          }
        } while (0);
        b = 0;
        while (1) {
          u = c[(22881432 + (b << 3)) >> 2] | 0;
          if ((u | 0) == 2) {
            g[c[(22881436 + (b << 3)) >> 2] >> 2] = o;
          } else if ((u | 0) == 1) {
            g[c[(22881436 + (b << 3)) >> 2] >> 2] = h;
          } else if ((u | 0) == 3) {
            g[c[(22881436 + (b << 3)) >> 2] >> 2] = p;
          } else {
            break;
          }
          b = (b + 1) | 0;
          if (!(b >>> 0 < P >>> 0)) {
            break a;
          }
        }
        Ur(
          0,
          62784,
          ((e = i), (i = (i + 1) | 0), (i = (i + 7) & -8), (c[e >> 2] = 0), e) |
            0
        );
        i = e;
      }
    } while (0);
    P = c[5720375] | 0;
    if ((P | 0) == 0) {
      i = a;
      return;
    }
    v = c[(P + 11304) >> 2] | 0;
    w = c[(P + 11308) >> 2] | 0;
    m$(P | 0, 22870084, 11332) | 0;
    p = +(v | 0) / 640.0;
    m = +(w | 0) / 480.0;
    h = +(c[5720347] | 0) / 640.0;
    o = +(c[5720348] | 0) / 480.0;
    w = c[5720393] | 0;
    do {
      if ((w | 0) == 0) {
        v = c[5720375] | 0;
        P = (v + 11460) | 0;
        x = c[5720376] | 0;
        M = P >>> 0 < x >>> 0 ? x : P;
        P = (v + 11332) | 0;
        do {
          v = (P + 4) | 0;
          do {
            if (+S(+(+g[P >> 2] - p)) < 0.0010000000474974513) {
              if (!(+S(+(+g[v >> 2] - m)) < 0.0010000000474974513)) {
                Q = P;
                break;
              }
              c[(22881508 + (c[5720393] << 3)) >> 2] = 1;
              x = c[5720393] | 0;
              c[(22881512 + (x << 3)) >> 2] = P;
              c[5720393] = x + 1;
              Sr(61128, ((e = i), (i = (i + 8) | 0), (c[e >> 2] = P), e) | 0);
              i = e;
              c[(22881508 + (c[5720393] << 3)) >> 2] = 2;
              x = c[5720393] | 0;
              c[(22881512 + (x << 3)) >> 2] = v;
              c[5720393] = x + 1;
              Sr(60440, ((e = i), (i = (i + 8) | 0), (c[e >> 2] = v), e) | 0);
              i = e;
              Q = (P + 3) | 0;
            } else {
              Q = P;
            }
          } while (0);
          P = (Q + 1) | 0;
        } while ((P | 0) != (M | 0));
        M = c[5720393] | 0;
        if ((M | 0) != 0) {
          R = M;
          break;
        }
        Sr(
          59176,
          ((e = i), (i = (i + 1) | 0), (i = (i + 7) & -8), (c[e >> 2] = 0), e) |
            0
        );
        i = e;
        i = a;
        return;
      } else {
        R = w;
      }
    } while (0);
    w = 0;
    while (1) {
      Q = c[(22881508 + (w << 3)) >> 2] | 0;
      if ((Q | 0) == 2) {
        g[c[(22881512 + (w << 3)) >> 2] >> 2] = o;
      } else if ((Q | 0) == 1) {
        g[c[(22881512 + (w << 3)) >> 2] >> 2] = h;
      } else {
        y = 47;
        break;
      }
      Q = (w + 1) | 0;
      if (Q >>> 0 < R >>> 0) {
        w = Q;
      } else {
        y = 55;
        break;
      }
    }
    if ((y | 0) == 47) {
      Ur(
        0,
        59768,
        ((e = i), (i = (i + 1) | 0), (i = (i + 7) & -8), (c[e >> 2] = 0), e) | 0
      );
      i = e;
    } else if ((y | 0) == 55) {
      i = a;
      return;
    }
  }
  function Io() {
    Sx();
    c[5497076] = 0;
    Ho();
    return;
  }
  function Jo() {
    var a = 0,
      b = 0,
      d = 0;
    a = i;
    b = Ju() | 0;
    Sr(58624, ((d = i), (i = (i + 8) | 0), (c[d >> 2] = b), d) | 0);
    i = d;
    i = a;
    return;
  }
  function Ko() {
    var a = 0,
      b = 0,
      d = 0;
    a = i;
    b = Nu() | 0;
    Sr(57728, ((d = i), (i = (i + 8) | 0), (c[d >> 2] = b), d) | 0);
    i = d;
    i = a;
    return;
  }
  function Lo() {
    var a = 0,
      b = 0,
      d = 0,
      e = 0;
    a = i;
    if ((c[5720394] | 0) == 8) {
      b = 0;
    } else {
      Sr(
        121168,
        ((d = i), (i = (i + 1) | 0), (i = (i + 7) & -8), (c[d >> 2] = 0), d) | 0
      );
      i = d;
      i = a;
      return;
    }
    do {
      e = c[(23247696 + (b << 2)) >> 2] | 0;
      if ((e | 0) != 0) {
        Sr(
          56776,
          ((d = i),
          (i = (i + 16) | 0),
          (c[d >> 2] = b),
          (c[(d + 8) >> 2] = 23251792 + e),
          d) | 0
        );
        i = d;
      }
      b = (b + 1) | 0;
    } while ((b | 0) < 1024);
    i = a;
    return;
  }
  function Mo() {
    var a = 0,
      b = 0;
    a = i;
    Sr(
      56048,
      ((b = i), (i = (i + 1) | 0), (i = (i + 7) & -8), (c[b >> 2] = 0), b) | 0
    );
    i = b;
    Sr(55056, ((b = i), (i = (i + 8) | 0), (c[b >> 2] = c[5720394]), b) | 0);
    i = b;
    Sr(54352, ((b = i), (i = (i + 8) | 0), (c[b >> 2] = 22881592), b) | 0);
    i = b;
    Sr(
      53824,
      ((b = i), (i = (i + 1) | 0), (i = (i + 7) & -8), (c[b >> 2] = 0), b) | 0
    );
    i = b;
    _r(Dt(2) | 0);
    Sr(
      53352,
      ((b = i), (i = (i + 1) | 0), (i = (i + 7) & -8), (c[b >> 2] = 0), b) | 0
    );
    i = b;
    i = a;
    return;
  }
  function No(a, b) {
    a = a | 0;
    b = b | 0;
    var d = 0;
    b = i;
    d = c[a >> 2] | 0;
    if ((d | 0) != 0) {
      W_(d);
    }
    W_(a);
    c[6924866] = (c[6924866] | 0) - 1;
    a = c[5721690] | 0;
    if (((a - (c[5721691] | 0)) | 0) <= 63) {
      d = (a + 1) | 0;
      c[5721690] = d;
      TB((22886768 + ((d & 63) << 10)) | 0, 52912, 1024);
      i = b;
      return;
    }
    if ((c[5458544] | 0) == 0) {
      Ur(
        1,
        141040,
        ((d = i), (i = (i + 1) | 0), (i = (i + 7) & -8), (c[d >> 2] = 0), d) | 0
      );
      i = d;
    } else {
      i = b;
      return;
    }
  }
  function Oo() {
    var a = 0;
    if ((c[5759909] | 0) != 0) {
      c[5759909] = 0;
      a = c[5721689] | 0;
      Uu(a, Pr(32, 0) | 0);
      return;
    }
    c[5720394] = 6;
    As() | 0;
    if ((c[5720394] | 0) != 6) {
      return;
    }
    kt(126768, 118640);
    so(0);
    if ((c[((c[5451068] | 0) + 32) >> 2] | 0) == 0) {
      ms();
      lq();
    } else {
      ps();
    }
    uo(0);
    c[5497079] = 1;
    tl();
    return;
  }
  function Po(a, b) {
    a = a | 0;
    b = b | 0;
    var d = 0,
      e = 0,
      f = 0;
    d = i;
    Tr(
      52280,
      ((e = i), (i = (i + 16) | 0), (c[e >> 2] = a), (c[(e + 8) >> 2] = b), e) |
        0
    );
    i = e;
    TB(23034240, a, 4096);
    $B(
      23030144,
      4096,
      51816,
      ((e = i), (i = (i + 8) | 0), (c[e >> 2] = a), e) | 0
    ) | 0;
    i = e;
    kt(124600, b);
    kt(51176, 118640);
    kt(50320, 118640);
    nt(49616, +(c[5497082] | 0));
    c[5759650] = 0;
    c[5759651] = 0;
    a = pC(48864, ((e = i), (i = (i + 8) | 0), (c[e >> 2] = b), e) | 0) | 0;
    i = e;
    b = c[5721690] | 0;
    if (((b - (c[5721691] | 0)) | 0) <= 63) {
      f = (b + 1) | 0;
      c[5721690] = f;
      TB((22886768 + ((f & 63) << 10)) | 0, a, 1024);
      i = d;
      return;
    }
    if ((c[5458544] | 0) == 0) {
      Ur(
        1,
        141040,
        ((e = i), (i = (i + 1) | 0), (i = (i + 7) & -8), (c[e >> 2] = 0), e) | 0
      );
      i = e;
    } else {
      i = d;
      return;
    }
  }
  function Qo() {
    var b = 0,
      d = 0,
      e = 0,
      f = 0,
      g = 0,
      h = 0,
      j = 0;
    b = i;
    do {
      if ((a[23034240] | 0) != 0) {
        d = Rt(ct(48384) | 0, 23034240, 28378632) | 0;
        a[(d + ((o$(d | 0) | 0) - 1)) | 0] = 0;
        if ((pu(d) | 0) != 0) {
          break;
        }
        Ur(
          1,
          47872,
          ((e = i), (i = (i + 8) | 0), (c[e >> 2] = 23034240), e) | 0
        );
        i = e;
      }
    } while (0);
    a[23034240] = 0;
    a[23030144] = 0;
    kt(124600, 28378632);
    d = a[23038612] | 0;
    if ((((d << 24) >> 24) | 0) == 64) {
      f = 23038613;
    } else if ((((d << 24) >> 24) | 0) == 0) {
      Oo();
      i = b;
      return;
    } else {
      f = 23038612;
    }
    d = sg(f | 0, 64) | 0;
    if ((d | 0) == 0) {
      Oo();
      i = b;
      return;
    }
    g = (d + 1) | 0;
    a[d] = 0;
    h = sg(g | 0, 64) | 0;
    if ((h | 0) == 0) {
      j = (d + ((o$(g | 0) | 0) + 1)) | 0;
    } else {
      a[h] = 0;
      j = (h + 1) | 0;
    }
    h = c[((c[5811778] | 0) + 32) >> 2] | 0;
    if (((h & 4) | 0) != 0) {
      Ur(1, 47480, ((e = i), (i = (i + 8) | 0), (c[e >> 2] = h), e) | 0);
      i = e;
    }
    Po(g, f);
    c[5759909] = 1;
    s$(23038612, j | 0, ((o$(j | 0) | 0) + 1) | 0) | 0;
    i = b;
    return;
  }
  function Ro() {
    Oo();
    return;
  }
  function So(e, f, g) {
    e = e | 0;
    f = f | 0;
    g = g | 0;
    var h = 0,
      j = 0,
      k = 0,
      l = 0,
      m = 0,
      n = 0,
      o = 0,
      p = 0,
      q = 0,
      r = 0,
      s = 0,
      t = 0,
      u = 0,
      v = 0,
      w = 0,
      x = 0,
      y = 0,
      z = 0,
      A = 0,
      B = 0,
      C = 0,
      D = 0,
      E = 0;
    h = i;
    i = (i + 8192) | 0;
    j = h | 0;
    Sr(
      43752,
      ((k = i), (i = (i + 1) | 0), (i = (i + 7) & -8), (c[k >> 2] = 0), k) | 0
    );
    i = k;
    if ((c[5502589] | 0) == -1) {
      c[5502589] = 0;
      c[5678718] = 0;
    }
    l = c[(f + 12) >> 2] | 0;
    m = (l + (c[(f + 20) >> 2] | 0)) | 0;
    f = (g | 0) == 0;
    a: do {
      if (f) {
        g = l;
        while (1) {
          if ((a[g] | 0) == 92) {
            n = g;
            break a;
          }
          o = (g + 1) | 0;
          if (o >>> 0 < m >>> 0) {
            g = o;
          } else {
            n = o;
            break;
          }
        }
      } else {
        g = l;
        while (1) {
          o = a[g] | 0;
          if (
            ((((o << 24) >> 24) | 0) == 92) |
            ((((o << 24) >> 24) | 0) == 47)
          ) {
            n = g;
            break a;
          }
          o = (g + 1) | 0;
          if (o >>> 0 < m >>> 0) {
            g = o;
          } else {
            n = o;
            break;
          }
        }
      }
    } while (0);
    l = m;
    g = (e + 28) | 0;
    b: do {
      if (f) {
        e = n;
        o = 0;
        while (1) {
          p = (e + 1) | 0;
          if (!(p >>> 0 < m >>> 0)) {
            q = o;
            break b;
          }
          if ((a[e] | 0) != 92) {
            q = o;
            break b;
          }
          if (((l - p) | 0) >>> 0 < 7 >>> 0) {
            q = o;
            break b;
          }
          a[(j + (o << 5) + 4) | 0] = a[p] | 0;
          a[(j + (o << 5) + 5) | 0] = a[(e + 2) | 0] | 0;
          a[(j + (o << 5) + 6) | 0] = a[(e + 3) | 0] | 0;
          a[(j + (o << 5) + 7) | 0] = a[(e + 4) | 0] | 0;
          c[(j + (o << 5)) >> 2] = 4;
          p = d[(e + 5) | 0] << 8;
          r = (j + (o << 5) + 24) | 0;
          b[r >> 1] = p;
          s = (e + 7) | 0;
          t = p | d[(e + 6) | 0];
          b[r >> 1] = t;
          b[r >> 1] = YB(t) | 0;
          t = a[s] | 0;
          if (
            !(((((t << 24) >> 24) | 0) == 92) | ((((t << 24) >> 24) | 0) == 47))
          ) {
            q = o;
            break b;
          }
          t = (o + 1) | 0;
          if ((o | 0) > 254) {
            q = t;
            break;
          } else {
            e = s;
            o = t;
          }
        }
      } else {
        o = n;
        e = 0;
        while (1) {
          t = (o + 1) | 0;
          if (!(t >>> 0 < m >>> 0)) {
            q = e;
            break b;
          }
          s = a[o] | 0;
          if ((((s << 24) >> 24) | 0) == 47) {
            if (((l - t) | 0) >>> 0 < 19 >>> 0) {
              q = e;
              break b;
            }
            a[(j + (e << 5) + 8) | 0] = a[t] | 0;
            a[(j + (e << 5) + 9) | 0] = a[(o + 2) | 0] | 0;
            a[(j + (e << 5) + 10) | 0] = a[(o + 3) | 0] | 0;
            a[(j + (e << 5) + 11) | 0] = a[(o + 4) | 0] | 0;
            a[(j + (e << 5) + 12) | 0] = a[(o + 5) | 0] | 0;
            a[(j + (e << 5) + 13) | 0] = a[(o + 6) | 0] | 0;
            a[(j + (e << 5) + 14) | 0] = a[(o + 7) | 0] | 0;
            a[(j + (e << 5) + 15) | 0] = a[(o + 8) | 0] | 0;
            a[(j + (e << 5) + 16) | 0] = a[(o + 9) | 0] | 0;
            a[(j + (e << 5) + 17) | 0] = a[(o + 10) | 0] | 0;
            a[(j + (e << 5) + 18) | 0] = a[(o + 11) | 0] | 0;
            a[(j + (e << 5) + 19) | 0] = a[(o + 12) | 0] | 0;
            a[(j + (e << 5) + 20) | 0] = a[(o + 13) | 0] | 0;
            a[(j + (e << 5) + 21) | 0] = a[(o + 14) | 0] | 0;
            a[(j + (e << 5) + 22) | 0] = a[(o + 15) | 0] | 0;
            a[(j + (e << 5) + 23) | 0] = a[(o + 16) | 0] | 0;
            c[(j + (e << 5)) >> 2] = 5;
            c[(j + (e << 5) + 28) >> 2] = c[g >> 2];
            u = (o + 17) | 0;
          } else if ((((s << 24) >> 24) | 0) == 92) {
            if (((l - t) | 0) >>> 0 < 7 >>> 0) {
              q = e;
              break b;
            }
            a[(j + (e << 5) + 4) | 0] = a[t] | 0;
            a[(j + (e << 5) + 5) | 0] = a[(o + 2) | 0] | 0;
            a[(j + (e << 5) + 6) | 0] = a[(o + 3) | 0] | 0;
            a[(j + (e << 5) + 7) | 0] = a[(o + 4) | 0] | 0;
            c[(j + (e << 5)) >> 2] = 4;
            u = (o + 5) | 0;
          } else {
            q = e;
            break b;
          }
          t = d[u] << 8;
          s = (j + (e << 5) + 24) | 0;
          b[s >> 1] = t;
          r = (u + 2) | 0;
          p = t | d[(u + 1) | 0];
          b[s >> 1] = p;
          b[s >> 1] = YB(p) | 0;
          p = a[r] | 0;
          if (
            !(((((p << 24) >> 24) | 0) == 92) | ((((p << 24) >> 24) | 0) == 47))
          ) {
            q = e;
            break b;
          }
          p = (e + 1) | 0;
          if ((e | 0) > 254) {
            q = p;
            break;
          } else {
            o = r;
            e = p;
          }
        }
      }
    } while (0);
    u = c[5502589] | 0;
    if (((q | 0) > 0) & ((u | 0) < 4096)) {
      l = u;
      g = 0;
      while (1) {
        m = (22010360 + ((l * 172) | 0)) | 0;
        n = (j + (g << 5)) | 0;
        c: do {
          if ((l | 0) > 0) {
            f = 0;
            while (1) {
              e = (f + 1) | 0;
              if (($v((22010360 + ((f * 172) | 0)) | 0, n) | 0) != 0) {
                v = l;
                break c;
              }
              if ((e | 0) < (l | 0)) {
                f = e;
              } else {
                w = 26;
                break;
              }
            }
          } else {
            w = 26;
          }
        } while (0);
        if ((w | 0) == 26) {
          w = 0;
          m$(m | 0, n | 0, 32) | 0;
          a[(22010392 + ((l * 172) | 0)) | 0] = 0;
          a[(22010424 + ((l * 172) | 0)) | 0] = 0;
          n$((22010496 + ((l * 172) | 0)) | 0, 0, 16) | 0;
          c[(22010512 + ((l * 172) | 0)) >> 2] = -1;
          a[(22010456 + ((l * 172) | 0)) | 0] = 0;
          c[(22010492 + ((l * 172) | 0)) >> 2] = 0;
          c[(22010488 + ((l * 172) | 0)) >> 2] = 0;
          c[(22010520 + ((l * 172) | 0)) >> 2] = 0;
          c[(22010524 + ((l * 172) | 0)) >> 2] = 0;
          c[(22010528 + ((l * 172) | 0)) >> 2] = 0;
          v = (l + 1) | 0;
        }
        f = (g + 1) | 0;
        if (((f | 0) < (q | 0)) & ((v | 0) < 4096)) {
          l = v;
          g = f;
        } else {
          x = v;
          y = f;
          break;
        }
      }
    } else {
      x = u;
      y = 0;
    }
    u = c[5678718] | 0;
    if (((x | 0) > 4095) & ((u | 0) < 4096) & ((y | 0) < (q | 0))) {
      z = y;
      A = u;
    } else {
      B = u;
      c[5502589] = x;
      C = (B + x) | 0;
      Sr(
        43424,
        ((k = i),
        (i = (i + 16) | 0),
        (c[k >> 2] = q),
        (c[(k + 8) >> 2] = C),
        k) | 0
      );
      i = k;
      D = 8192;
      E = 0;
      i = h;
      return;
    }
    while (1) {
      c[5678718] = A + 1;
      m$((22714876 + (A << 5)) | 0, (j + (z << 5)) | 0, 32) | 0;
      u = (z + 1) | 0;
      y = c[5678718] | 0;
      if (((u | 0) < (q | 0)) & ((y | 0) < 4096)) {
        z = u;
        A = y;
      } else {
        B = y;
        break;
      }
    }
    c[5502589] = x;
    C = (B + x) | 0;
    Sr(
      43424,
      ((k = i), (i = (i + 16) | 0), (c[k >> 2] = q), (c[(k + 8) >> 2] = C), k) |
        0
    );
    i = k;
    D = 8192;
    E = 0;
    i = h;
    return;
  }
  function To(b, d) {
    b = b | 0;
    d = d | 0;
    var e = 0,
      f = 0,
      g = 0,
      h = 0,
      j = 0,
      k = 0,
      l = 0,
      m = 0;
    e = i;
    f = b;
    b = i;
    i = (i + 32) | 0;
    m$(b, f, 32) | 0;
    lv(d);
    xv(d) | 0;
    Dr(Av(d) | 0);
    f = or(0) | 0;
    g = _v(b) | 0;
    Tr(
      43128,
      ((h = i), (i = (i + 16) | 0), (c[h >> 2] = g), (c[(h + 8) >> 2] = f), h) |
        0
    );
    i = h;
    if ((VB(f, 185960) | 0) == 0) {
      if ((c[5720394] | 0) != 3) {
        Tr(
          185688,
          ((h = i), (i = (i + 1) | 0), (i = (i + 7) & -8), (c[h >> 2] = 0), h) |
            0
        );
        i = h;
        i = e;
        return;
      }
      g = or(2) | 0;
      if ((a[g] | 0) == 0) {
        j = 0;
      } else {
        j = oj(g | 0) | 0;
      }
      k = or(3) | 0;
      do {
        if ((a[k] | 0) != 0) {
          l = oj(k | 0) | 0;
          m = c[((c[5457224] | 0) + 32) >> 2] | 0;
          if ((l | 0) == (m | 0)) {
            break;
          }
          Sr(
            185160,
            ((h = i),
            (i = (i + 16) | 0),
            (c[h >> 2] = l),
            (c[(h + 8) >> 2] = m),
            h) | 0
          );
          i = h;
        }
      } while (0);
      if (((a[g] | 0) != 0) & ((j | 0) == (c[5721688] | 0))) {
        j = oj(or(1) | 0) | 0;
        c[5721688] = j;
        c[5720394] = 4;
        c[5721431] = 0;
        c[5721430] = -99999;
        m$(22885688, b | 0, 32) | 0;
        Tr(184064, ((h = i), (i = (i + 8) | 0), (c[h >> 2] = j), h) | 0);
        i = h;
        i = e;
        return;
      } else {
        Sr(
          184512,
          ((h = i), (i = (i + 1) | 0), (i = (i + 7) & -8), (c[h >> 2] = 0), h) |
            0
        );
        i = h;
        i = e;
        return;
      }
    }
    if ((VB(f, 183608) | 0) == 0) {
      j = c[5720394] | 0;
      if (j >>> 0 > 4 >>> 0) {
        Sr(
          183280,
          ((h = i), (i = (i + 1) | 0), (i = (i + 7) & -8), (c[h >> 2] = 0), h) |
            0
        );
        i = h;
        i = e;
        return;
      }
      if ((j | 0) != 4) {
        Sr(
          182840,
          ((h = i), (i = (i + 1) | 0), (i = (i + 7) & -8), (c[h >> 2] = 0), h) |
            0
        );
        i = h;
        i = e;
        return;
      }
      if (($v(b, 22885688) | 0) == 0) {
        Sr(
          182544,
          ((h = i), (i = (i + 1) | 0), (i = (i + 7) & -8), (c[h >> 2] = 0), h) |
            0
        );
        i = h;
        i = e;
        return;
      }
      j = or(1) | 0;
      if ((a[j] | 0) == 0) {
        Sr(
          182312,
          ((h = i), (i = (i + 1) | 0), (i = (i + 7) & -8), (c[h >> 2] = 0), h) |
            0
        );
        i = h;
        i = e;
        return;
      }
      g = oj(j | 0) | 0;
      if ((g | 0) == (c[5721688] | 0)) {
        g = ~~+at(46800);
        Lv(0, 23043856, b, g, c[5721688] | 0, 0);
        c[5720394] = 5;
        c[5720396] = -9999;
        i = e;
        return;
      } else {
        Sr(
          182064,
          ((h = i), (i = (i + 1) | 0), (i = (i + 7) & -8), (c[h >> 2] = 0), h) |
            0
        );
        i = h;
        i = e;
        return;
      }
    }
    if ((VB(f, 181744) | 0) == 0) {
      Uo(b, d);
      i = e;
      return;
    }
    if ((VB(f, 181320) | 0) == 0) {
      Vo(b, d);
      i = e;
      return;
    }
    if ((VB(f, 180728) | 0) == 0) {
      g = or(1) | 0;
      Sv(0, b, 166448, ((h = i), (i = (i + 8) | 0), (c[h >> 2] = g), h) | 0);
      i = h;
      i = e;
      return;
    }
    if ((VB(f, 180328) | 0) == 0) {
      i = e;
      return;
    }
    if ((VB(f, 179880) | 0) == 0) {
      i = e;
      return;
    }
    if ((VB(f, 179312) | 0) == 0) {
      g = yv(d) | 0;
      TB(22885728, g, 1024);
      Sr(166448, ((h = i), (i = (i + 8) | 0), (c[h >> 2] = g), h) | 0);
      i = h;
      i = e;
      return;
    }
    if ((kC(f, 178816, 18) | 0) == 0) {
      So(b, d, 0);
      i = e;
      return;
    }
    if ((kC(f, 178424, 21) | 0) == 0) {
      So(b, d, 1);
      i = e;
      return;
    } else {
      Tr(
        177968,
        ((h = i), (i = (i + 1) | 0), (i = (i + 7) & -8), (c[h >> 2] = 0), h) | 0
      );
      i = h;
      i = e;
      return;
    }
  }
  function Uo(d, e) {
    d = d | 0;
    e = e | 0;
    var f = 0,
      g = 0,
      h = 0,
      j = 0,
      k = 0,
      l = 0,
      m = 0,
      n = 0,
      o = 0,
      p = 0,
      q = 0,
      r = 0,
      s = 0,
      t = 0,
      u = 0,
      v = 0;
    f = i;
    i = (i + 1024) | 0;
    g = d;
    d = i;
    i = (i + 32) | 0;
    m$(d, g, 32) | 0;
    g = f | 0;
    h = g | 0;
    j = yv(e) | 0;
    k = rC(j, 139080) | 0;
    do {
      if ((a[k] | 0) != 0) {
        if ((k$(k, c[((c[5457508] | 0) + 4) >> 2] | 0) | 0) != 0) {
          break;
        }
        l = oj(rC(j, 46496) | 0) | 0;
        if ((l | 0) == (c[((c[5457224] | 0) + 32) >> 2] | 0)) {
          m = 0;
        } else {
          Tr(138304, ((n = i), (i = (i + 8) | 0), (c[n >> 2] = j), n) | 0);
          i = n;
          o = 1024;
          p = 0;
          i = f;
          return;
        }
        a: while (1) {
          l = (23212832 + ((m * 1064) | 0)) | 0;
          do {
            if ((b[(23212856 + ((m * 1064) | 0)) >> 1] | 0) != 0) {
              q = (23212868 + ((m * 1064) | 0)) | 0;
              if ((c[q >> 2] | 0) != 0) {
                break;
              }
              if (($v(d, l) | 0) != 0) {
                r = 9;
                break a;
              }
            }
          } while (0);
          l = (m + 1) | 0;
          if ((l | 0) < 32) {
            m = l;
          } else {
            break;
          }
        }
        if ((r | 0) == 9) {
          l = wf() | 0;
          s = (l - (c[(23212864 + ((m * 1064) | 0)) >> 2] | 0)) | 0;
          c[q >> 2] = s;
          l = Zv(d) | 0;
          Tr(
            138216,
            ((n = i),
            (i = (i + 16) | 0),
            (c[n >> 2] = s),
            (c[(n + 8) >> 2] = l),
            n) | 0
          );
          i = n;
          l = (23212872 + ((m * 1064) | 0)) | 0;
          TB(l, j, 1024);
          s = c[d >> 2] | 0;
          if ((s | 0) == 5) {
            t = 2;
          } else if (((s | 0) == 3) | ((s | 0) == 4)) {
            t = 1;
          } else {
            t = 0;
          }
          s =
            pC(137944, ((n = i), (i = (i + 8) | 0), (c[n >> 2] = t), n) | 0) |
            0;
          i = n;
          vC(l, 138056, s);
          np(d, j, c[q >> 2] | 0);
          o = 1024;
          p = 0;
          i = f;
          return;
        }
        if ((c[5716992] | 0) == 0) {
          u = 0;
        } else {
          o = 1024;
          p = 0;
          i = f;
          return;
        }
        while (1) {
          if ((b[(21988364 + ((u * 172) | 0)) >> 1] | 0) == 0) {
            v = u;
            break;
          }
          s = (u + 1) | 0;
          if (($v(d, (21988340 + ((u * 172) | 0)) | 0) | 0) != 0) {
            r = 24;
            break;
          }
          if ((s | 0) < 128) {
            u = s;
          } else {
            v = s;
            break;
          }
        }
        if ((r | 0) == 24) {
          o = 1024;
          p = 0;
          i = f;
          return;
        }
        if ((v | 0) == 128) {
          Tr(
            137872,
            ((n = i),
            (i = (i + 1) | 0),
            (i = (i + 7) & -8),
            (c[n >> 2] = 0),
            n) | 0
          );
          i = n;
          o = 1024;
          p = 0;
          i = f;
          return;
        }
        c[5497084] = v + 1;
        m$((21988340 + ((v * 172) | 0)) | 0, d | 0, 32) | 0;
        a[(21988372 + ((v * 172) | 0)) | 0] = 0;
        a[(21988404 + ((v * 172) | 0)) | 0] = 0;
        n$((21988476 + ((v * 172) | 0)) | 0, 0, 16) | 0;
        c[(21988492 + ((v * 172) | 0)) >> 2] = -1;
        a[(21988436 + ((v * 172) | 0)) | 0] = 0;
        c[(21988472 + ((v * 172) | 0)) >> 2] = 0;
        c[(21988468 + ((v * 172) | 0)) >> 2] = 0;
        c[(21988500 + ((v * 172) | 0)) >> 2] = 0;
        c[(21988504 + ((v * 172) | 0)) >> 2] = 0;
        c[(21988508 + ((v * 172) | 0)) >> 2] = 0;
        TB(h, yv(e) | 0, 1024);
        if ((a[h] | 0) == 0) {
          o = 1024;
          p = 0;
          i = f;
          return;
        }
        s = o$(h | 0) | 0;
        if ((a[(g + (s - 1)) | 0] | 0) != 10) {
          l = (g + s) | 0;
          z = 10;
          a[l] = z;
          z = z >> 8;
          a[(l + 1) | 0] = z;
        }
        l = _v(d) | 0;
        Sr(
          137792,
          ((n = i),
          (i = (i + 16) | 0),
          (c[n >> 2] = l),
          (c[(n + 8) >> 2] = h),
          n) | 0
        );
        i = n;
        o = 1024;
        p = 0;
        i = f;
        return;
      }
    } while (0);
    Tr(138656, ((n = i), (i = (i + 8) | 0), (c[n >> 2] = j), n) | 0);
    i = n;
    o = 1024;
    p = 0;
    i = f;
    return;
  }
  function Vo(b, d) {
    b = b | 0;
    d = d | 0;
    var e = 0,
      f = 0,
      g = 0,
      h = 0,
      j = 0,
      k = 0,
      l = 0,
      m = 0,
      n = 0,
      o = 0,
      p = 0,
      q = 0,
      r = 0,
      s = 0,
      t = 0,
      u = 0,
      v = 0,
      w = 0,
      x = 0,
      y = 0,
      z = 0,
      A = 0,
      B = 0,
      C = 0,
      D = 0,
      E = 0,
      F = 0,
      G = 0;
    e = i;
    i = (i + 1040) | 0;
    f = b;
    b = i;
    i = (i + 32) | 0;
    m$(b, f, 32) | 0;
    f = e | 0;
    g = (e + 1024) | 0;
    h = (e + 1032) | 0;
    j = f | 0;
    k = 0;
    while (1) {
      l = (23084992 + ((k * 8244) | 0)) | 0;
      m = (k + 1) | 0;
      if (($v(b, l) | 0) != 0) {
        break;
      }
      if ((m | 0) < 16) {
        k = m;
      } else {
        n = 27;
        break;
      }
    }
    if ((n | 0) == 27) {
      o = 1024;
      p = 0;
      i = e;
      return;
    }
    n = (23076800 + ((k * 8244) | 0)) | 0;
    if ((n | 0) == 0) {
      o = 1024;
      p = 0;
      i = e;
      return;
    }
    m = Av(d) | 0;
    q = n | 0;
    $B(q, 8192, 166448, ((n = i), (i = (i + 8) | 0), (c[n >> 2] = m), n) | 0) |
      0;
    i = n;
    r = (23085036 + ((k * 8244) | 0)) | 0;
    a: do {
      if ((c[r >> 2] | 0) != 0) {
        Sr(
          137240,
          ((n = i), (i = (i + 1) | 0), (i = (i + 7) & -8), (c[n >> 2] = 0), n) |
            0
        );
        i = n;
        s = a[m] | 0;
        if ((s << 24) >> 24 == 0) {
          break;
        } else {
          t = m;
          u = 0;
          v = s;
        }
        b: while (1) {
          if ((((v << 24) >> 24) | 0) == 0) {
            break a;
          } else if ((((v << 24) >> 24) | 0) == 92) {
            s = (t + 1) | 0;
            w = 0;
            x = s;
            y = a[s] | 0;
          } else {
            w = 0;
            x = t;
            y = v;
          }
          while (1) {
            if ((y << 24) >> 24 == 0) {
              z = w;
              A = x;
              break;
            }
            s = (w + 1) | 0;
            a[(f + w) | 0] = y;
            if ((w | 0) > 1021) {
              z = s;
              A = x;
              break;
            }
            B = (x + 1) | 0;
            C = a[B] | 0;
            if ((C << 24) >> 24 == 92) {
              z = s;
              A = B;
              break;
            } else {
              w = s;
              x = B;
              y = C;
            }
          }
          a[(f + z) | 0] = 0;
          do {
            if ((u | 0) == 0) {
              Sr(136880, ((n = i), (i = (i + 8) | 0), (c[n >> 2] = j), n) | 0);
              i = n;
              D = (u + 1) | 0;
            } else {
              Sr(137168, ((n = i), (i = (i + 8) | 0), (c[n >> 2] = j), n) | 0);
              i = n;
              C = (u + 1) | 0;
              if ((C | 0) < 2) {
                D = C;
                break;
              }
              C = a[A] | 0;
              if ((C << 24) >> 24 == 0) {
                break a;
              } else {
                t = A;
                u = 0;
                v = C;
                continue b;
              }
            }
          } while (0);
          t = A;
          u = D;
          v = a[A] | 0;
        }
      }
    } while (0);
    A = o$(q | 0) | 0;
    $B(
      (23076800 + ((k * 8244) | 0) + A) | 0,
      (8192 - A) | 0,
      136680,
      ((n = i), (i = (i + 1) | 0), (i = (i + 7) & -8), (c[n >> 2] = 0), n) | 0
    ) | 0;
    i = n;
    if ((c[r >> 2] | 0) != 0) {
      Sr(
        136608,
        ((n = i), (i = (i + 1) | 0), (i = (i + 7) & -8), (c[n >> 2] = 0), n) | 0
      );
      i = n;
      Sr(
        136400,
        ((n = i), (i = (i + 1) | 0), (i = (i + 7) & -8), (c[n >> 2] = 0), n) | 0
      );
      i = n;
    }
    A = Av(d) | 0;
    v = (a[A] | 0) == 0;
    D = o$(q | 0) | 0;
    u = (23076800 + ((k * 8244) | 0) + D) | 0;
    t = (8192 - D) | 0;
    if (v) {
      E = u;
      F = t;
    } else {
      v = A;
      A = 0;
      D = u;
      u = t;
      while (1) {
        $B(D, u, 136352, ((n = i), (i = (i + 8) | 0), (c[n >> 2] = v), n) | 0) |
          0;
        i = n;
        if ((c[r >> 2] | 0) != 0) {
          c[h >> 2] = 0;
          c[g >> 2] = 0;
          qi(
            v | 0,
            136344,
            ((n = i),
            (i = (i + 16) | 0),
            (c[n >> 2] = g),
            (c[(n + 8) >> 2] = h),
            n) | 0
          ) | 0;
          i = n;
          t = sg(v | 0, 32) | 0;
          if ((t | 0) == 0) {
            G = 0;
          } else {
            G = sg((t + 1) | 0, 32) | 0;
          }
          t = c[g >> 2] | 0;
          j = c[h >> 2] | 0;
          Sr(
            136176,
            ((n = i),
            (i = (i + 32) | 0),
            (c[n >> 2] = A),
            (c[(n + 8) >> 2] = t),
            (c[(n + 16) >> 2] = j),
            (c[(n + 24) >> 2] = (G | 0) == 0 ? 136208 : (G + 1) | 0),
            n) | 0
          );
          i = n;
        }
        j = Av(d) | 0;
        t = (a[j] | 0) == 0;
        z = o$(q | 0) | 0;
        f = (23076800 + ((k * 8244) | 0) + z) | 0;
        y = (8192 - z) | 0;
        if (t) {
          E = f;
          F = y;
          break;
        } else {
          v = j;
          A = (A + 1) | 0;
          D = f;
          u = y;
        }
      }
    }
    $B(
      E,
      F,
      136680,
      ((n = i), (i = (i + 1) | 0), (i = (i + 7) & -8), (c[n >> 2] = 0), n) | 0
    ) | 0;
    i = n;
    c[(23085024 + ((k * 8244) | 0)) >> 2] = Bs() | 0;
    m$(l | 0, b | 0, 32) | 0;
    c[(23085032 + ((k * 8244) | 0)) >> 2] = 0;
    if ((c[r >> 2] | 0) == 0) {
      o = 1024;
      p = 0;
      i = e;
      return;
    }
    c[(23085040 + ((k * 8244) | 0)) >> 2] = 1;
    o = 1024;
    p = 0;
    i = e;
    return;
  }
  function Wo(a, b) {
    a = a | 0;
    b = b | 0;
    var d = 0,
      e = 0,
      f = 0,
      g = 0,
      h = 0;
    d = i;
    i = (i + 8) | 0;
    e = a;
    a = i;
    i = (i + 32) | 0;
    m$(a, e, 32) | 0;
    e = d | 0;
    c[5720397] = c[5497082];
    f = (b + 20) | 0;
    g = c[f >> 2] | 0;
    do {
      if ((g | 0) > 3) {
        if (!((c[c[(b + 12) >> 2] >> 2] | 0) == -1)) {
          break;
        }
        To(a, b);
        i = d;
        return;
      }
    } while (0);
    if ((c[5720394] | 0) >>> 0 < 5 >>> 0) {
      i = d;
      return;
    }
    if ((g | 0) < 4) {
      g = _v(a) | 0;
      Sr(177472, ((h = i), (i = (i + 8) | 0), (c[h >> 2] = g), h) | 0);
      i = h;
      i = d;
      return;
    }
    if (($v(a, 23043864) | 0) == 0) {
      g = _v(a) | 0;
      Tr(177032, ((h = i), (i = (i + 8) | 0), (c[h >> 2] = g), h) | 0);
      i = h;
      i = d;
      return;
    }
    if ((xp(23043856, b) | 0) == 0) {
      i = d;
      return;
    }
    h = c[(b + 24) >> 2] | 0;
    g = (b + 12) | 0;
    c[5738076] = c[c[g >> 2] >> 2];
    c[5720397] = c[5497082];
    Ep(b);
    if (((c[5759927] | 0) == 0) | ((c[5759929] | 0) != 0)) {
      i = d;
      return;
    }
    b = e;
    c[e >> 2] = c[5738076];
    gu(b, 4, c[5759931] | 0) | 0;
    a = ((c[f >> 2] | 0) - h) | 0;
    c[e >> 2] = a;
    gu(b, 4, c[5759931] | 0) | 0;
    gu(((c[g >> 2] | 0) + h) | 0, a, c[5759931] | 0) | 0;
    i = d;
    return;
  }
  function Xo() {
    var a = 0;
    a = c[5811720] | 0;
    if ((c[(a + 32) >> 2] | 0) == 0) {
      return ((c[(a + 20) >> 2] | 0) != 0) | 0;
    } else {
      return 1;
    }
    return 0;
  }
  function Yo() {
    var a = 0,
      b = 0,
      d = 0,
      e = 0,
      f = 0;
    a = i;
    if ((c[5720394] | 0) >>> 0 < 5 >>> 0) {
      i = a;
      return;
    }
    b = c[5811720] | 0;
    if ((c[(b + 32) >> 2] | 0) != 0) {
      i = a;
      return;
    }
    if ((c[(b + 20) >> 2] | 0) != 0) {
      i = a;
      return;
    }
    b = c[5389062] | 0;
    if (((b & 2) | 0) == 0) {
      i = a;
      return;
    }
    c[5389062] = b & -3;
    b = Dt(2) | 0;
    d = pC(176040, ((e = i), (i = (i + 8) | 0), (c[e >> 2] = b), e) | 0) | 0;
    i = e;
    b = c[5721690] | 0;
    if (((b - (c[5721691] | 0)) | 0) <= 63) {
      f = (b + 1) | 0;
      c[5721690] = f;
      TB((22886768 + ((f & 63) << 10)) | 0, d, 1024);
      i = a;
      return;
    }
    if ((c[5458544] | 0) == 0) {
      Ur(
        1,
        141040,
        ((e = i), (i = (i + 1) | 0), (i = (i + 7) & -8), (c[e >> 2] = 0), e) | 0
      );
      i = e;
    } else {
      i = a;
      return;
    }
  }
  function Zo(b) {
    b = b | 0;
    var d = 0,
      e = 0,
      f = 0,
      h = 0,
      j = 0,
      k = 0,
      l = 0,
      m = 0,
      n = 0.0,
      o = 0.0,
      p = 0,
      q = 0,
      r = 0,
      s = 0,
      t = 0,
      u = 0,
      v = 0;
    d = i;
    i = (i + 4208) | 0;
    e = d | 0;
    f = (d + 8) | 0;
    h = (d + 48) | 0;
    j = (d + 112) | 0;
    if ((c[((c[5458838] | 0) + 32) >> 2] | 0) == 0) {
      i = d;
      return;
    }
    k = c[6924864] | 0;
    do {
      if ((k | 0) != 0) {
        if ((rD(k) | 0) == 0) {
          break;
        }
        if ((sD(c[6924864] | 0) | 0) == -559038737) {
          i = d;
          return;
        }
        if ((c[5720394] | 0) != 6) {
          break;
        }
        ul();
      }
    } while (0);
    do {
      if ((c[5497074] | 0) == 0) {
        if ((c[5720394] | 0) != 1) {
          break;
        }
        if ((((Jn() | 0) & 2) | 0) != 0) {
          break;
        }
        if (
          !(
            ((c[((c[5451068] | 0) + 32) >> 2] | 0) == 0) &
            ((c[236124] | 0) != 0)
          )
        ) {
          break;
        }
        Ax();
        oD(
          c[236124] | 0,
          7,
          ((l = i), (i = (i + 8) | 0), (c[l >> 2] = 1), l) | 0
        ) | 0;
        i = l;
      } else {
        c[5497074] = 0;
        oD(
          c[236124] | 0,
          7,
          ((l = i), (i = (i + 8) | 0), (c[l >> 2] = 3), l) | 0
        ) | 0;
        i = l;
      }
    } while (0);
    do {
      if ((cq() | 0) == 0) {
        m = b;
      } else {
        k = c[5811772] | 0;
        if (((c[(k + 32) >> 2] | 0) == 0) | ((b | 0) == 0)) {
          m = b;
          break;
        }
        if ((c[5720394] | 0) != 8) {
          if ((c[((c[5811756] | 0) + 32) >> 2] | 0) == 0) {
            m = b;
            break;
          }
        }
        n = +g[(k + 28) >> 2] * +g[((c[5451064] | 0) + 28) >> 2];
        o = 1.0e3 / (n < 1.0e3 ? n : 1.0e3);
        n = +g[5760962] + (o > 1.0 ? o : 1.0);
        aq();
        k = ~~n;
        g[5760962] = n - +(k | 0);
        m = k;
      }
    } while (0);
    do {
      if ((c[((c[5811774] | 0) + 32) >> 2] | 0) != 0) {
        b = (c[5720394] | 0) != 8;
        k = (c[5759927] | 0) != 0;
        if (b | k | ((c[5759928] | 0) != 0)) {
          if (!(b & k)) {
            break;
          }
          k = e;
          c[e >> 2] = -1;
          gu(k, 4, c[5759931] | 0) | 0;
          gu(k, 4, c[5759931] | 0) | 0;
          Yt(c[5759931] | 0);
          c[5759931] = 0;
          c[5759927] = 0;
          c[5759926] = 0;
          Sr(
            148264,
            ((l = i),
            (i = (i + 1) | 0),
            (i = (i + 7) & -8),
            (c[l >> 2] = 0),
            l) | 0
          );
          i = l;
          break;
        }
        k = h | 0;
        b = j | 0;
        cs(f) | 0;
        p = ((c[(f + 16) >> 2] | 0) + 1) | 0;
        q = c[(f + 12) >> 2] | 0;
        r = c[(f + 8) >> 2] | 0;
        s = c[(f + 4) >> 2] | 0;
        t = c[f >> 2] | 0;
        u =
          pC(
            175688,
            ((l = i),
            (i = (i + 48) | 0),
            (c[l >> 2] = (c[(f + 20) >> 2] | 0) + 1900),
            (c[(l + 8) >> 2] = p),
            (c[(l + 16) >> 2] = q),
            (c[(l + 24) >> 2] = r),
            (c[(l + 32) >> 2] = s),
            (c[(l + 40) >> 2] = t),
            l) | 0
          ) | 0;
        i = l;
        TB(b, 22881592, 4096);
        t = sg(b | 0, 58) | 0;
        if ((t | 0) != 0) {
          a[t] = 46;
        }
        TB(k, QB(23267796) | 0, 64);
        SB(k, k, 64);
        t =
          pC(
            174848,
            ((l = i),
            (i = (i + 24) | 0),
            (c[l >> 2] = u),
            (c[(l + 8) >> 2] = b),
            (c[(l + 16) >> 2] = k),
            l) | 0
          ) | 0;
        i = l;
        rr(0, t);
      }
    } while (0);
    c[5497083] = m;
    c[5497081] = m;
    c[5497082] = (c[5497082] | 0) + m;
    if ((c[((c[5769182] | 0) + 32) >> 2] | 0) != 0) {
      Op(+(m | 0) * 0.25);
    }
    Yo();
    m = c[5811720] | 0;
    do {
      if ((c[(m + 32) >> 2] | 0) == 0) {
        if ((c[(m + 20) >> 2] | 0) != 0) {
          v = 29;
          break;
        }
        switch (c[5720394] | 0) {
          case 9:
          case 4:
          case 3:
          case 2:
          case 1:
          case 0: {
            v = 35;
            break;
          }
          default: {
            v = 32;
          }
        }
      } else {
        v = 29;
      }
    } while (0);
    do {
      if ((v | 0) == 29) {
        if ((c[((c[453916] | 0) + 32) >> 2] | 0) != 0) {
          v = 35;
          break;
        }
        switch (c[5720394] | 0) {
          case 9:
          case 4:
          case 3:
          case 2:
          case 1:
          case 0: {
            v = 35;
            break;
          }
          default: {
            v = 32;
          }
        }
      }
    } while (0);
    do {
      if ((v | 0) == 32) {
        if (
          !(
            +(((c[5497082] | 0) - (c[5720397] | 0)) | 0) >
            +g[((c[5769180] | 0) + 28) >> 2] * 1.0e3
          )
        ) {
          v = 35;
          break;
        }
        m = c[5811782] | 0;
        c[5811782] = m + 1;
        if ((m | 0) <= 4) {
          break;
        }
        Sr(
          176600,
          ((l = i), (i = (i + 1) | 0), (i = (i + 7) & -8), (c[l >> 2] = 0), l) |
            0
        );
        i = l;
        mo(1);
      }
    } while (0);
    if ((v | 0) == 35) {
      c[5811782] = 0;
    }
    xn();
    wo();
    yl();
    Sp();
    Hx();
    Jl();
    dm();
    c[5497080] = (c[5497080] | 0) + 1;
    i = d;
    return;
  }
  function _o(a) {
    a = a | 0;
    return fs(a, 3) | 0;
  }
  function $o() {
    var a = 0.0;
    a = +(wf() | 0);
    return ~~(a * +g[((c[5451064] | 0) + 28) >> 2]) | 0;
  }
  function ap(a, b, d) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    var e = 0,
      f = 0,
      g = 0,
      h = 0,
      j = 0;
    e = i;
    i = (i + 4112) | 0;
    f = e | 0;
    g = (e + 16) | 0;
    h = f;
    c[h >> 2] = d;
    c[(h + 4) >> 2] = 0;
    Xe(g | 0, 4096, b | 0, f | 0) | 0;
    if ((a | 0) == 1) {
      Tr(131200, ((j = i), (i = (i + 8) | 0), (c[j >> 2] = g), j) | 0);
      i = j;
    } else if ((a | 0) == 0) {
      Sr(166448, ((j = i), (i = (i + 8) | 0), (c[j >> 2] = g), j) | 0);
      i = j;
    } else if ((a | 0) == 2) {
      Sr(131304, ((j = i), (i = (i + 8) | 0), (c[j >> 2] = g), j) | 0);
      i = j;
    }
    i = e;
    return;
  }
  function bp() {
    var b = 0,
      d = 0,
      e = 0,
      f = 0,
      g = 0,
      h = 0;
    b = i;
    i = (i + 256) | 0;
    d = b | 0;
    e = or(1) | 0;
    if ((a[e] | 0) == 0) {
      dt(172680, d, 256);
      Sr(171728, ((f = i), (i = (i + 8) | 0), (c[f >> 2] = d), f) | 0);
      i = f;
      g = 256;
      h = 0;
      i = b;
      return;
    } else {
      kt(172680, e);
      kt(172184, e);
      g = 256;
      h = 0;
      i = b;
      return;
    }
  }
  function cp() {
    var a = 0,
      b = 0,
      d = 0,
      e = 0,
      f = 0,
      g = 0,
      h = 0,
      j = 0,
      k = 0,
      l = 0,
      m = 0;
    a = i;
    i = (i + 4096) | 0;
    b = a | 0;
    if ((c[5759928] | 0) == 0) {
      Sr(
        171384,
        ((d = i), (i = (i + 1) | 0), (i = (i + 7) & -8), (c[d >> 2] = 0), d) | 0
      );
      i = d;
      e = 4096;
      f = 0;
      i = a;
      return;
    }
    do {
      if ((nr() | 0) == 2) {
        g = or(1) | 0;
        $B(
          b,
          4096,
          171152,
          ((d = i), (i = (i + 8) | 0), (c[d >> 2] = g), d) | 0
        ) | 0;
        i = d;
      } else {
        g = 0;
        while (1) {
          h = ((g | 0) / 1e3) | 0;
          j = (((h * -1e3) | 0) + g) | 0;
          k = ((j | 0) / 100) | 0;
          l = (j + ((k * -100) | 0)) | 0;
          j = ((l | 0) / 10) | 0;
          $B(
            b,
            4096,
            170968,
            ((d = i),
            (i = (i + 32) | 0),
            (c[d >> 2] = h),
            (c[(d + 8) >> 2] = k),
            (c[(d + 16) >> 2] = j),
            (c[(d + 24) >> 2] = l + ((j * -10) | 0)),
            d) | 0
          ) | 0;
          i = d;
          j = (g + 1) | 0;
          if ((Ut(b) | 0) == 0) {
            m = 7;
            break;
          }
          if ((j | 0) < 1e4) {
            g = j;
          } else {
            break;
          }
        }
        if ((m | 0) == 7) {
          if ((g | 0) <= 9999) {
            break;
          }
        }
        Sr(
          170752,
          ((d = i), (i = (i + 1) | 0), (i = (i + 7) & -8), (c[d >> 2] = 0), d) |
            0
        );
        i = d;
        e = 4096;
        f = 0;
        i = a;
        return;
      }
    } while (0);
    Zp(b) | 0;
    e = 4096;
    f = 0;
    i = a;
    return;
  }
  function dp() {
    bq() | 0;
    return;
  }
  function ep() {
    var a = 0,
      b = 0,
      d = 0,
      e = 0,
      f = 0,
      g = 0,
      h = 0,
      j = 0,
      k = 0;
    a = i;
    i = (i + 2064) | 0;
    b = (a + 2048) | 0;
    d = (a + 2056) | 0;
    Sr(
      170536,
      ((e = i), (i = (i + 1) | 0), (i = (i + 7) & -8), (c[e >> 2] = 0), e) | 0
    );
    i = e;
    Zl();
    if ((c[5457512] | 0) == 0) {
      n$(23247128, 0, 1956976) | 0;
      c[5720394] = 1;
    }
    c[5497082] = 0;
    yn();
    c[5811726] = gt(170384, 118640, 0) | 0;
    c[5769180] = gt(170032, 169480, 0) | 0;
    c[5769188] = gt(169224, 118640, 256) | 0;
    c[5769190] = gt(168920, 118640, 256) | 0;
    c[5769194] = gt(168544, 118640, 256) | 0;
    c[5769192] = gt(168136, 118640, 256) | 0;
    c[5811752] = gt(167984, 118640, 256) | 0;
    c[4917282] = gt(167656, 28378632, 256) | 0;
    c[5811780] = gt(167512, 28378632, 256) | 0;
    c[5769186] = gt(167288, 118640, 0) | 0;
    c[5769184] = gt(166560, 28378632, 1) | 0;
    c[5811774] = gt(166064, 118640, 1) | 0;
    c[5811772] = gt(165736, 165432, 1) | 0;
    c[5811770] = gt(165144, 125520, 1) | 0;
    c[5811756] = gt(164808, 118640, 0) | 0;
    c[4917284] = gt(164392, 28378632, 0) | 0;
    c[5769178] = gt(164184, 164072, 1) | 0;
    c[5803206] = gt(163712, 164072, 1) | 0;
    c[5811776] = gt(163296, 162872, 0) | 0;
    c[5811738] = gt(162544, 162312, 1) | 0;
    c[5811722] = gt(162032, 125520, 1) | 0;
    c[5802178] = gt(161808, 125520, 1) | 0;
    c[5802176] = gt(161544, 161392, 1) | 0;
    c[5811734] = gt(161184, 118640, 1) | 0;
    c[5811754] = gt(160976, 125520, 1) | 0;
    c[5811730] = gt(160544, 118640, 1) | 0;
    f = gt(160104, 161392, 1) | 0;
    c[5811732] = f;
    Gt(f, 0.0010000000474974513, 5.0e4, 0);
    c[5769196] = gt(159800, 118640, 0) | 0;
    c[5811778] = gt(159304, 118640, 1) | 0;
    c[5811768] = gt(158976, 118640, 0) | 0;
    c[5811742] = gt(158792, 125520, 1) | 0;
    c[5769198] = gt(158680, 158520, 0) | 0;
    gt(158400, 125520, 1) | 0;
    c[4954642] = gt(158296, 157920, 1) | 0;
    c[4954638] = gt(157464, 157920, 1) | 0;
    c[4954644] = gt(157136, 156944, 1) | 0;
    c[4954640] = gt(156560, 156944, 1) | 0;
    c[4954646] = gt(156384, 118640, 1) | 0;
    c[5114352] = gt(156224, 157920, 1) | 0;
    c[5114340] = gt(156032, 155952, 1) | 0;
    c[5114356] = gt(155704, 155424, 1) | 0;
    c[5114348] = gt(155e3, 156944, 1) | 0;
    c[5114344] = gt(154832, 125520, 1) | 0;
    c[5114350] = gt(154600, 154424, 1) | 0;
    c[5114338] = gt(154192, 154088, 1) | 0;
    c[5114354] = gt(153992, 125520, 1) | 0;
    c[5114346] = gt(153840, 118640, 1) | 0;
    c[5114342] = gt(153712, 144096, 1) | 0;
    Gt(c[5114350] | 0, 0.0, 15.0, 1);
    Gt(c[5114338] | 0, 0.0, 15.0, 1);
    Gt(c[5114354] | 0, 0.0, 15.0, 1);
    Gt(c[5114346] | 0, 0.0, 15.0, 1);
    Gt(c[5114342] | 0, 0.0, 15.0, 1);
    c[5811736] = gt(153376, 28378632, 64) | 0;
    gt(153024, 152864, 1) | 0;
    c[5811740] = gt(152656, 125520, 1) | 0;
    c[5811744] = gt(152472, 125520, 1) | 0;
    c[5811762] = gt(152376, 152264, 1) | 0;
    gt(152104, 151992, 3) | 0;
    c[5803204] = gt(151832, 151480, 3) | 0;
    gt(151e3, 150712, 3) | 0;
    gt(172680, 150464, 3) | 0;
    gt(172184, 150464, 3) | 0;
    gt(150200, 150072, 3) | 0;
    gt(149928, 149784, 3) | 0;
    gt(149576, 149448, 5) | 0;
    gt(149088, 148720, 5) | 0;
    gt(148512, 154088, 3) | 0;
    gt(148296, 161392, 3) | 0;
    gt(147944, 147736, 3) | 0;
    gt(147576, 118640, 2) | 0;
    gt(147400, 147184, 3) | 0;
    gt(146880, 118640, 3) | 0;
    gt(146536, 28378632, 2) | 0;
    gt(146184, 125520, 3) | 0;
    gt(145944, 147736, 1) | 0;
    gt(145624, 118640, 64) | 0;
    Gr(145400, 242);
    Gr(145216, 82);
    Gr(145096, 12);
    Gr(144848, 40);
    Gr(144688, 6);
    Gr(123720, 24);
    Gr(144480, 282);
    Gr(144152, 102);
    Hr(144152, 98);
    Gr(143752, 388);
    Gr(143560, 374);
    Gr(143328, 88);
    Gr(142904, 86);
    Gr(142576, 190);
    Gr(142408, 114);
    Gr(142200, 134);
    Hr(142200, 20);
    Gr(142128, 84);
    Gr(141912, 108);
    Gr(141432, 322);
    Gr(141144, 298);
    Gr(140968, 288);
    Gr(172680, 382);
    Gr(140832, 70);
    Gr(140744, 244);
    Go();
    Qp();
    kt(140536, 125520);
    f = a | 0;
    g = Wt(132216, b) | 0;
    Yt(c[b >> 2] | 0);
    do {
      if ((g | 0) == 2048) {
        Sr(
          132152,
          ((e = i), (i = (i + 1) | 0), (i = (i + 7) & -8), (c[e >> 2] = 0), e) |
            0
        );
        i = e;
      } else {
        if ((g | 0) > 0) {
          Sr(132112, ((e = i), (i = (i + 8) | 0), (c[e >> 2] = 2048), e) | 0);
          i = e;
        }
        Sr(
          131984,
          ((e = i), (i = (i + 1) | 0), (i = (i + 7) & -8), (c[e >> 2] = 0), e) |
            0
        );
        i = e;
        Ws(f, 2048);
        h = Vt(132216) | 0;
        c[b >> 2] = h;
        if ((h | 0) == 0) {
          Sr(131800, ((e = i), (i = (i + 8) | 0), (c[e >> 2] = 132216), e) | 0);
          i = e;
          break;
        } else {
          gu(f, 2048, h) | 0;
          Yt(c[b >> 2] | 0);
          Sr(
            131600,
            ((e = i),
            (i = (i + 1) | 0),
            (i = (i + 7) & -8),
            (c[e >> 2] = 0),
            e) | 0
          );
          i = e;
          break;
        }
      }
    } while (0);
    gt(140216, 28378632, 66) | 0;
    b = Wt(132216, d) | 0;
    Yt(c[d >> 2] | 0);
    if ((b | 0) == 2048) {
      kt(140216, gv(132216, 2048, 0, 0) | 0);
      j = 4;
      k = 0;
      Sr(
        139928,
        ((e = i), (i = (i + 1) | 0), (i = (i + 7) & -8), (c[e >> 2] = 0), e) | 0
      );
      i = e;
      i = a;
      return;
    } else {
      kt(140216, 28378632);
      j = 4;
      k = 0;
      Sr(
        139928,
        ((e = i), (i = (i + 1) | 0), (i = (i + 7) & -8), (c[e >> 2] = 0), e) | 0
      );
      i = e;
      i = a;
      return;
    }
  }
  function fp(a, b) {
    a = a | 0;
    b = b | 0;
    var d = 0,
      e = 0;
    a = i;
    i = (i + 16) | 0;
    if ((b | 0) != 2) {
      i = a;
      return;
    }
    b = a | 0;
    d = c[((c[5457224] | 0) + 32) >> 2] | 0;
    $B(
      b,
      16,
      131496,
      ((e = i),
      (i = (i + 16) | 0),
      (c[e >> 2] = 185024),
      (c[(e + 8) >> 2] = d),
      e) | 0
    ) | 0;
    i = e;
    Ss(131424, b, 1, 1);
    i = a;
    return;
  }
  function gp() {
    var a = 0,
      d = 0,
      e = 0,
      f = 0,
      g = 0;
    a = i;
    i = (i + 32) | 0;
    d = a | 0;
    Sr(
      135952,
      ((e = i), (i = (i + 1) | 0), (i = (i + 7) & -8), (c[e >> 2] = 0), e) | 0
    );
    i = e;
    c[5497084] = 0;
    c[5716992] = 0;
    e = 0;
    do {
      f = (21988496 + ((e * 172) | 0)) | 0;
      g = c[f >> 2] | 0;
      n$((21988340 + ((e * 172) | 0)) | 0, 0, 172) | 0;
      c[f >> 2] = g;
      e = (e + 1) | 0;
    } while ((e | 0) < 128);
    n$(d | 0, 0, 32) | 0;
    e = (d + 24) | 0;
    g = d | 0;
    b[e >> 1] = YB(27960) | 0;
    c[g >> 2] = 3;
    Nv(0, 15, 135736, d);
    c[g >> 2] = 6;
    Nv(0, 15, 135736, d);
    b[e >> 1] = YB(27961) | 0;
    c[g >> 2] = 3;
    Nv(0, 15, 135736, d);
    c[g >> 2] = 6;
    Nv(0, 15, 135736, d);
    b[e >> 1] = YB(27962) | 0;
    c[g >> 2] = 3;
    Nv(0, 15, 135736, d);
    c[g >> 2] = 6;
    Nv(0, 15, 135736, d);
    b[e >> 1] = YB(27963) | 0;
    c[g >> 2] = 3;
    Nv(0, 15, 135736, d);
    c[g >> 2] = 6;
    Nv(0, 15, 135736, d);
    b[e >> 1] = YB(27960) | 0;
    c[g >> 2] = 3;
    Nv(0, 15, 135736, d);
    c[g >> 2] = 6;
    Nv(0, 15, 135736, d);
    b[e >> 1] = YB(27961) | 0;
    c[g >> 2] = 3;
    Nv(0, 15, 135736, d);
    c[g >> 2] = 6;
    Nv(0, 15, 135736, d);
    b[e >> 1] = YB(27962) | 0;
    c[g >> 2] = 3;
    Nv(0, 15, 135736, d);
    c[g >> 2] = 6;
    Nv(0, 15, 135736, d);
    b[e >> 1] = YB(27963) | 0;
    c[g >> 2] = 3;
    Nv(0, 15, 135736, d);
    c[g >> 2] = 6;
    Nv(0, 15, 135736, d);
    i = a;
    return;
  }
  function hp() {
    var d = 0,
      e = 0,
      f = 0,
      g = 0,
      h = 0,
      j = 0,
      k = 0,
      l = 0,
      m = 0,
      n = 0;
    d = i;
    i = (i + 1056) | 0;
    e = d | 0;
    f = (d + 32) | 0;
    g = nr() | 0;
    do {
      if ((g | 0) >= 3) {
        h = oj(or(1) | 0) | 0;
        if (h >>> 0 > 4 >>> 0) {
          break;
        }
        fe(
          f | 0,
          135232,
          ((j = i), (i = (i + 8) | 0), (c[j >> 2] = h + 1), j) | 0
        ) | 0;
        i = j;
        h = ct(f) | 0;
        if ((a[h] | 0) == 0) {
          Sr(
            135120,
            ((j = i),
            (i = (i + 1) | 0),
            (i = (i + 7) & -8),
            (c[j >> 2] = 0),
            j) | 0
          );
          i = j;
          k = 1024;
          l = 0;
          i = d;
          return;
        }
        m = Uv(h, e, 7) | 0;
        if ((m | 0) == 0) {
          Sr(134944, ((j = i), (i = (i + 8) | 0), (c[j >> 2] = h), j) | 0);
          i = j;
          k = 1024;
          l = 0;
          i = d;
          return;
        } else if ((m | 0) == 2) {
          b[(e + 24) >> 1] = YB(27950) | 0;
        }
        Sr(134864, ((j = i), (i = (i + 8) | 0), (c[j >> 2] = h), j) | 0);
        i = j;
        c[5502589] = -1;
        c[5716992] = 2;
        do {
          if ((((c[e >> 2] | 0) - 5) | 0) >>> 0 < 2 >>> 0) {
            h = (((bt(134848) | 0) & 1) | 0) == 0;
            m = c[((c[5457508] | 0) + 4) >> 2] | 0;
            n = or(2) | 0;
            if (h) {
              $B(
                f,
                1024,
                134720,
                ((j = i),
                (i = (i + 16) | 0),
                (c[j >> 2] = m),
                (c[(j + 8) >> 2] = n),
                j) | 0
              ) | 0;
              i = j;
              break;
            } else {
              $B(
                f,
                1024,
                134752,
                ((j = i),
                (i = (i + 16) | 0),
                (c[j >> 2] = m),
                (c[(j + 8) >> 2] = n),
                j) | 0
              ) | 0;
              i = j;
              break;
            }
          } else {
            if ((VB(c[((c[5457508] | 0) + 4) >> 2] | 0, 134504) | 0) == 0) {
              n = or(2) | 0;
              $B(
                f,
                1024,
                134288,
                ((j = i), (i = (i + 8) | 0), (c[j >> 2] = n), j) | 0
              ) | 0;
              i = j;
              break;
            } else {
              n = c[((c[5457508] | 0) + 4) >> 2] | 0;
              m = or(2) | 0;
              $B(
                f,
                1024,
                134024,
                ((j = i),
                (i = (i + 16) | 0),
                (c[j >> 2] = n),
                (c[(j + 8) >> 2] = m),
                j) | 0
              ) | 0;
              i = j;
              break;
            }
          }
        } while (0);
        if ((g | 0) > 3) {
          m = 3;
          do {
            XB(f, 1024, 105288);
            XB(f, 1024, or(m) | 0);
            m = (m + 1) | 0;
          } while ((m | 0) < (g | 0));
        }
        Sv(1, e, 166448, ((j = i), (i = (i + 8) | 0), (c[j >> 2] = f), j) | 0);
        i = j;
        k = 1024;
        l = 0;
        i = d;
        return;
      }
    } while (0);
    Sr(135432, ((j = i), (i = (i + 8) | 0), (c[j >> 2] = 4), j) | 0);
    i = j;
    k = 1024;
    l = 0;
    i = d;
    return;
  }
  function ip(a, b) {
    a = a | 0;
    b = b | 0;
    if ((b | 0) != 2) {
      return;
    }
    b = yC(a, 1, 105288) | 0;
    if (!(b >>> 0 > a >>> 0)) {
      return;
    }
    Ts(b, 1, 1);
    return;
  }
  function jp() {
    var a = 0,
      d = 0,
      e = 0,
      f = 0,
      g = 0,
      h = 0,
      j = 0,
      k = 0,
      l = 0,
      m = 0,
      n = 0,
      o = 0,
      p = 0,
      q = 0,
      r = 0,
      s = 0,
      t = 0;
    a = i;
    i = (i + 32) | 0;
    d = a | 0;
    e = nr() | 0;
    if (((e - 2) | 0) >>> 0 > 1 >>> 0) {
      Sr(
        133640,
        ((f = i), (i = (i + 1) | 0), (i = (i + 7) & -8), (c[f >> 2] = 0), f) | 0
      );
      i = f;
      i = a;
      return;
    }
    g = or(1) | 0;
    if ((e | 0) == 2) {
      h = 7;
      j = g;
    } else {
      do {
        if ((k$(g, 113736) | 0) == 0) {
          k = 4;
        } else {
          if ((k$(or(1) | 0, 112808) | 0) == 0) {
            k = 5;
            break;
          }
          Sr(
            111928,
            ((f = i),
            (i = (i + 1) | 0),
            (i = (i + 7) & -8),
            (c[f >> 2] = 0),
            f) | 0
          );
          i = f;
          k = 7;
        }
      } while (0);
      h = k;
      j = or(2) | 0;
    }
    k = d;
    n$(k | 0, 0, 32) | 0;
    if ((Uv(j, d, h) | 0) == 0) {
      i = a;
      return;
    } else {
      l = 23212832;
      m = 0;
    }
    while (1) {
      n = (l + 24) | 0;
      if ((b[n >> 1] | 0) == 0) {
        o = 13;
        break;
      }
      h = c[(l + 36) >> 2] | 0;
      if ((h | 0) == 0) {
        j = wf() | 0;
        if (((j - (c[(l + 32) >> 2] | 0)) | 0) >= 500) {
          o = 13;
          break;
        }
      } else {
        if ((h | 0) >= 500) {
          o = 13;
          break;
        }
      }
      h = (m + 1) | 0;
      if ((h | 0) < 32) {
        l = (l + 1064) | 0;
        m = h;
      } else {
        p = 23212832;
        q = 23212832;
        r = -2147483648;
        s = 0;
        o = 15;
        break;
      }
    }
    if ((o | 0) == 13) {
      b[n >> 1] = 0;
      t = l;
    } else if ((o | 0) == 15) {
      while (1) {
        o = 0;
        l = wf() | 0;
        n = (l - (c[(p + 32) >> 2] | 0)) | 0;
        l = (n | 0) > (r | 0);
        m = l ? p : q;
        h = (s + 1) | 0;
        if ((h | 0) < 32) {
          p = (p + 1064) | 0;
          q = m;
          r = l ? n : r;
          s = h;
          o = 15;
        } else {
          t = m;
          break;
        }
      }
    }
    m$(t | 0, k | 0, 32) | 0;
    c[(t + 32) >> 2] = wf() | 0;
    c[(t + 36) >> 2] = 0;
    np(t | 0, 0, 0);
    Sv(
      0,
      d,
      133536,
      ((f = i), (i = (i + 1) | 0), (i = (i + 7) & -8), (c[f >> 2] = 0), f) | 0
    );
    i = f;
    i = a;
    return;
  }
  function kp() {
    var a = 0,
      b = 0,
      d = 0,
      e = 0,
      f = 0,
      g = 0,
      h = 0,
      j = 0,
      k = 0,
      l = 0,
      m = 0,
      n = 0,
      o = 0,
      p = 0,
      q = 0,
      r = 0,
      s = 0,
      t = 0,
      u = 0;
    a = i;
    i = (i + 64) | 0;
    b = a | 0;
    d = (a + 32) | 0;
    e = nr() | 0;
    do {
      if (((e - 2) | 0) >>> 0 > 1 >>> 0) {
        if (!(((c[5720394] | 0) != 8) | ((c[5759928] | 0) != 0))) {
          f = 22885688;
          break;
        }
        Sr(
          121168,
          ((g = i), (i = (i + 1) | 0), (i = (i + 7) & -8), (c[g >> 2] = 0), g) |
            0
        );
        i = g;
        Sr(
          133344,
          ((g = i), (i = (i + 1) | 0), (i = (i + 7) & -8), (c[g >> 2] = 0), g) |
            0
        );
        i = g;
        i = a;
        return;
      } else {
        n$(d | 0, 0, 32) | 0;
        h = or(1) | 0;
        if ((e | 0) == 2) {
          j = 7;
          k = h;
        } else {
          do {
            if ((k$(h, 113736) | 0) == 0) {
              l = 4;
            } else {
              if ((k$(or(1) | 0, 112808) | 0) == 0) {
                l = 5;
                break;
              }
              Sr(
                111928,
                ((g = i),
                (i = (i + 1) | 0),
                (i = (i + 7) & -8),
                (c[g >> 2] = 0),
                g) | 0
              );
              i = g;
              l = 7;
            }
          } while (0);
          j = l;
          k = or(2) | 0;
        }
        if ((Uv(k, d, j) | 0) != 0) {
          f = d;
          break;
        }
        i = a;
        return;
      }
    } while (0);
    Sv(
      0,
      f,
      137744,
      ((g = i), (i = (i + 1) | 0), (i = (i + 7) & -8), (c[g >> 2] = 0), g) | 0
    );
    i = g;
    g = f;
    m$(b | 0, g | 0, 32) | 0;
    f = 0;
    while (1) {
      d = (f + 1) | 0;
      if (($v(b, (23084992 + ((f * 8244) | 0)) | 0) | 0) != 0) {
        m = 13;
        break;
      }
      if ((d | 0) < 16) {
        f = d;
      } else {
        n = 0;
        m = 15;
        break;
      }
    }
    do {
      if ((m | 0) == 13) {
        o = (23076800 + ((f * 8244) | 0)) | 0;
      } else if ((m | 0) == 15) {
        while (1) {
          m = 0;
          b = (n + 1) | 0;
          if ((c[(23085040 + ((n * 8244) | 0)) >> 2] | 0) != 0) {
            m = 16;
            break;
          }
          if ((b | 0) < 16) {
            n = b;
            m = 15;
          } else {
            p = 0;
            q = -1;
            r = 0;
            s = 1;
            break;
          }
        }
        if ((m | 0) == 16) {
          o = (23076800 + ((n * 8244) | 0)) | 0;
          break;
        }
        while (1) {
          b = c[(23085028 + ((p * 8244) | 0)) >> 2] | 0;
          d = s | ((b | 0) < (r | 0));
          t = d ? p : q;
          j = (p + 1) | 0;
          u = (t | 0) == -1;
          if ((j | 0) < 16) {
            p = j;
            q = t;
            r = d ? b : r;
            s = u;
          } else {
            break;
          }
        }
        if (u) {
          b = ((c[542752] | 0) + 1) | 0;
          c[542752] = b;
          o = (23076800 + (((b & 15) * 8244) | 0)) | 0;
          break;
        } else {
          o = (23076800 + ((t * 8244) | 0)) | 0;
          break;
        }
      }
    } while (0);
    m$((o + 8192) | 0, g | 0, 32) | 0;
    c[(o + 8236) >> 2] = 1;
    c[(o + 8232) >> 2] = 1;
    i = a;
    return;
  }
  function lp() {
    ew();
    return;
  }
  function mp(b, d, e) {
    b = b | 0;
    d = d | 0;
    e = e | 0;
    var f = 0;
    e = i;
    f = c[5458838] | 0;
    if ((f | 0) == 0) {
      i = e;
      return;
    }
    if ((c[(f + 32) >> 2] | 0) == 0) {
      i = e;
      return;
    }
    Sr(139792, ((f = i), (i = (i + 8) | 0), (c[f >> 2] = b), f) | 0);
    i = f;
    if (a[186992] | 0) {
      Sr(
        139712,
        ((f = i), (i = (i + 1) | 0), (i = (i + 7) & -8), (c[f >> 2] = 0), f) | 0
      );
      i = f;
      i = e;
      return;
    }
    a[186992] = 1;
    if ((d | 0) != 0) {
      mo(1);
    }
    so(1);
    if ((c[((c[5451068] | 0) + 32) >> 2] | 0) == 0) {
      ms();
      lq();
    } else {
      ps();
    }
    Sx();
    c[5497076] = 0;
    Ir(145400);
    Ir(145216);
    Ir(145096);
    Ir(144848);
    Ir(144688);
    Ir(123720);
    Ir(144480);
    Ir(144152);
    Ir(143752);
    Ir(143560);
    Ir(143328);
    Ir(142904);
    Ir(142576);
    Ir(142408);
    Ir(142200);
    Ir(142128);
    Ir(141912);
    Ir(141432);
    Ir(141144);
    Ir(140968);
    Ir(172680);
    Ir(140832);
    Ir(140744);
    zn();
    _l();
    kt(140536, 118640);
    a[186992] = 0;
    n$(21988296, 0, 893280) | 0;
    In(0);
    Sr(
      139384,
      ((f = i), (i = (i + 1) | 0), (i = (i + 7) & -8), (c[f >> 2] = 0), f) | 0
    );
    i = f;
    i = e;
    return;
  }
  function np(a, b, c) {
    a = a | 0;
    b = b | 0;
    c = c | 0;
    var d = 0,
      e = 0,
      f = 0,
      g = 0,
      h = 0;
    d = i;
    e = a;
    a = i;
    i = (i + 32) | 0;
    m$(a, e, 32) | 0;
    e = 0;
    while (1) {
      f = (21988340 + ((e * 172) | 0)) | 0;
      if (($v(a, f | 0) | 0) != 0) {
        vp(f, b, c);
      }
      f = (e + 1) | 0;
      if ((f | 0) < 128) {
        e = f;
      } else {
        g = 0;
        break;
      }
    }
    while (1) {
      e = (22010360 + ((g * 172) | 0)) | 0;
      if (($v(a, e | 0) | 0) != 0) {
        vp(e, b, c);
      }
      e = (g + 1) | 0;
      if ((e | 0) < 4096) {
        g = e;
      } else {
        h = 0;
        break;
      }
    }
    do {
      g = (22845952 + ((h * 172) | 0)) | 0;
      if (($v(a, g | 0) | 0) != 0) {
        vp(g, b, c);
      }
      h = (h + 1) | 0;
    } while ((h | 0) < 128);
    i = d;
    return;
  }
  function op(a, d, e) {
    a = a | 0;
    d = d | 0;
    e = e | 0;
    var f = 0,
      g = 0,
      h = 0,
      j = 0,
      k = 0,
      l = 0,
      m = 0,
      n = 0,
      o = 0,
      p = 0,
      q = 0,
      r = 0,
      s = 0,
      t = 0,
      u = 0,
      v = 0,
      w = 0;
    f = i;
    i = (i + 64) | 0;
    g = f | 0;
    h = (f + 32) | 0;
    if ((a | 0) == 0) {
      b[11542508] = 0;
      c[5771260] = 1;
      b[11546630] = 0;
      c[5773321] = 1;
      b[11550752] = 0;
      c[5775382] = 1;
      b[11554874] = 0;
      c[5777443] = 1;
      b[11558996] = 0;
      c[5779504] = 1;
      b[11563118] = 0;
      c[5781565] = 1;
      b[11567240] = 0;
      c[5783626] = 1;
      b[11571362] = 0;
      c[5785687] = 1;
      b[11575484] = 0;
      c[5787748] = 1;
      b[11579606] = 0;
      c[5789809] = 1;
      b[11583728] = 0;
      c[5791870] = 1;
      b[11587850] = 0;
      c[5793931] = 1;
      b[11591972] = 0;
      c[5795992] = 1;
      b[11596094] = 0;
      c[5798053] = 1;
      b[11600216] = 0;
      c[5800114] = 1;
      b[11604338] = 0;
      c[5802175] = 1;
      j = 0;
      i = f;
      return j | 0;
    }
    if ((Uv(a, h, 7) | 0) == 0) {
      j = 0;
      i = f;
      return j | 0;
    }
    a = h;
    m$(g | 0, a | 0, 32) | 0;
    k = 0;
    while (1) {
      l = (k + 1) | 0;
      if (($v(g, (23084992 + ((k * 8244) | 0)) | 0) | 0) != 0) {
        m = 7;
        break;
      }
      if ((l | 0) < 16) {
        k = l;
      } else {
        n = 0;
        m = 9;
        break;
      }
    }
    do {
      if ((m | 0) == 7) {
        o = (23076800 + ((k * 8244) | 0)) | 0;
      } else if ((m | 0) == 9) {
        while (1) {
          m = 0;
          g = (n + 1) | 0;
          if ((c[(23085040 + ((n * 8244) | 0)) >> 2] | 0) != 0) {
            m = 10;
            break;
          }
          if ((g | 0) < 16) {
            n = g;
            m = 9;
          } else {
            p = 0;
            q = -1;
            r = 0;
            s = 1;
            break;
          }
        }
        if ((m | 0) == 10) {
          o = (23076800 + ((n * 8244) | 0)) | 0;
          break;
        }
        while (1) {
          g = c[(23085028 + ((p * 8244) | 0)) >> 2] | 0;
          l = s | ((g | 0) < (r | 0));
          t = l ? p : q;
          u = (p + 1) | 0;
          v = (t | 0) == -1;
          if ((u | 0) < 16) {
            p = u;
            q = t;
            r = l ? g : r;
            s = v;
          } else {
            break;
          }
        }
        if (v) {
          g = ((c[542752] | 0) + 1) | 0;
          c[542752] = g;
          o = (23076800 + (((g & 15) * 8244) | 0)) | 0;
          break;
        } else {
          o = (23076800 + ((t * 8244) | 0)) | 0;
          break;
        }
      }
    } while (0);
    if ((d | 0) == 0) {
      c[(o + 8240) >> 2] = 1;
      j = 0;
      i = f;
      return j | 0;
    }
    t = (o + 8192) | 0;
    if (($v(h, t) | 0) == 0) {
      v = (o + 8240) | 0;
      if ((c[v >> 2] | 0) == 0) {
        j = 0;
        i = f;
        return j | 0;
      }
      m$(t | 0, a | 0, 32) | 0;
      c[(o + 8236) >> 2] = 0;
      c[(o + 8232) >> 2] = 1;
      c[v >> 2] = 0;
      c[(o + 8228) >> 2] = Bs() | 0;
      c[(o + 8224) >> 2] = 0;
      Sv(
        0,
        h,
        137744,
        ((w = i), (i = (i + 1) | 0), (i = (i + 7) & -8), (c[w >> 2] = 0), w) | 0
      );
      i = w;
      j = 0;
      i = f;
      return j | 0;
    }
    v = (o + 8232) | 0;
    if ((c[v >> 2] | 0) == 0) {
      TB(d, o | 0, e);
      c[(o + 8240) >> 2] = 1;
      c[(o + 8228) >> 2] = 0;
      j = 1;
      i = f;
      return j | 0;
    }
    e = (o + 8228) | 0;
    d = c[e >> 2] | 0;
    a = Bs() | 0;
    if ((d | 0) >= ((a - (c[((c[5769198] | 0) + 32) >> 2] | 0)) | 0)) {
      j = 0;
      i = f;
      return j | 0;
    }
    c[(o + 8236) >> 2] = 0;
    c[v >> 2] = 1;
    c[(o + 8240) >> 2] = 0;
    c[(o + 8224) >> 2] = 0;
    c[e >> 2] = Bs() | 0;
    Sv(
      0,
      h,
      137744,
      ((w = i), (i = (i + 1) | 0), (i = (i + 7) & -8), (c[w >> 2] = 0), w) | 0
    );
    i = w;
    j = 0;
    i = f;
    return j | 0;
  }
  function pp(d, e, f, g) {
    d = d | 0;
    e = e | 0;
    f = f | 0;
    g = g | 0;
    var h = 0,
      i = 0,
      j = 0,
      k = 0,
      l = 0,
      m = 0,
      n = 0,
      o = 0;
    do {
      if (!(d >>> 0 > 31 >>> 0)) {
        h = (23212832 + ((d * 1064) | 0)) | 0;
        if ((b[(23212856 + ((d * 1064) | 0)) >> 1] | 0) == 0) {
          break;
        }
        TB(e, _v(h) | 0, f);
        i = (23212868 + ((d * 1064) | 0)) | 0;
        j = c[i >> 2] | 0;
        if ((j | 0) == 0) {
          k = wf() | 0;
          l = (k - (c[(23212864 + ((d * 1064) | 0)) >> 2] | 0)) | 0;
          k = bt(153024) | 0;
          m = (l | 0) < (((k | 0) < 100 ? 100 : k) | 0) ? 0 : l;
          n = c[i >> 2] | 0;
        } else {
          m = j;
          n = j;
        }
        np(h, (23212872 + ((d * 1064) | 0)) | 0, n);
        o = m;
        c[g >> 2] = o;
        return;
      }
    } while (0);
    a[e] = 0;
    o = 0;
    c[g >> 2] = o;
    return;
  }
  function qp(c, d, e) {
    c = c | 0;
    d = d | 0;
    e = e | 0;
    do {
      if (!(c >>> 0 > 31 >>> 0)) {
        if ((b[(23212856 + ((c * 1064) | 0)) >> 1] | 0) == 0) {
          break;
        }
        TB(d, (23212872 + ((c * 1064) | 0)) | 0, e);
        return;
      }
    } while (0);
    if ((e | 0) == 0) {
      return;
    }
    a[d] = 0;
    return;
  }
  function rp(a) {
    a = a | 0;
    if (a >>> 0 > 31 >>> 0) {
      return;
    }
    b[(23212856 + ((a * 1064) | 0)) >> 1] = 0;
    return;
  }
  function sp() {
    var a = 0,
      c = 0,
      d = 0,
      e = 0,
      f = 0;
    a = 0;
    c = 0;
    d = 23212832;
    while (1) {
      e = (((b[(d + 24) >> 1] | 0) != 0) + c) | 0;
      f = (a + 1) | 0;
      if ((f | 0) < 32) {
        a = f;
        c = e;
        d = (d + 1064) | 0;
      } else {
        break;
      }
    }
    return e | 0;
  }
  function tp(d) {
    d = d | 0;
    var e = 0,
      f = 0,
      g = 0,
      h = 0,
      j = 0,
      k = 0,
      l = 0,
      m = 0,
      n = 0,
      o = 0,
      p = 0,
      q = 0,
      r = 0,
      s = 0,
      t = 0,
      u = 0,
      v = 0,
      w = 0,
      x = 0,
      y = 0,
      z = 0,
      A = 0,
      B = 0,
      C = 0,
      D = 0,
      E = 0,
      F = 0;
    e = i;
    i = (i + 1032) | 0;
    f = (e + 1024) | 0;
    g = e | 0;
    if (d >>> 0 > 3 >>> 0) {
      h = 0;
      j = 1024;
      k = 0;
      i = e;
      return h | 0;
    }
    c[5716992] = d;
    l = 0;
    m = 0;
    n = 23212832;
    while (1) {
      o = (((b[(n + 24) >> 1] | 0) != 0) + m) | 0;
      p = (l + 1) | 0;
      if ((p | 0) < 32) {
        l = p;
        m = o;
        n = (n + 1064) | 0;
      } else {
        break;
      }
    }
    a: do {
      if ((o | 0) < 32) {
        if ((d | 0) == 2) {
          q = 22010360;
          r = 22010356;
        } else if ((d | 0) == 3) {
          q = 22845952;
          r = 22845948;
        } else if ((d | 0) == 0) {
          q = 21988340;
          r = 21988336;
        } else {
          h = 0;
          j = 1024;
          k = 0;
          i = e;
          return h | 0;
        }
        n = c[r >> 2] | 0;
        if ((n | 0) <= 0) {
          s = 0;
          t = o;
          break;
        }
        m = (d | 0) == 2;
        l = o;
        p = 0;
        u = 0;
        while (1) {
          v = (q + ((p * 172) | 0)) | 0;
          do {
            if ((c[(q + ((p * 172) | 0) + 156) >> 2] | 0) == 0) {
              w = u;
              x = l;
            } else {
              y = (q + ((p * 172) | 0) + 152) | 0;
              z = c[y >> 2] | 0;
              if ((z | 0) == 0) {
                A = c[5678718] | 0;
                if (!(m & ((A | 0) > 0))) {
                  w = u;
                  x = l;
                  break;
                }
                B = (A - 1) | 0;
                c[5678718] = B;
                m$(v | 0, (22714876 + (B << 5)) | 0, 32) | 0;
                a[(q + ((p * 172) | 0) + 32) | 0] = 0;
                a[(q + ((p * 172) | 0) + 64) | 0] = 0;
                n$((q + ((p * 172) | 0) + 136) | 0, 0, 16) | 0;
                c[y >> 2] = -1;
                a[(q + ((p * 172) | 0) + 96) | 0] = 0;
                c[(q + ((p * 172) | 0) + 132) >> 2] = 0;
                c[(q + ((p * 172) | 0) + 128) >> 2] = 0;
                c[(q + ((p * 172) | 0) + 160) >> 2] = 0;
                c[(q + ((p * 172) | 0) + 164) >> 2] = 0;
                c[(q + ((p * 172) | 0) + 168) >> 2] = 0;
                w = u;
                x = l;
                break;
              } else if ((z | 0) != (-1 | 0)) {
                w = u;
                x = l;
                break;
              }
              if ((l | 0) > 31) {
                s = u;
                t = l;
                break a;
              }
              z = v | 0;
              y = 0;
              while (1) {
                if ((b[(23212856 + ((y * 1064) | 0)) >> 1] | 0) != 0) {
                  if (($v((23212832 + ((y * 1064) | 0)) | 0, z) | 0) != 0) {
                    C = 17;
                    break;
                  }
                }
                B = (y + 1) | 0;
                if ((B | 0) < 32) {
                  y = B;
                } else {
                  D = 0;
                  break;
                }
              }
              if ((C | 0) == 17) {
                C = 0;
                if ((y | 0) > 31) {
                  D = 0;
                } else {
                  w = u;
                  x = l;
                  break;
                }
              }
              while (1) {
                z = (D + 1) | 0;
                if ((b[(23212856 + ((D * 1064) | 0)) >> 1] | 0) == 0) {
                  E = D;
                  break;
                }
                if ((z | 0) < 32) {
                  D = z;
                } else {
                  E = z;
                  break;
                }
              }
              y = (23212832 + ((E * 1064) | 0)) | 0;
              m$(y | 0, v | 0, 32) | 0;
              c[(23212864 + ((E * 1064) | 0)) >> 2] = wf() | 0;
              c[(23212868 + ((E * 1064) | 0)) >> 2] = 0;
              Sv(
                0,
                y | 0,
                133536,
                ((y = i),
                (i = (i + 1) | 0),
                (i = (i + 7) & -8),
                (c[y >> 2] = 0),
                y) | 0
              );
              i = y;
              w = 1;
              x = (l + 1) | 0;
            }
          } while (0);
          v = (p + 1) | 0;
          if ((v | 0) < (n | 0)) {
            l = x;
            p = v;
            u = w;
          } else {
            s = w;
            t = x;
            break;
          }
        }
      } else {
        s = 0;
        t = o;
      }
    } while (0);
    o = 0;
    x = (t | 0) == 0 ? s : 1;
    while (1) {
      s = (23212856 + ((o * 1064) | 0)) | 0;
      do {
        if ((b[s >> 1] | 0) == 0) {
          F = x;
        } else {
          pp(o, g, 1024, f);
          if ((c[f >> 2] | 0) == 0) {
            F = x;
            break;
          }
          b[s >> 1] = 0;
          F = 1;
        }
      } while (0);
      s = (o + 1) | 0;
      if ((s | 0) < 32) {
        o = s;
        x = F;
      } else {
        h = F;
        break;
      }
    }
    j = 1024;
    k = 0;
    i = e;
    return h | 0;
  }
  function up(a, b) {
    a = a | 0;
    b = b | 0;
    return 1;
  }
  function vp(a, b, d) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    if ((a | 0) == 0) {
      return;
    }
    if ((b | 0) != 0) {
      c[(a + 136) >> 2] = oj(rC(b, 133336) | 0) | 0;
      TB((a + 32) | 0, rC(b, 133320) | 0, 32);
      TB((a + 64) | 0, rC(b, 133176) | 0, 32);
      c[(a + 140) >> 2] = oj(rC(b, 133160) | 0) | 0;
      TB((a + 96) | 0, rC(b, 132992) | 0, 32);
      c[(a + 132) >> 2] = oj(rC(b, 132784) | 0) | 0;
      c[(a + 128) >> 2] = oj(rC(b, 138056) | 0) | 0;
      c[(a + 144) >> 2] = oj(rC(b, 132616) | 0) | 0;
      c[(a + 148) >> 2] = oj(rC(b, 132480) | 0) | 0;
      c[(a + 160) >> 2] = oj(rC(b, 132400) | 0) | 0;
      c[(a + 164) >> 2] = oj(rC(b, 132240) | 0) | 0;
      c[(a + 168) >> 2] = oj(rC(b, 132224) | 0) | 0;
    }
    c[(a + 152) >> 2] = d;
    return;
  }
  function wp(a, b) {
    a = a | 0;
    b = b | 0;
    var d = 0,
      e = 0;
    d = i;
    pv(b, 5);
    Ov(a, c[(b + 20) >> 2] | 0, c[(b + 12) >> 2] | 0);
    b = (a + 16444) | 0;
    if ((c[b >> 2] | 0) == 0) {
      i = d;
      return;
    }
    do {
      Mv(a);
      Tr(
        102240,
        ((e = i), (i = (i + 1) | 0), (i = (i + 7) & -8), (c[e >> 2] = 0), e) | 0
      );
      i = e;
    } while ((c[b >> 2] | 0) != 0);
    i = d;
    return;
  }
  function xp(a, b) {
    a = a | 0;
    b = b | 0;
    return ((Pv(a, b) | 0) != 0) | 0;
  }
  function yp(a, b, d) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    var e = 0,
      f = 0,
      g = 0,
      h = 0,
      j = 0,
      k = 0,
      l = 0,
      m = 0,
      n = 0,
      o = 0,
      p = 0,
      q = 0,
      r = 0,
      s = 0,
      t = 0,
      u = 0,
      v = 0,
      w = 0,
      x = 0,
      y = 0,
      z = 0,
      A = 0,
      B = 0,
      C = 0,
      D = 0,
      E = 0,
      F = 0,
      G = 0,
      H = 0,
      I = 0;
    e = i;
    c[(d + 532) >> 2] = c[5816965];
    f = (d + 528) | 0;
    c[f >> 2] = 0;
    do {
      if ((b | 0) == 0) {
        g = 99999;
        h = 0;
      } else {
        if ((c[(b + 528) >> 2] | 0) < 1) {
          g = 99999;
          h = 0;
          break;
        }
        d = (23500168 + (((c[(b + 532) >> 2] & 8191) * 208) | 0)) | 0;
        g = c[d >> 2] | 0;
        h = d;
      }
    } while (0);
    d = ov(a, 10) | 0;
    j = (a + 24) | 0;
    a: do {
      if ((d | 0) == 1023) {
        k = h;
        l = 0;
        m = g;
        n = (b + 528) | 0;
        o = (b + 532) | 0;
      } else {
        p = (a + 20) | 0;
        q = (b + 528) | 0;
        r = (b + 532) | 0;
        s = h;
        t = 0;
        u = g;
        v = d;
        while (1) {
          if ((c[j >> 2] | 0) > (c[p >> 2] | 0)) {
            break;
          } else {
            w = u;
            x = t;
            y = s;
          }
          b: while (1) {
            z = y;
            A = w;
            B = x;
            while (1) {
              if ((A | 0) >= (v | 0)) {
                break b;
              }
              if ((c[((c[5769190] | 0) + 32) >> 2] | 0) == 3) {
                Sr(
                  174968,
                  ((C = i),
                  (i = (i + 16) | 0),
                  (c[C >> 2] = c[j >> 2]),
                  (c[(C + 8) >> 2] = A),
                  C) | 0
                );
                i = C;
              }
              D = (23500168 + (((c[5816965] & 8191) * 208) | 0)) | 0;
              m$(D | 0, z | 0, 208) | 0;
              if ((c[D >> 2] | 0) != 1023) {
                c[5816965] = (c[5816965] | 0) + 1;
                c[f >> 2] = (c[f >> 2] | 0) + 1;
              }
              E = (B + 1) | 0;
              if ((E | 0) < (c[q >> 2] | 0)) {
                break;
              } else {
                A = 99999;
                B = E;
              }
            }
            z = (23500168 + (((((c[r >> 2] | 0) + E) & 8191) * 208) | 0)) | 0;
            w = c[z >> 2] | 0;
            x = E;
            y = z;
          }
          do {
            if ((A | 0) == (v | 0)) {
              if ((c[((c[5769190] | 0) + 32) >> 2] | 0) == 3) {
                Sr(
                  171464,
                  ((C = i),
                  (i = (i + 16) | 0),
                  (c[C >> 2] = c[j >> 2]),
                  (c[(C + 8) >> 2] = v),
                  C) | 0
                );
                i = C;
              }
              z = (23500168 + (((c[5816965] & 8191) * 208) | 0)) | 0;
              Hv(a, y, z, v);
              if ((c[z >> 2] | 0) != 1023) {
                c[5816965] = (c[5816965] | 0) + 1;
                c[f >> 2] = (c[f >> 2] | 0) + 1;
              }
              z = (B + 1) | 0;
              if ((z | 0) >= (c[q >> 2] | 0)) {
                F = 99999;
                G = z;
                H = y;
                break;
              }
              D = (23500168 + (((((c[r >> 2] | 0) + z) & 8191) * 208) | 0)) | 0;
              F = c[D >> 2] | 0;
              G = z;
              H = D;
            } else {
              if ((A | 0) <= (v | 0)) {
                F = A;
                G = B;
                H = y;
                break;
              }
              if ((c[((c[5769190] | 0) + 32) >> 2] | 0) == 3) {
                Sr(
                  168608,
                  ((C = i),
                  (i = (i + 16) | 0),
                  (c[C >> 2] = c[j >> 2]),
                  (c[(C + 8) >> 2] = v),
                  C) | 0
                );
                i = C;
              }
              D = (23500168 + (((c[5816965] & 8191) * 208) | 0)) | 0;
              Hv(a, (23287176 + ((v * 208) | 0)) | 0, D, v);
              if ((c[D >> 2] | 0) == 1023) {
                F = A;
                G = B;
                H = y;
                break;
              }
              c[5816965] = (c[5816965] | 0) + 1;
              c[f >> 2] = (c[f >> 2] | 0) + 1;
              F = A;
              G = B;
              H = y;
            }
          } while (0);
          D = ov(a, 10) | 0;
          if ((D | 0) == 1023) {
            k = H;
            l = G;
            m = F;
            n = q;
            o = r;
            break a;
          } else {
            s = H;
            t = G;
            u = F;
            v = D;
          }
        }
        Ur(
          1,
          179376,
          ((C = i), (i = (i + 1) | 0), (i = (i + 7) & -8), (c[C >> 2] = 0), C) |
            0
        );
        i = C;
      }
    } while (0);
    F = m;
    m = l;
    l = k;
    c: while (1) {
      k = l;
      G = F;
      H = m;
      while (1) {
        if ((G | 0) == 99999) {
          break c;
        }
        if ((c[((c[5769190] | 0) + 32) >> 2] | 0) == 3) {
          Sr(
            174968,
            ((C = i),
            (i = (i + 16) | 0),
            (c[C >> 2] = c[j >> 2]),
            (c[(C + 8) >> 2] = G),
            C) | 0
          );
          i = C;
        }
        a = (23500168 + (((c[5816965] & 8191) * 208) | 0)) | 0;
        m$(a | 0, k | 0, 208) | 0;
        if ((c[a >> 2] | 0) != 1023) {
          c[5816965] = (c[5816965] | 0) + 1;
          c[f >> 2] = (c[f >> 2] | 0) + 1;
        }
        I = (H + 1) | 0;
        if ((I | 0) < (c[n >> 2] | 0)) {
          break;
        } else {
          G = 99999;
          H = I;
        }
      }
      H = (23500168 + (((((c[o >> 2] | 0) + I) & 8191) * 208) | 0)) | 0;
      F = c[H >> 2] | 0;
      m = I;
      l = H;
    }
    i = e;
    return;
  }
  function zp(a) {
    a = a | 0;
    var b = 0,
      d = 0,
      e = 0,
      f = 0,
      g = 0,
      h = 0,
      j = 0,
      k = 0,
      l = 0,
      m = 0,
      n = 0,
      o = 0,
      p = 0;
    b = i;
    i = (i + 544) | 0;
    d = b | 0;
    e = d;
    n$(e | 0, 0, 536) | 0;
    c[(d + 536) >> 2] = c[5738077];
    c[(d + 8) >> 2] = xv(a) | 0;
    c[((c[5811720] | 0) + 20) >> 2] = 0;
    f = (d + 12) | 0;
    c[f >> 2] = c[5738076];
    g = vv(a) | 0;
    if ((g | 0) == 0) {
      c[(d + 16) >> 2] = -1;
    } else {
      c[(d + 16) >> 2] = (c[f >> 2] | 0) - g;
    }
    c[(d + 4) >> 2] = vv(a) | 0;
    g = c[(d + 16) >> 2] | 0;
    do {
      if ((g | 0) < 1) {
        c[d >> 2] = 1;
        c[5759929] = 0;
        h = 0;
      } else {
        j = g & 31;
        k = (23269896 + ((j * 540) | 0)) | 0;
        if ((c[k >> 2] | 0) == 0) {
          Sr(
            165168,
            ((l = i),
            (i = (i + 1) | 0),
            (i = (i + 7) & -8),
            (c[l >> 2] = 0),
            l) | 0
          );
          i = l;
          h = k;
          break;
        }
        if ((c[(23269908 + ((j * 540) | 0)) >> 2] | 0) != (g | 0)) {
          Sr(
            162064,
            ((l = i),
            (i = (i + 1) | 0),
            (i = (i + 7) & -8),
            (c[l >> 2] = 0),
            l) | 0
          );
          i = l;
          h = k;
          break;
        }
        if (
          (((c[5816965] | 0) - (c[(23270428 + ((j * 540) | 0)) >> 2] | 0)) |
            0) >
          7936
        ) {
          Sr(
            159064,
            ((l = i),
            (i = (i + 1) | 0),
            (i = (i + 7) & -8),
            (c[l >> 2] = 0),
            l) | 0
          );
          i = l;
          h = k;
          break;
        } else {
          c[d >> 2] = 1;
          h = k;
          break;
        }
      }
    } while (0);
    g = vv(a) | 0;
    if (g >>> 0 > 32 >>> 0) {
      Ur(1, 156648, ((l = i), (i = (i + 8) | 0), (c[l >> 2] = g), l) | 0);
      i = l;
    }
    Bv(a, (d + 24) | 0, g);
    if ((c[((c[5769190] | 0) + 32) >> 2] | 0) > 1) {
      Sr(
        183392,
        ((l = i),
        (i = (i + 16) | 0),
        (c[l >> 2] = (c[(a + 24) >> 2] | 0) - 1),
        (c[(l + 8) >> 2] = 154480),
        l) | 0
      );
      i = l;
    }
    if ((h | 0) == 0) {
      Jv(a, 0, (d + 60) | 0);
    } else {
      Jv(a, (h + 60) | 0, (d + 60) | 0);
    }
    if ((c[((c[5769190] | 0) + 32) >> 2] | 0) > 1) {
      Sr(
        183392,
        ((l = i),
        (i = (i + 16) | 0),
        (c[l >> 2] = (c[(a + 24) >> 2] | 0) - 1),
        (c[(l + 8) >> 2] = 152536),
        l) | 0
      );
      i = l;
    }
    yp(a, h, d);
    if ((c[d >> 2] | 0) == 0) {
      m = 540;
      n = 0;
      i = b;
      return;
    }
    d = ((c[5811786] | 0) + 1) | 0;
    h = c[f >> 2] | 0;
    f = ((h - d) | 0) > 31 ? (h - 31) | 0 : d;
    if ((f | 0) < (h | 0)) {
      d = f;
      do {
        c[(23269896 + (((d & 31) * 540) | 0)) >> 2] = 0;
        d = (d + 1) | 0;
      } while ((d | 0) < (h | 0));
    }
    m$(23247132, e | 0, 540) | 0;
    c[5811788] = 999;
    e = c[5760976] | 0;
    h = c[5811798] | 0;
    d = 0;
    do {
      o = (31 - d + e) & 31;
      d = (d + 1) | 0;
      if ((h | 0) >= (c[(23269500 + ((o * 12) | 0)) >> 2] | 0)) {
        p = 28;
        break;
      }
    } while ((d | 0) < 32);
    if ((p | 0) == 28) {
      c[5811788] = (c[5497082] | 0) - (c[(23269504 + ((o * 12) | 0)) >> 2] | 0);
    }
    m$((23269896 + (((c[5811786] & 31) * 540) | 0)) | 0, 23247132, 540) | 0;
    if ((c[((c[5769190] | 0) + 32) >> 2] | 0) == 3) {
      o = c[5811787] | 0;
      p = c[5811788] | 0;
      Sr(
        150304,
        ((l = i),
        (i = (i + 24) | 0),
        (c[l >> 2] = c[5811786]),
        (c[(l + 8) >> 2] = o),
        (c[(l + 16) >> 2] = p),
        l) | 0
      );
      i = l;
    }
    c[5811923] = 1;
    m = 540;
    n = 0;
    i = b;
    return;
  }
  function Ap() {
    var b = 0,
      d = 0,
      e = 0,
      f = 0,
      g = 0,
      h = 0,
      j = 0,
      k = 0,
      l = 0,
      m = 0,
      n = 0,
      o = 0,
      p = 0,
      q = 0,
      r = 0,
      s = 0;
    b = i;
    i = (i + 16392) | 0;
    d = b | 0;
    e = (b + 8) | 0;
    f = (b + 8200) | 0;
    g = (23251792 + (c[5811925] | 0)) | 0;
    c[5817473] = oj(rC(g, 148152) | 0) | 0;
    if ((c[5759928] | 0) != 0) {
      h = 8192;
      j = 0;
      k = 8192;
      l = 0;
      i = b;
      return;
    }
    m = rC(g, 145464) | 0;
    c[d >> 2] = m;
    n = oj(m | 0) | 0;
    c[5811766] = n;
    if ((n | 0) == 0) {
      rt();
    }
    c[d >> 2] = rC(g, 143112) | 0;
    n = rC(g, 140680) | 0;
    Pu(c[d >> 2] | 0, n);
    c[d >> 2] = rC(g, 138144) | 0;
    n = rC(g, 136504) | 0;
    Qu(c[d >> 2] | 0, n);
    c[d >> 2] = g;
    g = 0;
    while (1) {
      sC(d, e, f);
      if ((a[e] | 0) == 0) {
        o = g;
        break;
      }
      do {
        if ((VB(e, 135080) | 0) == 0) {
          if ((Fu(f) | 0) == 0) {
            p = 1;
            q = 10;
            break;
          }
          Sr(133432, ((r = i), (i = (i + 8) | 0), (c[r >> 2] = f), r) | 0);
          i = r;
          s = g;
        } else {
          p = g;
          q = 10;
        }
      } while (0);
      do {
        if ((q | 0) == 10) {
          q = 0;
          n = et(e) | 0;
          if ((n | 0) == -2147483648) {
            gt(e, f, 2112) | 0;
            s = p;
            break;
          }
          if (((n & 2184) | 0) == 0) {
            Sr(
              132328,
              ((r = i),
              (i = (i + 16) | 0),
              (c[r >> 2] = e),
              (c[(r + 8) >> 2] = f),
              r) | 0
            );
            i = r;
            s = p;
            break;
          } else {
            lt(e, f);
            s = p;
            break;
          }
        }
      } while (0);
      if ((c[d >> 2] | 0) == 0) {
        o = s;
        break;
      } else {
        g = s;
      }
    }
    do {
      if ((o | 0) == 0) {
        if ((a[ct(135080) | 0] | 0) == 0) {
          break;
        }
        kt(135080, 28378624);
      }
    } while (0);
    c[5811764] = ~~+at(129944);
    h = 8192;
    j = 0;
    k = 8192;
    l = 0;
    i = b;
    return;
  }
  function Bp(a) {
    a = a | 0;
    var b = 0,
      d = 0,
      e = 0,
      f = 0,
      g = 0,
      h = 0,
      j = 0,
      k = 0,
      l = 0,
      m = 0,
      n = 0,
      o = 0,
      p = 0,
      q = 0,
      r = 0,
      s = 0,
      t = 0;
    b = i;
    i = (i + 272) | 0;
    d = b | 0;
    e = d;
    f = (b + 208) | 0;
    hm();
    c[5721431] = 0;
    xo();
    c[5738077] = xv(a) | 0;
    c[5816948] = 1;
    while (1) {
      g = vv(a) | 0;
      if ((g | 0) == 4) {
        h = ov(a, 10) | 0;
        if (h >>> 0 > 1023 >>> 0) {
          j = 9;
          break;
        }
        n$(e | 0, 0, 208) | 0;
        Hv(a, d, (23287176 + ((h * 208) | 0)) | 0, h);
        continue;
      } else if ((g | 0) == 8) {
        j = 12;
        break;
      } else if ((g | 0) != 3) {
        j = 11;
        break;
      }
      g = wv(a) | 0;
      if (g >>> 0 > 1023 >>> 0) {
        j = 4;
        break;
      }
      k = zv(a) | 0;
      l = ((o$(k | 0) | 0) + 1) | 0;
      m = c[5816948] | 0;
      if (((l + m) | 0) > 16e3) {
        j = 6;
        break;
      }
      c[(23247696 + (g << 2)) >> 2] = m;
      m$((23251792 + (c[5816948] | 0)) | 0, k | 0, l) | 0;
      c[5816948] = (c[5816948] | 0) + l;
    }
    if ((j | 0) == 4) {
      Ur(
        1,
        128648,
        ((n = i), (i = (i + 1) | 0), (i = (i + 7) & -8), (c[n >> 2] = 0), n) | 0
      );
      i = n;
    } else if ((j | 0) == 6) {
      Ur(
        1,
        127680,
        ((n = i), (i = (i + 1) | 0), (i = (i + 7) & -8), (c[n >> 2] = 0), n) | 0
      );
      i = n;
    } else if ((j | 0) == 9) {
      Ur(1, 126344, ((n = i), (i = (i + 8) | 0), (c[n >> 2] = h), n) | 0);
      i = n;
    } else if ((j | 0) == 11) {
      Ur(
        1,
        125072,
        ((n = i), (i = (i + 1) | 0), (i = (i + 7) & -8), (c[n >> 2] = 0), n) | 0
      );
      i = n;
    } else if ((j | 0) == 12) {
      c[5720395] = xv(a) | 0;
      c[5721689] = xv(a) | 0;
      dt(135080, f, 64);
      f = (23251792 + (c[5811924] | 0)) | 0;
      c[5759584] = oj(rC(f, 106696) | 0) | 0;
      TB(23038340, rC(f, 105784) | 0, 256);
      TB(23017852, rC(f, 104976) | 0, 4096);
      TB(23021948, rC(f, 103984) | 0, 8192);
      Ap();
      if (
        !(
          ((c[((c[5811774] | 0) + 32) >> 2] | 0) != 0) &
          ((c[5759927] | 0) != 0)
        )
      ) {
        o = c[5721689] | 0;
        p = Pr(138, 0) | 0;
        Wu(o, 0, p);
        q = 64;
        r = 0;
        s = 208;
        t = 0;
        i = b;
        return;
      }
      jo();
      o = c[5721689] | 0;
      p = Pr(138, 0) | 0;
      Wu(o, 0, p);
      q = 64;
      r = 0;
      s = 208;
      t = 0;
      i = b;
      return;
    }
  }
  function Cp(a, b) {
    a = a | 0;
    b = b | 0;
    b = c[a >> 2] | 0;
    if ((b | 0) != 0) {
      W_(b);
    }
    W_(a);
    c[6924866] = (c[6924866] | 0) - 1;
    Ro();
    kt(108632, 107592);
    return;
  }
  function Dp(b) {
    b = b | 0;
    var d = 0,
      e = 0,
      f = 0,
      g = 0,
      h = 0,
      j = 0,
      k = 0,
      l = 0,
      m = 0,
      n = 0;
    d = i;
    i = (i + 16384) | 0;
    e = d | 0;
    if ((a[23030144] | 0) == 0) {
      Sr(
        124152,
        ((f = i), (i = (i + 1) | 0), (i = (i + 7) & -8), (c[f >> 2] = 0), f) | 0
      );
      i = f;
      io(123328, 0);
      g = 16384;
      h = 0;
      i = d;
      return;
    }
    j = wv(b) | 0;
    do {
      if (!((((j & 65535) << 16) >> 16 != 0) | ((c[5759650] | 0) != 0))) {
        k = xv(b) | 0;
        c[5759652] = k;
        nt(122504, +(k | 0));
        if ((c[5759652] | 0) >= 0) {
          break;
        }
        k = yv(b) | 0;
        Ur(1, 121632, ((f = i), (i = (i + 8) | 0), (c[f >> 2] = k), f) | 0);
        i = f;
      }
    } while (0);
    k = wv(b) | 0;
    if (((k | 0) < 0) | (k >>> 0 > 16384 >>> 0)) {
      Ur(1, 120672, ((f = i), (i = (i + 8) | 0), (c[f >> 2] = k), f) | 0);
      i = f;
    }
    Bv(b, e, k);
    b = c[5759650] & 65535;
    l = j & 65535;
    if ((b | 0) != (l | 0)) {
      Tr(
        119400,
        ((f = i),
        (i = (i + 16) | 0),
        (c[f >> 2] = b),
        (c[(f + 8) >> 2] = l),
        f) | 0
      );
      i = f;
      g = 16384;
      h = 0;
      i = d;
      return;
    }
    l = c[5757535] | 0;
    do {
      if ((l | 0) == 0) {
        b = Vt(23030144) | 0;
        c[5757535] = b;
        if ((b | 0) != 0) {
          m = b;
          break;
        }
        Sr(118096, ((f = i), (i = (i + 8) | 0), (c[f >> 2] = 23030144), f) | 0);
        i = f;
        io(123328, 0);
        Qo();
        g = 16384;
        h = 0;
        i = d;
        return;
      } else {
        m = l;
      }
    } while (0);
    if ((k | 0) == 0) {
      n = 0;
    } else {
      gu(e, k, m) | 0;
      n = 1;
    }
    m =
      pC(
        117120,
        ((f = i), (i = (i + 8) | 0), (c[f >> 2] = c[5759650]), f) | 0
      ) | 0;
    i = f;
    io(m, 0);
    c[5759650] = (c[5759650] | 0) + 1;
    m = ((c[5759651] | 0) + k) | 0;
    c[5759651] = m;
    nt(115920, +(m | 0));
    if (n) {
      g = 16384;
      h = 0;
      i = d;
      return;
    }
    n = c[5757535] | 0;
    if ((n | 0) != 0) {
      Yt(n);
      c[5757535] = 0;
      Xt(23030144, 23034240, 0);
    }
    wn();
    wn();
    Qo();
    g = 16384;
    h = 0;
    i = d;
    return;
  }
  function Ep(a) {
    a = a | 0;
    var b = 0,
      d = 0,
      e = 0,
      f = 0,
      g = 0,
      h = 0,
      j = 0,
      k = 0,
      l = 0;
    b = i;
    d = c[((c[5769190] | 0) + 32) >> 2] | 0;
    do {
      if ((d | 0) == 1) {
        Sr(
          114392,
          ((e = i), (i = (i + 8) | 0), (c[e >> 2] = c[(a + 20) >> 2]), e) | 0
        );
        i = e;
      } else {
        if ((d | 0) <= 1) {
          break;
        }
        Sr(
          113296,
          ((e = i), (i = (i + 1) | 0), (i = (i + 7) & -8), (c[e >> 2] = 0), e) |
            0
        );
        i = e;
      }
    } while (0);
    kv(a);
    d = xv(a) | 0;
    f = c[5721690] | 0;
    c[5721691] = (d | 0) < ((f - 64) | 0) ? f : d;
    d = (a + 24) | 0;
    f = (a + 20) | 0;
    if ((c[d >> 2] | 0) > (c[f >> 2] | 0)) {
      Ur(
        1,
        112376,
        ((e = i), (i = (i + 1) | 0), (i = (i + 7) & -8), (c[e >> 2] = 0), e) | 0
      );
      i = e;
    }
    a: while (1) {
      g = vv(a) | 0;
      h = (c[((c[5769190] | 0) + 32) >> 2] | 0) > 1;
      if ((g | 0) == 8) {
        j = 8;
        break;
      }
      b: do {
        if (h) {
          do {
            if ((g | 0) >= 0) {
              k = c[(1808 + (g << 2)) >> 2] | 0;
              if ((k | 0) == 0) {
                break;
              }
              Sr(
                183392,
                ((e = i),
                (i = (i + 16) | 0),
                (c[e >> 2] = (c[d >> 2] | 0) - 1),
                (c[(e + 8) >> 2] = k),
                e) | 0
              );
              i = e;
              break b;
            }
          } while (0);
          Sr(
            110848,
            ((e = i),
            (i = (i + 16) | 0),
            (c[e >> 2] = (c[d >> 2] | 0) - 1),
            (c[(e + 8) >> 2] = g),
            e) | 0
          );
          i = e;
        }
      } while (0);
      c: do {
        switch (g | 0) {
          case 6: {
            Dp(a);
            break;
          }
          case 1:
          case 9: {
            break;
          }
          case 2: {
            Bp(a);
            break;
          }
          case 5: {
            k = xv(a) | 0;
            l = yv(a) | 0;
            if ((c[5738077] | 0) >= (k | 0)) {
              break c;
            }
            c[5738077] = k;
            TB((22952316 + ((k & 63) << 10)) | 0, l, 1024);
            break;
          }
          case 7: {
            zp(a);
            break;
          }
          default: {
            j = 17;
            break a;
          }
        }
      } while (0);
      if ((c[d >> 2] | 0) > (c[f >> 2] | 0)) {
        j = 6;
        break;
      }
    }
    if ((j | 0) == 6) {
      Ur(
        1,
        112376,
        ((e = i), (i = (i + 1) | 0), (i = (i + 7) & -8), (c[e >> 2] = 0), e) | 0
      );
      i = e;
    } else if ((j | 0) == 8) {
      if (!h) {
        i = b;
        return;
      }
      Sr(
        183392,
        ((e = i),
        (i = (i + 16) | 0),
        (c[e >> 2] = (c[d >> 2] | 0) - 1),
        (c[(e + 8) >> 2] = 111576),
        e) | 0
      );
      i = e;
      i = b;
      return;
    } else if ((j | 0) == 17) {
      Ur(
        1,
        109992,
        ((e = i), (i = (i + 1) | 0), (i = (i + 7) & -8), (c[e >> 2] = 0), e) | 0
      );
      i = e;
    }
  }
  function Fp() {
    return 23017852;
  }
  function Gp() {
    return 23021948;
  }
  function Hp(a, b, d, e) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    e = e | 0;
    var f = 0.0,
      h = 0.0;
    f = +(c[5720347] | 0) / 640.0;
    h = +(c[5720348] | 0) / 480.0;
    if ((a | 0) != 0) {
      g[a >> 2] = f * +g[a >> 2];
    }
    if ((b | 0) != 0) {
      g[b >> 2] = h * +g[b >> 2];
    }
    if ((d | 0) != 0) {
      g[d >> 2] = f * +g[d >> 2];
    }
    if ((e | 0) == 0) {
      return;
    }
    g[e >> 2] = h * +g[e >> 2];
    return;
  }
  function Ip(a, b, d, e, f) {
    a = +a;
    b = +b;
    d = +d;
    e = +e;
    f = f | 0;
    var g = 0.0,
      h = 0.0;
    vk[c[4917260] & 511](f);
    g = +(c[5720347] | 0) / 640.0;
    h = +(c[5720348] | 0) / 480.0;
    kk[c[4917261] & 7](
      g * a,
      h * b,
      g * d,
      h * e,
      0.0,
      0.0,
      0.0,
      0.0,
      c[5720355] | 0
    );
    vk[c[4917260] & 511](0);
    return;
  }
  function Jp(a, b, d, e, f) {
    a = +a;
    b = +b;
    d = +d;
    e = +e;
    f = f | 0;
    var g = 0.0,
      h = 0.0;
    g = +(c[5720347] | 0) / 640.0;
    h = +(c[5720348] | 0) / 480.0;
    kk[c[4917261] & 7](g * a, h * b, g * d, h * e, 0.0, 0.0, 1.0, 1.0, f);
    return;
  }
  function Kp(a, b, d) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    var e = 0,
      f = 0.0,
      g = 0.0;
    e = d & 255;
    if (((e | 0) == 32) | ((b | 0) < -16)) {
      return;
    }
    f = +((e >>> 4) | 0) * 0.0625;
    g = +((d & 15) | 0) * 0.0625;
    kk[c[4917261] & 7](
      +(a | 0),
      +(b | 0),
      8.0,
      16.0,
      g,
      f,
      g + 0.0625,
      f + 0.0625,
      c[5720354] | 0
    );
    return;
  }
  function Lp(b, d, e, f, h, j, k) {
    b = b | 0;
    d = d | 0;
    e = +e;
    f = f | 0;
    h = h | 0;
    j = j | 0;
    k = k | 0;
    var l = 0,
      m = 0,
      n = 0,
      o = 0,
      p = 0,
      q = 0,
      r = 0,
      s = 0.0,
      t = 0,
      u = 0,
      v = 0,
      w = 0,
      x = 0,
      y = 0,
      z = 0,
      A = 0,
      B = 0,
      C = 0,
      D = 0.0,
      E = 0.0,
      F = 0.0,
      G = 0.0,
      H = 0,
      I = 0,
      J = 0,
      K = 0,
      L = 0;
    l = i;
    i = (i + 16) | 0;
    m = l | 0;
    g[(m + 8) >> 2] = 0.0;
    g[(m + 4) >> 2] = 0.0;
    n = m | 0;
    g[n >> 2] = 0.0;
    o = (h + 12) | 0;
    p = (m + 12) | 0;
    g[p >> 2] = +g[o >> 2];
    vk[c[4917260] & 511](n);
    q = a[f] | 0;
    a: do {
      if (!((q << 24) >> 24 == 0)) {
        r = (k | 0) == 0;
        s = +((d + 2) | 0);
        t = s < -0.0 - e;
        u = f;
        v = b;
        w = q;
        while (1) {
          b: do {
            if (r) {
              x = u;
              y = w;
              while (1) {
                if (!(((x | 0) != 0) & ((y << 24) >> 24 == 94))) {
                  z = x;
                  A = y;
                  break b;
                }
                B = a[(x + 1) | 0] | 0;
                if ((B << 24) >> 24 == 0) {
                  z = x;
                  A = 94;
                  break b;
                }
                C = (x + 2) | 0;
                if ((Fe(((B << 24) >> 24) | 0) | 0) == 0) {
                  break;
                }
                B = a[C] | 0;
                if ((B << 24) >> 24 == 0) {
                  break a;
                } else {
                  x = C;
                  y = B;
                }
              }
              z = x;
              A = a[x] | 0;
            } else {
              z = u;
              A = w;
            }
          } while (0);
          y = (A << 24) >> 24;
          B = y & 255;
          if (!(((B | 0) == 32) | t)) {
            D = +(c[5720347] | 0) / 640.0;
            E = +(c[5720348] | 0) / 480.0;
            F = +((B >>> 4) | 0) * 0.0625;
            G = +((y & 15) | 0) * 0.0625;
            kk[c[4917261] & 7](
              +((v + 2) | 0) * D,
              s * E,
              D * e,
              E * e,
              G,
              F,
              G + 0.0625,
              F + 0.0625,
              c[5720354] | 0
            );
          }
          y = (z + 1) | 0;
          B = a[y] | 0;
          if ((B << 24) >> 24 == 0) {
            break;
          } else {
            u = y;
            v = ~~(+(v | 0) + e);
            w = B;
          }
        }
      }
    } while (0);
    vk[c[4917260] & 511](h);
    h = a[f] | 0;
    if ((h << 24) >> 24 == 0) {
      H = c[4917260] | 0;
      vk[H & 511](0);
      i = l;
      return;
    }
    z = (j | 0) == 0;
    j = m;
    m = (k | 0) == 0;
    s = +(d | 0);
    d = s < -0.0 - e;
    k = f;
    f = b;
    b = h;
    c: while (1) {
      d: do {
        if (z) {
          if (m) {
            h = k;
            A = b;
            while (1) {
              if (!(((h | 0) != 0) & ((A << 24) >> 24 == 94))) {
                I = h;
                break d;
              }
              q = (h + 1) | 0;
              w = a[q] | 0;
              if ((w << 24) >> 24 == 0) {
                I = h;
                break d;
              }
              if ((Fe(((w << 24) >> 24) | 0) | 0) == 0) {
                I = h;
                break d;
              }
              w = (20704 + ((a[q] & 7) << 4)) | 0;
              c[j >> 2] = c[w >> 2];
              c[(j + 4) >> 2] = c[(w + 4) >> 2];
              c[(j + 8) >> 2] = c[(w + 8) >> 2];
              g[p >> 2] = +g[o >> 2];
              vk[c[4917260] & 511](n);
              w = (h + 2) | 0;
              q = a[w] | 0;
              if ((q << 24) >> 24 == 0) {
                J = 35;
                break c;
              } else {
                h = w;
                A = q;
              }
            }
          } else {
            if (!(((k | 0) != 0) & ((b << 24) >> 24 == 94))) {
              I = k;
              break;
            }
            A = (k + 1) | 0;
            h = a[A] | 0;
            if ((h << 24) >> 24 == 0) {
              I = k;
              break;
            }
            if ((Fe(((h << 24) >> 24) | 0) | 0) == 0) {
              I = k;
              break;
            }
            h = (20704 + ((a[A] & 7) << 4)) | 0;
            c[j >> 2] = c[h >> 2];
            c[(j + 4) >> 2] = c[(h + 4) >> 2];
            c[(j + 8) >> 2] = c[(h + 8) >> 2];
            g[p >> 2] = +g[o >> 2];
            vk[c[4917260] & 511](n);
            I = k;
            break;
          }
        } else {
          if (m) {
            K = k;
            L = b;
          } else {
            if (!(((k | 0) != 0) & ((b << 24) >> 24 == 94))) {
              I = k;
              break;
            }
            h = a[(k + 1) | 0] | 0;
            if ((h << 24) >> 24 == 0) {
              I = k;
              break;
            }
            Fe(((h << 24) >> 24) | 0) | 0;
            I = k;
            break;
          }
          while (1) {
            if (!(((K | 0) != 0) & ((L << 24) >> 24 == 94))) {
              I = K;
              break d;
            }
            h = a[(K + 1) | 0] | 0;
            if ((h << 24) >> 24 == 0) {
              I = K;
              break d;
            }
            if ((Fe(((h << 24) >> 24) | 0) | 0) == 0) {
              I = K;
              break d;
            }
            h = (K + 2) | 0;
            A = a[h] | 0;
            if ((A << 24) >> 24 == 0) {
              J = 35;
              break c;
            } else {
              K = h;
              L = A;
            }
          }
        }
      } while (0);
      A = a[I] | 0;
      h = A & 255;
      if (!(((h | 0) == 32) | d)) {
        F = +(c[5720347] | 0) / 640.0;
        G = +(c[5720348] | 0) / 480.0;
        E = +((h >>> 4) | 0) * 0.0625;
        D = +((A & 15) | 0) * 0.0625;
        kk[c[4917261] & 7](
          +(f | 0) * F,
          s * G,
          F * e,
          G * e,
          D,
          E,
          D + 0.0625,
          E + 0.0625,
          c[5720354] | 0
        );
      }
      A = (I + 1) | 0;
      h = a[A] | 0;
      if ((h << 24) >> 24 == 0) {
        J = 35;
        break;
      } else {
        k = A;
        f = ~~(+(f | 0) + e);
        b = h;
      }
    }
    if ((J | 0) == 35) {
      H = c[4917260] | 0;
      vk[H & 511](0);
      i = l;
      return;
    }
  }
  function Mp(a, b, c, d, e) {
    a = a | 0;
    b = b | 0;
    c = c | 0;
    d = +d;
    e = e | 0;
    var f = 0,
      h = 0,
      j = 0;
    f = i;
    i = (i + 16) | 0;
    h = f | 0;
    g[(h + 8) >> 2] = 1.0;
    g[(h + 4) >> 2] = 1.0;
    j = h | 0;
    g[j >> 2] = 1.0;
    g[(h + 12) >> 2] = d;
    Lp(a, b, 16.0, c, j, 0, e);
    i = f;
    return;
  }
  function Np(b, d, e, f, h, j) {
    b = b | 0;
    d = d | 0;
    e = e | 0;
    f = f | 0;
    h = h | 0;
    j = j | 0;
    var k = 0,
      l = 0,
      m = 0,
      n = 0,
      o = 0,
      p = 0,
      q = 0,
      r = 0.0,
      s = 0,
      t = 0,
      u = 0,
      v = 0,
      w = 0.0,
      x = 0.0;
    k = i;
    i = (i + 16) | 0;
    l = k | 0;
    vk[c[4917260] & 511](f);
    m = a[e] | 0;
    if ((m << 24) >> 24 == 0) {
      n = c[4917260] | 0;
      vk[n & 511](0);
      i = k;
      return;
    }
    o = (h | 0) == 0;
    h = l;
    p = (f + 12) | 0;
    f = (l + 12) | 0;
    q = l | 0;
    l = (j | 0) == 0;
    j = (d | 0) < -16;
    r = +(d | 0);
    d = e;
    e = b;
    b = m;
    a: while (1) {
      m = d;
      s = b;
      while (1) {
        if (!(((m | 0) != 0) & ((s << 24) >> 24 == 94))) {
          break;
        }
        t = (m + 1) | 0;
        u = a[t] | 0;
        if ((u << 24) >> 24 == 0) {
          break;
        }
        if ((Fe(((u << 24) >> 24) | 0) | 0) == 0) {
          break;
        }
        if (o) {
          u = (20704 + ((a[t] & 7) << 4)) | 0;
          c[h >> 2] = c[u >> 2];
          c[(h + 4) >> 2] = c[(u + 4) >> 2];
          c[(h + 8) >> 2] = c[(u + 8) >> 2];
          g[f >> 2] = +g[p >> 2];
          vk[c[4917260] & 511](q);
        }
        u = (m + 2) | 0;
        if (!l) {
          break;
        }
        t = a[u] | 0;
        if ((t << 24) >> 24 == 0) {
          v = 14;
          break a;
        } else {
          m = u;
          s = t;
        }
      }
      s = a[m] | 0;
      t = s & 255;
      if (!(((t | 0) == 32) | j)) {
        w = +((t >>> 4) | 0) * 0.0625;
        x = +((s & 15) | 0) * 0.0625;
        kk[c[4917261] & 7](
          +(e | 0),
          r,
          8.0,
          16.0,
          x,
          w,
          x + 0.0625,
          w + 0.0625,
          c[5720354] | 0
        );
      }
      s = (m + 1) | 0;
      t = a[s] | 0;
      if ((t << 24) >> 24 == 0) {
        v = 14;
        break;
      } else {
        d = s;
        e = (e + 8) | 0;
        b = t;
      }
    }
    if ((v | 0) == 14) {
      n = c[4917260] | 0;
      vk[n & 511](0);
      i = k;
      return;
    }
  }
  function Op(a) {
    a = +a;
    var b = 0;
    b = c[5425932] | 0;
    g[(876392 + (b << 2)) >> 2] = a;
    c[5425932] = (b + 1) & 1023;
    return;
  }
  function Pp() {
    var a = 0,
      b = 0,
      d = 0,
      e = 0,
      f = 0,
      h = 0.0,
      i = 0,
      j = 0.0,
      k = 0;
    a = c[5720347] | 0;
    b = c[5720348] | 0;
    vk[c[4917260] & 511](20704);
    d = c[((c[5811750] | 0) + 32) >> 2] | 0;
    kk[c[4917261] & 7](
      0.0,
      +((b - d) | 0),
      +(a | 0),
      +(d | 0),
      0.0,
      0.0,
      0.0,
      0.0,
      c[5720355] | 0
    );
    vk[c[4917260] & 511](0);
    if ((a | 0) <= 0) {
      return;
    }
    d = (a - 1) | 0;
    e = 0;
    f = 0;
    while (1) {
      h =
        +g[(876392 + (((f + 1023 + (c[5425932] | 0)) & 1023) << 2)) >> 2] *
          +(c[((c[5811748] | 0) + 32) >> 2] | 0) +
        +(c[((c[5811746] | 0) + 32) >> 2] | 0);
      i = c[((c[5811750] | 0) + 32) >> 2] | 0;
      if (h < 0.0) {
        j = h + +(da((~~((-0.0 - h) / +(i | 0)) + 1) | 0, i) | 0);
      } else {
        j = h;
      }
      k = (~~j | 0) % (i | 0) | 0;
      kk[c[4917261] & 7](
        +((d + f) | 0),
        +((b - k) | 0),
        1.0,
        +(k | 0),
        0.0,
        0.0,
        0.0,
        0.0,
        c[5720355] | 0
      );
      k = (e + 1) | 0;
      i = ~e;
      if ((k | 0) < (a | 0)) {
        e = k;
        f = i;
      } else {
        break;
      }
    }
    return;
  }
  function Qp() {
    c[5769182] = gt(161864, 138048, 512) | 0;
    c[5811758] = gt(124968, 138048, 512) | 0;
    c[5811750] = gt(114344, 104936, 512) | 0;
    c[5811748] = gt(61568, 54072, 512) | 0;
    c[5811746] = gt(48048, 138048, 512) | 0;
    c[552998] = 1;
    return;
  }
  function Rp(a) {
    a = a | 0;
    var b = 0,
      d = 0,
      e = 0,
      f = 0,
      g = 0,
      h = 0,
      j = 0;
    b = i;
    i = (i + 1024) | 0;
    d = b | 0;
    vk[c[4917264] & 511](a);
    e = c[236124] | 0;
    if ((e | 0) == 0) {
      f = 0;
    } else {
      g =
        oD(
          e,
          6,
          ((h = i), (i = (i + 1) | 0), (i = (i + 7) & -8), (c[h >> 2] = 0), h) |
            0
        ) | 0;
      i = h;
      f = (g | 0) != 0;
    }
    do {
      if (f | ((c[5720394] | 0) >>> 0 < 6 >>> 0)) {
        if (
          (((c[5720347] | 0) * 480) | 0 | 0) <=
          (((c[5720348] | 0) * 640) | 0 | 0)
        ) {
          break;
        }
        vk[c[4917260] & 511](20704);
        kk[c[4917261] & 7](
          0.0,
          0.0,
          +(c[5720347] | 0),
          +(c[5720348] | 0),
          0.0,
          0.0,
          0.0,
          0.0,
          c[5720355] | 0
        );
        vk[c[4917260] & 511](0);
      }
    } while (0);
    g = c[236124] | 0;
    a: do {
      if (!(((g | 0) == 0) | f)) {
        switch (c[5720394] | 0) {
          case 3:
          case 4:
          case 5: {
            oD(
              g,
              5,
              ((h = i), (i = (i + 8) | 0), (c[h >> 2] = c[5497082]), h) | 0
            ) | 0;
            i = h;
            oD(
              c[236124] | 0,
              9,
              ((h = i), (i = (i + 8) | 0), (c[h >> 2] = 0), h) | 0
            ) | 0;
            i = h;
            break a;
            break;
          }
          case 9: {
            Kl();
            break a;
            break;
          }
          case 6:
          case 7: {
            wl(a);
            oD(
              c[236124] | 0,
              5,
              ((h = i), (i = (i + 8) | 0), (c[h >> 2] = c[5497082]), h) | 0
            ) | 0;
            i = h;
            oD(
              c[236124] | 0,
              9,
              ((h = i), (i = (i + 8) | 0), (c[h >> 2] = 1), h) | 0
            ) | 0;
            i = h;
            break a;
            break;
          }
          case 1: {
            Ax();
            oD(
              c[236124] | 0,
              7,
              ((h = i), (i = (i + 8) | 0), (c[h >> 2] = 1), h) | 0
            ) | 0;
            i = h;
            break a;
            break;
          }
          case 8: {
            wl(a);
            e = d | 0;
            if (!(((c[5759927] | 0) != 0) & ((c[5759926] | 0) == 0))) {
              break a;
            }
            j = ((ju(c[5759931] | 0) | 0) / 1024) | 0;
            fe(
              e | 0,
              61480,
              ((h = i),
              (i = (i + 16) | 0),
              (c[h >> 2] = 23039640),
              (c[(h + 8) >> 2] = j),
              h) | 0
            ) | 0;
            i = h;
            Lp((320 - ((o$(e | 0) | 0) << 2)) | 0, 20, 8.0, e, 20816, 1, 0);
            break a;
            break;
          }
          default: {
            Ur(
              0,
              43904,
              ((h = i),
              (i = (i + 1) | 0),
              (i = (i + 7) & -8),
              (c[h >> 2] = 0),
              h) | 0
            );
            i = h;
          }
        }
      }
    } while (0);
    d = (((Jn() | 0) & 2) | 0) != 0;
    a = c[236124] | 0;
    if (d & ((a | 0) != 0)) {
      oD(a, 5, ((h = i), (i = (i + 8) | 0), (c[h >> 2] = c[5497082]), h) | 0) |
        0;
      i = h;
    }
    cm();
    do {
      if ((c[((c[5811758] | 0) + 32) >> 2] | 0) == 0) {
        if ((c[((c[5769182] | 0) + 32) >> 2] | 0) != 0) {
          break;
        }
        if ((c[((c[5811760] | 0) + 32) >> 2] | 0) != 0) {
          break;
        }
        i = b;
        return;
      }
    } while (0);
    Pp();
    i = b;
    return;
  }
  function Sp() {
    var a = 0,
      b = 0,
      d = 0;
    a = i;
    if ((c[552998] | 0) == 0) {
      i = a;
      return;
    }
    b = c[7096182] | 0;
    c[7096182] = b + 1;
    if ((b | 0) > 1) {
      Ur(
        0,
        183016,
        ((b = i), (i = (i + 1) | 0), (i = (i + 7) & -8), (c[b >> 2] = 0), b) | 0
      );
      i = b;
    }
    c[7096182] = 1;
    if ((c[236124] | 0) == 0) {
      if ((c[((c[5458548] | 0) + 32) >> 2] | 0) != 0) {
        d = 6;
      }
    } else {
      d = 6;
    }
    do {
      if ((d | 0) == 6) {
        b = bt(178976) | 0;
        if ((c[5720352] | b | 0) == 0) {
          Rp(0);
        } else {
          Rp(1);
          Rp(2);
        }
        b = c[4917265] | 0;
        if ((c[((c[5451072] | 0) + 32) >> 2] | 0) == 0) {
          hk[b & 255](0, 0);
          break;
        } else {
          hk[b & 255](1217360, 1217368);
          break;
        }
      }
    } while (0);
    c[7096182] = 0;
    i = a;
    return;
  }
  function Tp() {
    var a = 0,
      b = 0,
      d = 0;
    a = i;
    i = (i + 16) | 0;
    b = a | 0;
    d = (a + 8) | 0;
    c[5711487] = 0;
    c[5502589] = 0;
    c[5678718] = 0;
    if ((Wt(59304, d) | 0) == 0) {
      i = a;
      return;
    }
    fu(22010356, 4, c[d >> 2] | 0) | 0;
    fu(22845948, 4, c[d >> 2] | 0) | 0;
    fu(b, 4, c[d >> 2] | 0) | 0;
    if ((c[b >> 2] | 0) == 726528) {
      fu(22010360, 704512, c[d >> 2] | 0) | 0;
      fu(22845952, 22016, c[d >> 2] | 0) | 0;
    } else {
      c[5711487] = 0;
      c[5502589] = 0;
      c[5678718] = 0;
    }
    Yt(c[d >> 2] | 0);
    i = a;
    return;
  }
  function Up(b) {
    b = b | 0;
    var d = 0,
      e = 0,
      f = 0,
      h = 0,
      j = 0,
      l = 0,
      m = 0,
      n = 0,
      o = 0,
      p = 0,
      q = 0,
      r = 0,
      s = 0,
      t = 0.0,
      u = 0,
      v = 0,
      w = 0,
      x = 0,
      y = 0,
      z = 0,
      A = 0.0,
      B = 0.0,
      C = 0.0,
      D = 0.0,
      E = 0.0,
      F = 0.0,
      G = 0,
      H = 0,
      I = 0,
      J = 0,
      K = 0,
      L = 0,
      M = 0,
      N = 0,
      O = 0,
      P = 0,
      Q = 0,
      S = 0,
      U = 0,
      X = 0,
      Y = 0,
      Z = 0,
      _ = 0;
    d = i;
    i = (i + 1096) | 0;
    e = d | 0;
    f = (d + 32) | 0;
    h = (d + 64) | 0;
    j = (d + 72) | 0;
    l = c[b >> 2] | 0;
    switch (l | 0) {
      case 45: {
        m = c[(b + 4) >> 2] | 0;
        n = mD(c[(b + 8) >> 2] | 0) | 0;
        o = c[(b + 12) >> 2] | 0;
        if (m >>> 0 > 1023 >>> 0) {
          p = 0;
          i = d;
          return p | 0;
        }
        q = c[(23247696 + (m << 2)) >> 2] | 0;
        if ((q | 0) != 0) {
          TB(n, (23251792 + q) | 0, o);
          p = 1;
          i = d;
          return p | 0;
        }
        if ((o | 0) == 0) {
          p = 0;
          i = d;
          return p | 0;
        }
        a[n] = 0;
        p = 0;
        i = d;
        return p | 0;
      }
      case 15: {
        gu(
          mD(c[(b + 4) >> 2] | 0) | 0,
          c[(b + 8) >> 2] | 0,
          c[(b + 12) >> 2] | 0
        ) | 0;
        p = 0;
        i = d;
        return p | 0;
      }
      case 33: {
        n = c[(b + 4) >> 2] | 0;
        o = mD(c[(b + 8) >> 2] | 0) | 0;
        q = c[(b + 12) >> 2] | 0;
        TB(o, On(n) | 0, q);
        p = 0;
        i = d;
        return p | 0;
      }
      case 56: {
        q = c[4917268] | 0;
        n = c[(b + 4) >> 2] | 0;
        o = mD(c[(b + 8) >> 2] | 0) | 0;
        m = mD(c[(b + 12) >> 2] | 0) | 0;
        Tk[q & 255](n, o, m);
        p = 0;
        i = d;
        return p | 0;
      }
      case 39: {
        bo();
        p = 0;
        i = d;
        return p | 0;
      }
      case 40: {
        p = Jn() | 0;
        i = d;
        return p | 0;
      }
      case 31: {
        p = Kx(mD(c[(b + 4) >> 2] | 0) | 0, c[(b + 8) >> 2] | 0) | 0;
        i = d;
        return p | 0;
      }
      case 51: {
        It(mD(c[(b + 4) >> 2] | 0) | 0);
        p = 0;
        i = d;
        return p | 0;
      }
      case 12: {
        m = (b + 4) | 0;
        o = c[m >> 2] | 0;
        n = (b + 8) | 0;
        a: do {
          if ((o | 0) == 0) {
            do {
              if ((l$(mD(c[n >> 2] | 0) | 0, 137776, 11) | 0) != 0) {
                if ((l$(mD(c[n >> 2] | 0) | 0, 124880, 11) | 0) == 0) {
                  break;
                }
                if ((l$(mD(c[n >> 2] | 0) | 0, 114192, 5) | 0) == 0) {
                  break;
                }
                r = c[m >> 2] | 0;
                break a;
              }
            } while (0);
            q = mD(c[n >> 2] | 0) | 0;
            Sr(104792, ((s = i), (i = (i + 8) | 0), (c[s >> 2] = q), s) | 0);
            i = s;
            c[m >> 2] = 1;
            r = 1;
          } else {
            r = o;
          }
        } while (0);
        rr(r, mD(c[n >> 2] | 0) | 0);
        p = 0;
        i = d;
        return p | 0;
      }
      case 1: {
        n = mD(c[(b + 4) >> 2] | 0) | 0;
        Sr(161200, ((s = i), (i = (i + 8) | 0), (c[s >> 2] = n), s) | 0);
        i = s;
        p = 0;
        i = d;
        return p | 0;
      }
      case 32: {
        wx(c[(b + 4) >> 2] | 0, c[(b + 8) >> 2] | 0);
        p = 0;
        i = d;
        return p | 0;
      }
      case 0: {
        n = mD(c[(b + 4) >> 2] | 0) | 0;
        Ur(1, 161200, ((s = i), (i = (i + 8) | 0), (c[s >> 2] = n), s) | 0);
        i = s;
        return 0;
      }
      case 26: {
        n = c[4917260] | 0;
        r = mD(c[(b + 4) >> 2] | 0) | 0;
        vk[n & 511](r);
        p = 0;
        i = d;
        return p | 0;
      }
      case 8: {
        r = mD(c[(b + 4) >> 2] | 0) | 0;
        Ht(0, r, mD(c[(b + 8) >> 2] | 0) | 0, c[(b + 12) >> 2] | 0);
        p = 0;
        i = d;
        return p | 0;
      }
      case 11: {
        r = c[(b + 4) >> 2] | 0;
        yr(r, mD(c[(b + 8) >> 2] | 0) | 0, c[(b + 12) >> 2] | 0);
        p = 0;
        i = d;
        return p | 0;
      }
      case 7: {
        pt(mD(c[(b + 4) >> 2] | 0) | 0);
        p = 0;
        i = d;
        return p | 0;
      }
      case 3: {
        lt(mD(c[(b + 4) >> 2] | 0) | 0, mD(c[(b + 8) >> 2] | 0) | 0);
        p = 0;
        i = d;
        return p | 0;
      }
      case 41: {
        In(c[(b + 4) >> 2] | ((Jn() | 0) & 1));
        p = 0;
        i = d;
        return p | 0;
      }
      case 42: {
        r = mD(c[(b + 4) >> 2] | 0) | 0;
        n = c[(b + 8) >> 2] | 0;
        o = ve() | 0;
        if ((o | 0) == 0) {
          a[r] = 0;
          p = 0;
          i = d;
          return p | 0;
        } else {
          TB(r, o, n);
          es(o);
          p = 0;
          i = d;
          return p | 0;
        }
        break;
      }
      case 86: {
        p =
          iu(c[(b + 4) >> 2] | 0, c[(b + 8) >> 2] | 0, c[(b + 12) >> 2] | 0) |
          0;
        i = d;
        return p | 0;
      }
      case 37: {
        p = Kn() | 0;
        i = d;
        return p | 0;
      }
      case 38: {
        Ln(c[(b + 4) >> 2] | 0);
        p = 0;
        i = d;
        return p | 0;
      }
      case 34: {
        o = c[(b + 4) >> 2] | 0;
        n = mD(c[(b + 8) >> 2] | 0) | 0;
        r = c[(b + 12) >> 2] | 0;
        m = Qn(o) | 0;
        if ((m | 0) == 0) {
          a[n] = 0;
          p = 0;
          i = d;
          return p | 0;
        } else {
          TB(n, m, r);
          p = 0;
          i = d;
          return p | 0;
        }
        break;
      }
      case 9: {
        r = c[(b + 4) >> 2] | 0;
        Ft(r, mD(c[(b + 8) >> 2] | 0) | 0, c[(b + 12) >> 2] | 0);
        p = 0;
        i = d;
        return p | 0;
      }
      case 50: {
        r = mD(c[(b + 4) >> 2] | 0) | 0;
        m = mD(c[(b + 8) >> 2] | 0) | 0;
        Ht(r, m, mD(c[(b + 12) >> 2] | 0) | 0, c[(b + 16) >> 2] | 0);
        p = 0;
        i = d;
        return p | 0;
      }
      case 29: {
        m = c[4917267] | 0;
        r = mD(c[(b + 4) >> 2] | 0) | 0;
        n = c[(b + 8) >> 2] | 0;
        o = c[(b + 12) >> 2] | 0;
        q = c[(b + 16) >> 2] | 0;
        t = +g[(b + 20) >> 2];
        u = mD(c[(b + 24) >> 2] | 0) | 0;
        Bk[m & 7](r, n, o, q, t, u) | 0;
        p = 0;
        i = d;
        return p | 0;
      }
      case 4: {
        t = +at(mD(c[(b + 4) >> 2] | 0) | 0);
        p = ((g[k >> 2] = t), c[k >> 2] | 0);
        i = d;
        return p | 0;
      }
      case 44: {
        u = mD(c[(b + 4) >> 2] | 0) | 0;
        c[(u + 4) >> 2] = c[5721431];
        c[u >> 2] = c[5720394];
        TB((u + 12) | 0, 22881592, 1024);
        TB((u + 1036) | 0, 22869028, 1024);
        TB((u + 2060) | 0, 22885728, 1024);
        c[(u + 8) >> 2] = c[5811833];
        p = 0;
        i = d;
        return p | 0;
      }
      case 43: {
        u = (b + 4) | 0;
        c[5720357] = mD(c[u >> 2] | 0) | 0;
        m$(mD(c[u >> 2] | 0) | 0, 22870084, 11332) | 0;
        p = 0;
        i = d;
        return p | 0;
      }
      case 28: {
        Sp();
        p = 0;
        i = d;
        return p | 0;
      }
      case 16: {
        Yt(c[(b + 4) >> 2] | 0);
        p = 0;
        i = d;
        return p | 0;
      }
      case 14: {
        eu(
          mD(c[(b + 4) >> 2] | 0) | 0,
          c[(b + 8) >> 2] | 0,
          c[(b + 12) >> 2] | 0
        ) | 0;
        p = 0;
        i = d;
        return p | 0;
      }
      case 5: {
        u = mD(c[(b + 4) >> 2] | 0) | 0;
        dt(u, mD(c[(b + 8) >> 2] | 0) | 0, c[(b + 12) >> 2] | 0);
        p = 0;
        i = d;
        return p | 0;
      }
      case 72: {
        u = Vt(59304) | 0;
        gu(22010356, 4, u) | 0;
        gu(22845948, 4, u) | 0;
        c[h >> 2] = 726528;
        gu(h, 4, u) | 0;
        gu(22010360, 704512, u) | 0;
        gu(22845952, 22016, u) | 0;
        Yt(u);
        p = 0;
        i = d;
        return p | 0;
      }
      case 73: {
        u = c[(b + 4) >> 2] | 0;
        h = mD(c[(b + 8) >> 2] | 0) | 0;
        q = mD(c[(b + 12) >> 2] | 0) | 0;
        o = f;
        if (((u | 0) == 1) | ((u | 0) == 2)) {
          v = 22010360;
          w = 22010356;
          x = 4096;
        } else if ((u | 0) == 3) {
          v = 22845952;
          w = 22845948;
          x = 128;
        } else if ((u | 0) == 0) {
          v = 21988340;
          w = 21988336;
          x = 128;
        } else {
          p = -1;
          i = d;
          return p | 0;
        }
        if ((c[w >> 2] | 0) >= (x | 0)) {
          p = -1;
          i = d;
          return p | 0;
        }
        Uv(q, f, 7) | 0;
        q = c[w >> 2] | 0;
        b: do {
          if ((q | 0) > 0) {
            x = 0;
            while (1) {
              u = ($v((v + ((x * 172) | 0)) | 0, f) | 0) == 0;
              n = (x + 1) | 0;
              r = c[w >> 2] | 0;
              if (!u) {
                y = x;
                z = r;
                break b;
              }
              if ((n | 0) < (r | 0)) {
                x = n;
              } else {
                y = n;
                z = r;
                break;
              }
            }
          } else {
            y = 0;
            z = q;
          }
        } while (0);
        if ((y | 0) < (z | 0)) {
          p = 0;
          i = d;
          return p | 0;
        }
        m$((v + ((z * 172) | 0)) | 0, o | 0, 32) | 0;
        TB((v + ((z * 172) | 0) + 32) | 0, h, 32);
        h = c[w >> 2] | 0;
        c[(v + ((h * 172) | 0) + 156) >> 2] = 1;
        c[w >> 2] = h + 1;
        p = 1;
        i = d;
        return p | 0;
      }
      case 27: {
        t = +g[(b + 4) >> 2];
        A = +g[(b + 8) >> 2];
        B = +g[(b + 12) >> 2];
        C = +g[(b + 16) >> 2];
        D = +g[(b + 20) >> 2];
        E = +g[(b + 24) >> 2];
        F = +g[(b + 28) >> 2];
        kk[c[4917261] & 7](
          t,
          A,
          B,
          C,
          D,
          E,
          F,
          +g[(b + 32) >> 2],
          c[(b + 36) >> 2] | 0
        );
        p = 0;
        i = d;
        return p | 0;
      }
      case 17: {
        h = mD(c[(b + 4) >> 2] | 0) | 0;
        w = mD(c[(b + 8) >> 2] | 0) | 0;
        v = mD(c[(b + 12) >> 2] | 0) | 0;
        p = uu(h, w, v, c[(b + 16) >> 2] | 0) | 0;
        i = d;
        return p | 0;
      }
      case 6: {
        v = mD(c[(b + 4) >> 2] | 0) | 0;
        ot(v, +g[(b + 8) >> 2]);
        p = 0;
        i = d;
        return p | 0;
      }
      case 18: {
        v = c[4917246] | 0;
        w = mD(c[(b + 4) >> 2] | 0) | 0;
        p = jk[v & 255](w) | 0;
        i = d;
        return p | 0;
      }
      case 19: {
        w = c[4917247] | 0;
        v = mD(c[(b + 4) >> 2] | 0) | 0;
        p = jk[w & 255](v) | 0;
        i = d;
        return p | 0;
      }
      case 20: {
        v = c[4917249] | 0;
        w = mD(c[(b + 4) >> 2] | 0) | 0;
        p = jk[v & 255](w) | 0;
        i = d;
        return p | 0;
      }
      case 21: {
        Uk[c[4917253] & 511]();
        p = 0;
        i = d;
        return p | 0;
      }
      case 22: {
        w = c[4917254] | 0;
        v = mD(c[(b + 4) >> 2] | 0) | 0;
        vk[w & 511](v);
        p = 0;
        i = d;
        return p | 0;
      }
      case 23: {
        v = c[4917255] | 0;
        w = c[(b + 4) >> 2] | 0;
        h = c[(b + 8) >> 2] | 0;
        z = mD(c[(b + 12) >> 2] | 0) | 0;
        Yk[v & 255](w, h, z, 1);
        p = 0;
        i = d;
        return p | 0;
      }
      case 24: {
        z = c[4917257] | 0;
        h = mD(c[(b + 4) >> 2] | 0) | 0;
        F = +g[(b + 8) >> 2];
        E = +g[(b + 12) >> 2];
        D = +g[(b + 16) >> 2];
        sk[z & 15](h, F, E, D, +g[(b + 20) >> 2]);
        p = 0;
        i = d;
        return p | 0;
      }
      case 71: {
        Tp();
        p = 0;
        i = d;
        return p | 0;
      }
      case 67: {
        h = c[(b + 4) >> 2] | 0;
        z = c[(b + 8) >> 2] | 0;
        w = mD(c[(b + 12) >> 2] | 0) | 0;
        v = c[(b + 16) >> 2] | 0;
        o = j | 0;
        a[o] = 0;
        do {
          if ((h | 0) == 0) {
            if (!(z >>> 0 < 128 >>> 0)) {
              G = 108;
              break;
            }
            H = (21988340 + ((z * 172) | 0)) | 0;
            G = 109;
          } else if (((h | 0) == 1) | ((h | 0) == 2)) {
            if (!(z >>> 0 < 4096 >>> 0)) {
              G = 108;
              break;
            }
            H = (22010360 + ((z * 172) | 0)) | 0;
            G = 109;
          } else if ((h | 0) == 3) {
            if (!(z >>> 0 < 128 >>> 0)) {
              G = 108;
              break;
            }
            H = (22845952 + ((z * 172) | 0)) | 0;
            G = 109;
          } else {
            G = 108;
          }
        } while (0);
        if ((G | 0) == 108) {
          if ((w | 0) == 0) {
            p = 0;
            i = d;
            return p | 0;
          }
          a[w] = 0;
          p = 0;
          i = d;
          return p | 0;
        } else if ((G | 0) == 109) {
          if ((w | 0) == 0) {
            p = 0;
            i = d;
            return p | 0;
          }
          a[w] = 0;
          vC(o, 174504, (H + 32) | 0);
          vC(o, 171184, (H + 64) | 0);
          z =
            pC(
              164848,
              ((s = i), (i = (i + 8) | 0), (c[s >> 2] = c[(H + 136) >> 2]), s) |
                0
            ) | 0;
          i = s;
          vC(o, 168256, z);
          z =
            pC(
              164848,
              ((s = i), (i = (i + 8) | 0), (c[s >> 2] = c[(H + 140) >> 2]), s) |
                0
            ) | 0;
          i = s;
          vC(o, 161832, z);
          z =
            pC(
              164848,
              ((s = i), (i = (i + 8) | 0), (c[s >> 2] = c[(H + 152) >> 2]), s) |
                0
            ) | 0;
          i = s;
          vC(o, 158816, z);
          z =
            pC(
              164848,
              ((s = i), (i = (i + 8) | 0), (c[s >> 2] = c[(H + 144) >> 2]), s) |
                0
            ) | 0;
          i = s;
          vC(o, 156464, z);
          z =
            pC(
              164848,
              ((s = i), (i = (i + 8) | 0), (c[s >> 2] = c[(H + 148) >> 2]), s) |
                0
            ) | 0;
          i = s;
          vC(o, 154304, z);
          vC(o, 152392, (H + 96) | 0);
          z =
            pC(
              164848,
              ((s = i), (i = (i + 8) | 0), (c[s >> 2] = c[(H + 132) >> 2]), s) |
                0
            ) | 0;
          i = s;
          vC(o, 150080, z);
          z =
            pC(
              164848,
              ((s = i), (i = (i + 8) | 0), (c[s >> 2] = c[(H + 128) >> 2]), s) |
                0
            ) | 0;
          i = s;
          vC(o, 147800, z);
          vC(o, 145232, _v(H | 0) | 0);
          z =
            pC(
              164848,
              ((s = i), (i = (i + 8) | 0), (c[s >> 2] = c[(H + 160) >> 2]), s) |
                0
            ) | 0;
          i = s;
          vC(o, 142776, z);
          z =
            pC(
              164848,
              ((s = i), (i = (i + 8) | 0), (c[s >> 2] = c[(H + 168) >> 2]), s) |
                0
            ) | 0;
          i = s;
          vC(o, 140432, z);
          z =
            pC(
              164848,
              ((s = i), (i = (i + 8) | 0), (c[s >> 2] = c[(H + 164) >> 2]), s) |
                0
            ) | 0;
          i = s;
          vC(o, 138032, z);
          TB(w, o, v);
          p = 0;
          i = d;
          return p | 0;
        }
        break;
      }
      case 2: {
        p = wf() | 0;
        i = d;
        return p | 0;
      }
      case 10: {
        p = nr() | 0;
        i = d;
        return p | 0;
      }
      case 35: {
        v = c[(b + 4) >> 2] | 0;
        Pn(v, mD(c[(b + 8) >> 2] | 0) | 0);
        p = 0;
        i = d;
        return p | 0;
      }
      case 36: {
        p = Mn(c[(b + 4) >> 2] | 0) | 0;
        i = d;
        return p | 0;
      }
      case 83: {
        v = c[(b + 4) >> 2] | 0;
        o = c[(b + 8) >> 2] | 0;
        do {
          if ((v | 0) == 0) {
            if (o >>> 0 < 128 >>> 0) {
              I = (21988340 + ((o * 172) | 0)) | 0;
              break;
            } else {
              p = -1;
              i = d;
              return p | 0;
            }
          } else if (((v | 0) == 1) | ((v | 0) == 2)) {
            if (o >>> 0 < 4096 >>> 0) {
              I = (22010360 + ((o * 172) | 0)) | 0;
              break;
            } else {
              p = -1;
              i = d;
              return p | 0;
            }
          } else if ((v | 0) == 3) {
            if (o >>> 0 < 128 >>> 0) {
              I = (22845952 + ((o * 172) | 0)) | 0;
              break;
            } else {
              p = -1;
              i = d;
              return p | 0;
            }
          } else {
            p = -1;
            i = d;
            return p | 0;
          }
        } while (0);
        p = c[(I + 152) >> 2] | 0;
        i = d;
        return p | 0;
      }
      case 68: {
        I = c[(b + 4) >> 2] | 0;
        o = c[(b + 8) >> 2] | 0;
        v = c[(b + 12) >> 2] | 0;
        if ((o | 0) == -1) {
          if (((I | 0) == 1) | ((I | 0) == 2)) {
            J = 22010360;
            K = 4096;
          } else if ((I | 0) == 3) {
            J = 22845952;
            K = 128;
          } else if ((I | 0) == 0) {
            J = 21988340;
            K = 128;
          } else {
            p = 0;
            i = d;
            return p | 0;
          }
          w = 0;
          while (1) {
            c[(J + ((w * 172) | 0) + 156) >> 2] = v;
            z = (w + 1) | 0;
            if ((z | 0) < (K | 0)) {
              w = z;
            } else {
              p = 0;
              break;
            }
          }
          i = d;
          return p | 0;
        }
        if ((I | 0) == 0) {
          if (!(o >>> 0 < 128 >>> 0)) {
            p = 0;
            i = d;
            return p | 0;
          }
          c[(21988496 + ((o * 172) | 0)) >> 2] = v;
          p = 0;
          i = d;
          return p | 0;
        } else if (((I | 0) == 1) | ((I | 0) == 2)) {
          if (!(o >>> 0 < 4096 >>> 0)) {
            p = 0;
            i = d;
            return p | 0;
          }
          c[(22010516 + ((o * 172) | 0)) >> 2] = v;
          p = 0;
          i = d;
          return p | 0;
        } else if ((I | 0) == 3) {
          if (!(o >>> 0 < 128 >>> 0)) {
            p = 0;
            i = d;
            return p | 0;
          }
          c[(22846108 + ((o * 172) | 0)) >> 2] = v;
          p = 0;
          i = d;
          return p | 0;
        } else {
          p = 0;
          i = d;
          return p | 0;
        }
        break;
      }
      case 74: {
        v = c[(b + 4) >> 2] | 0;
        o = mD(c[(b + 8) >> 2] | 0) | 0;
        if (((v | 0) == 1) | ((v | 0) == 2)) {
          L = 22010360;
          M = 22010356;
        } else if ((v | 0) == 3) {
          L = 22845952;
          M = 22845948;
        } else if ((v | 0) == 0) {
          L = 21988340;
          M = 21988336;
        } else {
          p = 0;
          i = d;
          return p | 0;
        }
        Uv(o, e, 7) | 0;
        if ((c[M >> 2] | 0) > 0) {
          N = 0;
        } else {
          p = 0;
          i = d;
          return p | 0;
        }
        while (1) {
          o = ($v(e, (L + ((N * 172) | 0)) | 0) | 0) == 0;
          v = (N + 1) | 0;
          O = c[M >> 2] | 0;
          if (!o) {
            break;
          }
          if ((v | 0) < (O | 0)) {
            N = v;
          } else {
            p = 0;
            G = 201;
            break;
          }
        }
        if ((G | 0) == 201) {
          i = d;
          return p | 0;
        }
        e = (O - 1) | 0;
        if ((N | 0) < (e | 0)) {
          O = N;
          while (1) {
            N = (O + 1) | 0;
            m$((L + ((O * 172) | 0)) | 0, (L + ((N * 172) | 0)) | 0, 172) | 0;
            if ((N | 0) < (e | 0)) {
              O = N;
            } else {
              break;
            }
          }
        }
        c[M >> 2] = e;
        p = 0;
        i = d;
        return p | 0;
      }
      case 46: {
        p = sp() | 0;
        i = d;
        return p | 0;
      }
      case 47: {
        rp(c[(b + 4) >> 2] | 0);
        p = 0;
        i = d;
        return p | 0;
      }
      case 48: {
        e = c[(b + 4) >> 2] | 0;
        M = mD(c[(b + 8) >> 2] | 0) | 0;
        O = c[(b + 12) >> 2] | 0;
        pp(e, M, O, mD(c[(b + 16) >> 2] | 0) | 0);
        p = 0;
        i = d;
        return p | 0;
      }
      case 49: {
        O = c[(b + 4) >> 2] | 0;
        M = mD(c[(b + 8) >> 2] | 0) | 0;
        qp(O, M, c[(b + 12) >> 2] | 0);
        p = 0;
        i = d;
        return p | 0;
      }
      case 65: {
        M = c[(b + 4) >> 2] | 0;
        if ((M | 0) == 0) {
          p = c[5497084] | 0;
          i = d;
          return p | 0;
        } else if (((M | 0) == 1) | ((M | 0) == 2)) {
          p = c[5502589] | 0;
          i = d;
          return p | 0;
        } else if ((M | 0) == 3) {
          p = c[5711487] | 0;
          i = d;
          return p | 0;
        } else {
          p = 0;
          i = d;
          return p | 0;
        }
        break;
      }
      case 66: {
        M = c[(b + 4) >> 2] | 0;
        O = c[(b + 8) >> 2] | 0;
        e = mD(c[(b + 12) >> 2] | 0) | 0;
        L = c[(b + 16) >> 2] | 0;
        do {
          if ((M | 0) == 0) {
            if (!(O >>> 0 < 128 >>> 0)) {
              break;
            }
            TB(e, _v((21988340 + ((O * 172) | 0)) | 0) | 0, L);
            p = 0;
            i = d;
            return p | 0;
          } else if (((M | 0) == 1) | ((M | 0) == 2)) {
            if (!(O >>> 0 < 4096 >>> 0)) {
              break;
            }
            TB(e, _v((22010360 + ((O * 172) | 0)) | 0) | 0, L);
            p = 0;
            i = d;
            return p | 0;
          } else if ((M | 0) == 3) {
            if (!(O >>> 0 < 128 >>> 0)) {
              break;
            }
            TB(e, _v((22845952 + ((O * 172) | 0)) | 0) | 0, L);
            p = 0;
            i = d;
            return p | 0;
          }
        } while (0);
        a[e] = 0;
        p = 0;
        i = d;
        return p | 0;
      }
      case 25: {
        e = c[4917259] | 0;
        L = mD(c[(b + 4) >> 2] | 0) | 0;
        vk[e & 511](L);
        p = 0;
        i = d;
        return p | 0;
      }
      case 13: {
        L = mD(c[(b + 4) >> 2] | 0) | 0;
        e = mD(c[(b + 8) >> 2] | 0) | 0;
        p = Yu(L, e, c[(b + 12) >> 2] | 0) | 0;
        i = d;
        return p | 0;
      }
      case 84: {
        e = c[(b + 4) >> 2] | 0;
        L = c[(b + 8) >> 2] | 0;
        if ((e | 0) == 0) {
          if (!(L >>> 0 < 128 >>> 0)) {
            p = 0;
            i = d;
            return p | 0;
          }
          p = c[(21988496 + ((L * 172) | 0)) >> 2] | 0;
          i = d;
          return p | 0;
        } else if (((e | 0) == 1) | ((e | 0) == 2)) {
          if (!(L >>> 0 < 4096 >>> 0)) {
            p = 0;
            i = d;
            return p | 0;
          }
          p = c[(22010516 + ((L * 172) | 0)) >> 2] | 0;
          i = d;
          return p | 0;
        } else if ((e | 0) == 3) {
          if (!(L >>> 0 < 128 >>> 0)) {
            p = 0;
            i = d;
            return p | 0;
          }
          p = c[(22846108 + ((L * 172) | 0)) >> 2] | 0;
          i = d;
          return p | 0;
        } else {
          p = 0;
          i = d;
          return p | 0;
        }
        break;
      }
      case 69: {
        p = tp(c[(b + 4) >> 2] | 0) | 0;
        i = d;
        return p | 0;
      }
      case 70: {
        L = c[(b + 4) >> 2] | 0;
        if (((L | 0) == 1) | ((L | 0) == 2)) {
          P = 22010360;
          Q = 4096;
        } else if ((L | 0) == 3) {
          P = 22845952;
          Q = 128;
        } else if ((L | 0) == 0) {
          P = 21988340;
          Q = 128;
        } else {
          p = 0;
          i = d;
          return p | 0;
        }
        L = 0;
        while (1) {
          c[(P + ((L * 172) | 0) + 152) >> 2] = -1;
          e = (L + 1) | 0;
          if ((e | 0) < (Q | 0)) {
            L = e;
          } else {
            p = 0;
            break;
          }
        }
        i = d;
        return p | 0;
      }
      case 82: {
        L = mD(c[(b + 4) >> 2] | 0) | 0;
        Q = mD(c[(b + 8) >> 2] | 0) | 0;
        p = op(L, Q, c[(b + 12) >> 2] | 0) | 0;
        i = d;
        return p | 0;
      }
      case 85: {
        Q = c[(b + 4) >> 2] | 0;
        L = c[(b + 8) >> 2] | 0;
        P = c[(b + 12) >> 2] | 0;
        e = c[(b + 16) >> 2] | 0;
        O = c[(b + 20) >> 2] | 0;
        do {
          if ((Q | 0) == 0) {
            if (e >>> 0 < 128 >>> 0) {
              S = (21988340 + ((e * 172) | 0)) | 0;
            } else {
              S = 0;
            }
            if (O >>> 0 < 128 >>> 0) {
              U = (21988340 + ((O * 172) | 0)) | 0;
              X = S;
              break;
            } else {
              p = 0;
              i = d;
              return p | 0;
            }
          } else if (((Q | 0) == 1) | ((Q | 0) == 2)) {
            if (!(e >>> 0 < 4096 >>> 0)) {
              Y = 0;
              G = 154;
              break;
            }
            Y = (22010360 + ((e * 172) | 0)) | 0;
            G = 154;
          } else if ((Q | 0) == 3) {
            if (e >>> 0 < 128 >>> 0) {
              Z = (22845952 + ((e * 172) | 0)) | 0;
            } else {
              Z = 0;
            }
            if (O >>> 0 < 128 >>> 0) {
              U = (22845952 + ((O * 172) | 0)) | 0;
              X = Z;
              break;
            } else {
              p = 0;
              i = d;
              return p | 0;
            }
          } else {
            Y = 0;
            G = 154;
          }
        } while (0);
        do {
          if ((G | 0) == 154) {
            if ((((Q - 1) | 0) >>> 0 < 2 >>> 0) & (O >>> 0 < 4096 >>> 0)) {
              U = (22010360 + ((O * 172) | 0)) | 0;
              X = Y;
              break;
            } else {
              p = 0;
              i = d;
              return p | 0;
            }
          }
        } while (0);
        if ((X | 0) == 0) {
          p = 0;
          i = d;
          return p | 0;
        }
        c: do {
          switch (L | 0) {
            case 0: {
              _ = VB((X + 32) | 0, (U + 32) | 0) | 0;
              break;
            }
            case 1: {
              _ = VB((X + 64) | 0, (U + 64) | 0) | 0;
              break;
            }
            case 2: {
              Y = c[(X + 136) >> 2] | 0;
              O = c[(U + 136) >> 2] | 0;
              if ((Y | 0) < (O | 0)) {
                _ = -1;
                break c;
              }
              _ = ((Y | 0) > (O | 0)) | 0;
              break;
            }
            case 3: {
              O = c[(X + 132) >> 2] | 0;
              Y = c[(U + 132) >> 2] | 0;
              if ((O | 0) < (Y | 0)) {
                _ = -1;
                break c;
              }
              _ = ((O | 0) > (Y | 0)) | 0;
              break;
            }
            case 4: {
              Y = c[(X + 152) >> 2] | 0;
              O = c[(U + 152) >> 2] | 0;
              if ((Y | 0) < (O | 0)) {
                _ = -1;
                break c;
              }
              _ = ((Y | 0) > (O | 0)) | 0;
              break;
            }
            default: {
              _ = 0;
            }
          }
        } while (0);
        if ((P | 0) == 0) {
          p = _;
          i = d;
          return p | 0;
        }
        if ((_ | 0) < 0) {
          p = 1;
          i = d;
          return p | 0;
        }
        p = (((_ | 0) > 0) << 31) >> 31;
        i = d;
        return p | 0;
      }
      case 52: {
        p = ns() | 0;
        i = d;
        return p | 0;
      }
      case 53: {
        a[mD(c[(b + 4) >> 2] | 0) | 0] = 0;
        p = 0;
        i = d;
        return p | 0;
      }
      case 55: {
        _ = c[4917269] | 0;
        P = mD(c[(b + 4) >> 2] | 0) | 0;
        U = c[(b + 8) >> 2] | 0;
        X = mD(c[(b + 12) >> 2] | 0) | 0;
        Tk[_ & 255](P, U, X);
        p = 0;
        i = d;
        return p | 0;
      }
      case 100: {
        X = mD(c[(b + 4) >> 2] | 0) | 0;
        n$(X | 0, (c[(b + 8) >> 2] & 255) | 0, c[(b + 12) >> 2] | 0) | 0;
        p = 0;
        i = d;
        return p | 0;
      }
      case 101: {
        X = mD(c[(b + 4) >> 2] | 0) | 0;
        U = mD(c[(b + 8) >> 2] | 0) | 0;
        m$(X | 0, U | 0, c[(b + 12) >> 2] | 0) | 0;
        p = 0;
        i = d;
        return p | 0;
      }
      case 102: {
        U = (b + 4) | 0;
        X = mD(c[U >> 2] | 0) | 0;
        P = mD(c[(b + 8) >> 2] | 0) | 0;
        q$(X | 0, P | 0, c[(b + 12) >> 2] | 0) | 0;
        p = c[U >> 2] | 0;
        i = d;
        return p | 0;
      }
      case 103: {
        D = +W(+g[(b + 4) >> 2]);
        p = ((g[k >> 2] = D), c[k >> 2] | 0);
        i = d;
        return p | 0;
      }
      case 104: {
        D = +V(+g[(b + 4) >> 2]);
        p = ((g[k >> 2] = D), c[k >> 2] | 0);
        i = d;
        return p | 0;
      }
      case 105: {
        D = +g[(b + 4) >> 2];
        E = +$(+D, +(+g[(b + 8) >> 2]));
        p = ((g[k >> 2] = E), c[k >> 2] | 0);
        i = d;
        return p | 0;
      }
      case 106: {
        E = +T(+g[(b + 4) >> 2]);
        p = ((g[k >> 2] = E), c[k >> 2] | 0);
        i = d;
        return p | 0;
      }
      case 107: {
        E = +R(+g[(b + 4) >> 2]);
        p = ((g[k >> 2] = E), c[k >> 2] | 0);
        i = d;
        return p | 0;
      }
      case 108: {
        E = +ca(+g[(b + 4) >> 2]);
        p = ((g[k >> 2] = E), c[k >> 2] | 0);
        i = d;
        return p | 0;
      }
      case 57: {
        U = c[((c[7092486] | 0) + 500) >> 2] | 0;
        P = mD(c[(b + 4) >> 2] | 0) | 0;
        p = jk[U & 255](P) | 0;
        i = d;
        return p | 0;
      }
      case 58: {
        P = c[((c[7092486] | 0) + 504) >> 2] | 0;
        U = mD(c[(b + 4) >> 2] | 0) | 0;
        p = jk[P & 255](U) | 0;
        i = d;
        return p | 0;
      }
      case 59: {
        p = jk[c[((c[7092486] | 0) + 508) >> 2] & 255](c[(b + 4) >> 2] | 0) | 0;
        i = d;
        return p | 0;
      }
      case 60: {
        U = c[((c[7092486] | 0) + 512) >> 2] | 0;
        P = c[(b + 4) >> 2] | 0;
        X = mD(c[(b + 8) >> 2] | 0) | 0;
        p = Kk[U & 255](P, X) | 0;
        i = d;
        return p | 0;
      }
      case 61: {
        X = c[((c[7092486] | 0) + 516) >> 2] | 0;
        P = c[(b + 4) >> 2] | 0;
        U = mD(c[(b + 8) >> 2] | 0) | 0;
        _ = mD(c[(b + 12) >> 2] | 0) | 0;
        p = rk[X & 63](P, U, _) | 0;
        i = d;
        return p | 0;
      }
      case 62: {
        yx();
        p = 0;
        i = d;
        return p | 0;
      }
      case 63: {
        _ = mD(c[(b + 4) >> 2] | 0) | 0;
        xx(_, mD(c[(b + 8) >> 2] | 0) | 0);
        p = 0;
        i = d;
        return p | 0;
      }
      case 64: {
        p = cs(mD(c[(b + 4) >> 2] | 0) | 0) | 0;
        i = d;
        return p | 0;
      }
      case 75: {
        Tr(
          61448,
          ((s = i), (i = (i + 1) | 0), (i = (i + 7) & -8), (c[s >> 2] = 0), s) |
            0
        );
        i = s;
        _ = mD(c[(b + 4) >> 2] | 0) | 0;
        p =
          Dl(
            _,
            c[(b + 8) >> 2] | 0,
            c[(b + 12) >> 2] | 0,
            c[(b + 16) >> 2] | 0,
            c[(b + 20) >> 2] | 0,
            c[(b + 24) >> 2] | 0
          ) | 0;
        i = d;
        return p | 0;
      }
      case 76: {
        p = Al(c[(b + 4) >> 2] | 0) | 0;
        i = d;
        return p | 0;
      }
      case 77: {
        p = Cl(c[(b + 4) >> 2] | 0) | 0;
        i = d;
        return p | 0;
      }
      case 78: {
        Gl(c[(b + 4) >> 2] | 0);
        p = 0;
        i = d;
        return p | 0;
      }
      case 79: {
        El(
          c[(b + 4) >> 2] | 0,
          c[(b + 8) >> 2] | 0,
          c[(b + 12) >> 2] | 0,
          c[(b + 16) >> 2] | 0,
          c[(b + 20) >> 2] | 0
        );
        p = 0;
        i = d;
        return p | 0;
      }
      case 80: {
        _ = c[4917270] | 0;
        U = mD(c[(b + 4) >> 2] | 0) | 0;
        P = mD(c[(b + 8) >> 2] | 0) | 0;
        X = mD(c[(b + 12) >> 2] | 0) | 0;
        Tk[_ & 255](U, P, X);
        p = 0;
        i = d;
        return p | 0;
      }
      case 81: {
        X = mD(c[(b + 4) >> 2] | 0) | 0;
        p = up(X, mD(c[(b + 8) >> 2] | 0) | 0) | 0;
        i = d;
        return p | 0;
      }
      case 54:
      case 87: {
        p = 0;
        i = d;
        return p | 0;
      }
      default: {
        Ur(1, 54024, ((s = i), (i = (i + 8) | 0), (c[s >> 2] = l), s) | 0);
        i = s;
        return 0;
      }
    }
    return 0;
  }
  function Vp() {
    var a = 0,
      b = 0;
    a = i;
    In((Jn() | 0) & -3);
    c[5497078] = 0;
    b = c[236124] | 0;
    if ((b | 0) == 0) {
      i = a;
      return;
    }
    oD(
      b,
      2,
      ((b = i), (i = (i + 1) | 0), (i = (i + 7) & -8), (c[b >> 2] = 0), b) | 0
    ) | 0;
    i = b;
    gD(c[236124] | 0);
    c[236124] = 0;
    c[5720357] = 0;
    c[5720374] = 0;
    i = a;
    return;
  }
  function Wp() {
    var a = 0,
      b = 0,
      d = 0,
      e = 0,
      f = 0,
      g = 0;
    a = i;
    b = ~~+at(47992);
    if ((c[5811764] | 0) == 0) {
      d = b;
    } else {
      d = ((b - 1) | 0) >>> 0 > 1 >>> 0 ? 2 : b;
    }
    b = iD(43848, 4, d) | 0;
    c[236124] = b;
    if ((b | 0) == 0) {
      Ur(
        0,
        182936,
        ((e = i), (i = (i + 1) | 0), (i = (i + 7) & -8), (c[e >> 2] = 0), e) | 0
      );
      i = e;
    }
    d =
      oD(
        b,
        0,
        ((e = i), (i = (i + 1) | 0), (i = (i + 7) & -8), (c[e >> 2] = 0), e) | 0
      ) | 0;
    i = e;
    if ((d | 0) == 4) {
      b = c[5720394] | 0;
      if (b >>> 0 > 1 >>> 0) {
        f = (b >>> 0 < 8 >>> 0) | 0;
      } else {
        f = 0;
      }
      oD(
        c[236124] | 0,
        1,
        ((e = i), (i = (i + 8) | 0), (c[e >> 2] = f), e) | 0
      ) | 0;
      i = e;
      i = a;
      return;
    }
    f = c[236124] | 0;
    if ((d | 0) != 6) {
      gD(f);
      c[236124] = 0;
      Ur(
        1,
        178856,
        ((e = i),
        (i = (i + 16) | 0),
        (c[e >> 2] = d),
        (c[(e + 8) >> 2] = 6),
        e) | 0
      );
      i = e;
    }
    d = c[5720394] | 0;
    if (d >>> 0 > 1 >>> 0) {
      g = (d >>> 0 < 8 >>> 0) | 0;
    } else {
      g = 0;
    }
    oD(f, 1, ((e = i), (i = (i + 8) | 0), (c[e >> 2] = g), e) | 0) | 0;
    i = e;
    i = a;
    return;
  }
  function Xp() {
    var a = 0,
      b = 0,
      d = 0,
      e = 0;
    a = i;
    b = c[236124] | 0;
    if ((b | 0) == 0) {
      d = 0;
      i = a;
      return d | 0;
    }
    e =
      oD(b, 8, ((b = i), (i = (i + 8) | 0), (c[b >> 2] = c[5497082]), b) | 0) |
      0;
    i = b;
    d = e;
    i = a;
    return d | 0;
  }
  function Yp() {
    var d = 0,
      e = 0,
      f = 0,
      g = 0,
      h = 0,
      j = 0,
      k = 0,
      l = 0,
      m = 0,
      n = 0,
      o = 0,
      p = 0,
      q = 0,
      r = 0,
      s = 0,
      t = 0,
      u = 0,
      v = 0,
      w = 0,
      x = 0,
      y = 0,
      A = 0,
      B = 0,
      C = 0,
      D = 0,
      E = 0,
      F = 0;
    d = i;
    c[7094418] = 0;
    c[6924894] = 1179011410;
    c[6924895] = 0;
    c[6924896] = 541677121;
    c[7094419] = 12;
    c[7094434] = 2;
    c[6924897] = 1414744396;
    c[6924898] = 0;
    c[6924899] = 1819436136;
    c[6924900] = 1751742049;
    a[27699604] = 56;
    a[27699605] = 0;
    a[27699606] = 0;
    a[27699607] = 0;
    e = c[7094404] | 0;
    a[27699608] = e;
    a[27699609] = e >>> 8;
    a[27699610] = e >>> 16;
    a[27699611] = e >>> 24;
    e = c[7094408] | 0;
    f = c[7094403] | 0;
    g = da(f, e) | 0;
    a[27699612] = g;
    a[27699613] = g >>> 8;
    a[27699614] = g >>> 16;
    a[27699615] = g >>> 24;
    c[6924904] = 0;
    a[27699620] = 16;
    a[27699621] = 1;
    a[27699622] = 0;
    a[27699623] = 0;
    g = c[7094407] | 0;
    h = g & 255;
    a[27699624] = h;
    j = (g >>> 8) & 255;
    a[27699625] = j;
    k = (g >>> 16) & 255;
    a[27699626] = k;
    l = (g >>> 24) & 255;
    a[27699627] = l;
    c[6924907] = 0;
    c[6925406] = 56;
    g = (c[7094410] | 0) == 0;
    a[27699632] = g ? 1 : 2;
    a[27699633] = 0;
    a[27699634] = 0;
    a[27699635] = 0;
    m = e & 255;
    a[27699636] = m;
    n = (e >>> 8) & 255;
    a[27699637] = n;
    o = (e >>> 16) & 255;
    a[27699638] = o;
    p = (e >>> 24) & 255;
    a[27699639] = p;
    e = c[7094405] | 0;
    q = e & 255;
    a[27699640] = q;
    r = (e >>> 8) & 255;
    a[27699641] = r;
    s = (e >>> 16) & 255;
    a[27699642] = s;
    t = (e >>> 24) & 255;
    a[27699643] = t;
    u = c[7094406] | 0;
    v = u & 255;
    a[27699644] = v;
    w = (u >>> 8) & 255;
    a[27699645] = w;
    x = (u >>> 16) & 255;
    a[27699646] = x;
    y = (u >>> 24) & 255;
    a[27699647] = y;
    c[6924912] = 0;
    c[6924913] = 0;
    c[6924914] = 0;
    c[6924915] = 0;
    c[7094420] = 88;
    c[7094434] = 3;
    c[6924916] = 1414744396;
    c[6924917] = 0;
    c[6924918] = 1819440243;
    c[6924919] = 1752331379;
    a[27699680] = 56;
    a[27699681] = 0;
    a[27699682] = 0;
    a[27699683] = 0;
    c[6924921] = 1935960438;
    c[6925406] = 112;
    A = (c[7094409] | 0) == 0;
    c[6924922] = A ? 0 : 1196444237;
    c[6924923] = 0;
    c[6924924] = 0;
    c[6924925] = 0;
    a[27699704] = 1;
    a[27699705] = 0;
    a[27699706] = 0;
    a[27699707] = 0;
    a[27699708] = f;
    a[27699709] = f >>> 8;
    a[27699710] = f >>> 16;
    a[27699711] = f >>> 24;
    c[6924928] = 0;
    a[27699716] = h;
    a[27699717] = j;
    a[27699718] = k;
    a[27699719] = l;
    a[27699720] = m;
    a[27699721] = n;
    a[27699722] = o;
    a[27699723] = p;
    c[6924931] = -1;
    c[6924932] = 0;
    a[27699732] = 0;
    a[27699733] = 0;
    a[27699734] = 0;
    a[27699735] = 0;
    a[27699736] = q;
    a[27699737] = r;
    a[27699738] = v;
    a[27699739] = w;
    c[6924935] = 1718776947;
    a[27699744] = 40;
    a[27699745] = 0;
    a[27699746] = 0;
    a[27699747] = 0;
    a[27699748] = 40;
    a[27699749] = 0;
    a[27699750] = 0;
    a[27699751] = 0;
    a[27699752] = q;
    a[27699753] = r;
    a[27699754] = s;
    a[27699755] = t;
    a[27699756] = v;
    a[27699757] = w;
    a[27699758] = x;
    a[27699759] = y;
    a[27699760] = 1;
    a[27699761] = 0;
    a[27699762] = 24;
    a[27699763] = 0;
    c[6925406] = 188;
    if (A) {
      c[6924941] = 0;
      c[6925406] = 192;
      A = da((e * 3) | 0, u) | 0;
      a[27699768] = A;
      a[27699769] = A >>> 8;
      B = (A >>> 24) & 255;
      C = (A >>> 16) & 255;
    } else {
      c[6924941] = 1196444237;
      c[6925406] = 192;
      A = da(u, e) | 0;
      a[27699768] = A;
      a[27699769] = A >>> 8;
      B = (A >>> 24) & 255;
      C = (A >>> 16) & 255;
    }
    a[27699770] = C;
    a[27699771] = B;
    c[6924943] = 0;
    c[6924944] = 0;
    c[6924945] = 0;
    c[6924946] = 0;
    c[7094434] = 2;
    a[27699668] = 116;
    a[27699669] = 0;
    a[27699670] = 0;
    a[27699671] = 0;
    c[6925406] = 212;
    do {
      if (g) {
        D = 2;
        E = 212;
      } else {
        c[7094420] = 212;
        c[7094434] = 3;
        c[6924947] = 1414744396;
        c[6924948] = 0;
        c[6924949] = 1819440243;
        c[6924950] = 1752331379;
        a[27699804] = 56;
        a[27699805] = 0;
        a[27699806] = 0;
        a[27699807] = 0;
        c[6924952] = 1935963489;
        c[6924953] = 0;
        c[6924954] = 0;
        c[6924955] = 0;
        c[6924956] = 0;
        B = c[7094415] | 0;
        C = B & 255;
        a[27699828] = C;
        A = (B >>> 8) & 255;
        a[27699829] = A;
        e = (B >>> 16) & 255;
        a[27699830] = e;
        u = (B >>> 24) & 255;
        a[27699831] = u;
        y = c[7094411] | 0;
        x = da(y, B) | 0;
        a[27699832] = x;
        a[27699833] = x >>> 8;
        a[27699834] = x >>> 16;
        a[27699835] = x >>> 24;
        c[6924959] = 0;
        x = ((c[7094416] | 0) / (B | 0)) | 0;
        a[27699840] = x;
        a[27699841] = x >>> 8;
        a[27699842] = x >>> 16;
        a[27699843] = x >>> 24;
        c[6924961] = 0;
        c[6924962] = -1;
        a[27699852] = C;
        a[27699853] = A;
        a[27699854] = e;
        a[27699855] = u;
        a[27699856] = 0;
        a[27699857] = 0;
        a[27699858] = 0;
        a[27699859] = 0;
        a[27699860] = 0;
        a[27699861] = 0;
        a[27699862] = 0;
        a[27699863] = 0;
        c[6924966] = 1718776947;
        a[27699868] = 18;
        a[27699869] = 0;
        a[27699870] = 0;
        a[27699871] = 0;
        u = c[7094412] | 0;
        a[27699872] = u;
        a[27699873] = u >>> 8;
        u = c[7094413] | 0;
        a[27699874] = u;
        a[27699875] = u >>> 8;
        a[27699876] = y;
        a[27699877] = y >>> 8;
        a[27699878] = y >>> 16;
        a[27699879] = y >>> 24;
        u = c[7094415] | 0;
        e = da(y, u) | 0;
        a[27699880] = e;
        a[27699881] = e >>> 8;
        a[27699882] = e >>> 16;
        a[27699883] = e >>> 24;
        a[27699884] = u;
        a[27699885] = u >>> 8;
        u = c[7094414] | 0;
        a[27699886] = u;
        a[27699887] = u >>> 8;
        a[27699888] = 0;
        a[27699889] = 0;
        c[6925406] = 314;
        u = c[7094434] | 0;
        if ((u | 0) < 1) {
          Ur(
            1,
            136360,
            ((F = i),
            (i = (i + 1) | 0),
            (i = (i + 7) & -8),
            (c[F >> 2] = 0),
            F) | 0
          );
          i = F;
        }
        e = (u - 1) | 0;
        c[7094434] = e;
        y = c[(28377672 + (e << 2)) >> 2] | 0;
        A = (310 - y - 4) | 0;
        a[(y + 27699580) | 0] = A;
        a[(y + 27699581) | 0] = A >>> 8;
        a[(y + 27699582) | 0] = A >>> 16;
        a[(y + 27699583) | 0] = A >>> 24;
        c[6925406] = 314;
        if ((u | 0) >= 2) {
          D = e;
          E = 314;
          break;
        }
        Ur(
          1,
          136360,
          ((F = i), (i = (i + 1) | 0), (i = (i + 7) & -8), (c[F >> 2] = 0), F) |
            0
        );
        i = F;
      }
    } while (0);
    g = (D - 1) | 0;
    c[7094434] = g;
    D = (28377672 + (g << 2)) | 0;
    e = c[D >> 2] | 0;
    u = (e + 4) | 0;
    A = (E - u - 4) | 0;
    a[(27699576 + u) | 0] = A;
    a[(e + 27699581) | 0] = A >>> 8;
    a[(e + 27699582) | 0] = A >>> 16;
    a[(e + 27699583) | 0] = A >>> 24;
    c[6925406] = E;
    c[7094399] = E;
    if ((g | 0) == 16) {
      Ur(
        1,
        134904,
        ((F = i), (i = (i + 1) | 0), (i = (i + 7) & -8), (c[F >> 2] = 0), F) | 0
      );
      i = F;
    } else {
      c[D >> 2] = E;
      c[7094434] = (c[7094434] | 0) + 1;
      D = (27699576 + E) | 0;
      z = 1414744396;
      b[D >> 1] = z;
      b[(D + 2) >> 1] = z >> 16;
      a[(E + 27699580) | 0] = 0;
      a[(E + 27699581) | 0] = 0;
      a[(E + 27699582) | 0] = 0;
      a[(E + 27699583) | 0] = 0;
      D = (E + 27699584) | 0;
      z = 1769369453;
      b[D >> 1] = z;
      b[(D + 2) >> 1] = z >> 16;
      c[6925406] = E + 12;
      i = d;
      return;
    }
  }
  function Zp(a) {
    a = a | 0;
    var b = 0,
      d = 0,
      e = 0,
      f = 0,
      g = 0;
    b = i;
    if ((c[7094380] | 0) != 0) {
      d = 0;
      i = b;
      return d | 0;
    }
    n$(28377520, 0, 228) | 0;
    if ((c[((c[5811772] | 0) + 32) >> 2] | 0) < 1) {
      Sr(
        174464,
        ((e = i), (i = (i + 1) | 0), (i = (i + 7) & -8), (c[e >> 2] = 0), e) | 0
      );
      i = e;
      d = 0;
      i = b;
      return d | 0;
    }
    f = Zt(a) | 0;
    c[7094381] = f;
    if ((f | 0) < 1) {
      d = 0;
      i = b;
      return d | 0;
    }
    f = pC(171168, ((e = i), (i = (i + 8) | 0), (c[e >> 2] = a), e) | 0) | 0;
    i = e;
    g = Zt(f) | 0;
    c[7094401] = g;
    if ((g | 0) < 1) {
      Yt(c[7094381] | 0);
      d = 0;
      i = b;
      return d | 0;
    }
    TB(28377528, a, 64);
    a = c[((c[5811772] | 0) + 32) >> 2] | 0;
    c[7094403] = a;
    c[7094404] = ~~(1.0e6 / +(a | 0));
    a = c[5720347] | 0;
    c[7094405] = a;
    g = c[5720348] | 0;
    c[7094406] = g;
    c[7094409] = (c[((c[5811770] | 0) + 32) >> 2] | 0) != 0;
    c[7094435] = gs(((da((((a * 3) | 0) + 15) | 0, g) | 0) + 15) | 0) | 0;
    c[7094436] =
      gs(da(((((c[7094405] | 0) * 3) | 0) + 3) & -4, c[7094406] | 0) | 0) | 0;
    g = c[5385960] | 0;
    c[7094411] = g;
    c[7094412] = 1;
    a = c[5385956] | 0;
    c[7094413] = a;
    f = c[5385959] | 0;
    c[7094414] = f;
    c[7094415] = da(a, ((f | 0) / 8) | 0) | 0;
    f = c[7094403] | 0;
    if (((g | 0) % (f | 0) | 0 | 0) != 0) {
      a = f;
      while (1) {
        if (((a | 0) > 0) & (((g | 0) % (a | 0) | 0 | 0) != 0)) {
          a = (a - 1) | 0;
        } else {
          break;
        }
      }
      Sr(168176, ((e = i), (i = (i + 8) | 0), (c[e >> 2] = a), e) | 0);
      i = e;
    }
    do {
      if ((bt(164824) | 0) == 0) {
        c[7094410] = 0;
      } else {
        if ((VB(ct(161816) | 0, 158808) | 0) == 0) {
          c[7094410] = 0;
          Sr(
            154208,
            ((e = i),
            (i = (i + 1) | 0),
            (i = (i + 7) & -8),
            (c[e >> 2] = 0),
            e) | 0
          );
          i = e;
          break;
        }
        a = c[7094414] | 0;
        g = c[7094413] | 0;
        if (((a | 0) != 16) | ((g | 0) != 2)) {
          Sr(
            156400,
            ((e = i),
            (i = (i + 16) | 0),
            (c[e >> 2] = a),
            (c[(e + 8) >> 2] = g),
            e) | 0
          );
          i = e;
          c[7094410] = 0;
          break;
        } else {
          c[7094410] = 1;
          break;
        }
      }
    } while (0);
    Yp();
    g = c[6925406] | 0;
    if ((gu(27699576, g, c[7094381] | 0) | 0) < (g | 0)) {
      Ur(
        1,
        138e3,
        ((e = i), (i = (i + 1) | 0), (i = (i + 7) & -8), (c[e >> 2] = 0), e) | 0
      );
      i = e;
      return 0;
    }
    c[7094398] = c[6925406];
    c[6925406] = 0;
    g = c[7094434] | 0;
    if ((g | 0) == 16) {
      Ur(
        1,
        134904,
        ((e = i), (i = (i + 1) | 0), (i = (i + 7) & -8), (c[e >> 2] = 0), e) | 0
      );
      i = e;
      return 0;
    }
    c[(28377672 + (g << 2)) >> 2] = 0;
    c[7094434] = (c[7094434] | 0) + 1;
    c[6924894] = 829973609;
    c[6924895] = 0;
    c[6925406] = 8;
    if ((gu(27699576, 8, c[7094401] | 0) | 0) < 8) {
      Ur(
        1,
        138e3,
        ((e = i), (i = (i + 1) | 0), (i = (i + 7) & -8), (c[e >> 2] = 0), e) | 0
      );
      i = e;
      return 0;
    }
    c[7094400] = 4;
    c[7094380] = 1;
    d = 1;
    i = b;
    return d | 0;
  }
  function _p(b, d) {
    b = b | 0;
    d = d | 0;
    var e = 0,
      f = 0,
      g = 0,
      h = 0,
      j = 0,
      k = 0,
      l = 0,
      m = 0,
      n = 0,
      o = 0;
    e = i;
    i = (i + 8) | 0;
    f = e | 0;
    g = c[7094398] | 0;
    h = (g - (c[7094399] | 0) - 8) | 0;
    j = (d + 1) & -2;
    k = (j - d) | 0;
    c[f >> 2] = 0;
    if ((c[7094380] | 0) == 0) {
      i = e;
      return;
    }
    if (((d + 14 + g + (c[7094402] << 4)) | 0) < 0) {
      bq() | 0;
      g =
        pC(
          140424,
          ((l = i), (i = (i + 8) | 0), (c[l >> 2] = 28377528), l) | 0
        ) | 0;
      i = l;
      Zp(g) | 0;
      i = e;
      return;
    }
    c[6924894] = 1667510320;
    g = d & 255;
    a[27699580] = g;
    m = (d >>> 8) & 255;
    a[27699581] = m;
    n = (d >>> 16) & 255;
    a[27699582] = n;
    o = (d >>> 24) & 255;
    a[27699583] = o;
    c[6925406] = 8;
    if ((gu(27699576, 8, c[7094381] | 0) | 0) < 8) {
      Ur(
        1,
        138e3,
        ((l = i), (i = (i + 1) | 0), (i = (i + 7) & -8), (c[l >> 2] = 0), l) | 0
      );
      i = l;
    }
    if ((gu(b, d, c[7094381] | 0) | 0) < (d | 0)) {
      Ur(
        1,
        138e3,
        ((l = i), (i = (i + 1) | 0), (i = (i + 7) & -8), (c[l >> 2] = 0), l) | 0
      );
      i = l;
    }
    if ((gu(f, k, c[7094381] | 0) | 0) < (k | 0)) {
      Ur(
        1,
        138e3,
        ((l = i), (i = (i + 1) | 0), (i = (i + 7) & -8), (c[l >> 2] = 0), l) | 0
      );
      i = l;
    }
    k = (j + 8) | 0;
    c[7094398] = (c[7094398] | 0) + k;
    c[7094407] = (c[7094407] | 0) + 1;
    c[7094400] = (c[7094400] | 0) + k;
    if ((c[7094408] | 0) < (d | 0)) {
      c[7094408] = d;
    }
    c[6924894] = 1667510320;
    a[27699580] = 16;
    a[27699581] = 0;
    a[27699582] = 0;
    a[27699583] = 0;
    a[27699584] = h;
    a[27699585] = h >>> 8;
    a[27699586] = h >>> 16;
    a[27699587] = h >>> 24;
    a[27699588] = g;
    a[27699589] = m;
    a[27699590] = n;
    a[27699591] = o;
    c[6925406] = 16;
    if ((gu(27699576, 16, c[7094401] | 0) | 0) < 16) {
      Ur(
        1,
        138e3,
        ((l = i), (i = (i + 1) | 0), (i = (i + 7) & -8), (c[l >> 2] = 0), l) | 0
      );
      i = l;
    }
    c[7094402] = (c[7094402] | 0) + 1;
    i = e;
    return;
  }
  function $p(b, d) {
    b = b | 0;
    d = d | 0;
    var e = 0,
      f = 0,
      g = 0,
      h = 0,
      j = 0,
      k = 0,
      l = 0;
    e = i;
    i = (i + 8) | 0;
    f = e | 0;
    if (!(((c[7094410] | 0) != 0) & ((c[7094380] | 0) != 0))) {
      i = e;
      return;
    }
    g = c[7584140] | 0;
    if (((d + 14 + g + (c[7094398] | 0) + (c[7094402] << 4)) | 0) < 0) {
      bq() | 0;
      h =
        pC(
          140424,
          ((j = i), (i = (i + 8) | 0), (c[j >> 2] = 28377528), j) | 0
        ) | 0;
      i = j;
      Zp(h) | 0;
      i = e;
      return;
    }
    if (((g + d) | 0) > 44100) {
      Sr(
        147744,
        ((j = i), (i = (i + 1) | 0), (i = (i + 7) & -8), (c[j >> 2] = 0), j) | 0
      );
      i = j;
      h = c[7584140] | 0;
      k = (44100 - h) | 0;
      l = h;
    } else {
      k = d;
      l = g;
    }
    m$((30292456 + l) | 0, b | 0, k) | 0;
    b = (l + k) | 0;
    c[7584140] = b;
    k = ~~+ca(+(c[7094411] | 0) / +(c[7094403] | 0));
    if ((b | 0) < (da(k, c[7094415] | 0) | 0)) {
      i = e;
      return;
    }
    k = ((c[7094398] | 0) - (c[7094399] | 0) - 8) | 0;
    l = (b + 1) & -2;
    g = (l - b) | 0;
    c[f >> 2] = 0;
    c[6924894] = 1651978544;
    a[27699580] = b;
    a[27699581] = b >>> 8;
    a[27699582] = b >>> 16;
    a[27699583] = b >>> 24;
    c[6925406] = 8;
    if ((gu(27699576, 8, c[7094381] | 0) | 0) < 8) {
      Ur(
        1,
        138e3,
        ((j = i), (i = (i + 1) | 0), (i = (i + 7) & -8), (c[j >> 2] = 0), j) | 0
      );
      i = j;
    }
    b = c[7584140] | 0;
    if ((gu(30292456, b, c[7094381] | 0) | 0) < (b | 0)) {
      Ur(
        1,
        138e3,
        ((j = i), (i = (i + 1) | 0), (i = (i + 7) & -8), (c[j >> 2] = 0), j) | 0
      );
      i = j;
    }
    if ((gu(f, g, c[7094381] | 0) | 0) < (g | 0)) {
      Ur(
        1,
        138e3,
        ((j = i), (i = (i + 1) | 0), (i = (i + 7) & -8), (c[j >> 2] = 0), j) | 0
      );
      i = j;
    }
    g = (l + 8) | 0;
    c[7094398] = (c[7094398] | 0) + g;
    c[7094417] = (c[7094417] | 0) + 1;
    c[7094400] = (c[7094400] | 0) + g;
    g = c[7584140] | 0;
    c[7094416] = (c[7094416] | 0) + g;
    c[6924894] = 1651978544;
    c[6924895] = 0;
    a[27699584] = k;
    a[27699585] = k >>> 8;
    a[27699586] = k >>> 16;
    a[27699587] = k >>> 24;
    a[27699588] = g;
    a[27699589] = g >>> 8;
    a[27699590] = g >>> 16;
    a[27699591] = g >>> 24;
    c[6925406] = 16;
    if ((gu(27699576, 16, c[7094401] | 0) | 0) < 16) {
      Ur(
        1,
        138e3,
        ((j = i), (i = (i + 1) | 0), (i = (i + 7) & -8), (c[j >> 2] = 0), j) | 0
      );
      i = j;
    }
    c[7094402] = (c[7094402] | 0) + 1;
    c[7584140] = 0;
    i = e;
    return;
  }
  function aq() {
    if ((c[7094380] | 0) == 0) {
      return;
    }
    fk[c[4917273] & 127](
      c[7094405] | 0,
      c[7094406] | 0,
      c[7094435] | 0,
      c[7094436] | 0,
      c[7094409] | 0
    );
    return;
  }
  function bq() {
    var b = 0,
      d = 0,
      e = 0,
      f = 0,
      g = 0,
      h = 0,
      j = 0,
      k = 0,
      l = 0,
      m = 0,
      n = 0,
      o = 0;
    b = i;
    d = c[7094402] | 0;
    e =
      pC(171168, ((f = i), (i = (i + 8) | 0), (c[f >> 2] = 28377528), f) | 0) |
      0;
    i = f;
    if ((c[7094380] | 0) == 0) {
      g = 0;
      i = b;
      return g | 0;
    }
    c[7094380] = 0;
    iu(c[7094401] | 0, 4, 2) | 0;
    a[27699576] = d << 4;
    a[27699577] = d >>> 4;
    a[27699578] = d >>> 12;
    a[27699579] = d >>> 20;
    c[6925406] = 4;
    if ((gu(27699576, 4, c[7094401] | 0) | 0) < 4) {
      Ur(
        1,
        138e3,
        ((f = i), (i = (i + 1) | 0), (i = (i + 7) & -8), (c[f >> 2] = 0), f) | 0
      );
      i = f;
      return 0;
    }
    Yt(c[7094401] | 0);
    d = cu(e, 28377604, 1) | 0;
    if ((d | 0) < 1) {
      Yt(c[7094381] | 0);
      g = 0;
      i = b;
      return g | 0;
    }
    h = c[7094401] | 0;
    a: do {
      if ((d | 0) > 2048) {
        j = d;
        k = h;
        while (1) {
          fu(27699576, 2048, k) | 0;
          if ((gu(27699576, 2048, c[7094381] | 0) | 0) < 2048) {
            break;
          }
          c[7094398] = (c[7094398] | 0) + 2048;
          l = (j - 2048) | 0;
          m = c[7094401] | 0;
          if ((l | 0) > 2048) {
            j = l;
            k = m;
          } else {
            n = l;
            o = m;
            break a;
          }
        }
        Ur(
          1,
          138e3,
          ((f = i), (i = (i + 1) | 0), (i = (i + 7) & -8), (c[f >> 2] = 0), f) |
            0
        );
        i = f;
        return 0;
      } else {
        n = d;
        o = h;
      }
    } while (0);
    fu(27699576, n, o) | 0;
    if ((gu(27699576, n, c[7094381] | 0) | 0) < (n | 0)) {
      Ur(
        1,
        138e3,
        ((f = i), (i = (i + 1) | 0), (i = (i + 7) & -8), (c[f >> 2] = 0), f) | 0
      );
      i = f;
      return 0;
    }
    c[7094398] = (c[7094398] | 0) + n;
    Yt(c[7094401] | 0);
    Tt(e);
    iu(c[7094381] | 0, 0, 2) | 0;
    Yp();
    e = ((c[7094398] | 0) - 8) | 0;
    a[27699580] = e;
    a[27699581] = e >>> 8;
    a[27699582] = e >>> 16;
    a[27699583] = e >>> 24;
    e = c[7094399] | 0;
    n = c[7094400] | 0;
    a[(e + 27699580) | 0] = n;
    a[(e + 27699581) | 0] = n >>> 8;
    a[(e + 27699582) | 0] = n >>> 16;
    a[(e + 27699583) | 0] = n >>> 24;
    n = (e + 8) | 0;
    c[6925406] = n;
    if ((gu(27699576, n, c[7094381] | 0) | 0) < (n | 0)) {
      Ur(
        1,
        138e3,
        ((f = i), (i = (i + 1) | 0), (i = (i + 7) & -8), (c[f >> 2] = 0), f) | 0
      );
      i = f;
      return 0;
    }
    es(c[7094435] | 0);
    es(c[7094436] | 0);
    Yt(c[7094381] | 0);
    n = c[7094417] | 0;
    Sr(
      142720,
      ((f = i),
      (i = (i + 24) | 0),
      (c[f >> 2] = c[7094407]),
      (c[(f + 8) >> 2] = n),
      (c[(f + 16) >> 2] = 28377528),
      f) | 0
    );
    i = f;
    g = 1;
    i = b;
    return g | 0;
  }
  function cq() {
    return c[7094380] | 0;
  }
  function dq(a) {
    a = a | 0;
    var b = 0,
      d = 0,
      e = 0,
      f = 0,
      h = 0,
      j = 0,
      k = 0,
      l = 0;
    b = i;
    d = ((c[5458858] | 0) + (c[a >> 2] | 0)) | 0;
    e = c[(a + 4) >> 2] | 0;
    if (((e >>> 0) % 40 | 0 | 0) != 0) {
      Ur(
        1,
        136568,
        ((f = i), (i = (i + 1) | 0), (i = (i + 7) & -8), (c[f >> 2] = 0), f) | 0
      );
      i = f;
    }
    a = ((e >>> 0) / 40) | 0;
    if (e >>> 0 < 40 >>> 0) {
      Ur(
        1,
        124256,
        ((f = i), (i = (i + 1) | 0), (i = (i + 7) & -8), (c[f >> 2] = 0), f) | 0
      );
      i = f;
    }
    h = rs((a * 48) | 0, 0) | 0;
    c[5497055] = h;
    c[5497054] = a;
    if (e >>> 0 > 10279 >>> 0) {
      Ur(
        1,
        113360,
        ((f = i), (i = (i + 1) | 0), (i = (i + 7) & -8), (c[f >> 2] = 0), f) | 0
      );
      i = f;
    } else {
      j = 0;
      k = d;
      l = h;
    }
    while (1) {
      g[(l + ((j * 48) | 0)) >> 2] = +g[k >> 2] + -1.0;
      g[(l + ((j * 48) | 0) + 12) >> 2] = +g[(k + 12) >> 2] + 1.0;
      g[(l + ((j * 48) | 0) + 4) >> 2] = +g[(k + 4) >> 2] + -1.0;
      g[(l + ((j * 48) | 0) + 16) >> 2] = +g[(k + 16) >> 2] + 1.0;
      g[(l + ((j * 48) | 0) + 8) >> 2] = +g[(k + 8) >> 2] + -1.0;
      g[(l + ((j * 48) | 0) + 20) >> 2] = +g[(k + 20) >> 2] + 1.0;
      do {
        if ((j | 0) != 0) {
          h = c[(k + 36) >> 2] | 0;
          d = (l + ((j * 48) | 0) + 36) | 0;
          c[d >> 2] = h;
          f = rs(h << 2, 0) | 0;
          h = f;
          c[(l + ((j * 48) | 0) + 32) >> 2] = (f - (c[5497051] | 0)) >> 2;
          if ((c[d >> 2] | 0) > 0) {
            f = (k + 32) | 0;
            e = 0;
            do {
              c[(h + (e << 2)) >> 2] = (c[f >> 2] | 0) + e;
              e = (e + 1) | 0;
            } while ((e | 0) < (c[d >> 2] | 0));
          }
          d = c[(k + 28) >> 2] | 0;
          e = (l + ((j * 48) | 0) + 44) | 0;
          c[e >> 2] = d;
          f = rs(d << 2, 0) | 0;
          d = f;
          c[(l + ((j * 48) | 0) + 40) >> 2] = (f - (c[5497053] | 0)) >> 2;
          if ((c[e >> 2] | 0) <= 0) {
            break;
          }
          f = (k + 24) | 0;
          h = 0;
          do {
            c[(d + (h << 2)) >> 2] = (c[f >> 2] | 0) + h;
            h = (h + 1) | 0;
          } while ((h | 0) < (c[e >> 2] | 0));
        }
      } while (0);
      e = (j + 1) | 0;
      if ((e | 0) >= (a | 0)) {
        break;
      }
      j = e;
      k = (k + 40) | 0;
      l = c[5497055] | 0;
    }
    i = b;
    return;
  }
  function eq(a) {
    a = a | 0;
    var b = 0,
      d = 0,
      e = 0,
      f = 0,
      h = 0,
      j = 0,
      k = 0,
      l = 0,
      m = 0,
      n = 0;
    b = i;
    d = c[(a + 4) >> 2] | 0;
    if (((d >>> 0) % 12 | 0 | 0) != 0) {
      Ur(
        1,
        104064,
        ((e = i), (i = (i + 1) | 0), (i = (i + 7) & -8), (c[e >> 2] = 0), e) | 0
      );
      i = e;
    }
    f = c[a >> 2] | 0;
    a = c[5458858] | 0;
    h = ((d >>> 0) / 12) | 0;
    j = rs((((h * 44) | 0) + 44) | 0, 0) | 0;
    c[5497057] = j;
    c[5497056] = h;
    if (!(d >>> 0 > 11 >>> 0)) {
      i = b;
      return;
    }
    d = j;
    j = 0;
    k = (a + f) | 0;
    while (1) {
      f = c[5497043] | 0;
      a = c[k >> 2] | 0;
      l = (f + ((a * 12) | 0)) | 0;
      c[(d + 36) >> 2] = l;
      c[(d + 32) >> 2] = c[(k + 4) >> 2];
      m = c[(k + 8) >> 2] | 0;
      c[d >> 2] = m;
      if (!(((m | 0) > -1) & ((m | 0) < (c[5497040] | 0)))) {
        n = 6;
        break;
      }
      c[(d + 4) >> 2] = c[((c[5497041] | 0) + ((m * 72) | 0) + 68) >> 2];
      g[(d + 8) >> 2] = -0.0 - +g[((c[l >> 2] | 0) + 12) >> 2];
      g[(d + 20) >> 2] =
        +g[((c[(f + ((((a + 1) | 0) * 12) | 0)) >> 2] | 0) + 12) >> 2];
      g[(d + 12) >> 2] =
        -0.0 - +g[((c[(f + ((((a + 2) | 0) * 12) | 0)) >> 2] | 0) + 12) >> 2];
      g[(d + 24) >> 2] =
        +g[((c[(f + ((((a + 3) | 0) * 12) | 0)) >> 2] | 0) + 12) >> 2];
      g[(d + 16) >> 2] =
        -0.0 - +g[((c[(f + ((((a + 4) | 0) * 12) | 0)) >> 2] | 0) + 12) >> 2];
      g[(d + 28) >> 2] =
        +g[((c[(f + ((((a + 5) | 0) * 12) | 0)) >> 2] | 0) + 12) >> 2];
      a = (j + 1) | 0;
      if ((a | 0) < (h | 0)) {
        d = (d + 44) | 0;
        j = a;
        k = (k + 12) | 0;
      } else {
        n = 8;
        break;
      }
    }
    if ((n | 0) == 6) {
      Ur(1, 53576, ((e = i), (i = (i + 8) | 0), (c[e >> 2] = m), e) | 0);
      i = e;
    } else if ((n | 0) == 8) {
      i = b;
      return;
    }
  }
  function fq(a) {
    a = a | 0;
    var b = 0,
      d = 0,
      e = 0,
      f = 0,
      g = 0,
      h = 0,
      j = 0,
      k = 0,
      l = 0;
    b = i;
    d = ((c[5458858] | 0) + (c[a >> 2] | 0)) | 0;
    e = c[(a + 4) >> 2] | 0;
    if (((e >>> 0) % 48 | 0 | 0) != 0) {
      Ur(
        1,
        104064,
        ((f = i), (i = (i + 1) | 0), (i = (i + 7) & -8), (c[f >> 2] = 0), f) | 0
      );
      i = f;
    }
    a = ((e >>> 0) / 48) | 0;
    if (e >>> 0 < 48 >>> 0) {
      Ur(
        1,
        47712,
        ((f = i), (i = (i + 1) | 0), (i = (i + 7) & -8), (c[f >> 2] = 0), f) | 0
      );
      i = f;
    }
    f = rs((((a * 24) | 0) + 48) | 0, 0) | 0;
    c[5497049] = f;
    c[5497048] = a;
    e = f;
    f = d;
    d = 0;
    while (1) {
      g = c[f >> 2] | 0;
      c[e >> 2] = g;
      h = c[(f + 4) >> 2] | 0;
      j = (e + 4) | 0;
      c[j >> 2] = h;
      c[(e + 8) >> 2] = c[(f + 40) >> 2];
      c[(e + 12) >> 2] = c[(f + 44) >> 2];
      c[(e + 16) >> 2] = c[(f + 32) >> 2];
      c[(e + 20) >> 2] = c[(f + 36) >> 2];
      if ((g | 0) < (c[5497058] | 0)) {
        k = h;
      } else {
        c[5497058] = g + 1;
        k = c[j >> 2] | 0;
      }
      j = c[5497064] | 0;
      if ((k | 0) < (j | 0)) {
        l = j;
      } else {
        j = (k + 1) | 0;
        c[5497064] = j;
        l = j;
      }
      j = (d + 1) | 0;
      if ((j | 0) < (a | 0)) {
        e = (e + 24) | 0;
        f = (f + 48) | 0;
        d = j;
      } else {
        break;
      }
    }
    c[5497065] = rs(l << 3, 0) | 0;
    l = c[5497064] | 0;
    c[5497066] = rs(da(l << 2, l) | 0, 0) | 0;
    i = b;
    return;
  }
  function gq(b) {
    b = b | 0;
    var d = 0,
      e = 0,
      f = 0,
      h = 0,
      j = 0.0,
      k = 0,
      l = 0.0,
      m = 0,
      n = 0.0,
      o = 0,
      p = 0;
    d = i;
    e = ((c[5458858] | 0) + (c[b >> 2] | 0)) | 0;
    f = c[(b + 4) >> 2] | 0;
    if (((f & 15) | 0) != 0) {
      Ur(
        1,
        104064,
        ((h = i), (i = (i + 1) | 0), (i = (i + 7) & -8), (c[h >> 2] = 0), h) | 0
      );
      i = h;
    }
    b = f >>> 4;
    if ((b | 0) == 0) {
      Ur(
        1,
        43608,
        ((h = i), (i = (i + 1) | 0), (i = (i + 7) & -8), (c[h >> 2] = 0), h) | 0
      );
      i = h;
    }
    h = rs((((b * 20) | 0) + 240) | 0, 0) | 0;
    c[5497045] = h;
    c[5497044] = b;
    f = h;
    h = e;
    e = 0;
    while (1) {
      j = +g[h >> 2];
      g[f >> 2] = j;
      k = (j < 0.0) | 0;
      l = +g[(h + 4) >> 2];
      g[(f + 4) >> 2] = l;
      m = l < 0.0 ? k | 2 : k;
      n = +g[(h + 8) >> 2];
      g[(f + 8) >> 2] = n;
      if (n < 0.0) {
        o = (m | 4) & 255;
      } else {
        o = m & 255;
      }
      g[(f + 12) >> 2] = +g[(h + 12) >> 2];
      do {
        if (j == 1.0) {
          p = 0;
        } else {
          if (l == 1.0) {
            p = 1;
            break;
          }
          p = n == 1.0 ? 2 : 3;
        }
      } while (0);
      a[(f + 16) | 0] = p;
      a[(f + 17) | 0] = o;
      m = (e + 1) | 0;
      if ((m | 0) < (b | 0)) {
        f = (f + 20) | 0;
        h = (h + 16) | 0;
        e = m;
      } else {
        break;
      }
    }
    i = d;
    return;
  }
  function hq(a) {
    a = a | 0;
    var b = 0,
      d = 0,
      e = 0,
      f = 0,
      g = 0,
      h = 0,
      j = 0,
      k = 0;
    b = i;
    d = c[(a + 4) >> 2] | 0;
    if (((d & 7) | 0) != 0) {
      Ur(
        1,
        104064,
        ((e = i), (i = (i + 1) | 0), (i = (i + 7) & -8), (c[e >> 2] = 0), e) | 0
      );
      i = e;
    }
    f = c[a >> 2] | 0;
    a = c[5458858] | 0;
    g = d >>> 3;
    d = rs((((g * 12) | 0) + 72) | 0, 0) | 0;
    c[5497043] = d;
    c[5497042] = g;
    if ((g | 0) == 0) {
      i = b;
      return;
    }
    h = (a + f) | 0;
    f = d;
    d = 0;
    while (1) {
      c[f >> 2] = (c[5497045] | 0) + (((c[h >> 2] | 0) * 20) | 0);
      j = c[(h + 4) >> 2] | 0;
      c[(f + 8) >> 2] = j;
      if (!(((j | 0) > -1) & ((j | 0) < (c[5497040] | 0)))) {
        k = 6;
        break;
      }
      c[(f + 4) >> 2] = c[((c[5497041] | 0) + ((j * 72) | 0) + 64) >> 2];
      a = (d + 1) | 0;
      if ((a | 0) < (g | 0)) {
        h = (h + 8) | 0;
        f = (f + 12) | 0;
        d = a;
      } else {
        k = 8;
        break;
      }
    }
    if ((k | 0) == 6) {
      Ur(1, 182704, ((e = i), (i = (i + 8) | 0), (c[e >> 2] = j), e) | 0);
      i = e;
    } else if ((k | 0) == 8) {
      i = b;
      return;
    }
  }
  function iq(a, b) {
    a = a | 0;
    b = b | 0;
    var d = 0,
      e = 0,
      f = 0,
      h = 0,
      j = 0,
      k = 0,
      l = 0,
      m = 0,
      n = 0,
      o = 0,
      p = 0,
      q = 0,
      r = 0,
      s = 0,
      t = 0,
      u = 0;
    d = i;
    i = (i + 12288) | 0;
    e = d | 0;
    f = c[(a + 4) >> 2] | 0;
    if (((f >>> 0) % 104 | 0 | 0) != 0) {
      Ur(
        1,
        104064,
        ((h = i), (i = (i + 1) | 0), (i = (i + 7) & -8), (c[h >> 2] = 0), h) | 0
      );
      i = h;
    }
    j = ((c[5458858] | 0) + (c[a >> 2] | 0)) | 0;
    a = ((f >>> 0) / 104) | 0;
    c[5497067] = a;
    c[5497068] = rs(a << 2, 0) | 0;
    k = ((c[5458858] | 0) + (c[b >> 2] | 0)) | 0;
    if ((((c[(b + 4) >> 2] | 0) >>> 0) % 44 | 0 | 0) != 0) {
      Ur(
        1,
        104064,
        ((h = i), (i = (i + 1) | 0), (i = (i + 7) & -8), (c[h >> 2] = 0), h) | 0
      );
      i = h;
    }
    if (!(f >>> 0 > 103 >>> 0)) {
      l = 12288;
      m = 0;
      i = d;
      return;
    }
    f = e | 0;
    b = 0;
    n = j;
    while (1) {
      if ((c[(n + 8) >> 2] | 0) == 2) {
        j = rs(16, 0) | 0;
        c[((c[5497068] | 0) + (b << 2)) >> 2] = j;
        o = c[(n + 96) >> 2] | 0;
        p = c[(n + 100) >> 2] | 0;
        q = da(p, o) | 0;
        if ((q | 0) > 1024) {
          r = 9;
          break;
        }
        if ((q | 0) > 0) {
          s = 0;
          t = (k + (((c[(n + 12) >> 2] | 0) * 44) | 0)) | 0;
          while (1) {
            g[(e + ((s * 12) | 0)) >> 2] = +g[t >> 2];
            g[(e + ((s * 12) | 0) + 4) >> 2] = +g[(t + 4) >> 2];
            g[(e + ((s * 12) | 0) + 8) >> 2] = +g[(t + 8) >> 2];
            u = (s + 1) | 0;
            if ((u | 0) < (q | 0)) {
              s = u;
              t = (t + 44) | 0;
            } else {
              break;
            }
          }
        }
        t = c[n >> 2] | 0;
        s = c[5497041] | 0;
        c[(j + 8) >> 2] = c[(s + ((t * 72) | 0) + 68) >> 2];
        c[(j + 4) >> 2] = c[(s + ((t * 72) | 0) + 64) >> 2];
        c[(j + 12) >> 2] = yq(o, p, f) | 0;
      }
      t = (b + 1) | 0;
      if ((t | 0) < (a | 0)) {
        b = t;
        n = (n + 104) | 0;
      } else {
        r = 15;
        break;
      }
    }
    if ((r | 0) == 9) {
      Ur(
        1,
        178560,
        ((h = i), (i = (i + 1) | 0), (i = (i + 7) & -8), (c[h >> 2] = 0), h) | 0
      );
      i = h;
    } else if ((r | 0) == 15) {
      l = 12288;
      m = 0;
      i = d;
      return;
    }
  }
  function jq(b, d, e) {
    b = b | 0;
    d = d | 0;
    e = e | 0;
    var f = 0,
      g = 0,
      h = 0,
      j = 0,
      k = 0,
      l = 0,
      m = 0,
      n = 0,
      o = 0,
      p = 0;
    f = i;
    i = (i + 152) | 0;
    g = f | 0;
    h = (f + 8) | 0;
    if ((b | 0) == 0) {
      Ur(
        1,
        174352,
        ((j = i), (i = (i + 1) | 0), (i = (i + 7) & -8), (c[j >> 2] = 0), j) | 0
      );
      i = j;
    }
    if ((a[b] | 0) == 0) {
      Ur(
        1,
        174352,
        ((j = i), (i = (i + 1) | 0), (i = (i + 7) & -8), (c[j >> 2] = 0), j) | 0
      );
      i = j;
    }
    c[5497022] = gt(171080, 168064, 512) | 0;
    c[5497020] = gt(164648, 168064, 512) | 0;
    c[5497018] = gt(161648, 158736, 513) | 0;
    Tr(
      156304,
      ((j = i), (i = (i + 16) | 0), (c[j >> 2] = b), (c[(j + 8) >> 2] = d), j) |
        0
    );
    i = j;
    k = (d | 0) == 0;
    if (!(((k$(21988096, b) | 0) != 0) | k)) {
      c[e >> 2] = c[7573108];
      l = 144;
      m = 0;
      i = f;
      return;
    }
    n$(21988096, 0, 188) | 0;
    uq();
    if ((a[b] | 0) == 0) {
      c[5497048] = 1;
      c[5497058] = 1;
      c[5497064] = 1;
      c[5497055] = rs(48, 0) | 0;
      c[e >> 2] = 0;
      l = 144;
      m = 0;
      i = f;
      return;
    }
    d = g;
    n = mu(b, d) | 0;
    o = g | 0;
    g = c[o >> 2] | 0;
    if ((g | 0) == 0) {
      Ur(1, 154144, ((j = i), (i = (i + 8) | 0), (c[j >> 2] = b), j) | 0);
      i = j;
    }
    p = cv(g, n) | 0;
    c[7573108] = p;
    c[e >> 2] = p;
    p = c[o >> 2] | 0;
    m$(h | 0, p | 0, 144) | 0;
    o = c[(h + 4) >> 2] | 0;
    if ((o | 0) != 46) {
      Ur(
        1,
        152288,
        ((j = i),
        (i = (i + 24) | 0),
        (c[j >> 2] = b),
        (c[(j + 8) >> 2] = o),
        (c[(j + 16) >> 2] = 46),
        j) | 0
      );
      i = j;
    }
    c[5458858] = p;
    o = (p + (c[(h + 16) >> 2] | 0)) | 0;
    p = c[(h + 20) >> 2] | 0;
    if (((p >>> 0) % 72 | 0 | 0) != 0) {
      Ur(
        1,
        54632,
        ((j = i), (i = (i + 1) | 0), (i = (i + 7) & -8), (c[j >> 2] = 0), j) | 0
      );
      i = j;
    }
    e = ((p >>> 0) / 72) | 0;
    if (p >>> 0 < 72 >>> 0) {
      Ur(
        1,
        159152,
        ((j = i), (i = (i + 1) | 0), (i = (i + 7) & -8), (c[j >> 2] = 0), j) | 0
      );
      i = j;
    }
    p = (e * 72) | 0;
    n = rs(p, 0) | 0;
    c[5497041] = n;
    c[5497040] = e;
    m$(n | 0, o | 0, p) | 0;
    fq((h + 40) | 0);
    p = c[(h + 60) >> 2] | 0;
    if (((p & 3) | 0) != 0) {
      Ur(
        1,
        104064,
        ((j = i), (i = (i + 1) | 0), (i = (i + 7) & -8), (c[j >> 2] = 0), j) | 0
      );
      i = j;
    }
    o = c[(h + 56) >> 2] | 0;
    n = c[5458858] | 0;
    e = p >>> 2;
    p = rs(((e << 2) + 4) | 0, 0) | 0;
    c[5497051] = p;
    c[5497050] = e;
    if ((e | 0) != 0) {
      g = p;
      p = (n + o) | 0;
      o = 0;
      while (1) {
        c[g >> 2] = c[p >> 2];
        n = (o + 1) | 0;
        if ((n | 0) < (e | 0)) {
          g = (g + 4) | 0;
          p = (p + 4) | 0;
          o = n;
        } else {
          break;
        }
      }
    }
    o = c[(h + 52) >> 2] | 0;
    if (((o & 3) | 0) != 0) {
      Ur(
        1,
        104064,
        ((j = i), (i = (i + 1) | 0), (i = (i + 7) & -8), (c[j >> 2] = 0), j) | 0
      );
      i = j;
    }
    p = c[(h + 48) >> 2] | 0;
    g = c[5458858] | 0;
    e = o >>> 2;
    o = rs(e << 2, 0) | 0;
    c[5497053] = o;
    c[5497052] = e;
    if ((e | 0) != 0) {
      n = o;
      o = (g + p) | 0;
      p = 0;
      while (1) {
        c[n >> 2] = c[o >> 2];
        g = (p + 1) | 0;
        if ((g | 0) < (e | 0)) {
          n = (n + 4) | 0;
          o = (o + 4) | 0;
          p = g;
        } else {
          break;
        }
      }
    }
    gq((h + 24) | 0);
    hq((h + 80) | 0);
    eq((h + 72) | 0);
    dq((h + 64) | 0);
    p = ((c[5458858] | 0) + (c[(h + 32) >> 2] | 0)) | 0;
    o = c[(h + 36) >> 2] | 0;
    if (((o >>> 0) % 36 | 0 | 0) != 0) {
      Ur(
        1,
        104064,
        ((j = i), (i = (i + 1) | 0), (i = (i + 7) & -8), (c[j >> 2] = 0), j) | 0
      );
      i = j;
    }
    n = ((o >>> 0) / 36) | 0;
    if (o >>> 0 < 36 >>> 0) {
      Ur(
        1,
        60904,
        ((j = i), (i = (i + 1) | 0), (i = (i + 7) & -8), (c[j >> 2] = 0), j) | 0
      );
      i = j;
    }
    j = rs((n * 12) | 0, 0) | 0;
    c[5497047] = j;
    c[5497046] = n;
    o = j;
    j = 0;
    e = p;
    while (1) {
      c[o >> 2] = (c[5497045] | 0) + (((c[e >> 2] | 0) * 20) | 0);
      c[(o + 4) >> 2] = c[(e + 4) >> 2];
      c[(o + 8) >> 2] = c[(e + 8) >> 2];
      p = (j + 1) | 0;
      if ((p | 0) < (n | 0)) {
        o = (o + 12) | 0;
        j = p;
        e = (e + 36) | 0;
      } else {
        break;
      }
    }
    e = (h + 12) | 0;
    j = rs(c[e >> 2] | 0, 0) | 0;
    c[5497063] = j;
    o = c[e >> 2] | 0;
    c[5497062] = o;
    m$(j | 0, ((c[5458858] | 0) + (c[(h + 8) >> 2] | 0)) | 0, o) | 0;
    o = c[(h + 140) >> 2] | 0;
    if ((o | 0) == 0) {
      j = ((c[5497058] | 0) + 31) & -32;
      c[5497059] = j;
      e = rs(j, 0) | 0;
      c[5497060] = e;
      n$(e | 0, -1 | 0, c[5497059] | 0) | 0;
    } else {
      e = c[5458858] | 0;
      j = c[(h + 136) >> 2] | 0;
      c[5497061] = 1;
      n = rs(o, 0) | 0;
      c[5497060] = n;
      c[5497058] = c[(e + j) >> 2];
      c[5497059] = c[(e + (j + 4)) >> 2];
      m$(n | 0, (e + (j + 8)) | 0, (o - 8) | 0) | 0;
    }
    iq((h + 112) | 0, (h + 88) | 0);
    nu(c[d >> 2] | 0);
    kq();
    Vq();
    if (!k) {
      l = 144;
      m = 0;
      i = f;
      return;
    }
    TB(21988096, b, 64);
    l = 144;
    m = 0;
    i = f;
    return;
  }
  function kq() {
    var b = 0,
      d = 0,
      e = 0,
      f = 0,
      h = 0;
    c[7092324] = (c[5497045] | 0) + (((c[5497044] | 0) * 20) | 0);
    b = c[5497056] | 0;
    d = c[5497057] | 0;
    c[7092338] = d + ((b * 44) | 0);
    c[(d + ((b * 44) | 0) + 32) >> 2] = 6;
    c[(d + ((b * 44) | 0) + 36) >> 2] =
      (c[5497043] | 0) + (((c[5497042] | 0) * 12) | 0);
    c[((c[7092338] | 0) + 4) >> 2] = 33554432;
    c[7092335] = 1;
    b = c[5497050] | 0;
    c[7092334] = b;
    c[((c[5497051] | 0) + (b << 2)) >> 2] = c[5497056];
    b = 0;
    do {
      d = ((c[5497042] | 0) + b) | 0;
      e = c[5497043] | 0;
      f = b << 1;
      c[(e + ((d * 12) | 0)) >> 2] =
        (c[5497045] | 0) +
        ((((((b & 1) | f) + (c[5497044] | 0)) | 0) * 20) | 0);
      c[(e + ((d * 12) | 0) + 4) >> 2] = 0;
      d = c[7092324] | 0;
      e = b >> 1;
      a[(d + ((f * 20) | 0) + 16) | 0] = e;
      a[(d + ((f * 20) | 0) + 17) | 0] = 0;
      g[(d + ((f * 20) | 0) + 8) >> 2] = 0.0;
      g[(d + ((f * 20) | 0) + 4) >> 2] = 0.0;
      g[(d + ((f * 20) | 0)) >> 2] = 0.0;
      g[(d + ((f * 20) | 0) + (e << 2)) >> 2] = 1.0;
      d = f | 1;
      f = c[7092324] | 0;
      h = (f + ((d * 20) | 0)) | 0;
      a[(f + ((d * 20) | 0) + 16) | 0] = e + 3;
      a[(f + ((d * 20) | 0) + 17) | 0] = 0;
      g[(f + ((d * 20) | 0) + 8) >> 2] = 0.0;
      g[(f + ((d * 20) | 0) + 4) >> 2] = 0.0;
      g[h >> 2] = 0.0;
      g[(f + ((d * 20) | 0) + (e << 2)) >> 2] = -1.0;
      HB(h);
      b = (b + 1) | 0;
    } while ((b | 0) < 6);
    return;
  }
  function lq() {
    n$(21988096 | 0, 0 | 0, 188 | 0) | 0;
    uq();
    return;
  }
  function mq(a) {
    a = a | 0;
    var b = 0,
      d = 0,
      e = 0,
      f = 0;
    b = i;
    if ((a | 0) < 0) {
      Ur(1, 149992, ((d = i), (i = (i + 8) | 0), (c[d >> 2] = a), d) | 0);
      i = d;
      return 0;
    }
    e = c[5497054] | 0;
    if ((e | 0) > (a | 0)) {
      f = ((c[5497055] | 0) + ((a * 48) | 0)) | 0;
      i = b;
      return f | 0;
    }
    if ((a | 0) == 255) {
      f = 28369304;
      i = b;
      return f | 0;
    }
    if ((a | 0) < 256) {
      Ur(
        1,
        147624,
        ((d = i),
        (i = (i + 24) | 0),
        (c[d >> 2] = e),
        (c[(d + 8) >> 2] = a),
        (c[(d + 16) >> 2] = 256),
        d) | 0
      );
      i = d;
      return 0;
    } else {
      Ur(1, 149992, ((d = i), (i = (i + 8) | 0), (c[d >> 2] = a + 256), d) | 0);
      i = d;
      return 0;
    }
    return 0;
  }
  function nq(a) {
    a = a | 0;
    if (((a | 0) > -1) & ((c[5497054] | 0) > (a | 0))) {
      i = i;
      return a | 0;
    } else {
      Ur(
        1,
        145136,
        ((a = i), (i = (i + 1) | 0), (i = (i + 7) & -8), (c[a >> 2] = 0), a) | 0
      );
      i = a;
      return 0;
    }
    return 0;
  }
  function oq() {
    return c[5497054] | 0;
  }
  function pq() {
    return c[5497063] | 0;
  }
  function qq(a) {
    a = a | 0;
    if (((a | 0) > -1) & ((c[5497048] | 0) > (a | 0))) {
      i = i;
      return c[((c[5497049] | 0) + ((a * 24) | 0)) >> 2] | 0;
    } else {
      Ur(
        1,
        142528,
        ((a = i), (i = (i + 1) | 0), (i = (i + 7) & -8), (c[a >> 2] = 0), a) | 0
      );
      i = a;
      return 0;
    }
    return 0;
  }
  function rq(a) {
    a = a | 0;
    if (((a | 0) > -1) & ((c[5497048] | 0) > (a | 0))) {
      i = i;
      return c[((c[5497049] | 0) + ((a * 24) | 0) + 4) >> 2] | 0;
    } else {
      Ur(
        1,
        140312,
        ((a = i), (i = (i + 1) | 0), (i = (i + 7) & -8), (c[a >> 2] = 0), a) | 0
      );
      i = a;
      return 0;
    }
    return 0;
  }
  function sq(a, b, d) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    var e = 0,
      f = 0,
      h = 0,
      i = 0,
      j = 0;
    g[7092326] = +g[a >> 2];
    e = (a + 4) | 0;
    g[7092327] = +g[e >> 2];
    f = (a + 8) | 0;
    g[7092328] = +g[f >> 2];
    g[7092329] = +g[b >> 2];
    h = (b + 4) | 0;
    g[7092330] = +g[h >> 2];
    i = (b + 8) | 0;
    g[7092331] = +g[i >> 2];
    if ((d | 0) != 0) {
      j = 254;
      return j | 0;
    }
    d = c[7092324] | 0;
    g[(d + 12) >> 2] = +g[b >> 2];
    g[(d + 32) >> 2] = -0.0 - +g[b >> 2];
    g[(d + 52) >> 2] = +g[a >> 2];
    g[(d + 72) >> 2] = -0.0 - +g[a >> 2];
    g[(d + 92) >> 2] = +g[h >> 2];
    g[(d + 112) >> 2] = -0.0 - +g[h >> 2];
    g[(d + 132) >> 2] = +g[e >> 2];
    g[(d + 152) >> 2] = -0.0 - +g[e >> 2];
    g[(d + 172) >> 2] = +g[i >> 2];
    g[(d + 192) >> 2] = -0.0 - +g[i >> 2];
    g[(d + 212) >> 2] = +g[f >> 2];
    g[(d + 232) >> 2] = -0.0 - +g[f >> 2];
    d = c[7092338] | 0;
    g[(d + 8) >> 2] = +g[a >> 2];
    g[(d + 12) >> 2] = +g[e >> 2];
    g[(d + 16) >> 2] = +g[f >> 2];
    g[(d + 20) >> 2] = +g[b >> 2];
    g[(d + 24) >> 2] = +g[h >> 2];
    g[(d + 28) >> 2] = +g[i >> 2];
    j = 255;
    return j | 0;
  }
  function tq(a, b, d) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    var e = 0,
      f = 0,
      h = 0,
      j = 0;
    e = i;
    if ((a | 0) < 0) {
      Ur(1, 149992, ((f = i), (i = (i + 8) | 0), (c[f >> 2] = a), f) | 0);
      i = f;
    }
    h = c[5497054] | 0;
    do {
      if ((h | 0) > (a | 0)) {
        j = ((c[5497055] | 0) + ((a * 48) | 0)) | 0;
      } else {
        if ((a | 0) == 255) {
          j = 28369304;
          break;
        }
        if ((a | 0) < 256) {
          Ur(
            1,
            147624,
            ((f = i),
            (i = (i + 24) | 0),
            (c[f >> 2] = h),
            (c[(f + 8) >> 2] = a),
            (c[(f + 16) >> 2] = 256),
            f) | 0
          );
          i = f;
        } else {
          Ur(
            1,
            149992,
            ((f = i), (i = (i + 8) | 0), (c[f >> 2] = a + 256), f) | 0
          );
          i = f;
        }
      }
    } while (0);
    g[b >> 2] = +g[j >> 2];
    g[(b + 4) >> 2] = +g[(j + 4) >> 2];
    g[(b + 8) >> 2] = +g[(j + 8) >> 2];
    g[d >> 2] = +g[(j + 12) >> 2];
    g[(d + 4) >> 2] = +g[(j + 16) >> 2];
    g[(d + 8) >> 2] = +g[(j + 20) >> 2];
    i = e;
    return;
  }
  function uq() {
    c[5389054] = 0;
    c[5389056] = 0;
    return;
  }
  function vq(a, b, d) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    var e = 0.0,
      f = 0.0,
      h = 0;
    e = +g[a >> 2];
    f = +g[b >> 2];
    do {
      if (+S(+(e - f)) < 1.0e-4) {
        if (!(+S(+(+g[(a + 4) >> 2] - +g[(b + 4) >> 2])) < 1.0e-4)) {
          break;
        }
        if (!(+S(+(+g[(a + 8) >> 2] - +g[(b + 8) >> 2])) < 1.0e-4)) {
          break;
        }
        if (!(+S(+(+g[(a + 12) >> 2] - +g[(b + 12) >> 2])) < 0.02)) {
          break;
        }
        c[d >> 2] = 0;
        h = 1;
        return h | 0;
      }
    } while (0);
    if (!(+S(+(f + e)) < 1.0e-4)) {
      h = 0;
      return h | 0;
    }
    if (!(+S(+(+g[(b + 4) >> 2] + +g[(a + 4) >> 2])) < 1.0e-4)) {
      h = 0;
      return h | 0;
    }
    if (!(+S(+(+g[(b + 8) >> 2] + +g[(a + 8) >> 2])) < 1.0e-4)) {
      h = 0;
      return h | 0;
    }
    if (!(+S(+(+g[(b + 12) >> 2] + +g[(a + 12) >> 2])) < 0.02)) {
      h = 0;
      return h | 0;
    }
    c[d >> 2] = 1;
    h = 1;
    return h | 0;
  }
  function wq(a, b) {
    a = a | 0;
    b = b | 0;
    var d = 0,
      e = 0,
      f = 0,
      h = 0,
      j = 0,
      k = 0,
      l = 0,
      m = 0;
    d = i;
    e = c[4938830] | 0;
    do {
      if ((e | 0) > 0) {
        f = 0;
        while (1) {
          h = (f + 1) | 0;
          if ((vq((19680408 + ((f * 20) | 0)) | 0, a, b) | 0) != 0) {
            j = f;
            k = 7;
            break;
          }
          l = c[4938830] | 0;
          if ((h | 0) < (l | 0)) {
            f = h;
          } else {
            break;
          }
        }
        if ((k | 0) == 7) {
          i = d;
          return j | 0;
        }
        if ((l | 0) != 2048) {
          m = l;
          break;
        }
        Ur(
          1,
          52776,
          ((f = i), (i = (i + 1) | 0), (i = (i + 7) & -8), (c[f >> 2] = 0), f) |
            0
        );
        i = f;
        return 0;
      } else {
        m = e;
      }
    } while (0);
    g[(19680408 + ((m * 20) | 0)) >> 2] = +g[a >> 2];
    e = (a + 4) | 0;
    g[(19680412 + ((m * 20) | 0)) >> 2] = +g[e >> 2];
    l = (a + 8) | 0;
    g[(19680416 + ((m * 20) | 0)) >> 2] = +g[l >> 2];
    g[(19680420 + ((m * 20) | 0)) >> 2] = +g[(a + 12) >> 2];
    k = (+g[a >> 2] < 0.0) | 0;
    a = +g[e >> 2] < 0.0 ? k | 2 : k;
    c[(19680424 + ((m * 20) | 0)) >> 2] = +g[l >> 2] < 0.0 ? a | 4 : a;
    c[4938830] = m + 1;
    c[b >> 2] = 0;
    j = ((c[4938830] | 0) - 1) | 0;
    i = d;
    return j | 0;
  }
  function xq(a) {
    a = a | 0;
    var b = 0,
      d = 0,
      e = 0,
      f = 0,
      h = 0,
      j = 0,
      k = 0,
      l = 0,
      m = 0,
      n = 0,
      o = 0,
      p = 0,
      q = 0,
      r = 0,
      s = 0,
      t = 0.0,
      u = 0,
      v = 0,
      w = 0,
      x = 0,
      y = 0,
      z = 0,
      A = 0,
      B = 0,
      C = 0,
      D = 0,
      E = 0,
      F = 0.0,
      G = 0.0,
      H = 0.0,
      I = 0.0,
      J = 0,
      K = 0,
      L = 0,
      M = 0.0,
      N = 0,
      O = 0,
      P = 0,
      Q = 0,
      R = 0,
      T = 0,
      U = 0,
      V = 0,
      W = 0,
      X = 0,
      Y = 0,
      Z = 0,
      _ = 0,
      $ = 0,
      aa = 0,
      ba = 0,
      ca = 0,
      da = 0,
      ea = 0.0,
      fa = 0;
    b = i;
    i = (i + 120) | 0;
    d = b | 0;
    e = (b + 8) | 0;
    f = (b + 24) | 0;
    h = (b + 40) | 0;
    j = (b + 48) | 0;
    k = (b + 56) | 0;
    l = (b + 72) | 0;
    m = (b + 88) | 0;
    n = (b + 104) | 0;
    o = a | 0;
    p = c[o >> 2] | 0;
    q = e | 0;
    g[q >> 2] = +g[(19680408 + ((p * 20) | 0)) >> 2];
    r = (e + 4) | 0;
    g[r >> 2] = +g[(19680412 + ((p * 20) | 0)) >> 2];
    s = (e + 8) | 0;
    g[s >> 2] = +g[(19680416 + ((p * 20) | 0)) >> 2];
    t = +g[(19680420 + ((p * 20) | 0)) >> 2];
    p = (e + 12) | 0;
    g[p >> 2] = t;
    u = Kq(q, t) | 0;
    c[h >> 2] = u;
    v = (a + 4) | 0;
    w = c[v >> 2] | 0;
    x = (u | 0) == 0;
    a: do {
      if ((w | 0) > 0) {
        y = 0;
        z = x;
        A = w;
        B = u;
        while (1) {
          if (z) {
            break;
          }
          C = c[(a + 8 + (y << 2)) >> 2] | 0;
          if ((C | 0) == (c[o >> 2] | 0)) {
            D = A;
            E = B;
          } else {
            t = +g[(19680408 + ((C * 20) | 0)) >> 2];
            g[q >> 2] = t;
            F = +g[(19680412 + ((C * 20) | 0)) >> 2];
            g[r >> 2] = F;
            G = +g[(19680416 + ((C * 20) | 0)) >> 2];
            g[s >> 2] = G;
            H = +g[(19680420 + ((C * 20) | 0)) >> 2];
            g[p >> 2] = H;
            if ((c[(a + 112 + (y << 2)) >> 2] | 0) == 0) {
              g[q >> 2] = +g[219094] - t;
              g[r >> 2] = +g[219095] - F;
              g[s >> 2] = +g[219096] - G;
              G = -0.0 - H;
              g[p >> 2] = G;
              I = G;
            } else {
              I = H;
            }
            Mq(h, q, I, 0.10000000149011612);
            D = c[v >> 2] | 0;
            E = c[h >> 2] | 0;
          }
          C = (y + 1) | 0;
          J = (E | 0) == 0;
          if ((C | 0) < (D | 0)) {
            y = C;
            z = J;
            A = D;
            B = E;
          } else {
            K = E;
            L = J;
            break a;
          }
        }
        i = b;
        return;
      } else {
        K = u;
        L = x;
      }
    } while (0);
    if (L) {
      i = b;
      return;
    }
    Jq(K, k | 0, l | 0);
    K = 0;
    do {
      L = (e + (K << 2)) | 0;
      x = (l + (K << 2)) | 0;
      u = (k + (K << 2)) | 0;
      E = -1;
      while (1) {
        g[s >> 2] = 0.0;
        g[r >> 2] = 0.0;
        g[q >> 2] = 0.0;
        g[L >> 2] = +(E | 0);
        if ((E | 0) == 1) {
          M = +g[x >> 2];
        } else {
          M = -0.0 - +g[u >> 2];
        }
        g[p >> 2] = M;
        D = c[o >> 2] | 0;
        I = +g[(19680408 + ((D * 20) | 0)) >> 2];
        H = +g[q >> 2];
        do {
          if (+S(+(I - H)) < 1.0e-4) {
            if (
              !(
                +S(+(+g[(19680412 + ((D * 20) | 0)) >> 2] - +g[r >> 2])) <
                1.0e-4
              )
            ) {
              N = 21;
              break;
            }
            if (
              !(
                +S(+(+g[(19680416 + ((D * 20) | 0)) >> 2] - +g[s >> 2])) <
                1.0e-4
              )
            ) {
              N = 21;
              break;
            }
            if (!(+S(+(+g[(19680420 + ((D * 20) | 0)) >> 2] - M)) < 0.02)) {
              N = 21;
              break;
            }
            c[d >> 2] = 0;
          } else {
            N = 21;
          }
        } while (0);
        b: do {
          if ((N | 0) == 21) {
            N = 0;
            G = +g[s >> 2];
            do {
              if (+S(+(I + H)) < 1.0e-4) {
                if (
                  !(
                    +S(+(+g[r >> 2] + +g[(19680412 + ((D * 20) | 0)) >> 2])) <
                    1.0e-4
                  )
                ) {
                  break;
                }
                if (
                  !(+S(+(G + +g[(19680416 + ((D * 20) | 0)) >> 2])) < 1.0e-4)
                ) {
                  break;
                }
                if (!(+S(+(M + +g[(19680420 + ((D * 20) | 0)) >> 2])) < 0.02)) {
                  break;
                }
                c[d >> 2] = 1;
                break b;
              }
            } while (0);
            w = c[v >> 2] | 0;
            c: do {
              if ((w | 0) > 0) {
                F = +g[r >> 2];
                B = 0;
                d: while (1) {
                  A = c[(a + 8 + (B << 2)) >> 2] | 0;
                  t = +g[(19680408 + ((A * 20) | 0)) >> 2];
                  do {
                    if (+S(+(t - H)) < 1.0e-4) {
                      if (
                        !(
                          +S(+(+g[(19680412 + ((A * 20) | 0)) >> 2] - F)) <
                          1.0e-4
                        )
                      ) {
                        break;
                      }
                      if (
                        !(
                          +S(+(+g[(19680416 + ((A * 20) | 0)) >> 2] - G)) <
                          1.0e-4
                        )
                      ) {
                        break;
                      }
                      if (
                        +S(+(+g[(19680420 + ((A * 20) | 0)) >> 2] - M)) < 0.02
                      ) {
                        O = 0;
                        break d;
                      }
                    }
                  } while (0);
                  do {
                    if (+S(+(t + H)) < 1.0e-4) {
                      if (
                        !(
                          +S(+(F + +g[(19680412 + ((A * 20) | 0)) >> 2])) <
                          1.0e-4
                        )
                      ) {
                        break;
                      }
                      if (
                        !(
                          +S(+(G + +g[(19680416 + ((A * 20) | 0)) >> 2])) <
                          1.0e-4
                        )
                      ) {
                        break;
                      }
                      if (
                        +S(+(M + +g[(19680420 + ((A * 20) | 0)) >> 2])) < 0.02
                      ) {
                        O = 1;
                        break d;
                      }
                    }
                  } while (0);
                  A = (B + 1) | 0;
                  if ((A | 0) < (w | 0)) {
                    B = A;
                  } else {
                    P = A;
                    break c;
                  }
                }
                c[d >> 2] = O;
                P = B;
              } else {
                P = 0;
              }
            } while (0);
            if ((P | 0) != (w | 0)) {
              break;
            }
            if ((w | 0) > 26) {
              Sr(
                158464,
                ((Q = i),
                (i = (i + 1) | 0),
                (i = (i + 7) & -8),
                (c[Q >> 2] = 0),
                Q) | 0
              );
              i = Q;
            }
            A = wq(q, d) | 0;
            c[(a + 8 + (c[v >> 2] << 2)) >> 2] = A;
            c[(a + 216 + (c[v >> 2] << 2)) >> 2] = 0;
            c[(a + 112 + (c[v >> 2] << 2)) >> 2] = c[d >> 2];
            c[v >> 2] = (c[v >> 2] | 0) + 1;
          }
        } while (0);
        if ((E | 0) < 0) {
          E = (E + 2) | 0;
        } else {
          break;
        }
      }
      K = (K + 1) | 0;
    } while ((K | 0) < 3);
    K = c[h >> 2] | 0;
    P = c[K >> 2] | 0;
    if ((P | 0) > 0) {
      O = m | 0;
      k = (m + 4) | 0;
      l = (m + 8) | 0;
      e = (n + 8) | 0;
      E = (n + 4) | 0;
      u = n | 0;
      x = f | 0;
      L = (f + 4) | 0;
      D = (f + 8) | 0;
      A = (f + 12) | 0;
      f = 0;
      z = K;
      y = P;
      while (1) {
        P = (f + 1) | 0;
        J = (P | 0) % (y | 0) | 0;
        g[O >> 2] =
          +g[(z + 4 + ((f * 12) | 0)) >> 2] - +g[(z + 4 + ((J * 12) | 0)) >> 2];
        g[k >> 2] =
          +g[(z + 4 + ((f * 12) | 0) + 4) >> 2] -
          +g[(z + 4 + ((J * 12) | 0) + 4) >> 2];
        g[l >> 2] =
          +g[(z + 4 + ((f * 12) | 0) + 8) >> 2] -
          +g[(z + 4 + ((J * 12) | 0) + 8) >> 2];
        e: do {
          if (!(+wB(O) < 0.5)) {
            J = 0;
            while (1) {
              R = (m + (J << 2)) | 0;
              M = +g[R >> 2];
              if (+S(+(M + -1.0)) < 1.0e-4) {
                N = 48;
                break;
              }
              C = (J + 1) | 0;
              if (+S(+(M + 1.0)) < 1.0e-4) {
                N = 50;
                break;
              }
              if ((C | 0) < 3) {
                J = C;
              } else {
                T = 0;
                break;
              }
            }
            if ((N | 0) == 48) {
              N = 0;
              g[l >> 2] = 0.0;
              g[k >> 2] = 0.0;
              g[O >> 2] = 0.0;
              g[R >> 2] = 1.0;
              T = 0;
            } else if ((N | 0) == 50) {
              N = 0;
              g[l >> 2] = 0.0;
              g[k >> 2] = 0.0;
              g[O >> 2] = 0.0;
              g[R >> 2] = -1.0;
              T = 0;
            }
            while (1) {
              M = +g[(m + (T << 2)) >> 2];
              J = (T + 1) | 0;
              if ((M == -1.0) | (M == 1.0)) {
                break e;
              }
              if ((J | 0) < 3) {
                T = J;
              } else {
                U = 0;
                break;
              }
            }
            do {
              J = (n + (U << 2)) | 0;
              C = -1;
              while (1) {
                g[e >> 2] = 0.0;
                g[E >> 2] = 0.0;
                g[u >> 2] = 0.0;
                g[J >> 2] = +(C | 0);
                M = +g[k >> 2];
                H = +g[e >> 2];
                I = +g[l >> 2];
                G = +g[E >> 2];
                g[q >> 2] = M * H - I * G;
                F = +g[u >> 2];
                t = +g[O >> 2];
                g[r >> 2] = I * F - t * H;
                g[s >> 2] = t * G - M * F;
                f: do {
                  if (!(+wB(q) < 0.5)) {
                    V = c[h >> 2] | 0;
                    F = +g[q >> 2];
                    M = +g[r >> 2];
                    G = +g[s >> 2];
                    t =
                      +g[(V + 4 + ((f * 12) | 0)) >> 2] * F +
                      +g[(V + 4 + ((f * 12) | 0) + 4) >> 2] * M +
                      +g[(V + 4 + ((f * 12) | 0) + 8) >> 2] * G;
                    g[p >> 2] = t;
                    W = c[V >> 2] | 0;
                    g: do {
                      if ((W | 0) > 0) {
                        X = 0;
                        while (1) {
                          Y = (X + 1) | 0;
                          if (
                            +g[(V + 4 + ((X * 12) | 0)) >> 2] * F +
                              +g[(V + 4 + ((X * 12) | 0) + 4) >> 2] * M +
                              +g[(V + 4 + ((X * 12) | 0) + 8) >> 2] * G -
                              t >
                            0.1
                          ) {
                            Z = X;
                            break g;
                          }
                          if ((Y | 0) < (W | 0)) {
                            X = Y;
                          } else {
                            Z = Y;
                            break;
                          }
                        }
                      } else {
                        Z = 0;
                      }
                    } while (0);
                    if ((Z | 0) < (W | 0)) {
                      break;
                    }
                    V = c[o >> 2] | 0;
                    H = +g[(19680408 + ((V * 20) | 0)) >> 2];
                    do {
                      if (+S(+(H - F)) < 1.0e-4) {
                        if (
                          !(
                            +S(+(+g[(19680412 + ((V * 20) | 0)) >> 2] - M)) <
                            1.0e-4
                          )
                        ) {
                          break;
                        }
                        if (
                          !(
                            +S(+(+g[(19680416 + ((V * 20) | 0)) >> 2] - G)) <
                            1.0e-4
                          )
                        ) {
                          break;
                        }
                        if (
                          !(
                            +S(+(+g[(19680420 + ((V * 20) | 0)) >> 2] - t)) <
                            0.02
                          )
                        ) {
                          break;
                        }
                        c[d >> 2] = 0;
                        break f;
                      }
                    } while (0);
                    do {
                      if (+S(+(H + F)) < 1.0e-4) {
                        if (
                          !(
                            +S(+(M + +g[(19680412 + ((V * 20) | 0)) >> 2])) <
                            1.0e-4
                          )
                        ) {
                          break;
                        }
                        if (
                          !(
                            +S(+(G + +g[(19680416 + ((V * 20) | 0)) >> 2])) <
                            1.0e-4
                          )
                        ) {
                          break;
                        }
                        if (
                          !(
                            +S(+(t + +g[(19680420 + ((V * 20) | 0)) >> 2])) <
                            0.02
                          )
                        ) {
                          break;
                        }
                        c[d >> 2] = 1;
                        break f;
                      }
                    } while (0);
                    V = c[v >> 2] | 0;
                    h: do {
                      if ((V | 0) > 0) {
                        W = 0;
                        i: while (1) {
                          X = c[(a + 8 + (W << 2)) >> 2] | 0;
                          H = +g[(19680408 + ((X * 20) | 0)) >> 2];
                          do {
                            if (+S(+(H - F)) < 1.0e-4) {
                              if (
                                !(
                                  +S(
                                    +(+g[(19680412 + ((X * 20) | 0)) >> 2] - M)
                                  ) < 1.0e-4
                                )
                              ) {
                                break;
                              }
                              if (
                                !(
                                  +S(
                                    +(+g[(19680416 + ((X * 20) | 0)) >> 2] - G)
                                  ) < 1.0e-4
                                )
                              ) {
                                break;
                              }
                              if (
                                +S(
                                  +(+g[(19680420 + ((X * 20) | 0)) >> 2] - t)
                                ) < 0.02
                              ) {
                                _ = 0;
                                break i;
                              }
                            }
                          } while (0);
                          do {
                            if (+S(+(H + F)) < 1.0e-4) {
                              if (
                                !(
                                  +S(
                                    +(M + +g[(19680412 + ((X * 20) | 0)) >> 2])
                                  ) < 1.0e-4
                                )
                              ) {
                                break;
                              }
                              if (
                                !(
                                  +S(
                                    +(G + +g[(19680416 + ((X * 20) | 0)) >> 2])
                                  ) < 1.0e-4
                                )
                              ) {
                                break;
                              }
                              if (
                                +S(
                                  +(t + +g[(19680420 + ((X * 20) | 0)) >> 2])
                                ) < 0.02
                              ) {
                                _ = 1;
                                break i;
                              }
                            }
                          } while (0);
                          X = (W + 1) | 0;
                          if ((X | 0) < (V | 0)) {
                            W = X;
                          } else {
                            $ = X;
                            break h;
                          }
                        }
                        c[d >> 2] = _;
                        $ = W;
                      } else {
                        $ = 0;
                      }
                    } while (0);
                    if (($ | 0) != (V | 0)) {
                      break;
                    }
                    if ((V | 0) > 26) {
                      Sr(
                        158464,
                        ((Q = i),
                        (i = (i + 1) | 0),
                        (i = (i + 7) & -8),
                        (c[Q >> 2] = 0),
                        Q) | 0
                      );
                      i = Q;
                    }
                    X = wq(q, d) | 0;
                    c[(a + 8 + (c[v >> 2] << 2)) >> 2] = X;
                    X = c[v >> 2] | 0;
                    if ((X | 0) > 0) {
                      Y = 0;
                      aa = X;
                      while (1) {
                        if (
                          (c[(a + 8 + (aa << 2)) >> 2] | 0) ==
                          (c[(a + 8 + (Y << 2)) >> 2] | 0)
                        ) {
                          Sr(
                            136248,
                            ((Q = i),
                            (i = (i + 1) | 0),
                            (i = (i + 7) & -8),
                            (c[Q >> 2] = 0),
                            Q) | 0
                          );
                          i = Q;
                          ba = c[v >> 2] | 0;
                        } else {
                          ba = aa;
                        }
                        ca = (Y + 1) | 0;
                        if ((ca | 0) < (ba | 0)) {
                          Y = ca;
                          aa = ba;
                        } else {
                          da = ba;
                          break;
                        }
                      }
                    } else {
                      da = X;
                    }
                    c[(a + 216 + (da << 2)) >> 2] = 0;
                    c[(a + 112 + (c[v >> 2] << 2)) >> 2] = c[d >> 2];
                    c[j >> 2] = Lq(c[h >> 2] | 0) | 0;
                    aa = c[v >> 2] | 0;
                    Y = c[(a + 8 + (aa << 2)) >> 2] | 0;
                    t = +g[(19680408 + ((Y * 20) | 0)) >> 2];
                    g[x >> 2] = t;
                    G = +g[(19680412 + ((Y * 20) | 0)) >> 2];
                    g[L >> 2] = G;
                    M = +g[(19680416 + ((Y * 20) | 0)) >> 2];
                    g[D >> 2] = M;
                    F = +g[(19680420 + ((Y * 20) | 0)) >> 2];
                    g[A >> 2] = F;
                    if ((c[(a + 112 + (aa << 2)) >> 2] | 0) == 0) {
                      g[x >> 2] = -0.0 - t;
                      g[L >> 2] = -0.0 - G;
                      g[D >> 2] = -0.0 - M;
                      M = -0.0 - F;
                      g[A >> 2] = M;
                      ea = M;
                    } else {
                      ea = F;
                    }
                    Mq(j, x, ea, 0.10000000149011612);
                    aa = c[j >> 2] | 0;
                    if ((aa | 0) == 0) {
                      Tr(
                        124056,
                        ((Q = i),
                        (i = (i + 1) | 0),
                        (i = (i + 7) & -8),
                        (c[Q >> 2] = 0),
                        Q) | 0
                      );
                      i = Q;
                      break;
                    } else {
                      Iq(aa);
                      c[v >> 2] = (c[v >> 2] | 0) + 1;
                      break;
                    }
                  }
                } while (0);
                if ((C | 0) < 0) {
                  C = (C + 2) | 0;
                } else {
                  break;
                }
              }
              U = (U + 1) | 0;
            } while ((U | 0) < 3);
          }
        } while (0);
        C = c[h >> 2] | 0;
        J = c[C >> 2] | 0;
        if ((P | 0) < (J | 0)) {
          f = P;
          z = C;
          y = J;
        } else {
          fa = C;
          break;
        }
      }
    } else {
      fa = K;
    }
    Iq(fa);
    c[(a + 8 + (c[v >> 2] << 2)) >> 2] = c[o >> 2];
    c[(a + 216 + (c[v >> 2] << 2)) >> 2] = 0;
    c[(a + 112 + (c[v >> 2] << 2)) >> 2] = 1;
    c[v >> 2] = (c[v >> 2] | 0) + 1;
    i = b;
    return;
  }
  function yq(a, b, d) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    var e = 0,
      f = 0,
      h = 0,
      j = 0,
      k = 0,
      l = 0,
      m = 0,
      n = 0,
      o = 0,
      p = 0,
      q = 0,
      r = 0,
      s = 0,
      t = 0,
      u = 0,
      v = 0,
      w = 0.0,
      x = 0,
      y = 0,
      z = 0,
      A = 0,
      B = 0,
      C = 0,
      D = 0.0,
      E = 0.0,
      F = 0,
      G = 0,
      H = 0,
      I = 0,
      J = 0,
      K = 0,
      L = 0,
      M = 0,
      N = 0,
      O = 0,
      P = 0,
      Q = 0,
      R = 0,
      S = 0,
      T = 0,
      U = 0,
      V = 0,
      W = 0,
      X = 0,
      Y = 0,
      Z = 0,
      _ = 0,
      $ = 0,
      aa = 0,
      ba = 0,
      ca = 0,
      ea = 0,
      fa = 0,
      ga = 0,
      ha = 0,
      ia = 0,
      ja = 0,
      ka = 0,
      la = 0,
      ma = 0,
      na = 0,
      oa = 0,
      pa = 0,
      qa = 0,
      ra = 0,
      sa = 0,
      ta = 0,
      ua = 0,
      va = 0.0,
      wa = 0.0,
      xa = 0,
      ya = 0,
      za = 0.0,
      Aa = 0.0,
      Ba = 0,
      Ca = 0,
      Da = 0.0,
      Ea = 0.0,
      Fa = 0.0,
      Ga = 0.0,
      Ha = 0,
      Ia = 0,
      Ja = 0.0,
      Ka = 0.0,
      La = 0,
      Ma = 0,
      Na = 0.0,
      Oa = 0.0,
      Pa = 0,
      Qa = 0,
      Ra = 0,
      Sa = 0,
      Ta = 0,
      Ua = 0,
      Va = 0,
      Wa = 0,
      Xa = 0,
      Ya = 0,
      Za = 0,
      _a = 0,
      $a = 0,
      ab = 0,
      bb = 0,
      cb = 0,
      db = 0,
      eb = 0,
      fb = 0,
      gb = 0,
      hb = 0,
      ib = 0,
      jb = 0,
      kb = 0,
      lb = 0,
      mb = 0,
      nb = 0,
      ob = 0,
      pb = 0,
      qb = 0,
      rb = 0,
      sb = 0,
      tb = 0,
      ub = 0;
    e = i;
    i = (i + 332856) | 0;
    f = e | 0;
    h = (e + 16) | 0;
    j = (e + 133144) | 0;
    if (((a | 0) < 3) | ((b | 0) < 3) | ((d | 0) == 0)) {
      Ur(
        1,
        113176,
        ((k = i),
        (i = (i + 24) | 0),
        (c[k >> 2] = a),
        (c[(k + 8) >> 2] = b),
        (c[(k + 16) >> 2] = d),
        k) | 0
      );
      i = k;
      return 0;
    }
    if (((a & 1) | 0) == 0) {
      Ur(
        1,
        103784,
        ((k = i), (i = (i + 1) | 0), (i = (i + 7) & -8), (c[k >> 2] = 0), k) | 0
      );
      i = k;
      return 0;
    }
    if (((b & 1) | 0) == 0) {
      Ur(
        1,
        103784,
        ((k = i), (i = (i + 1) | 0), (i = (i + 7) & -8), (c[k >> 2] = 0), k) | 0
      );
      i = k;
      return 0;
    }
    if (((a | 0) > 129) | ((b | 0) > 129)) {
      Ur(
        1,
        60736,
        ((k = i), (i = (i + 1) | 0), (i = (i + 7) & -8), (c[k >> 2] = 0), k) | 0
      );
      i = k;
      return 0;
    }
    l = j | 0;
    c[l >> 2] = a;
    m = (j + 4) | 0;
    c[m >> 2] = b;
    n = (j + 8) | 0;
    c[n >> 2] = 0;
    o = (j + 12) | 0;
    c[o >> 2] = 0;
    do {
      if ((a | 0) > 0) {
        if ((b | 0) > 0) {
          p = 0;
        } else {
          q = 0;
          r = b;
          break;
        }
        do {
          s = 0;
          do {
            t = ((da(s, a) | 0) + p) | 0;
            g[(j + 16 + ((p * 1548) | 0) + ((s * 12) | 0)) >> 2] =
              +g[(d + ((t * 12) | 0)) >> 2];
            g[(j + 16 + ((p * 1548) | 0) + ((s * 12) | 0) + 4) >> 2] =
              +g[(d + ((t * 12) | 0) + 4) >> 2];
            g[(j + 16 + ((p * 1548) | 0) + ((s * 12) | 0) + 8) >> 2] =
              +g[(d + ((t * 12) | 0) + 8) >> 2];
            s = (s + 1) | 0;
          } while ((s | 0) < (b | 0));
          p = (p + 1) | 0;
        } while ((p | 0) < (a | 0));
        u = c[m >> 2] | 0;
        v = 14;
      } else {
        u = b;
        v = 14;
      }
    } while (0);
    a: do {
      if ((v | 0) == 14) {
        if ((u | 0) <= 0) {
          q = 0;
          r = u;
          break;
        }
        b = ((c[l >> 2] | 0) - 1) | 0;
        a = 0;
        while (1) {
          p = 0;
          while (1) {
            w =
              +g[(j + 16 + ((a * 12) | 0) + (p << 2)) >> 2] -
              +g[(j + 16 + ((b * 1548) | 0) + ((a * 12) | 0) + (p << 2)) >> 2];
            d = (p + 1) | 0;
            if ((w < -0.1) | (w > 0.1)) {
              x = p;
              break;
            }
            if ((d | 0) < 3) {
              p = d;
            } else {
              x = d;
              break;
            }
          }
          p = (a + 1) | 0;
          if ((x | 0) != 3) {
            q = a;
            r = u;
            break a;
          }
          if ((p | 0) < (u | 0)) {
            a = p;
          } else {
            q = p;
            r = u;
            break;
          }
        }
      }
    } while (0);
    c[n >> 2] = (q | 0) == (r | 0);
    zq(j);
    Aq(j);
    r = c[l >> 2] | 0;
    q = c[m >> 2] | 0;
    do {
      if ((r | 0) > (q | 0)) {
        if ((q | 0) > 0) {
          y = 0;
          z = r;
          A = q;
        } else {
          B = r;
          C = q;
          break;
        }
        while (1) {
          u = (y + 1) | 0;
          if ((u | 0) < (z | 0)) {
            x = u;
            a = A;
            while (1) {
              if ((x | 0) < (a | 0)) {
                b = (j + 16 + ((y * 1548) | 0) + ((x * 12) | 0)) | 0;
                w = +g[b >> 2];
                p = (j + 16 + ((y * 1548) | 0) + ((x * 12) | 0) + 4) | 0;
                D = +g[p >> 2];
                d = (j + 16 + ((y * 1548) | 0) + ((x * 12) | 0) + 8) | 0;
                E = +g[d >> 2];
                s = (j + 16 + ((x * 1548) | 0) + ((y * 12) | 0)) | 0;
                g[b >> 2] = +g[s >> 2];
                b = (j + 16 + ((x * 1548) | 0) + ((y * 12) | 0) + 4) | 0;
                g[p >> 2] = +g[b >> 2];
                p = (j + 16 + ((x * 1548) | 0) + ((y * 12) | 0) + 8) | 0;
                g[d >> 2] = +g[p >> 2];
                g[s >> 2] = w;
                g[b >> 2] = D;
                g[p >> 2] = E;
              } else {
                g[(j + 16 + ((y * 1548) | 0) + ((x * 12) | 0)) >> 2] =
                  +g[(j + 16 + ((x * 1548) | 0) + ((y * 12) | 0)) >> 2];
                g[(j + 16 + ((y * 1548) | 0) + ((x * 12) | 0) + 4) >> 2] =
                  +g[(j + 16 + ((x * 1548) | 0) + ((y * 12) | 0) + 4) >> 2];
                g[(j + 16 + ((y * 1548) | 0) + ((x * 12) | 0) + 8) >> 2] =
                  +g[(j + 16 + ((x * 1548) | 0) + ((y * 12) | 0) + 8) >> 2];
              }
              p = (x + 1) | 0;
              b = c[l >> 2] | 0;
              s = c[m >> 2] | 0;
              if ((p | 0) < (b | 0)) {
                x = p;
                a = s;
              } else {
                F = b;
                G = s;
                break;
              }
            }
          } else {
            F = z;
            G = A;
          }
          if ((u | 0) < (G | 0)) {
            y = u;
            z = F;
            A = G;
          } else {
            B = F;
            C = G;
            break;
          }
        }
      } else {
        if ((r | 0) > 0) {
          H = 0;
          I = q;
          J = r;
        } else {
          B = r;
          C = q;
          break;
        }
        while (1) {
          a = (H + 1) | 0;
          if ((a | 0) < (I | 0)) {
            x = a;
            s = J;
            while (1) {
              if ((x | 0) < (s | 0)) {
                b = (j + 16 + ((x * 1548) | 0) + ((H * 12) | 0)) | 0;
                E = +g[b >> 2];
                p = (j + 16 + ((x * 1548) | 0) + ((H * 12) | 0) + 4) | 0;
                D = +g[p >> 2];
                d = (j + 16 + ((x * 1548) | 0) + ((H * 12) | 0) + 8) | 0;
                w = +g[d >> 2];
                t = (j + 16 + ((H * 1548) | 0) + ((x * 12) | 0)) | 0;
                g[b >> 2] = +g[t >> 2];
                b = (j + 16 + ((H * 1548) | 0) + ((x * 12) | 0) + 4) | 0;
                g[p >> 2] = +g[b >> 2];
                p = (j + 16 + ((H * 1548) | 0) + ((x * 12) | 0) + 8) | 0;
                g[d >> 2] = +g[p >> 2];
                g[t >> 2] = E;
                g[b >> 2] = D;
                g[p >> 2] = w;
              } else {
                g[(j + 16 + ((x * 1548) | 0) + ((H * 12) | 0)) >> 2] =
                  +g[(j + 16 + ((H * 1548) | 0) + ((x * 12) | 0)) >> 2];
                g[(j + 16 + ((x * 1548) | 0) + ((H * 12) | 0) + 4) >> 2] =
                  +g[(j + 16 + ((H * 1548) | 0) + ((x * 12) | 0) + 4) >> 2];
                g[(j + 16 + ((x * 1548) | 0) + ((H * 12) | 0) + 8) >> 2] =
                  +g[(j + 16 + ((H * 1548) | 0) + ((x * 12) | 0) + 8) >> 2];
              }
              p = (x + 1) | 0;
              b = c[m >> 2] | 0;
              t = c[l >> 2] | 0;
              if ((p | 0) < (b | 0)) {
                x = p;
                s = t;
              } else {
                K = b;
                L = t;
                break;
              }
            }
          } else {
            K = I;
            L = J;
          }
          if ((a | 0) < (L | 0)) {
            H = a;
            I = K;
            J = L;
          } else {
            B = L;
            C = K;
            break;
          }
        }
      }
    } while (0);
    c[l >> 2] = C;
    c[m >> 2] = B;
    K = c[n >> 2] | 0;
    c[n >> 2] = c[o >> 2];
    c[o >> 2] = K;
    b: do {
      if ((B | 0) > 0) {
        K = (C - 1) | 0;
        L = 0;
        while (1) {
          J = 0;
          while (1) {
            w =
              +g[(j + 16 + ((L * 12) | 0) + (J << 2)) >> 2] -
              +g[(j + 16 + ((K * 1548) | 0) + ((L * 12) | 0) + (J << 2)) >> 2];
            I = (J + 1) | 0;
            if ((w < -0.1) | (w > 0.1)) {
              M = J;
              break;
            }
            if ((I | 0) < 3) {
              J = I;
            } else {
              M = I;
              break;
            }
          }
          J = (L + 1) | 0;
          if ((M | 0) != 3) {
            N = L;
            break b;
          }
          if ((J | 0) < (B | 0)) {
            L = J;
          } else {
            N = J;
            break;
          }
        }
      } else {
        N = 0;
      }
    } while (0);
    c[n >> 2] = (N | 0) == (B | 0);
    zq(j);
    Aq(j);
    B = rs(40, 0) | 0;
    N = B;
    M = B;
    C = (B + 12) | 0;
    KB(M, C);
    L = c[l >> 2] | 0;
    K = c[m >> 2] | 0;
    if ((L | 0) > 0) {
      J = 0;
      a = K;
      I = L;
      while (1) {
        if ((a | 0) > 0) {
          H = 0;
          do {
            LB((j + 16 + ((J * 1548) | 0) + ((H * 12) | 0)) | 0, M, C);
            H = (H + 1) | 0;
            O = c[m >> 2] | 0;
          } while ((H | 0) < (O | 0));
          P = O;
          Q = c[l >> 2] | 0;
        } else {
          P = a;
          Q = I;
        }
        H = (J + 1) | 0;
        if ((H | 0) < (Q | 0)) {
          J = H;
          a = P;
          I = Q;
        } else {
          R = Q;
          S = P;
          break;
        }
      }
    } else {
      R = L;
      S = K;
    }
    K = (R - 1) | 0;
    L = da((S - 1) | 0, K) | 0;
    c[6924878] = L + (c[6924878] | 0);
    c[4938830] = 0;
    c[4938836] = 0;
    if ((K | 0) > 0) {
      K = 0;
      L = S;
      P = R;
      while (1) {
        Q = (K + 1) | 0;
        if (((L - 1) | 0) > 0) {
          I = 0;
          while (1) {
            a = (j + 16 + ((K * 1548) | 0) + ((I * 12) | 0)) | 0;
            J = (I + 1) | 0;
            O = (j + 16 + ((Q * 1548) | 0) + ((J * 12) | 0)) | 0;
            c[(h + ((K * 1032) | 0) + (I << 3)) >> 2] =
              Fq(a, (j + 16 + ((Q * 1548) | 0) + ((I * 12) | 0)) | 0, O) | 0;
            c[(h + ((K * 1032) | 0) + (I << 3) + 4) >> 2] =
              Fq(O, (j + 16 + ((K * 1548) | 0) + ((J * 12) | 0)) | 0, a) | 0;
            T = c[m >> 2] | 0;
            if ((J | 0) < ((T - 1) | 0)) {
              I = J;
            } else {
              break;
            }
          }
          U = T;
          V = c[l >> 2] | 0;
        } else {
          U = L;
          V = P;
        }
        if ((Q | 0) < ((V - 1) | 0)) {
          K = Q;
          L = U;
          P = V;
        } else {
          W = V;
          X = U;
          break;
        }
      }
    } else {
      W = R;
      X = S;
    }
    if (((W - 1) | 0) <= 0) {
      Y = c[4938830] | 0;
      Z = (B + 24) | 0;
      _ = Z;
      c[_ >> 2] = Y;
      $ = c[4938836] | 0;
      aa = (B + 32) | 0;
      ba = aa;
      c[ba >> 2] = $;
      ca = c[4938836] | 0;
      ea = (ca * 320) | 0;
      fa = rs(ea, 0) | 0;
      ga = fa;
      ha = (B + 36) | 0;
      ia = ha;
      c[ia >> 2] = ga;
      ja = c[4938836] | 0;
      ka = (ja * 320) | 0;
      m$(fa | 0, 20589392, ka) | 0;
      la = c[4938830] | 0;
      ma = (la * 20) | 0;
      na = rs(ma, 0) | 0;
      oa = na;
      pa = (B + 28) | 0;
      qa = pa;
      c[qa >> 2] = oa;
      ra = c[4938830] | 0;
      sa = (ra * 20) | 0;
      m$(na | 0, 19680408, sa) | 0;
      ta = 133128;
      ua = 0;
      va = +g[M >> 2];
      wa = va + -1.0;
      g[M >> 2] = wa;
      xa = (B + 4) | 0;
      ya = xa;
      za = +g[ya >> 2];
      Aa = za + -1.0;
      g[ya >> 2] = Aa;
      Ba = (B + 8) | 0;
      Ca = Ba;
      Da = +g[Ca >> 2];
      Ea = Da + -1.0;
      g[Ca >> 2] = Ea;
      Fa = +g[C >> 2];
      Ga = Fa + 1.0;
      g[C >> 2] = Ga;
      Ha = (B + 16) | 0;
      Ia = Ha;
      Ja = +g[Ia >> 2];
      Ka = Ja + 1.0;
      g[Ia >> 2] = Ka;
      La = (B + 20) | 0;
      Ma = La;
      Na = +g[Ma >> 2];
      Oa = Na + 1.0;
      g[Ma >> 2] = Oa;
      Pa = 199708;
      Qa = 0;
      i = e;
      return N | 0;
    }
    S = f | 0;
    R = (f + 4) | 0;
    U = (f + 8) | 0;
    f = 0;
    V = X;
    X = W;
    c: while (1) {
      W = (f + 1) | 0;
      if (((V - 1) | 0) > 0) {
        P = (f | 0) > 0;
        L = (f - 1) | 0;
        K = (h + ((f * 1032) | 0)) | 0;
        T = 0;
        I = V;
        do {
          do {
            if ((T | 0) > 0) {
              Ra = (T - 1) | 0;
              v = 62;
            } else {
              if ((c[o >> 2] | 0) == 0) {
                J = (h + ((f * 1032) | 0) + (T << 3)) | 0;
                a = c[J >> 2] | 0;
                Sa = J;
                Ta = ((a | 0) == -1) | 0;
                Ua = a;
                v = 63;
                break;
              } else {
                Ra = (I - 2) | 0;
                v = 62;
                break;
              }
            }
          } while (0);
          if ((v | 0) == 62) {
            v = 0;
            a = c[(h + ((f * 1032) | 0) + (Ra << 3) + 4) >> 2] | 0;
            J = (h + ((f * 1032) | 0) + (T << 3)) | 0;
            O = c[J >> 2] | 0;
            H = (a | 0) == (O | 0);
            q = H & 1;
            if (((a | 0) == -1) | H) {
              Sa = J;
              Ta = q;
              Ua = O;
              v = 63;
            } else {
              Va = a;
              Wa = J;
              Xa = q;
              Ya = I;
            }
          }
          if ((v | 0) == 63) {
            v = 0;
            q = (j + 16 + ((f * 1548) | 0) + ((T * 12) | 0)) | 0;
            J = (j + 16 + ((W * 1548) | 0) + ((T * 12) | 0)) | 0;
            do {
              if ((Ua | 0) == -1) {
                a = c[(h + ((f * 1032) | 0) + (T << 3) + 4) >> 2] | 0;
                if (!((a | 0) == -1)) {
                  Za = a;
                  break;
                }
                Sr(
                  156248,
                  ((k = i),
                  (i = (i + 1) | 0),
                  (i = (i + 7) & -8),
                  (c[k >> 2] = 0),
                  k) | 0
                );
                i = k;
                Za = -1;
              } else {
                Za = Ua;
              }
            } while (0);
            g[S >> 2] =
              +g[q >> 2] + +g[(19680408 + ((Za * 20) | 0)) >> 2] * 4.0;
            g[R >> 2] =
              +g[(j + 16 + ((f * 1548) | 0) + ((T * 12) | 0) + 4) >> 2] +
              +g[(19680412 + ((Za * 20) | 0)) >> 2] * 4.0;
            g[U >> 2] =
              +g[(j + 16 + ((f * 1548) | 0) + ((T * 12) | 0) + 8) >> 2] +
              +g[(19680416 + ((Za * 20) | 0)) >> 2] * 4.0;
            a = Fq(q, J, S) | 0;
            Va = a;
            Wa = Sa;
            Xa = Ta;
            Ya = c[m >> 2] | 0;
          }
          do {
            if ((T | 0) < ((Ya - 2) | 0)) {
              _a = (h + ((f * 1032) | 0) + ((T + 1) << 3)) | 0;
              v = 71;
            } else {
              if ((c[o >> 2] | 0) != 0) {
                _a = K;
                v = 71;
                break;
              }
              a = (h + ((f * 1032) | 0) + (T << 3) + 4) | 0;
              O = c[a >> 2] | 0;
              $a = a;
              ab = ((O | 0) == -1) | 0;
              bb = O;
              v = 72;
            }
          } while (0);
          if ((v | 0) == 71) {
            v = 0;
            J = c[_a >> 2] | 0;
            q = (h + ((f * 1032) | 0) + (T << 3) + 4) | 0;
            O = c[q >> 2] | 0;
            a = (J | 0) == (O | 0);
            H = a & 1;
            if (((J | 0) == -1) | a) {
              $a = q;
              ab = H;
              bb = O;
              v = 72;
            } else {
              cb = J;
              db = q;
              eb = H;
            }
          }
          if ((v | 0) == 72) {
            v = 0;
            H = (T + 1) | 0;
            q = (j + 16 + ((f * 1548) | 0) + ((H * 12) | 0)) | 0;
            J = (j + 16 + ((W * 1548) | 0) + ((H * 12) | 0)) | 0;
            do {
              if ((bb | 0) == -1) {
                O = c[(h + ((f * 1032) | 0) + (T << 3)) >> 2] | 0;
                if (!((O | 0) == -1)) {
                  fb = O;
                  break;
                }
                Sr(
                  156248,
                  ((k = i),
                  (i = (i + 1) | 0),
                  (i = (i + 7) & -8),
                  (c[k >> 2] = 0),
                  k) | 0
                );
                i = k;
                fb = -1;
              } else {
                fb = bb;
              }
            } while (0);
            g[S >> 2] =
              +g[q >> 2] + +g[(19680408 + ((fb * 20) | 0)) >> 2] * 4.0;
            g[R >> 2] =
              +g[(j + 16 + ((f * 1548) | 0) + ((H * 12) | 0) + 4) >> 2] +
              +g[(19680412 + ((fb * 20) | 0)) >> 2] * 4.0;
            g[U >> 2] =
              +g[(j + 16 + ((f * 1548) | 0) + ((H * 12) | 0) + 8) >> 2] +
              +g[(19680416 + ((fb * 20) | 0)) >> 2] * 4.0;
            cb = Fq(J, q, S) | 0;
            db = $a;
            eb = ab;
          }
          do {
            if (P) {
              gb = L;
              v = 80;
            } else {
              if ((c[n >> 2] | 0) == 0) {
                hb = ((c[db >> 2] | 0) == -1) | 0;
                v = 81;
                break;
              } else {
                gb = ((c[l >> 2] | 0) - 2) | 0;
                v = 80;
                break;
              }
            }
          } while (0);
          if ((v | 0) == 80) {
            v = 0;
            q = c[(h + ((gb * 1032) | 0) + (T << 3)) >> 2] | 0;
            J = (q | 0) == (c[db >> 2] | 0);
            H = J & 1;
            if (((q | 0) == -1) | J) {
              hb = H;
              v = 81;
            } else {
              ib = q;
              jb = H;
            }
          }
          if ((v | 0) == 81) {
            v = 0;
            H = (j + 16 + ((f * 1548) | 0) + ((T * 12) | 0)) | 0;
            q = (j + 16 + ((f * 1548) | 0) + ((((T + 1) | 0) * 12) | 0)) | 0;
            J = c[(h + ((f * 1032) | 0) + (T << 3) + 4) >> 2] | 0;
            do {
              if ((J | 0) == -1) {
                O = c[(h + ((f * 1032) | 0) + (T << 3)) >> 2] | 0;
                if (!((O | 0) == -1)) {
                  kb = O;
                  break;
                }
                Sr(
                  156248,
                  ((k = i),
                  (i = (i + 1) | 0),
                  (i = (i + 7) & -8),
                  (c[k >> 2] = 0),
                  k) | 0
                );
                i = k;
                kb = -1;
              } else {
                kb = J;
              }
            } while (0);
            g[S >> 2] =
              +g[H >> 2] + +g[(19680408 + ((kb * 20) | 0)) >> 2] * 4.0;
            g[R >> 2] =
              +g[(j + 16 + ((f * 1548) | 0) + ((T * 12) | 0) + 4) >> 2] +
              +g[(19680412 + ((kb * 20) | 0)) >> 2] * 4.0;
            g[U >> 2] =
              +g[(j + 16 + ((f * 1548) | 0) + ((T * 12) | 0) + 8) >> 2] +
              +g[(19680416 + ((kb * 20) | 0)) >> 2] * 4.0;
            ib = Fq(q, H, S) | 0;
            jb = hb;
          }
          do {
            if ((f | 0) < (((c[l >> 2] | 0) - 2) | 0)) {
              lb = (h + ((W * 1032) | 0) + (T << 3) + 4) | 0;
              v = 90;
            } else {
              if ((c[n >> 2] | 0) == 0) {
                mb = ((c[Wa >> 2] | 0) == -1) | 0;
                v = 91;
                break;
              } else {
                lb = (h + (T << 3) + 4) | 0;
                v = 90;
                break;
              }
            }
          } while (0);
          if ((v | 0) == 90) {
            v = 0;
            H = c[lb >> 2] | 0;
            q = (H | 0) == (c[Wa >> 2] | 0);
            J = q & 1;
            if (((H | 0) == -1) | q) {
              mb = J;
              v = 91;
            } else {
              nb = H;
              ob = J;
            }
          }
          if ((v | 0) == 91) {
            v = 0;
            J = (j + 16 + ((W * 1548) | 0) + ((T * 12) | 0)) | 0;
            H = (j + 16 + ((W * 1548) | 0) + ((((T + 1) | 0) * 12) | 0)) | 0;
            q = c[(h + ((f * 1032) | 0) + (T << 3)) >> 2] | 0;
            do {
              if ((q | 0) == -1) {
                O = c[(h + ((f * 1032) | 0) + (T << 3) + 4) >> 2] | 0;
                if (!((O | 0) == -1)) {
                  pb = O;
                  break;
                }
                Sr(
                  156248,
                  ((k = i),
                  (i = (i + 1) | 0),
                  (i = (i + 7) & -8),
                  (c[k >> 2] = 0),
                  k) | 0
                );
                i = k;
                pb = -1;
              } else {
                pb = q;
              }
            } while (0);
            g[S >> 2] =
              +g[J >> 2] + +g[(19680408 + ((pb * 20) | 0)) >> 2] * 4.0;
            g[R >> 2] =
              +g[(j + 16 + ((W * 1548) | 0) + ((T * 12) | 0) + 4) >> 2] +
              +g[(19680412 + ((pb * 20) | 0)) >> 2] * 4.0;
            g[U >> 2] =
              +g[(j + 16 + ((W * 1548) | 0) + ((T * 12) | 0) + 8) >> 2] +
              +g[(19680416 + ((pb * 20) | 0)) >> 2] * 4.0;
            nb = Fq(J, H, S) | 0;
            ob = mb;
          }
          q = c[4938836] | 0;
          if ((q | 0) == 1024) {
            v = 96;
            break c;
          }
          O = (20589392 + ((q * 320) | 0)) | 0;
          n$(O | 0, 0, 320) | 0;
          a = c[Wa >> 2] | 0;
          do {
            if ((a | 0) == (c[db >> 2] | 0)) {
              if ((a | 0) == -1) {
                break;
              }
              c[O >> 2] = a;
              c[(20589396 + ((q * 320) | 0)) >> 2] = 4;
              c[(20589400 + ((q * 320) | 0)) >> 2] = Va;
              c[(20589608 + ((q * 320) | 0)) >> 2] = Xa;
              c[(20589404 + ((q * 320) | 0)) >> 2] = nb;
              c[(20589612 + ((q * 320) | 0)) >> 2] = ob;
              c[(20589408 + ((q * 320) | 0)) >> 2] = cb;
              c[(20589616 + ((q * 320) | 0)) >> 2] = eb;
              c[(20589412 + ((q * 320) | 0)) >> 2] = ib;
              c[(20589620 + ((q * 320) | 0)) >> 2] = jb;
              Gq(O, j, f, T, -1);
              if ((Hq(O) | 0) == 0) {
                break;
              }
              xq(O);
              c[4938836] = (c[4938836] | 0) + 1;
            } else {
              c[O >> 2] = a;
              c[(20589396 + ((q * 320) | 0)) >> 2] = 3;
              c[(20589400 + ((q * 320) | 0)) >> 2] = Va;
              c[(20589608 + ((q * 320) | 0)) >> 2] = Xa;
              c[(20589404 + ((q * 320) | 0)) >> 2] = nb;
              c[(20589612 + ((q * 320) | 0)) >> 2] = ob;
              r = c[db >> 2] | 0;
              G = (20589408 + ((q * 320) | 0)) | 0;
              c[G >> 2] = r;
              do {
                if ((r | 0) == -1) {
                  c[G >> 2] = cb;
                  if (!((cb | 0) == -1)) {
                    break;
                  }
                  F = (T + 1) | 0;
                  A = (j + 16 + ((W * 1548) | 0) + ((F * 12) | 0)) | 0;
                  z = (j + 16 + ((f * 1548) | 0) + ((T * 12) | 0)) | 0;
                  y = c[(h + ((f * 1032) | 0) + (T << 3)) >> 2] | 0;
                  do {
                    if ((y | 0) == -1) {
                      s = c[(h + ((f * 1032) | 0) + (T << 3) + 4) >> 2] | 0;
                      if (!((s | 0) == -1)) {
                        qb = s;
                        break;
                      }
                      Sr(
                        156248,
                        ((k = i),
                        (i = (i + 1) | 0),
                        (i = (i + 7) & -8),
                        (c[k >> 2] = 0),
                        k) | 0
                      );
                      i = k;
                      qb = -1;
                    } else {
                      qb = y;
                    }
                  } while (0);
                  g[S >> 2] =
                    +g[A >> 2] + +g[(19680408 + ((qb * 20) | 0)) >> 2] * 4.0;
                  g[R >> 2] =
                    +g[(j + 16 + ((W * 1548) | 0) + ((F * 12) | 0) + 4) >> 2] +
                    +g[(19680412 + ((qb * 20) | 0)) >> 2] * 4.0;
                  g[U >> 2] =
                    +g[(j + 16 + ((W * 1548) | 0) + ((F * 12) | 0) + 8) >> 2] +
                    +g[(19680416 + ((qb * 20) | 0)) >> 2] * 4.0;
                  c[G >> 2] = Fq(A, z, S) | 0;
                }
              } while (0);
              Gq(O, j, f, T, 0);
              if ((Hq(O) | 0) == 0) {
                rb = c[4938836] | 0;
              } else {
                xq(O);
                G = ((c[4938836] | 0) + 1) | 0;
                c[4938836] = G;
                rb = G;
              }
              if ((rb | 0) == 1024) {
                v = 111;
                break c;
              }
              G = (20589392 + ((rb * 320) | 0)) | 0;
              n$(G | 0, 0, 320) | 0;
              c[G >> 2] = c[db >> 2];
              c[(20589396 + ((rb * 320) | 0)) >> 2] = 3;
              c[(20589400 + ((rb * 320) | 0)) >> 2] = cb;
              c[(20589608 + ((rb * 320) | 0)) >> 2] = eb;
              c[(20589404 + ((rb * 320) | 0)) >> 2] = ib;
              c[(20589612 + ((rb * 320) | 0)) >> 2] = jb;
              r = c[Wa >> 2] | 0;
              y = (20589408 + ((rb * 320) | 0)) | 0;
              c[y >> 2] = r;
              do {
                if ((r | 0) == -1) {
                  c[y >> 2] = Va;
                  if (!((Va | 0) == -1)) {
                    break;
                  }
                  s = (j + 16 + ((f * 1548) | 0) + ((T * 12) | 0)) | 0;
                  x =
                    (j + 16 + ((W * 1548) | 0) + ((((T + 1) | 0) * 12) | 0)) |
                    0;
                  u = c[(h + ((f * 1032) | 0) + (T << 3) + 4) >> 2] | 0;
                  do {
                    if ((u | 0) == -1) {
                      t = c[(h + ((f * 1032) | 0) + (T << 3)) >> 2] | 0;
                      if (!((t | 0) == -1)) {
                        sb = t;
                        break;
                      }
                      Sr(
                        156248,
                        ((k = i),
                        (i = (i + 1) | 0),
                        (i = (i + 7) & -8),
                        (c[k >> 2] = 0),
                        k) | 0
                      );
                      i = k;
                      sb = -1;
                    } else {
                      sb = u;
                    }
                  } while (0);
                  g[S >> 2] =
                    +g[s >> 2] + +g[(19680408 + ((sb * 20) | 0)) >> 2] * 4.0;
                  g[R >> 2] =
                    +g[(j + 16 + ((f * 1548) | 0) + ((T * 12) | 0) + 4) >> 2] +
                    +g[(19680412 + ((sb * 20) | 0)) >> 2] * 4.0;
                  g[U >> 2] =
                    +g[(j + 16 + ((f * 1548) | 0) + ((T * 12) | 0) + 8) >> 2] +
                    +g[(19680416 + ((sb * 20) | 0)) >> 2] * 4.0;
                  c[y >> 2] = Fq(s, x, S) | 0;
                }
              } while (0);
              Gq(G, j, f, T, 1);
              if ((Hq(G) | 0) == 0) {
                break;
              }
              xq(G);
              c[4938836] = (c[4938836] | 0) + 1;
            }
          } while (0);
          T = (T + 1) | 0;
          I = c[m >> 2] | 0;
        } while ((T | 0) < ((I - 1) | 0));
        tb = I;
        ub = c[l >> 2] | 0;
      } else {
        tb = V;
        ub = X;
      }
      if ((W | 0) < ((ub - 1) | 0)) {
        f = W;
        V = tb;
        X = ub;
      } else {
        v = 123;
        break;
      }
    }
    if ((v | 0) == 96) {
      Ur(
        1,
        168032,
        ((k = i), (i = (i + 1) | 0), (i = (i + 7) & -8), (c[k >> 2] = 0), k) | 0
      );
      i = k;
      return 0;
    } else if ((v | 0) == 111) {
      Ur(
        1,
        168032,
        ((k = i), (i = (i + 1) | 0), (i = (i + 7) & -8), (c[k >> 2] = 0), k) | 0
      );
      i = k;
      return 0;
    } else if ((v | 0) == 123) {
      Y = c[4938830] | 0;
      Z = (B + 24) | 0;
      _ = Z;
      c[_ >> 2] = Y;
      $ = c[4938836] | 0;
      aa = (B + 32) | 0;
      ba = aa;
      c[ba >> 2] = $;
      ca = c[4938836] | 0;
      ea = (ca * 320) | 0;
      fa = rs(ea, 0) | 0;
      ga = fa;
      ha = (B + 36) | 0;
      ia = ha;
      c[ia >> 2] = ga;
      ja = c[4938836] | 0;
      ka = (ja * 320) | 0;
      m$(fa | 0, 20589392, ka) | 0;
      la = c[4938830] | 0;
      ma = (la * 20) | 0;
      na = rs(ma, 0) | 0;
      oa = na;
      pa = (B + 28) | 0;
      qa = pa;
      c[qa >> 2] = oa;
      ra = c[4938830] | 0;
      sa = (ra * 20) | 0;
      m$(na | 0, 19680408, sa) | 0;
      ta = 133128;
      ua = 0;
      va = +g[M >> 2];
      wa = va + -1.0;
      g[M >> 2] = wa;
      xa = (B + 4) | 0;
      ya = xa;
      za = +g[ya >> 2];
      Aa = za + -1.0;
      g[ya >> 2] = Aa;
      Ba = (B + 8) | 0;
      Ca = Ba;
      Da = +g[Ca >> 2];
      Ea = Da + -1.0;
      g[Ca >> 2] = Ea;
      Fa = +g[C >> 2];
      Ga = Fa + 1.0;
      g[C >> 2] = Ga;
      Ha = (B + 16) | 0;
      Ia = Ha;
      Ja = +g[Ia >> 2];
      Ka = Ja + 1.0;
      g[Ia >> 2] = Ka;
      La = (B + 20) | 0;
      Ma = La;
      Na = +g[Ma >> 2];
      Oa = Na + 1.0;
      g[Ma >> 2] = Oa;
      Pa = 199708;
      Qa = 0;
      i = e;
      return N | 0;
    }
    return 0;
  }

  function cw(d, e, f) {
    d = d | 0;
    e = e | 0;
    f = f | 0;
    var g = 0,
      h = 0,
      j = 0,
      k = 0,
      l = 0,
      m = 0,
      n = 0,
      o = 0,
      p = 0,
      q = 0,
      r = 0,
      s = 0,
      t = 0,
      u = 0,
      v = 0,
      w = 0,
      x = 0,
      y = 0,
      z = 0;
    g = i;
    i = (i + 128) | 0;
    h = f;
    f = i;
    i = (i + 32) | 0;
    m$(f, h, 32) | 0;
    h = g | 0;
    j = h;
    k = c[f >> 2] | 0;
    if (!(((k - 3) | 0) >>> 0 < 4 >>> 0)) {
      Ur(
        0,
        58208,
        ((l = i), (i = (i + 1) | 0), (i = (i + 7) & -8), (c[l >> 2] = 0), l) | 0
      );
      i = l;
    }
    m = c[4908] | 0;
    do {
      if ((m | 0) == -1) {
        if (!(((k - 3) | 0) >>> 0 < 2 >>> 0)) {
          break;
        }
        n = 128;
        o = 0;
        i = g;
        return;
      }
    } while (0);
    p = c[4910] | 0;
    do {
      if ((p | 0) == -1) {
        if (!(((k - 5) | 0) >>> 0 < 2 >>> 0)) {
          q = 10;
          break;
        }
        n = 128;
        o = 0;
        i = g;
        return;
      } else {
        if ((k | 0) != 6) {
          q = 10;
          break;
        }
        if (((c[((c[4939866] | 0) + 32) >> 2] & 8) | 0) == 0) {
          n$(j | 0, 0, 128) | 0;
          r = h;
          b[h >> 1] = 10;
          s = (h + 8) | 0;
          c[s >> 2] = c[5425934];
          c[(s + 4) >> 2] = c[5425935];
          c[(s + 8) >> 2] = c[5425936];
          c[(s + 12) >> 2] = c[5425937];
          s = b[(f + 24) >> 1] | 0;
          b[(r + 2) >> 1] = s;
          t = 0;
          u = s;
          v = 10;
          w = 6;
          x = r;
          break;
        } else {
          n = 128;
          o = 0;
          i = g;
          return;
        }
      }
    } while (0);
    do {
      if ((q | 0) == 10) {
        n$(j | 0, 0, 128) | 0;
        r = h;
        if ((k | 0) == 4) {
          b[h >> 1] = 2;
          s = c[(f + 4) >> 2] | 0;
          c[(h + 4) >> 2] = s;
          y = b[(f + 24) >> 1] | 0;
          b[(r + 2) >> 1] = y;
          t = s;
          u = y;
          v = 2;
          w = 4;
          x = r;
          break;
        } else if ((k | 0) == 3) {
          b[h >> 1] = 2;
          y = b[(f + 24) >> 1] | 0;
          b[(r + 2) >> 1] = y;
          c[(h + 4) >> 2] = -1;
          t = -1;
          u = y;
          v = 2;
          w = 3;
          x = r;
          break;
        } else if ((k | 0) == 5) {
          b[h >> 1] = 10;
          y = (h + 8) | 0;
          s = (f + 8) | 0;
          c[y >> 2] = c[s >> 2];
          c[(y + 4) >> 2] = c[(s + 4) >> 2];
          c[(y + 8) >> 2] = c[(s + 8) >> 2];
          c[(y + 12) >> 2] = c[(s + 12) >> 2];
          s = b[(f + 24) >> 1] | 0;
          b[(r + 2) >> 1] = s;
          c[(h + 24) >> 2] = c[(f + 28) >> 2];
          t = 0;
          u = s;
          v = 10;
          w = 5;
          x = r;
          break;
        } else {
          t = 0;
          u = 0;
          v = 0;
          w = k;
          x = r;
          break;
        }
      }
    } while (0);
    do {
      if (a[1168] & ((w | 0) == 4)) {
        a[2156496] = 0;
        a[2156497] = 0;
        a[2156498] = 0;
        a[2156499] = 1;
        c[539125] = t;
        b[1078252] = u;
        m$(2156506, e | 0, d) | 0;
        z = Ud(m | 0, 2156496, (d + 10) | 0, 0, 2156480, 16) | 0;
        q = 19;
      } else {
        if ((((v << 16) >> 16) | 0) == 2) {
          z = Ud(m | 0, e | 0, d | 0, 0, x | 0, 16) | 0;
          q = 19;
          break;
        } else if ((((v << 16) >> 16) | 0) == 10) {
          z = Ud(p | 0, e | 0, d | 0, 0, x | 0, 28) | 0;
          q = 19;
          break;
        } else {
          break;
        }
      }
    } while (0);
    do {
      if ((q | 0) == 19) {
        if ((z | 0) == -1) {
          break;
        }
        n = 128;
        o = 0;
        i = g;
        return;
      }
    } while (0);
    z = c[(Fc() | 0) >> 2] | 0;
    if ((z | 0) == 11) {
      n = 128;
      o = 0;
      i = g;
      return;
    } else if ((z | 0) == 99) {
      q = 21;
    }
    do {
      if ((q | 0) == 21) {
        if ((w | 0) != 3) {
          break;
        }
        n = 128;
        o = 0;
        i = g;
        return;
      }
    } while (0);
    w = Gc(z | 0) | 0;
    Sr(51536, ((l = i), (i = (i + 8) | 0), (c[l >> 2] = w), l) | 0);
    i = l;
    n = 128;
    o = 0;
    i = g;
    return;
  }
  function dw(b) {
    b = b | 0;
    var d = 0,
      e = 0,
      f = 0,
      g = 0,
      h = 0,
      j = 0,
      k = 0,
      l = 0,
      m = 0,
      n = 0;
    d = i;
    e = b;
    b = i;
    i = (i + 32) | 0;
    m$(b, e, 32) | 0;
    e = c[b >> 2] | 0;
    do {
      if ((e | 0) == 5) {
        f = a[(b + 8) | 0] | 0;
        if ((f << 24) >> 24 == -2) {
          if (((a[(b + 9) | 0] & -64) << 24) >> 24 == -128) {
            g = 1;
          } else {
            break;
          }
          i = d;
          return g | 0;
        } else {
          if (((f & -2) << 24) >> 24 == -4) {
            g = 1;
          } else {
            break;
          }
          i = d;
          return g | 0;
        }
      } else if ((e | 0) == 2) {
        g = 1;
        i = d;
        return g | 0;
      } else if ((e | 0) == 4) {
        f = a[(b + 4) | 0] | 0;
        if ((((f << 24) >> 24) | 0) == (-64 | 0)) {
          if ((a[(b + 5) | 0] | 0) == -88) {
            g = 1;
          } else {
            break;
          }
          i = d;
          return g | 0;
        } else if ((((f << 24) >> 24) | 0) == (-84 | 0)) {
          if (((a[(b + 5) | 0] & -16) << 24) >> 24 == 16) {
            g = 1;
          } else {
            break;
          }
          i = d;
          return g | 0;
        } else if (
          ((((f << 24) >> 24) | 0) == 10) |
          ((((f << 24) >> 24) | 0) == 127)
        ) {
          g = 1;
          i = d;
          return g | 0;
        } else {
          break;
        }
      }
    } while (0);
    f = c[4938834] | 0;
    if ((f | 0) <= 0) {
      g = 0;
      i = d;
      return g | 0;
    }
    if ((e | 0) == 4) {
      h = 0;
      a: while (1) {
        b: do {
          if ((c[(19928088 + ((h * 280) | 0)) >> 2] | 0) == 4) {
            j = (19928100 + ((h * 280) | 0)) | 0;
            k = (19928228 + ((h * 280) | 0)) | 0;
            l = 0;
            while (1) {
              m = (l + 1) | 0;
              if (
                !(
                  (((a[(b + 4 + l) | 0] ^ a[(j + l) | 0]) & a[(k + l) | 0]) <<
                    24) >>
                    24 ==
                  0
                )
              ) {
                break b;
              }
              if ((m | 0) < 4) {
                l = m;
              } else {
                g = 1;
                n = 20;
                break a;
              }
            }
          }
        } while (0);
        l = (h + 1) | 0;
        if ((l | 0) < (f | 0)) {
          h = l;
        } else {
          g = 0;
          n = 20;
          break;
        }
      }
      if ((n | 0) == 20) {
        i = d;
        return g | 0;
      }
    } else {
      h = 0;
      c: while (1) {
        d: do {
          if ((c[(19928088 + ((h * 280) | 0)) >> 2] | 0) == (e | 0)) {
            l = 0;
            while (1) {
              k = (l + 1) | 0;
              if (
                !(
                  (((a[(b + 8 + l) | 0] ^
                    a[(19928104 + ((h * 280) | 0) + l) | 0]) &
                    a[(19928232 + ((h * 280) | 0) + l) | 0]) <<
                    24) >>
                    24 ==
                  0
                )
              ) {
                break d;
              }
              if ((k | 0) < 16) {
                l = k;
              } else {
                g = 1;
                n = 20;
                break c;
              }
            }
          }
        } while (0);
        l = (h + 1) | 0;
        if ((l | 0) < (f | 0)) {
          h = l;
        } else {
          g = 0;
          n = 20;
          break;
        }
      }
      if ((n | 0) == 20) {
        i = d;
        return g | 0;
      }
    }
    return 0;
  }
  function ew() {
    var d = 0,
      e = 0,
      f = 0,
      g = 0,
      h = 0,
      j = 0,
      k = 0;
    d = i;
    i = (i + 48) | 0;
    e = d | 0;
    if ((c[4938834] | 0) > 0) {
      f = 0;
    } else {
      g = 48;
      h = 0;
      i = d;
      return;
    }
    do {
      j = (19928096 + ((f * 280) | 0)) | 0;
      if (
        (Pi(j | 0, ((b[j >> 1] | 0) == 10 ? 28 : 16) | 0, e | 0, 48, 0, 0, 1) |
          0) !=
        0
      ) {
        a[e] = 0;
      }
      j = c[(19928088 + ((f * 280) | 0)) >> 2] | 0;
      if ((j | 0) == 5) {
        Sr(185448, ((k = i), (i = (i + 8) | 0), (c[k >> 2] = e), k) | 0);
        i = k;
      } else if ((j | 0) == 4) {
        Sr(46304, ((k = i), (i = (i + 8) | 0), (c[k >> 2] = e), k) | 0);
        i = k;
      }
      f = (f + 1) | 0;
    } while ((f | 0) < (c[4938834] | 0));
    g = 48;
    h = 0;
    i = d;
    return;
  }
  function fw(d, e, f) {
    d = d | 0;
    e = e | 0;
    f = f | 0;
    var g = 0,
      h = 0,
      j = 0,
      k = 0,
      l = 0,
      m = 0,
      n = 0,
      o = 0,
      p = 0,
      q = 0,
      r = 0;
    g = i;
    i = (i + 32) | 0;
    h = g | 0;
    j = (g + 16) | 0;
    k = (g + 24) | 0;
    c[j >> 2] = 1;
    c[k >> 2] = 1;
    c[f >> 2] = 0;
    l = (d | 0) != 0;
    if (l) {
      Sr(
        181520,
        ((m = i),
        (i = (i + 16) | 0),
        (c[m >> 2] = d),
        (c[(m + 8) >> 2] = e),
        m) | 0
      );
      i = m;
    } else {
      Sr(176808, ((m = i), (i = (i + 8) | 0), (c[m >> 2] = e), m) | 0);
      i = m;
    }
    n = Ti(2, 2, 17) | 0;
    if ((n | 0) == -1) {
      o = Fc() | 0;
      c[f >> 2] = c[o >> 2];
      p = Gc(c[o >> 2] | 0) | 0;
      Sr(173296, ((m = i), (i = (i + 8) | 0), (c[m >> 2] = p), m) | 0);
      i = m;
      q = -1;
      i = g;
      return q | 0;
    }
    p =
      id(n | 0, 21537, ((m = i), (i = (i + 8) | 0), (c[m >> 2] = j), m) | 0) |
      0;
    i = m;
    if ((p | 0) == -1) {
      p = Fc() | 0;
      j = Gc(c[p >> 2] | 0) | 0;
      Sr(170176, ((m = i), (i = (i + 8) | 0), (c[m >> 2] = j), m) | 0);
      i = m;
      c[f >> 2] = c[p >> 2];
      qg(n | 0) | 0;
      q = -1;
      i = g;
      return q | 0;
    }
    if ((Cg(n | 0, 1, 6, k | 0, 4) | 0) == -1) {
      k = Gc(c[(Fc() | 0) >> 2] | 0) | 0;
      Sr(167120, ((m = i), (i = (i + 8) | 0), (c[m >> 2] = k), m) | 0);
      i = m;
    }
    do {
      if (l) {
        if ((a[d] | 0) == 0) {
          r = 12;
          break;
        }
        if ((Wv(d, h, 16, 2) | 0) != 0) {
          break;
        }
        qg(n | 0) | 0;
        q = -1;
        i = g;
        return q | 0;
      } else {
        r = 12;
      }
    } while (0);
    if ((r | 0) == 12) {
      b[h >> 1] = 2;
      c[(h + 4) >> 2] = 0;
    }
    if ((e | 0) == -1) {
      b[(h + 2) >> 1] = 0;
    } else {
      b[(h + 2) >> 1] = Hj((e & 65535) | 0) | 0;
    }
    if (!((Ve(n | 0, h | 0, 16) | 0) == -1)) {
      q = n;
      i = g;
      return q | 0;
    }
    h = Fc() | 0;
    e = Gc(c[h >> 2] | 0) | 0;
    Sr(163504, ((m = i), (i = (i + 8) | 0), (c[m >> 2] = e), m) | 0);
    i = m;
    c[f >> 2] = c[h >> 2];
    qg(n | 0) | 0;
    q = -1;
    i = g;
    return q | 0;
  }
  function gw(d, e, f, g) {
    d = d | 0;
    e = e | 0;
    f = f | 0;
    g = g | 0;
    var h = 0,
      j = 0,
      k = 0,
      l = 0,
      m = 0,
      n = 0,
      o = 0,
      p = 0,
      q = 0,
      s = 0,
      t = 0;
    h = i;
    i = (i + 48) | 0;
    j = h | 0;
    k = (h + 32) | 0;
    l = (h + 40) | 0;
    c[k >> 2] = 1;
    c[g >> 2] = 0;
    m = (d | 0) != 0;
    do {
      if (m) {
        if ((oC(d, 58) | 0) == 0) {
          Sr(
            158152,
            ((n = i),
            (i = (i + 16) | 0),
            (c[n >> 2] = d),
            (c[(n + 8) >> 2] = e),
            n) | 0
          );
          i = n;
          break;
        } else {
          Sr(
            160736,
            ((n = i),
            (i = (i + 16) | 0),
            (c[n >> 2] = d),
            (c[(n + 8) >> 2] = e),
            n) | 0
          );
          i = n;
          break;
        }
      } else {
        Sr(155624, ((n = i), (i = (i + 8) | 0), (c[n >> 2] = e), n) | 0);
        i = n;
      }
    } while (0);
    o = Ti(10, 2, 17) | 0;
    if ((o | 0) == -1) {
      p = Fc() | 0;
      c[g >> 2] = c[p >> 2];
      q = Gc(c[p >> 2] | 0) | 0;
      Sr(153608, ((n = i), (i = (i + 8) | 0), (c[n >> 2] = q), n) | 0);
      i = n;
      s = -1;
      i = h;
      return s | 0;
    }
    q =
      id(o | 0, 21537, ((n = i), (i = (i + 8) | 0), (c[n >> 2] = k), n) | 0) |
      0;
    i = n;
    if ((q | 0) == -1) {
      q = Fc() | 0;
      k = Gc(c[q >> 2] | 0) | 0;
      Sr(151728, ((n = i), (i = (i + 8) | 0), (c[n >> 2] = k), n) | 0);
      i = n;
      c[g >> 2] = c[q >> 2];
      qg(o | 0) | 0;
      s = -1;
      i = h;
      return s | 0;
    }
    c[l >> 2] = 1;
    if ((Cg(o | 0, 41, 26, l | 0, 4) | 0) == -1) {
      l = Gc(c[(Fc() | 0) >> 2] | 0) | 0;
      Tr(149368, ((n = i), (i = (i + 8) | 0), (c[n >> 2] = l), n) | 0);
      i = n;
    }
    do {
      if (m) {
        if ((a[d] | 0) == 0) {
          t = 14;
          break;
        }
        if ((Wv(d, j, 28, 10) | 0) != 0) {
          break;
        }
        qg(o | 0) | 0;
        s = -1;
        i = h;
        return s | 0;
      } else {
        t = 14;
      }
    } while (0);
    if ((t | 0) == 14) {
      b[j >> 1] = 10;
      t = (j + 8) | 0;
      c[t >> 2] = c[r >> 2];
      c[(t + 4) >> 2] = c[(r + 4) >> 2];
      c[(t + 8) >> 2] = c[(r + 8) >> 2];
      c[(t + 12) >> 2] = c[(r + 12) >> 2];
    }
    if ((e | 0) == -1) {
      b[(j + 2) >> 1] = 0;
    } else {
      b[(j + 2) >> 1] = Hj((e & 65535) | 0) | 0;
    }
    e = j;
    if ((Ve(o | 0, j | 0, 28) | 0) == -1) {
      j = Fc() | 0;
      t = Gc(c[j >> 2] | 0) | 0;
      Sr(146800, ((n = i), (i = (i + 8) | 0), (c[n >> 2] = t), n) | 0);
      i = n;
      c[g >> 2] = c[j >> 2];
      qg(o | 0) | 0;
      s = -1;
      i = h;
      return s | 0;
    }
    if ((f | 0) == 0) {
      s = o;
      i = h;
      return s | 0;
    }
    j = f;
    c[j >> 2] = c[e >> 2];
    c[(j + 4) >> 2] = c[(e + 4) >> 2];
    c[(j + 8) >> 2] = c[(e + 8) >> 2];
    c[(j + 12) >> 2] = c[(e + 12) >> 2];
    c[(j + 16) >> 2] = c[(e + 16) >> 2];
    c[(j + 20) >> 2] = c[(e + 20) >> 2];
    c[(j + 24) >> 2] = c[(e + 24) >> 2];
    s = o;
    i = h;
    return s | 0;
  }
  function hw() {
    var b = 0,
      d = 0,
      e = 0,
      f = 0,
      g = 0,
      h = 0;
    b = i;
    i = (i + 32) | 0;
    d = b | 0;
    e = c[4939860] | 0;
    f = c[(e + 4) >> 2] | 0;
    do {
      if ((a[f] | 0) == 0) {
        g = e;
      } else {
        if ((Wv(f, d, 28, 10) | 0) == 0) {
          g = c[4939860] | 0;
          break;
        }
        h = (d + 8) | 0;
        c[5425934] = c[h >> 2];
        c[5425935] = c[(h + 4) >> 2];
        c[5425936] = c[(h + 8) >> 2];
        c[5425937] = c[(h + 12) >> 2];
        h = c[((c[4939858] | 0) + 4) >> 2] | 0;
        if ((a[h] | 0) == 0) {
          c[5425938] = 0;
          i = b;
          return;
        } else {
          c[5425938] = sf(h | 0) | 0;
          i = b;
          return;
        }
      }
    } while (0);
    Sr(144360, ((d = i), (i = (i + 8) | 0), (c[d >> 2] = c[g >> 2]), d) | 0);
    i = d;
    d = c[4939866] | 0;
    nt(c[d >> 2] | 0, +(c[(d + 32) >> 2] | 8 | 0));
    i = b;
    return;
  }
  function iw() {
    var d = 0,
      e = 0,
      f = 0,
      g = 0,
      h = 0,
      j = 0,
      k = 0,
      l = 0,
      m = 0;
    d = i;
    i = (i + 8) | 0;
    e = d | 0;
    f = c[4910] | 0;
    if (((f | 0) == -1) | ((c[2762] | 0) != -1)) {
      i = d;
      return;
    }
    if (((c[((c[4939866] | 0) + 32) >> 2] & 8) | 0) != 0) {
      i = d;
      return;
    }
    do {
      if ((a[28369368] | 0) == -1) {
        g = 5;
      } else {
        if ((c[7092343] | c[7092342] | c[7092344] | c[7092345] | 0) == 0) {
          g = 5;
          break;
        }
        h = c[((c[4939860] | 0) + 4) >> 2] | 0;
        j = gw(h, (Hj(b[14184681] | 0) | 0) & 65535, 0, e) | 0;
        c[2762] = j;
        if (!((j | 0) == -1)) {
          k = j;
          break;
        }
        j = c[4910] | 0;
        c[2762] = j;
        k = j;
      }
    } while (0);
    if ((g | 0) == 5) {
      c[2762] = f;
      k = f;
    }
    do {
      if ((c[5425938] | 0) == 0) {
        l = k;
      } else {
        if ((Cg(k | 0, 41, 17, 21703752, 4) | 0) >= 0) {
          l = c[2762] | 0;
          break;
        }
        f = Gc(c[(Fc() | 0) >> 2] | 0) | 0;
        Sr(141776, ((m = i), (i = (i + 8) | 0), (c[m >> 2] = f), m) | 0);
        i = m;
        f = c[2762] | 0;
        if ((f | 0) == (c[4910] | 0)) {
          l = f;
          break;
        }
        qg(f | 0) | 0;
        c[2762] = -1;
        i = d;
        return;
      }
    } while (0);
    if ((Cg(l | 0, 41, 20, 21703736, 20) | 0) == 0) {
      i = d;
      return;
    }
    l = Gc(c[(Fc() | 0) >> 2] | 0) | 0;
    Sr(139488, ((m = i), (i = (i + 8) | 0), (c[m >> 2] = l), m) | 0);
    i = m;
    m = c[2762] | 0;
    if ((m | 0) == (c[4910] | 0)) {
      i = d;
      return;
    }
    qg(m | 0) | 0;
    c[2762] = -1;
    i = d;
    return;
  }
  function jw() {
    var a = 0;
    a = c[2762] | 0;
    if ((a | 0) == -1) {
      return;
    }
    if ((a | 0) == (c[4910] | 0)) {
      Cg(a | 0, 41, 21, 21703736, 20) | 0;
    } else {
      qg(a | 0) | 0;
    }
    c[2762] = -1;
    return;
  }
  function kw(d) {
    d = d | 0;
    var e = 0,
      f = 0,
      g = 0,
      h = 0,
      j = 0,
      k = 0,
      l = 0,
      m = 0,
      n = 0,
      o = 0,
      p = 0,
      q = 0,
      r = 0,
      s = 0;
    e = i;
    i = (i + 80) | 0;
    f = e | 0;
    g = (e + 16) | 0;
    h = g | 0;
    a[1168] = 0;
    Sr(
      137584,
      ((j = i), (i = (i + 1) | 0), (i = (i + 7) & -8), (c[j >> 2] = 0), j) | 0
    );
    i = j;
    k = Ti(2, 1, 6) | 0;
    c[1140] = k;
    if ((k | 0) == -1) {
      k = Gc(c[(Fc() | 0) >> 2] | 0) | 0;
      Sr(136080, ((j = i), (i = (i + 8) | 0), (c[j >> 2] = k), j) | 0);
      i = j;
      l = 64;
      m = 0;
      i = e;
      return;
    }
    k = hd(c[((c[4939846] | 0) + 4) >> 2] | 0) | 0;
    if ((k | 0) == 0) {
      n = Gc(c[(Fc() | 0) >> 2] | 0) | 0;
      Sr(134600, ((j = i), (i = (i + 8) | 0), (c[j >> 2] = n), j) | 0);
      i = j;
      l = 64;
      m = 0;
      i = e;
      return;
    }
    if ((c[(k + 8) >> 2] | 0) != 2) {
      Sr(
        133032,
        ((j = i), (i = (i + 1) | 0), (i = (i + 7) & -8), (c[j >> 2] = 0), j) | 0
      );
      i = j;
      l = 64;
      m = 0;
      i = e;
      return;
    }
    b[f >> 1] = 2;
    c[(f + 4) >> 2] = c[c[c[(k + 16) >> 2] >> 2] >> 2];
    b[(f + 2) >> 1] = Hj((c[((c[4939848] | 0) + 32) >> 2] & 65535) | 0) | 0;
    if (($d(c[1140] | 0, f | 0, 16) | 0) == -1) {
      f = Gc(c[(Fc() | 0) >> 2] | 0) | 0;
      Sr(132024, ((j = i), (i = (i + 8) | 0), (c[j >> 2] = f), j) | 0);
      i = j;
      l = 64;
      m = 0;
      i = e;
      return;
    }
    if ((a[c[((c[4939844] | 0) + 4) >> 2] | 0] | 0) == 0) {
      o = (a[c[((c[4939850] | 0) + 4) >> 2] | 0] | 0) != 0;
    } else {
      o = 1;
    }
    a[h] = 5;
    f = (g + 1) | 0;
    a[f] = o ? 2 : 1;
    k = (g + 2) | 0;
    a[k] = o ? 2 : 0;
    if ((rb(c[1140] | 0, h | 0, (o ? 4 : 3) | 0, 0) | 0) == -1) {
      o = Gc(c[(Fc() | 0) >> 2] | 0) | 0;
      Sr(130832, ((j = i), (i = (i + 8) | 0), (c[j >> 2] = o), j) | 0);
      i = j;
      l = 64;
      m = 0;
      i = e;
      return;
    }
    o = ne(c[1140] | 0, h | 0, 64, 0) | 0;
    if ((o | 0) == 2) {
      p = 15;
    } else if ((o | 0) == (-1 | 0)) {
      o = Gc(c[(Fc() | 0) >> 2] | 0) | 0;
      Sr(129472, ((j = i), (i = (i + 8) | 0), (c[j >> 2] = o), j) | 0);
      i = j;
      l = 64;
      m = 0;
      i = e;
      return;
    }
    do {
      if ((p | 0) == 15) {
        if ((a[h] | 0) != 5) {
          break;
        }
        o = a[f] | 0;
        n = o & 255;
        if (!(((n | 0) == 0) | ((n | 0) == 2))) {
          Sr(
            127104,
            ((j = i),
            (i = (i + 1) | 0),
            (i = (i + 7) & -8),
            (c[j >> 2] = 0),
            j) | 0
          );
          i = j;
          l = 64;
          m = 0;
          i = e;
          return;
        }
        a: do {
          if ((o << 24) >> 24 == 2) {
            n = ((c[4939844] | 0) + 4) | 0;
            q = o$(c[n >> 2] | 0) | 0;
            r = ((c[4939850] | 0) + 4) | 0;
            s = o$(c[r >> 2] | 0) | 0;
            a[h] = 1;
            a[f] = q;
            if ((q | 0) != 0) {
              m$(k | 0, c[n >> 2] | 0, q) | 0;
            }
            a[(g + (q + 2)) | 0] = s;
            n = (q + 3) | 0;
            if ((s | 0) != 0) {
              m$((g + n) | 0, c[r >> 2] | 0, s) | 0;
            }
            if ((rb(c[1140] | 0, h | 0, (n + s) | 0, 0) | 0) == -1) {
              s = Gc(c[(Fc() | 0) >> 2] | 0) | 0;
              Sr(130832, ((j = i), (i = (i + 8) | 0), (c[j >> 2] = s), j) | 0);
              i = j;
              l = 64;
              m = 0;
              i = e;
              return;
            }
            s = ne(c[1140] | 0, h | 0, 64, 0) | 0;
            if ((s | 0) == (-1 | 0)) {
              n = Gc(c[(Fc() | 0) >> 2] | 0) | 0;
              Sr(129472, ((j = i), (i = (i + 8) | 0), (c[j >> 2] = n), j) | 0);
              i = j;
              l = 64;
              m = 0;
              i = e;
              return;
            } else if ((s | 0) == 2) {
              p = 28;
            }
            do {
              if ((p | 0) == 28) {
                if ((a[h] | 0) != 1) {
                  break;
                }
                if ((a[f] | 0) == 0) {
                  break a;
                }
                Sr(
                  125720,
                  ((j = i),
                  (i = (i + 1) | 0),
                  (i = (i + 7) & -8),
                  (c[j >> 2] = 0),
                  j) | 0
                );
                i = j;
                l = 64;
                m = 0;
                i = e;
                return;
              }
            } while (0);
            Sr(
              128320,
              ((j = i),
              (i = (i + 1) | 0),
              (i = (i + 7) & -8),
              (c[j >> 2] = 0),
              j) | 0
            );
            i = j;
            l = 64;
            m = 0;
            i = e;
            return;
          }
        } while (0);
        a[h] = 5;
        a[f] = 3;
        a[k] = 0;
        o = (g + 3) | 0;
        a[o] = 1;
        s = (g + 4) | 0;
        c[s >> 2] = 0;
        n = (g + 8) | 0;
        b[n >> 1] = Hj((d & 65535) | 0) | 0;
        if ((rb(c[1140] | 0, h | 0, 10, 0) | 0) == -1) {
          r = Gc(c[(Fc() | 0) >> 2] | 0) | 0;
          Sr(130832, ((j = i), (i = (i + 8) | 0), (c[j >> 2] = r), j) | 0);
          i = j;
          l = 64;
          m = 0;
          i = e;
          return;
        }
        r = ne(c[1140] | 0, h | 0, 64, 0) | 0;
        if ((r | 0) == -1) {
          q = Gc(c[(Fc() | 0) >> 2] | 0) | 0;
          Sr(129472, ((j = i), (i = (i + 8) | 0), (c[j >> 2] = q), j) | 0);
          i = j;
          l = 64;
          m = 0;
          i = e;
          return;
        }
        if (!(((r | 0) > 1) & ((a[h] | 0) == 5))) {
          Sr(
            128320,
            ((j = i),
            (i = (i + 1) | 0),
            (i = (i + 7) & -8),
            (c[j >> 2] = 0),
            j) | 0
          );
          i = j;
          l = 64;
          m = 0;
          i = e;
          return;
        }
        r = a[f] | 0;
        if (!((r << 24) >> 24 == 0)) {
          Sr(
            124800,
            ((j = i), (i = (i + 8) | 0), (c[j >> 2] = r & 255), j) | 0
          );
          i = j;
          l = 64;
          m = 0;
          i = e;
          return;
        }
        r = a[o] | 0;
        if ((r << 24) >> 24 == 1) {
          b[1078240] = 2;
          c[539121] = c[s >> 2];
          b[1078241] = b[n >> 1] | 0;
          n = 2156488;
          s = n | 0;
          z = 0;
          b[s >> 1] = z;
          b[(s + 2) >> 1] = z >> 16;
          s = (n + 4) | 0;
          z = 0;
          b[s >> 1] = z;
          b[(s + 2) >> 1] = z >> 16;
          a[1168] = 1;
          l = 64;
          m = 0;
          i = e;
          return;
        } else {
          Sr(
            123944,
            ((j = i), (i = (i + 8) | 0), (c[j >> 2] = r & 255), j) | 0
          );
          i = j;
          l = 64;
          m = 0;
          i = e;
          return;
        }
      }
    } while (0);
    Sr(
      128320,
      ((j = i), (i = (i + 1) | 0), (i = (i + 7) & -8), (c[j >> 2] = 0), j) | 0
    );
    i = j;
    l = 64;
    m = 0;
    i = e;
    return;
  }
  function lw() {
    var d = 0,
      e = 0,
      f = 0,
      g = 0,
      h = 0,
      j = 0,
      k = 0,
      l = 0,
      m = 0,
      n = 0,
      o = 0,
      p = 0,
      q = 0,
      r = 0,
      s = 0,
      t = 0,
      u = 0,
      v = 0,
      w = 0,
      x = 0,
      y = 0,
      z = 0,
      A = 0,
      B = 0,
      C = 0;
    d = i;
    i = (i + 400) | 0;
    e = d | 0;
    f = (d + 304) | 0;
    g = (d + 336) | 0;
    h = (d + 344) | 0;
    j = (d + 360) | 0;
    k = (d + 392) | 0;
    l = c[((c[4939856] | 0) + 32) >> 2] | 0;
    m = c[((c[4939854] | 0) + 32) >> 2] | 0;
    n = h;
    o = j;
    p = (d + 48) | 0;
    c[g >> 2] = 0;
    c[4938834] = 0;
    do {
      if (!((Xg(p | 0, 256) | 0) == -1)) {
        Sr(64024, ((q = i), (i = (i + 8) | 0), (c[q >> 2] = p), q) | 0);
        i = q;
        n$(f | 0, 0, 32) | 0;
        c[(f + 8) >> 2] = 2;
        do {
          if ((hb(p | 0, 0, f | 0, g | 0) | 0) == 0) {
            n$(n | 0, 0, 16) | 0;
            n$(o | 0, 0, 28) | 0;
            b[h >> 1] = 2;
            c[(h + 4) >> 2] = -1;
            b[j >> 1] = 10;
            n$((j + 8) | 0, -1 | 0, 16) | 0;
            r = c[g >> 2] | 0;
            if ((r | 0) != 0) {
              s = r;
              do {
                r = c[(s + 4) >> 2] | 0;
                do {
                  if ((r | 0) == 2) {
                    t = c[(s + 20) >> 2] | 0;
                    if ((t | 0) == 0) {
                      break;
                    }
                    u = b[t >> 1] | 0;
                    v = c[4938834] | 0;
                    if ((v | 0) >= 32) {
                      break;
                    }
                    if ((((u << 16) >> 16) | 0) == 2) {
                      c[(19928088 + ((v * 280) | 0)) >> 2] = 4;
                      w = 16;
                    } else if ((((u << 16) >> 16) | 0) == 10) {
                      c[(19928088 + ((v * 280) | 0)) >> 2] = 5;
                      w = 28;
                    } else {
                      break;
                    }
                    TB((19928072 + ((v * 280) | 0)) | 0, 28378576, 16);
                    v = c[4938834] | 0;
                    b[(19928092 + ((v * 280) | 0)) >> 1] = u;
                    m$((19928096 + ((v * 280) | 0)) | 0, t | 0, w) | 0;
                    m$((19928224 + ((v * 280) | 0)) | 0, n | 0, w) | 0;
                    c[4938834] = v + 1;
                  } else if ((r | 0) == 10) {
                    v = c[(s + 20) >> 2] | 0;
                    if ((v | 0) == 0) {
                      break;
                    }
                    t = b[v >> 1] | 0;
                    u = c[4938834] | 0;
                    if ((u | 0) >= 32) {
                      break;
                    }
                    if ((((t << 16) >> 16) | 0) == 10) {
                      c[(19928088 + ((u * 280) | 0)) >> 2] = 5;
                      x = 28;
                    } else if ((((t << 16) >> 16) | 0) == 2) {
                      c[(19928088 + ((u * 280) | 0)) >> 2] = 4;
                      x = 16;
                    } else {
                      break;
                    }
                    TB((19928072 + ((u * 280) | 0)) | 0, 28378576, 16);
                    u = c[4938834] | 0;
                    b[(19928092 + ((u * 280) | 0)) >> 1] = t;
                    m$((19928096 + ((u * 280) | 0)) | 0, v | 0, x) | 0;
                    m$((19928224 + ((u * 280) | 0)) | 0, o | 0, x) | 0;
                    c[4938834] = u + 1;
                  }
                } while (0);
                s = c[(s + 28) >> 2] | 0;
              } while ((s | 0) != 0);
            }
            s = e | 0;
            if ((c[4938834] | 0) > 0) {
              y = 0;
            } else {
              break;
            }
            do {
              r = (19928096 + ((y * 280) | 0)) | 0;
              if (
                (Pi(
                  r | 0,
                  ((b[r >> 1] | 0) == 10 ? 28 : 16) | 0,
                  s | 0,
                  48,
                  0,
                  0,
                  1
                ) |
                  0) !=
                0
              ) {
                a[s] = 0;
              }
              r = c[(19928088 + ((y * 280) | 0)) >> 2] | 0;
              if ((r | 0) == 4) {
                Sr(46304, ((q = i), (i = (i + 8) | 0), (c[q >> 2] = s), q) | 0);
                i = q;
              } else if ((r | 0) == 5) {
                Sr(
                  185448,
                  ((q = i), (i = (i + 8) | 0), (c[q >> 2] = s), q) | 0
                );
                i = q;
              }
              y = (y + 1) | 0;
            } while ((y | 0) < (c[4938834] | 0));
          }
        } while (0);
        s = c[g >> 2] | 0;
        if ((s | 0) == 0) {
          break;
        }
        Ai(s | 0);
      }
    } while (0);
    do {
      if (((c[((c[4939866] | 0) + 32) >> 2] & 2) | 0) != 0) {
        g = 0;
        do {
          z = (g + m) | 0;
          y = gw(c[((c[4939862] | 0) + 4) >> 2] | 0, z, 28369360, k) | 0;
          c[4910] = y;
          if (!((y | 0) == -1)) {
            A = 30;
            break;
          }
          g = (g + 1) | 0;
        } while (((c[k >> 2] | 0) != 97) & ((g | 0) < 10));
        if ((A | 0) == 30) {
          nt(123152, +(z | 0));
          if (!((c[4910] | 0) == -1)) {
            break;
          }
        }
        Sr(
          122272,
          ((q = i), (i = (i + 1) | 0), (i = (i + 7) & -8), (c[q >> 2] = 0), q) |
            0
        );
        i = q;
      }
    } while (0);
    if (((c[((c[4939866] | 0) + 32) >> 2] & 1) | 0) == 0) {
      i = d;
      return;
    } else {
      B = 0;
    }
    do {
      C = (B + l) | 0;
      z = fw(c[((c[4939864] | 0) + 4) >> 2] | 0, C, k) | 0;
      c[4908] = z;
      if (!((z | 0) == -1)) {
        A = 34;
        break;
      }
      B = (B + 1) | 0;
    } while (((c[k >> 2] | 0) != 97) & ((B | 0) < 10));
    do {
      if ((A | 0) == 34) {
        nt(121496, +(C | 0));
        if ((c[((c[4939852] | 0) + 32) >> 2] | 0) == 0) {
          break;
        }
        kw(C);
      }
    } while (0);
    if (!((c[4908] | 0) == -1)) {
      i = d;
      return;
    }
    Sr(
      120304,
      ((q = i), (i = (i + 1) | 0), (i = (i + 7) & -8), (c[q >> 2] = 0), q) | 0
    );
    i = q;
    i = d;
    return;
  }
  function mw(a) {
    a = a | 0;
    var b = 0,
      d = 0,
      e = 0,
      f = 0,
      g = 0,
      h = 0,
      j = 0;
    b = i;
    i = (i + 8) | 0;
    d = b | 0;
    e = gt(116688, 115360, 33) | 0;
    c[4939866] = e;
    f = (e + 20) | 0;
    e = c[f >> 2] | 0;
    c[f >> 2] = 0;
    f = gt(114112, 113112, 32) | 0;
    c[4939864] = f;
    g = (f + 20) | 0;
    f = ((c[g >> 2] | 0) + e) | 0;
    c[g >> 2] = 0;
    g = gt(112168, 111416, 32) | 0;
    c[4939862] = g;
    e = (g + 20) | 0;
    g = (f + (c[e >> 2] | 0)) | 0;
    c[e >> 2] = 0;
    Ws(d, 4);
    e = c[d >> 2] & 65535;
    c[d >> 2] = e;
    f = pC(110696, ((h = i), (i = (i + 8) | 0), (c[h >> 2] = e), h) | 0) | 0;
    i = h;
    e = gt(121496, f, 32) | 0;
    c[4939856] = e;
    f = (e + 20) | 0;
    e = (g + (c[f >> 2] | 0)) | 0;
    c[f >> 2] = 0;
    f =
      pC(110696, ((h = i), (i = (i + 8) | 0), (c[h >> 2] = c[d >> 2]), h) | 0) |
      0;
    i = h;
    h = gt(123152, f, 32) | 0;
    c[4939854] = h;
    f = (h + 20) | 0;
    h = (e + (c[f >> 2] | 0)) | 0;
    c[f >> 2] = 0;
    f = gt(109440, 108216, 33) | 0;
    c[4939860] = f;
    e = (f + 20) | 0;
    f = (h + (c[e >> 2] | 0)) | 0;
    c[e >> 2] = 0;
    e = gt(107352, 28378576, 33) | 0;
    c[4939858] = e;
    h = (e + 20) | 0;
    e = (f + (c[h >> 2] | 0)) | 0;
    c[h >> 2] = 0;
    h = gt(105456, 104664, 33) | 0;
    c[4939852] = h;
    f = (h + 20) | 0;
    h = (e + (c[f >> 2] | 0)) | 0;
    c[f >> 2] = 0;
    f = gt(103680, 28378576, 33) | 0;
    c[4939846] = f;
    e = (f + 20) | 0;
    f = (h + (c[e >> 2] | 0)) | 0;
    c[e >> 2] = 0;
    e = gt(102872, 102016, 33) | 0;
    c[4939848] = e;
    h = (e + 20) | 0;
    e = (f + (c[h >> 2] | 0)) | 0;
    c[h >> 2] = 0;
    h = gt(101184, 28378576, 33) | 0;
    c[4939844] = h;
    f = (h + 20) | 0;
    h = (e + (c[f >> 2] | 0)) | 0;
    c[f >> 2] = 0;
    f = gt(100016, 28378576, 33) | 0;
    c[4939850] = f;
    e = (f + 20) | 0;
    f = c[e >> 2] | 0;
    c[e >> 2] = 0;
    c[4939868] = gt(98624, 28378576, 256) | 0;
    e = (c[((c[4939866] | 0) + 32) >> 2] | 0) == 0 ? 0 : a;
    a = (e | 0) == (c[4939842] | 0);
    if (a & ((h | 0) == (-f | 0))) {
      i = b;
      return;
    }
    f = (e | 0) != 0;
    h = f & 1;
    if (a) {
      j = h;
    } else {
      c[4939842] = e;
      j = h ^ 1;
    }
    do {
      if ((j | 0) != 0) {
        h = c[4908] | 0;
        if (!((h | 0) == -1)) {
          qg(h | 0) | 0;
          c[4908] = -1;
        }
        h = c[2762] | 0;
        if (!((h | 0) == -1)) {
          if ((h | 0) != (c[4910] | 0)) {
            qg(h | 0) | 0;
          }
          c[2762] = -1;
        }
        h = c[4910] | 0;
        if (!((h | 0) == -1)) {
          qg(h | 0) | 0;
          c[4910] = -1;
        }
        h = c[1140] | 0;
        if ((h | 0) == -1) {
          break;
        }
        qg(h | 0) | 0;
        c[1140] = -1;
      }
    } while (0);
    if (!f) {
      i = b;
      return;
    }
    if ((c[((c[4939866] | 0) + 32) >> 2] | 0) == 0) {
      i = b;
      return;
    }
    lw();
    hw();
    i = b;
    return;
  }
  function nw() {
    mw(1);
    Gr(118904, 390);
    return;
  }
  function ow() {
    mw(1);
    return;
  }
  function pw(a) {
    a = a | 0;
    var b = 0,
      d = 0,
      e = 0,
      f = 0,
      h = 0,
      j = 0,
      k = 0.0,
      l = 0,
      m = 0;
    b = i;
    i = (i + 16456) | 0;
    d = (b + 16392) | 0;
    e = (b + 16424) | 0;
    f = b | 0;
    hv(e, f, 16385);
    if ((bw(d, e, a) | 0) == 0) {
      h = 16385;
      j = 0;
      i = b;
      return;
    }
    do {
      k = +g[((c[4939868] | 0) + 28) >> 2];
      if ((k <= 0.0) | (k > 100.0)) {
        l = 5;
      } else {
        m = v$() | 0;
        if (
          (m | 0) >=
          (~~(+g[((c[4939868] | 0) + 28) >> 2] * 21474836.47) | 0)
        ) {
          l = 5;
        }
      }
      do {
        if ((l | 0) == 5) {
          l = 0;
          if ((c[((c[5451068] | 0) + 32) >> 2] | 0) == 0) {
            Wo(d, e);
            break;
          } else {
            zs(d, e);
            break;
          }
        }
      } while (0);
      hv(e, f, 16385);
    } while ((bw(d, e, a) | 0) != 0);
    h = 16385;
    j = 0;
    i = b;
    return;
  }
  function qw(a) {
    a = a | 0;
    var b = 0,
      d = 0,
      e = 0,
      f = 0,
      g = 0,
      h = 0,
      j = 0,
      k = 0,
      l = 0;
    b = i;
    i = (i + 136) | 0;
    d = b | 0;
    e = (b + 8) | 0;
    n$(e | 0, 0, 128) | 0;
    f = (a | 0) < 0 ? 0 : a;
    a = c[4908] | 0;
    if ((a | 0) == -1) {
      g = -1;
    } else {
      h = (e + ((a >>> 5) << 2)) | 0;
      c[h >> 2] = c[h >> 2] | (1 << (a & 31));
      g = a;
    }
    a = c[4910] | 0;
    if ((a | 0) == -1) {
      j = g;
    } else {
      h = (e + ((a >>> 5) << 2)) | 0;
      c[h >> 2] = c[h >> 2] | (1 << (a & 31));
      j = ((g | 0) == -1) | ((a | 0) > (g | 0)) ? a : g;
    }
    c[d >> 2] = ((f | 0) / 1e3) | 0;
    c[(d + 4) >> 2] = (((f | 0) % 1e3 | 0) * 1e3) | 0;
    f = oc((j + 1) | 0, e | 0, 0, 0, d | 0) | 0;
    if ((f | 0) == -1) {
      d = Gc(c[(Fc() | 0) >> 2] | 0) | 0;
      Sr(117704, ((j = i), (i = (i + 8) | 0), (c[j >> 2] = d), j) | 0);
      i = j;
      k = 128;
      l = 0;
      i = b;
      return;
    }
    if ((f | 0) <= 0) {
      k = 128;
      l = 0;
      i = b;
      return;
    }
    pw(e);
    k = 128;
    l = 0;
    i = b;
    return;
  }
  function rw(b, e, f) {
    b = b | 0;
    e = e | 0;
    f = f | 0;
    var g = 0,
      h = 0;
    g = c[f >> 2] | 0;
    c[7092716] = g;
    if (((g & 7) | 0) == 0) {
      a[(e + (g >> 3)) | 0] = 0;
      h = c[7092716] | 0;
    } else {
      h = g;
    }
    g = (e + (h >> 3)) | 0;
    a[g] = d[g] | 0 | (b << (h & 7));
    h = ((c[7092716] | 0) + 1) | 0;
    c[7092716] = h;
    c[f >> 2] = h;
    return;
  }
  function sw(a, b) {
    a = a | 0;
    b = b | 0;
    var e = 0,
      f = 0;
    e = c[b >> 2] | 0;
    c[7092716] = e;
    f = ((d[(a + (e >> 3)) | 0] | 0) >>> ((e & 7) >>> 0)) & 1;
    a = (e + 1) | 0;
    c[7092716] = a;
    c[b >> 2] = a;
    return f | 0;
  }
  function tw(a, b) {
    a = a | 0;
    b = b | 0;
    var d = 0,
      e = 0,
      f = 0,
      g = 0,
      h = 0,
      i = 0,
      j = 0,
      k = 0,
      l = 0,
      m = 0,
      n = 0,
      o = 0,
      p = 0,
      q = 0,
      r = 0;
    d = b & 255;
    b = (a + 20 + (d << 2)) | 0;
    e = c[b >> 2] | 0;
    if ((e | 0) != 0) {
      uw(a, e);
      return;
    }
    e = a | 0;
    f = c[e >> 2] | 0;
    g = (f + 1) | 0;
    h = (a + 1052 + (f << 5)) | 0;
    c[e >> 2] = f + 2;
    e = (a + 1052 + (g << 5)) | 0;
    c[(a + 1052 + (g << 5) + 28) >> 2] = 257;
    c[(a + 1052 + (g << 5) + 24) >> 2] = 1;
    i = (a + 12) | 0;
    j = ((c[i >> 2] | 0) + 12) | 0;
    c[(a + 1052 + (g << 5) + 12) >> 2] = c[j >> 2];
    k = c[j >> 2] | 0;
    do {
      if ((k | 0) == 0) {
        j = (a + 1048) | 0;
        l = c[j >> 2] | 0;
        if ((l | 0) == 0) {
          m = (a + 4) | 0;
          n = c[m >> 2] | 0;
          c[m >> 2] = n + 1;
          o = (a + 25628 + (n << 2)) | 0;
        } else {
          c[j >> 2] = c[l >> 2];
          o = l;
        }
        c[(a + 1052 + (g << 5) + 20) >> 2] = o;
        c[o >> 2] = e;
      } else {
        c[(k + 16) >> 2] = e;
        l = c[((c[i >> 2] | 0) + 12) >> 2] | 0;
        if ((c[(l + 24) >> 2] | 0) == 1) {
          c[(a + 1052 + (g << 5) + 20) >> 2] = c[(l + 20) >> 2];
          break;
        }
        l = (a + 1048) | 0;
        j = c[l >> 2] | 0;
        if ((j | 0) == 0) {
          n = (a + 4) | 0;
          m = c[n >> 2] | 0;
          c[n >> 2] = m + 1;
          p = (a + 25628 + (m << 2)) | 0;
        } else {
          c[l >> 2] = c[j >> 2];
          p = j;
        }
        c[(a + 1052 + (g << 5) + 20) >> 2] = p;
        c[p >> 2] = e;
      }
    } while (0);
    c[((c[i >> 2] | 0) + 12) >> 2] = e;
    c[(a + 1052 + (g << 5) + 16) >> 2] = c[i >> 2];
    c[(a + 1052 + (f << 5) + 28) >> 2] = d;
    c[(a + 1052 + (f << 5) + 24) >> 2] = 1;
    d = ((c[i >> 2] | 0) + 12) | 0;
    c[(a + 1052 + (f << 5) + 12) >> 2] = c[d >> 2];
    p = c[d >> 2] | 0;
    do {
      if ((p | 0) == 0) {
        d = (a + 1048) | 0;
        k = c[d >> 2] | 0;
        if ((k | 0) == 0) {
          o = (a + 4) | 0;
          j = c[o >> 2] | 0;
          c[o >> 2] = j + 1;
          q = (a + 25628 + (j << 2)) | 0;
        } else {
          c[d >> 2] = c[k >> 2];
          q = k;
        }
        c[(a + 1052 + (f << 5) + 20) >> 2] = q;
        c[q >> 2] = h;
      } else {
        c[(p + 16) >> 2] = h;
        k = c[((c[i >> 2] | 0) + 12) >> 2] | 0;
        if ((c[(k + 24) >> 2] | 0) == 1) {
          c[(a + 1052 + (f << 5) + 20) >> 2] = c[(k + 20) >> 2];
          break;
        }
        k = (a + 1048) | 0;
        d = c[k >> 2] | 0;
        if ((d | 0) == 0) {
          j = (a + 4) | 0;
          o = c[j >> 2] | 0;
          c[j >> 2] = o + 1;
          r = (a + 25628 + (o << 2)) | 0;
        } else {
          c[k >> 2] = c[d >> 2];
          r = d;
        }
        c[(a + 1052 + (f << 5) + 20) >> 2] = r;
        c[r >> 2] = e;
      }
    } while (0);
    c[((c[i >> 2] | 0) + 12) >> 2] = h;
    c[(a + 1052 + (f << 5) + 16) >> 2] = c[i >> 2];
    c[(a + 1052 + (f << 5) + 4) >> 2] = 0;
    c[h >> 2] = 0;
    r = c[i >> 2] | 0;
    p = c[(r + 8) >> 2] | 0;
    do {
      if ((p | 0) == 0) {
        c[(a + 8) >> 2] = e;
      } else {
        q = p | 0;
        if ((c[q >> 2] | 0) == (r | 0)) {
          c[q >> 2] = e;
          break;
        } else {
          c[(p + 4) >> 2] = e;
          break;
        }
      }
    } while (0);
    c[(a + 1052 + (g << 5) + 4) >> 2] = h;
    p = c[i >> 2] | 0;
    c[e >> 2] = p;
    i = (p + 8) | 0;
    p = (a + 1052 + (g << 5) + 8) | 0;
    c[p >> 2] = c[i >> 2];
    c[(a + 1052 + (f << 5) + 8) >> 2] = e;
    c[i >> 2] = e;
    c[b >> 2] = h;
    uw(a, c[p >> 2] | 0);
    return;
  }
  function uw(a, b) {
    a = a | 0;
    b = b | 0;
    var d = 0,
      e = 0,
      f = 0,
      g = 0,
      h = 0,
      i = 0,
      j = 0,
      k = 0,
      l = 0,
      m = 0,
      n = 0,
      o = 0,
      p = 0,
      q = 0,
      r = 0,
      s = 0,
      t = 0,
      u = 0,
      v = 0,
      w = 0,
      x = 0,
      y = 0,
      z = 0,
      A = 0;
    if ((b | 0) == 0) {
      return;
    }
    d = (b + 12) | 0;
    e = c[d >> 2] | 0;
    do {
      if ((e | 0) != 0) {
        if ((c[(e + 24) >> 2] | 0) != (c[(b + 24) >> 2] | 0)) {
          break;
        }
        f = c[c[(b + 20) >> 2] >> 2] | 0;
        g = (b + 8) | 0;
        h = c[g >> 2] | 0;
        if ((f | 0) == (h | 0)) {
          i = e;
        } else {
          j = (f + 8) | 0;
          k = c[j >> 2] | 0;
          do {
            if ((k | 0) == 0) {
              c[(a + 8) >> 2] = b;
            } else {
              l = k | 0;
              if ((c[l >> 2] | 0) == (f | 0)) {
                c[l >> 2] = b;
                break;
              } else {
                c[(k + 4) >> 2] = b;
                break;
              }
            }
          } while (0);
          do {
            if ((h | 0) == 0) {
              c[(a + 8) >> 2] = f;
            } else {
              l = h | 0;
              if ((c[l >> 2] | 0) == (b | 0)) {
                c[l >> 2] = f;
                break;
              } else {
                c[(h + 4) >> 2] = f;
                break;
              }
            }
          } while (0);
          c[j >> 2] = h;
          c[g >> 2] = k;
          i = c[d >> 2] | 0;
        }
        l = (f + 12) | 0;
        m = c[l >> 2] | 0;
        c[l >> 2] = i;
        c[d >> 2] = m;
        m = (f + 16) | 0;
        n = c[m >> 2] | 0;
        o = (b + 16) | 0;
        c[m >> 2] = c[o >> 2];
        c[o >> 2] = n;
        n = c[l >> 2] | 0;
        if ((n | 0) == (f | 0)) {
          c[l >> 2] = b;
          p = b;
        } else {
          p = n;
        }
        n = c[d >> 2] | 0;
        if ((n | 0) == (b | 0)) {
          c[d >> 2] = f;
          q = c[l >> 2] | 0;
          r = f;
        } else {
          q = p;
          r = n;
        }
        if ((q | 0) == 0) {
          s = r;
        } else {
          c[(q + 16) >> 2] = f;
          s = c[d >> 2] | 0;
        }
        if ((s | 0) != 0) {
          c[(s + 16) >> 2] = b;
        }
        n = c[m >> 2] | 0;
        if ((n | 0) != 0) {
          c[(n + 12) >> 2] = f;
        }
        n = c[o >> 2] | 0;
        if ((n | 0) == 0) {
          break;
        }
        c[(n + 12) >> 2] = b;
      }
    } while (0);
    s = (b + 16) | 0;
    q = c[s >> 2] | 0;
    do {
      if ((q | 0) == 0) {
        t = c[(b + 24) >> 2] | 0;
        u = 32;
      } else {
        r = c[(q + 24) >> 2] | 0;
        p = c[(b + 24) >> 2] | 0;
        if ((r | 0) != (p | 0)) {
          t = p;
          u = 32;
          break;
        }
        c[c[(b + 20) >> 2] >> 2] = q;
        v = r;
      }
    } while (0);
    if ((u | 0) == 32) {
      q = (b + 20) | 0;
      c[c[q >> 2] >> 2] = 0;
      r = c[q >> 2] | 0;
      q = (a + 1048) | 0;
      c[r >> 2] = c[q >> 2];
      c[q >> 2] = r;
      v = t;
    }
    t = (v + 1) | 0;
    c[(b + 24) >> 2] = t;
    v = c[d >> 2] | 0;
    do {
      if ((v | 0) == 0) {
        u = 36;
      } else {
        if ((c[(v + 24) >> 2] | 0) != (t | 0)) {
          u = 36;
          break;
        }
        c[(b + 20) >> 2] = c[(v + 20) >> 2];
      }
    } while (0);
    if ((u | 0) == 36) {
      u = (a + 1048) | 0;
      v = c[u >> 2] | 0;
      if ((v | 0) == 0) {
        t = (a + 4) | 0;
        r = c[t >> 2] | 0;
        c[t >> 2] = r + 1;
        w = (a + 25628 + (r << 2)) | 0;
      } else {
        c[u >> 2] = c[v >> 2];
        w = v;
      }
      c[(b + 20) >> 2] = w;
      c[w >> 2] = b;
    }
    w = (b + 8) | 0;
    v = c[w >> 2] | 0;
    if ((v | 0) == 0) {
      return;
    }
    uw(a, v);
    v = c[s >> 2] | 0;
    if ((v | 0) != (c[w >> 2] | 0)) {
      return;
    }
    a = c[d >> 2] | 0;
    u = (v + 12) | 0;
    c[d >> 2] = c[u >> 2];
    c[u >> 2] = a;
    a = c[s >> 2] | 0;
    r = (v + 16) | 0;
    c[s >> 2] = c[r >> 2];
    c[r >> 2] = a;
    a = c[d >> 2] | 0;
    if ((a | 0) == (b | 0)) {
      c[d >> 2] = v;
      x = v;
    } else {
      x = a;
    }
    a = c[u >> 2] | 0;
    if ((a | 0) == (v | 0)) {
      c[u >> 2] = b;
      y = c[d >> 2] | 0;
      z = b;
    } else {
      y = x;
      z = a;
    }
    if ((y | 0) == 0) {
      A = z;
    } else {
      c[(y + 16) >> 2] = b;
      A = c[u >> 2] | 0;
    }
    if ((A | 0) != 0) {
      c[(A + 16) >> 2] = v;
    }
    A = c[s >> 2] | 0;
    if ((A | 0) != 0) {
      c[(A + 12) >> 2] = b;
    }
    A = c[r >> 2] | 0;
    if ((A | 0) != 0) {
      c[(A + 12) >> 2] = v;
    }
    v = c[(b + 20) >> 2] | 0;
    if ((c[v >> 2] | 0) != (b | 0)) {
      return;
    }
    c[v >> 2] = c[w >> 2];
    return;
  }
  function vw(a, b, e, f) {
    a = a | 0;
    b = b | 0;
    e = e | 0;
    f = f | 0;
    var g = 0,
      h = 0,
      i = 0,
      j = 0,
      k = 0,
      l = 0,
      m = 0;
    g = c[f >> 2] | 0;
    c[7092716] = g;
    a: do {
      if ((a | 0) != 0) {
        h = a;
        i = g;
        while (1) {
          j = c[(h + 28) >> 2] | 0;
          if ((j | 0) != 257) {
            break;
          }
          k = d[(e + (i >> 3)) | 0] | 0;
          l = (i + 1) | 0;
          c[7092716] = l;
          m =
            c[(((k & (1 << (i & 7))) | 0) == 0 ? h | 0 : (h + 4) | 0) >> 2] | 0;
          if ((m | 0) == 0) {
            break a;
          } else {
            h = m;
            i = l;
          }
        }
        c[b >> 2] = j;
        c[f >> 2] = c[7092716];
        return;
      }
    } while (0);
    c[b >> 2] = 0;
    return;
  }
  function ww(b, e, f) {
    b = b | 0;
    e = e | 0;
    f = f | 0;
    var g = 0,
      h = 0,
      i = 0;
    g = c[(b + 20 + (e << 2)) >> 2] | 0;
    if ((g | 0) != 0) {
      xw(g, 0, f);
      return;
    }
    ww(b, 256, f);
    b = 7;
    g = c[7092716] | 0;
    while (1) {
      if (((g & 7) | 0) == 0) {
        a[(f + (g >> 3)) | 0] = 0;
        h = c[7092716] | 0;
      } else {
        h = g;
      }
      i = (f + (h >> 3)) | 0;
      a[i] = d[i] | 0 | (((e >>> (b >>> 0)) & 1) << (h & 7));
      i = ((c[7092716] | 0) + 1) | 0;
      c[7092716] = i;
      if ((b | 0) > 0) {
        b = (b - 1) | 0;
        g = i;
      } else {
        break;
      }
    }
    return;
  }
  function xw(b, e, f) {
    b = b | 0;
    e = e | 0;
    f = f | 0;
    var g = 0,
      h = 0,
      i = 0,
      j = 0;
    g = c[(b + 8) >> 2] | 0;
    if ((g | 0) != 0) {
      xw(g, b, f);
    }
    if ((e | 0) == 0) {
      return;
    }
    g = c[7092716] | 0;
    h = ((g & 7) | 0) == 0;
    if ((c[(b + 4) >> 2] | 0) == (e | 0)) {
      if (h) {
        a[(f + (g >> 3)) | 0] = 0;
        i = c[7092716] | 0;
      } else {
        i = g;
      }
      e = (f + (i >> 3)) | 0;
      a[e] = d[e] | 0 | (1 << (i & 7));
      c[7092716] = (c[7092716] | 0) + 1;
      return;
    } else {
      if (h) {
        a[(f + (g >> 3)) | 0] = 0;
        j = c[7092716] | 0;
      } else {
        j = g;
      }
      c[7092716] = j + 1;
      return;
    }
  }
  function yw(a, b, d, e) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    e = e | 0;
    c[7092716] = c[e >> 2];
    xw(c[(a + 20 + (b << 2)) >> 2] | 0, 0, d);
    c[e >> 2] = c[7092716];
    return;
  }
  function zw(b, e) {
    b = b | 0;
    e = e | 0;
    var f = 0,
      g = 0,
      h = 0,
      j = 0,
      k = 0,
      l = 0,
      m = 0,
      n = 0,
      o = 0,
      p = 0,
      q = 0,
      r = 0,
      s = 0,
      t = 0,
      u = 0,
      v = 0,
      w = 0,
      x = 0,
      y = 0,
      z = 0,
      A = 0,
      B = 0,
      C = 0,
      D = 0,
      E = 0,
      F = 0,
      G = 0;
    f = i;
    i = (i + 94240) | 0;
    g = f | 0;
    h = (f + 65536) | 0;
    j = g | 0;
    k = (b + 20) | 0;
    l = ((c[k >> 2] | 0) - e) | 0;
    m = (b + 12) | 0;
    n = c[m >> 2] | 0;
    if ((l | 0) < 1) {
      o = 28700;
      p = 0;
      q = 65536;
      r = 0;
      i = f;
      return;
    }
    n$(h | 0, 0, 28700) | 0;
    c[h >> 2] = 1;
    s = (h + 1052) | 0;
    c[(h + 1044) >> 2] = s;
    c[(h + 16) >> 2] = s;
    c[(h + 12) >> 2] = s;
    t = (h + 8) | 0;
    c[t >> 2] = s;
    c[(h + 1080) >> 2] = 256;
    c[(h + 1076) >> 2] = 0;
    c[(h + 1068) >> 2] = 0;
    c[(h + 1064) >> 2] = 0;
    c[(h + 1056) >> 2] = 0;
    c[s >> 2] = 0;
    c[(h + 1060) >> 2] = 0;
    s = ((d[(n + e) | 0] | 0) << 8) | (d[(n + (e + 1)) | 0] | 0);
    u = ((c[(b + 16) >> 2] | 0) - e) | 0;
    b = (s | 0) > (u | 0) ? u : s;
    c[7092716] = 16;
    a: do {
      if ((b | 0) > 0) {
        s = 0;
        u = 16;
        while (1) {
          if (((u >> 3) | 0) > (l | 0)) {
            break;
          }
          v = c[t >> 2] | 0;
          b: do {
            if ((v | 0) == 0) {
              w = 0;
            } else {
              x = v;
              y = u;
              while (1) {
                z = c[(x + 28) >> 2] | 0;
                A = z & 255;
                if ((z | 0) == 256) {
                  break;
                } else if ((z | 0) != 257) {
                  w = A;
                  break b;
                }
                A = d[(n + ((y >> 3) + e)) | 0] | 0;
                z = (y + 1) | 0;
                c[7092716] = z;
                B =
                  c[
                    (((A & (1 << (y & 7))) | 0) == 0 ? x | 0 : (x + 4) | 0) >> 2
                  ] | 0;
                if ((B | 0) == 0) {
                  w = 0;
                  break b;
                } else {
                  x = B;
                  y = z;
                }
              }
              x = (d[(n + ((y >> 3) + e)) | 0] | 0) >>> ((y & 7) >>> 0);
              z = (y + 1) | 0;
              c[7092716] = z;
              B = ((d[(n + ((z >> 3) + e)) | 0] | 0) >>> ((z & 7) >>> 0)) & 1;
              z = (y + 2) | 0;
              c[7092716] = z;
              A = ((d[(n + ((z >> 3) + e)) | 0] | 0) >>> ((z & 7) >>> 0)) & 1;
              z = (y + 3) | 0;
              c[7092716] = z;
              C = ((d[(n + ((z >> 3) + e)) | 0] | 0) >>> ((z & 7) >>> 0)) & 1;
              z = (y + 4) | 0;
              c[7092716] = z;
              D = ((d[(n + ((z >> 3) + e)) | 0] | 0) >>> ((z & 7) >>> 0)) & 1;
              z = (y + 5) | 0;
              c[7092716] = z;
              E = ((d[(n + ((z >> 3) + e)) | 0] | 0) >>> ((z & 7) >>> 0)) & 1;
              z = (y + 6) | 0;
              c[7092716] = z;
              F = ((d[(n + ((z >> 3) + e)) | 0] | 0) >>> ((z & 7) >>> 0)) & 1;
              z = (y + 7) | 0;
              c[7092716] = z;
              G = ((d[(n + ((z >> 3) + e)) | 0] | 0) >>> ((z & 7) >>> 0)) & 1;
              c[7092716] = y + 8;
              w =
                (G |
                  ((F |
                    ((E |
                      ((D |
                        ((C | ((A | ((B | ((x << 1) & 2)) << 1)) << 1)) <<
                          1)) <<
                        1)) <<
                      1)) <<
                    1)) &
                255;
            }
          } while (0);
          a[(g + s) | 0] = w;
          tw(h, w);
          v = (s + 1) | 0;
          if ((v | 0) >= (b | 0)) {
            break a;
          }
          s = v;
          u = c[7092716] | 0;
        }
        a[(g + s) | 0] = 0;
      }
    } while (0);
    c[k >> 2] = b + e;
    m$(((c[m >> 2] | 0) + e) | 0, j | 0, b) | 0;
    o = 28700;
    p = 0;
    q = 65536;
    r = 0;
    i = f;
    return;
  }
  function Aw(b, d) {
    b = b | 0;
    d = d | 0;
    var e = 0,
      f = 0,
      g = 0,
      h = 0,
      j = 0,
      k = 0,
      l = 0,
      m = 0,
      n = 0,
      o = 0,
      p = 0,
      q = 0;
    e = i;
    i = (i + 94240) | 0;
    f = e | 0;
    g = (e + 65536) | 0;
    h = f | 0;
    j = (b + 20) | 0;
    k = ((c[j >> 2] | 0) - d) | 0;
    l = (b + 12) | 0;
    b = c[l >> 2] | 0;
    if ((k | 0) < 1) {
      m = 28700;
      n = 0;
      o = 65536;
      p = 0;
      i = e;
      return;
    }
    n$(g | 0, 0, 28700) | 0;
    c[g >> 2] = 1;
    q = (g + 1052) | 0;
    c[(g + 1044) >> 2] = q;
    c[(g + 12) >> 2] = q;
    c[(g + 8) >> 2] = q;
    c[(g + 1080) >> 2] = 256;
    c[(g + 1076) >> 2] = 0;
    c[(g + 1068) >> 2] = 0;
    c[(g + 1064) >> 2] = 0;
    c[(g + 1056) >> 2] = 0;
    c[q >> 2] = 0;
    c[(g + 1060) >> 2] = 0;
    a[h] = k >>> 8;
    a[(f + 1) | 0] = k;
    c[7092716] = 16;
    f = 0;
    do {
      q = a[(b + (f + d)) | 0] | 0;
      ww(g, q & 255, h);
      tw(g, q);
      f = (f + 1) | 0;
    } while ((f | 0) < (k | 0));
    k = c[l >> 2] | 0;
    l = ((c[7092716] | 0) + 8) | 0;
    c[7092716] = l;
    c[j >> 2] = (l >> 3) + d;
    m$((k + d) | 0, h | 0, c[7092716] >> 3) | 0;
    m = 28700;
    n = 0;
    o = 65536;
    p = 0;
    i = e;
    return;
  }
  function Bw(a) {
    a = a | 0;
    var b = 0;
    n$(a | 0, 0, 57400) | 0;
    c[(a + 28700) >> 2] = 1;
    b = (a + 29752) | 0;
    c[(a + 29744) >> 2] = b;
    c[(a + 28716) >> 2] = b;
    c[(a + 28712) >> 2] = b;
    c[(a + 28708) >> 2] = b;
    c[(a + 29780) >> 2] = 256;
    c[(a + 29776) >> 2] = 0;
    c[(a + 29768) >> 2] = 0;
    c[(a + 29764) >> 2] = 0;
    c[(a + 29756) >> 2] = 0;
    c[b >> 2] = 0;
    c[(a + 29760) >> 2] = 0;
    c[a >> 2] = 1;
    b = (a + 1052) | 0;
    c[(a + 1044) >> 2] = b;
    c[(a + 12) >> 2] = b;
    c[(a + 8) >> 2] = b;
    c[(a + 1080) >> 2] = 256;
    c[(a + 1076) >> 2] = 0;
    c[(a + 1068) >> 2] = 0;
    c[(a + 1064) >> 2] = 0;
    c[(a + 1056) >> 2] = 0;
    c[b >> 2] = 0;
    c[(a + 1060) >> 2] = 0;
    return;
  }
  function Cw(d, e, f, g) {
    d = d | 0;
    e = e | 0;
    f = f | 0;
    g = g | 0;
    var h = 0,
      i = 0,
      j = 0,
      k = 0,
      l = 0,
      m = 0,
      n = 0,
      o = 0,
      p = 0,
      q = 0,
      r = 0,
      s = 0,
      t = 0,
      u = 0,
      v = 0,
      w = 0,
      x = 0,
      y = 0,
      z = 0,
      A = 0,
      B = 0,
      C = 0,
      D = 0,
      E = 0,
      F = 0;
    h = g | 0;
    i = b[h >> 1] | 0;
    j = (g + 2) | 0;
    g = a[j] | 0;
    k = (g << 24) >> 24;
    if ((f | 0) <= 0) {
      l = g;
      m = i;
      b[h >> 1] = m;
      a[j] = l;
      return;
    }
    g = e;
    e = d;
    d = f;
    f = c[(2832 + (k << 2)) >> 2] | 0;
    n = (i << 16) >> 16;
    i = k;
    k = 0;
    o = 1;
    while (1) {
      p = ((b[e >> 1] | 0) - n) | 0;
      q = (p | 0) < 0;
      r = q ? -p | 0 : p;
      s = f >> 3;
      if ((r | 0) < (f | 0)) {
        t = s;
        u = r;
        v = 0;
      } else {
        t = (s + f) | 0;
        u = (r - f) | 0;
        v = 4;
      }
      r = f >> 1;
      if ((u | 0) < (r | 0)) {
        w = t;
        x = u;
        y = v;
      } else {
        w = (t + r) | 0;
        x = (u - r) | 0;
        y = v | 2;
      }
      r = f >> 2;
      if ((x | 0) < (r | 0)) {
        z = w;
        A = y;
      } else {
        z = (w + r) | 0;
        A = y | 1;
      }
      r = ((q ? -z | 0 : z) + n) | 0;
      if ((r | 0) > 32767) {
        B = 32767;
      } else {
        B = (r | 0) < -32768 ? -32768 : r;
      }
      r = A | ((p >> 31) & 8);
      p = ((c[(20456 + (r << 2)) >> 2] | 0) + i) | 0;
      q = (p | 0) < 0 ? 0 : p;
      C = (q | 0) > 88 ? 88 : q;
      q = c[(2832 + (C << 2)) >> 2] | 0;
      D = (o | 0) != 0;
      if (D) {
        E = (r << 4) & 240;
        F = g;
      } else {
        a[g] = (r & 15) | k;
        E = k;
        F = (g + 1) | 0;
      }
      r = (d - 1) | 0;
      if ((r | 0) > 0) {
        g = F;
        e = (e + 2) | 0;
        d = r;
        f = q;
        n = B;
        i = C;
        k = E;
        o = (D & 1) ^ 1;
      } else {
        break;
      }
    }
    o = C & 255;
    C = B & 65535;
    if (!D) {
      l = o;
      m = C;
      b[h >> 1] = m;
      a[j] = l;
      return;
    }
    a[F] = E;
    l = o;
    m = C;
    b[h >> 1] = m;
    a[j] = l;
    return;
  }
  function Dw(d, e, f, g) {
    d = d | 0;
    e = e | 0;
    f = f | 0;
    g = g | 0;
    var h = 0,
      i = 0,
      j = 0,
      k = 0,
      l = 0,
      m = 0,
      n = 0,
      o = 0,
      p = 0,
      q = 0,
      r = 0,
      s = 0,
      t = 0,
      u = 0,
      v = 0,
      w = 0,
      x = 0,
      y = 0,
      z = 0,
      A = 0;
    h = g | 0;
    i = b[h >> 1] | 0;
    j = (g + 2) | 0;
    g = a[j] | 0;
    k = (g << 24) >> 24;
    if ((f | 0) <= 0) {
      l = i;
      m = g;
      b[h >> 1] = l;
      a[j] = m;
      return;
    }
    g = d;
    d = 0;
    n = f;
    f = c[(2832 + (k << 2)) >> 2] | 0;
    o = (i << 16) >> 16;
    i = k;
    k = 0;
    p = 0;
    while (1) {
      q = (p | 0) != 0;
      if (q) {
        r = k;
        s = k;
        t = g;
      } else {
        u = a[g] | 0;
        r = u;
        s = u >>> 4;
        t = (g + 1) | 0;
      }
      u = ((c[(20456 + ((s & 15) << 2)) >> 2] | 0) + i) | 0;
      v = (u | 0) < 0 ? 0 : u;
      w = (v | 0) > 88 ? 88 : v;
      v = ((((s & 4) | 0) == 0 ? 0 : f) + (f >> 3)) | 0;
      if (((s & 2) | 0) == 0) {
        x = v;
      } else {
        x = (v + (f >> 1)) | 0;
      }
      if (((s & 1) | 0) == 0) {
        y = x;
      } else {
        y = (x + (f >> 2)) | 0;
      }
      v = ((((s & 8) | 0) == 0 ? y : -y | 0) + o) | 0;
      if ((v | 0) > 32767) {
        z = 32767;
      } else {
        z = (v | 0) < -32768 ? -32768 : v;
      }
      v = c[(2832 + (w << 2)) >> 2] | 0;
      A = z & 65535;
      b[(e + (d << 1)) >> 1] = A;
      u = (n - 1) | 0;
      if ((u | 0) > 0) {
        g = t;
        d = (d + 1) | 0;
        n = u;
        f = v;
        o = z;
        i = w;
        k = r;
        p = (q & 1) ^ 1;
      } else {
        break;
      }
    }
    l = A;
    m = w & 255;
    b[h >> 1] = l;
    a[j] = m;
    return;
  }
  function Ew(c, d) {
    c = c | 0;
    d = d | 0;
    var e = 0,
      f = 0;
    e = i;
    i = (i + 8) | 0;
    f = e | 0;
    a[(f + 2) | 0] = a[(c + 2058) | 0] | 0;
    b[f >> 1] = b[(c + 2056) >> 1] | 0;
    Dw(c, d, 4096, f);
    i = e;
    return;
  }
  function Fw(d, e) {
    d = d | 0;
    e = e | 0;
    var f = 0,
      g = 0,
      h = 0,
      j = 0,
      k = 0,
      l = 0,
      m = 0,
      n = 0,
      o = 0;
    f = i;
    i = (i + 8) | 0;
    g = f | 0;
    h = c[(d + 20) >> 2] | 0;
    j = (g + 2) | 0;
    a[j] = 0;
    k = g | 0;
    b[k >> 1] = b[e >> 1] | 0;
    if ((h | 0) == 0) {
      i = f;
      return;
    }
    l = d | 0;
    d = h;
    h = 0;
    m = 0;
    while (1) {
      n = (d | 0) > 4096 ? 4096 : d;
      o = hx() | 0;
      do {
        if ((c[l >> 2] | 0) == 0) {
          c[l >> 2] = o;
        } else {
          if ((h | 0) == 0) {
            break;
          }
          c[(h + 2048) >> 2] = o;
        }
      } while (0);
      a[(o + 2058) | 0] = a[j] | 0;
      b[(o + 2056) >> 1] = b[k >> 1] | 0;
      Cw((e + (m << 1)) | 0, o, n, g);
      if ((d | 0) == (n | 0)) {
        break;
      } else {
        d = (d - n) | 0;
        h = o;
        m = (m + n) | 0;
      }
    }
    i = f;
    return;
  }
  function Gw() {
    var b = 0,
      d = 0;
    b = i;
    Sr(
      157976,
      ((d = i), (i = (i + 1) | 0), (i = (i + 7) & -8), (c[d >> 2] = 0), d) | 0
    );
    i = d;
    if (!(a[9176] | 0)) {
      Sr(
        178448,
        ((d = i), (i = (i + 1) | 0), (i = (i + 7) & -8), (c[d >> 2] = 0), d) | 0
      );
      i = d;
      Sr(
        185424,
        ((d = i), (i = (i + 1) | 0), (i = (i + 7) & -8), (c[d >> 2] = 0), d) | 0
      );
      i = d;
      i = b;
      return;
    }
    Sr(
      149944,
      ((d = i), (i = (i + 8) | 0), (c[d >> 2] = (c[5385956] | 0) - 1), d) | 0
    );
    i = d;
    Sr(131208, ((d = i), (i = (i + 8) | 0), (c[d >> 2] = c[5385957]), d) | 0);
    i = d;
    Sr(120616, ((d = i), (i = (i + 8) | 0), (c[d >> 2] = c[5385959]), d) | 0);
    i = d;
    Sr(109888, ((d = i), (i = (i + 8) | 0), (c[d >> 2] = c[5385958]), d) | 0);
    i = d;
    Sr(100320, ((d = i), (i = (i + 8) | 0), (c[d >> 2] = c[5385960]), d) | 0);
    i = d;
    Sr(58192, ((d = i), (i = (i + 8) | 0), (c[d >> 2] = c[5385961]), d) | 0);
    i = d;
    if ((c[4886280] | 0) == 0) {
      Sr(
        46280,
        ((d = i), (i = (i + 1) | 0), (i = (i + 7) & -8), (c[d >> 2] = 0), d) | 0
      );
      i = d;
      Sr(
        185424,
        ((d = i), (i = (i + 1) | 0), (i = (i + 7) & -8), (c[d >> 2] = 0), d) | 0
      );
      i = d;
      i = b;
      return;
    } else {
      Sr(51512, ((d = i), (i = (i + 8) | 0), (c[d >> 2] = 19545192), d) | 0);
      i = d;
      Sr(
        185424,
        ((d = i), (i = (i + 1) | 0), (i = (i + 7) & -8), (c[d >> 2] = 0), d) | 0
      );
      i = d;
      i = b;
      return;
    }
  }
  function Hw() {
    var b = 0,
      d = 0,
      e = 0,
      f = 0,
      g = 0,
      h = 0,
      j = 0,
      k = 0,
      l = 0,
      m = 0,
      n = 0,
      o = 0,
      p = 0,
      q = 0;
    b = i;
    i = (i + 96) | 0;
    d = b | 0;
    e = (b + 64) | 0;
    f = d | 0;
    a[f] = a[181512] | 0;
    a[(f + 1) | 0] = a[181513] | 0;
    a[(f + 2) | 0] = a[181514] | 0;
    a[(f + 3) | 0] = a[181515] | 0;
    a[(f + 4) | 0] = a[181516] | 0;
    a[(f + 5) | 0] = a[181517] | 0;
    f = (d + 16) | 0;
    a[f] = a[176800] | 0;
    a[(f + 1) | 0] = a[176801] | 0;
    a[(f + 2) | 0] = a[176802] | 0;
    a[(f + 3) | 0] = a[176803] | 0;
    a[(f + 4) | 0] = a[176804] | 0;
    a[(f + 5) | 0] = a[176805] | 0;
    f = (d + 32) | 0;
    a[f] = a[173288] | 0;
    a[(f + 1) | 0] = a[173289] | 0;
    a[(f + 2) | 0] = a[173290] | 0;
    a[(f + 3) | 0] = a[173291] | 0;
    a[(f + 4) | 0] = a[173292] | 0;
    a[(f + 5) | 0] = a[173293] | 0;
    f = (d + 48) | 0;
    a[f] = a[170168] | 0;
    a[(f + 1) | 0] = a[170169] | 0;
    a[(f + 2) | 0] = a[170170] | 0;
    a[(f + 3) | 0] = a[170171] | 0;
    a[(f + 4) | 0] = a[170172] | 0;
    a[(f + 5) | 0] = a[170173] | 0;
    m$(e | 0, 167104, 10) | 0;
    m$((e + 16) | 0, 163488, 10) | 0;
    if ((c[4780712] | 0) > 0) {
      g = 19124952;
      h = 0;
      j = 0;
    } else {
      k = 0;
      Sr(158128, ((l = i), (i = (i + 8) | 0), (c[l >> 2] = k), l) | 0);
      i = l;
      lx();
      m = 64;
      n = 0;
      i = b;
      return;
    }
    while (1) {
      f = c[(g + 20) >> 2] | 0;
      o = (f + j) | 0;
      p = (d + (c[(g + 16) >> 2] << 4)) | 0;
      q = (e + (c[(g + 8) >> 2] << 4)) | 0;
      Sr(
        160712,
        ((l = i),
        (i = (i + 32) | 0),
        (c[l >> 2] = f),
        (c[(l + 8) >> 2] = p),
        (c[(l + 16) >> 2] = g + 28),
        (c[(l + 24) >> 2] = q),
        l) | 0
      );
      i = l;
      q = (h + 1) | 0;
      if ((q | 0) < (c[4780712] | 0)) {
        g = (g + 100) | 0;
        h = q;
        j = o;
      } else {
        k = o;
        break;
      }
    }
    Sr(158128, ((l = i), (i = (i + 8) | 0), (c[l >> 2] = k), l) | 0);
    i = l;
    lx();
    m = 64;
    n = 0;
    i = b;
    return;
  }
  function Iw() {
    Jw();
    a[9184] = 1;
    return;
  }
  function Jw() {
    var b = 0,
      d = 0,
      e = 0,
      f = 0;
    b = i;
    if (!(a[9176] | 0)) {
      i = b;
      return;
    }
    d = c[4886280] | 0;
    do {
      if ((d | 0) != 0) {
        Yx(d);
        c[4886280] = 0;
        c[4780580] = 0;
        if (a[9176] | 0) {
          break;
        }
        i = b;
        return;
      }
    } while (0);
    n$(19869688, 0, 57344) | 0;
    n$(19863544, 0, 6144) | 0;
    c[4938832] = 0;
    n$(19538976, 0, 6144) | 0;
    d = 19545120;
    e = 19545056;
    while (1) {
      c[e >> 2] = d - 128;
      f = (e - 64) | 0;
      if (f >>> 0 > 19538976 >>> 0) {
        d = e;
        e = f;
      } else {
        break;
      }
    }
    c[4884744] = 0;
    c[5145154] = 19545056;
    Tr(
      155592,
      ((e = i), (i = (i + 1) | 0), (i = (i + 7) & -8), (c[e >> 2] = 0), e) | 0
    );
    i = e;
    n$(19122320, 0, 516) | 0;
    e = c[5385959] | 0;
    DL();
    d = c[5385961] | 0;
    if ((d | 0) != 0) {
      n$(
        d | 0,
        ((e | 0) == 8 ? -128 : 0) | 0,
        ((da(c[5385959] | 0, c[5385957] | 0) | 0) / 8) | 0 | 0
      ) | 0;
    }
    CL();
    i = b;
    return;
  }
  function Kw(b, d) {
    b = b | 0;
    d = d | 0;
    var e = 0,
      f = 0,
      g = 0,
      h = 0,
      j = 0,
      k = 0,
      l = 0,
      m = 0,
      n = 0,
      o = 0,
      p = 0,
      q = 0,
      r = 0;
    d = i;
    if (!(a[9176] | 0)) {
      e = 0;
      i = d;
      return e | 0;
    }
    if ((b | 0) == 0) {
      Ur(
        0,
        113088,
        ((f = i), (i = (i + 1) | 0), (i = (i + 7) & -8), (c[f >> 2] = 0), f) | 0
      );
      i = f;
      return 0;
    }
    g = a[b] | 0;
    if ((g << 24) >> 24 == 0) {
      Sr(
        112136,
        ((f = i), (i = (i + 1) | 0), (i = (i + 7) & -8), (c[f >> 2] = 0), f) | 0
      );
      i = f;
      e = 0;
      i = d;
      return e | 0;
    }
    if ((o$(b | 0) | 0) >>> 0 > 63 >>> 0) {
      Sr(111376, ((f = i), (i = (i + 8) | 0), (c[f >> 2] = b), f) | 0);
      i = f;
      e = 0;
      i = d;
      return e | 0;
    }
    if ((g << 24) >> 24 == 42) {
      Sr(110640, ((f = i), (i = (i + 8) | 0), (c[f >> 2] = b), f) | 0);
      i = f;
      e = 0;
      i = d;
      return e | 0;
    } else {
      h = 0;
      j = 0;
      k = g;
    }
    while (1) {
      g = (t$(((k << 24) >> 24) | 0) | 0) & 255;
      if ((((g << 24) >> 24) | 0) == 46) {
        l = j;
        break;
      } else if ((((g << 24) >> 24) | 0) == 92) {
        m = 47;
      } else {
        m = g;
      }
      g = ((da((m << 24) >> 24, (h + 119) | 0) | 0) + j) | 0;
      n = (h + 1) | 0;
      o = a[(b + n) | 0] | 0;
      if ((o << 24) >> 24 == 0) {
        l = g;
        break;
      } else {
        h = n;
        j = g;
        k = o;
      }
    }
    k = (2170496 + ((l & 127) << 2)) | 0;
    l = c[k >> 2] | 0;
    a: do {
      if ((l | 0) == 0) {
        p = 15;
      } else {
        j = l;
        while (1) {
          if ((VB((j + 28) | 0, b) | 0) == 0) {
            q = j;
            break a;
          }
          h = c[(j + 96) >> 2] | 0;
          if ((h | 0) == 0) {
            p = 15;
            break;
          } else {
            j = h;
          }
        }
      }
    } while (0);
    do {
      if ((p | 0) == 15) {
        l = c[4780712] | 0;
        b: do {
          if ((l | 0) > 0) {
            j = 0;
            while (1) {
              h = (j + 1) | 0;
              if ((a[(19124980 + ((j * 100) | 0)) | 0] | 0) == 0) {
                r = j;
                break b;
              }
              if ((h | 0) < (l | 0)) {
                j = h;
              } else {
                r = h;
                break;
              }
            }
          } else {
            r = 0;
          }
        } while (0);
        do {
          if ((r | 0) == (l | 0)) {
            if ((l | 0) == 4096) {
              Ur(
                0,
                109408,
                ((f = i),
                (i = (i + 1) | 0),
                (i = (i + 7) & -8),
                (c[f >> 2] = 0),
                f) | 0
              );
              i = f;
              return 0;
            } else {
              c[4780712] = l + 1;
              break;
            }
          }
        } while (0);
        l = (19124952 + ((r * 100) | 0)) | 0;
        n$(l | 0, 0, 100) | 0;
        r$((19124980 + ((r * 100) | 0)) | 0, b | 0) | 0;
        c[(19125048 + ((r * 100) | 0)) >> 2] = c[k >> 2];
        c[k >> 2] = l;
        if ((l | 0) == 0) {
          e = 0;
        } else {
          q = l;
          break;
        }
        i = d;
        return e | 0;
      }
    } while (0);
    if ((c[q >> 2] | 0) != 0) {
      if ((c[(q + 4) >> 2] | 0) == 0) {
        e = (((q - 19124952) | 0) / 100) | 0;
        i = d;
        return e | 0;
      } else {
        Sr(153560, ((f = i), (i = (i + 8) | 0), (c[f >> 2] = q + 28), f) | 0);
        i = f;
        e = 0;
        i = d;
        return e | 0;
      }
    }
    k = (q + 8) | 0;
    c[k >> 2] = 0;
    c[(q + 12) >> 2] = 0;
    r = (q + 4) | 0;
    do {
      if ((kx(q) | 0) == 0) {
        c[r >> 2] = 1;
        c[k >> 2] = 1;
      } else {
        b = (c[r >> 2] | 0) == 0;
        c[k >> 2] = 1;
        if (!b) {
          break;
        }
        e = (((q - 19124952) | 0) / 100) | 0;
        i = d;
        return e | 0;
      }
    } while (0);
    Sr(153560, ((f = i), (i = (i + 8) | 0), (c[f >> 2] = q + 28), f) | 0);
    i = f;
    e = 0;
    i = d;
    return e | 0;
  }
  function Lw() {
    a[9184] = 0;
    if ((c[4780712] | 0) != 0) {
      return;
    }
    ix();
    n$(19124952, 0, 409600) | 0;
    n$(2170496, 0, 512) | 0;
    Kw(151704, 0) | 0;
    return;
  }
  function Mw(a, b, d, e) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    e = e | 0;
    var f = 0,
      h = 0,
      j = 0,
      k = 0,
      l = 0.0,
      m = 0.0,
      n = 0.0,
      o = 0.0,
      p = 0.0,
      q = 0.0;
    f = i;
    i = (i + 32) | 0;
    h = f | 0;
    j = (f + 16) | 0;
    k = h | 0;
    g[k >> 2] = +g[a >> 2] - +g[4984258];
    g[(h + 4) >> 2] = +g[(a + 4) >> 2] - +g[4984259];
    g[(h + 8) >> 2] = +g[(a + 8) >> 2] - +g[4984260];
    l = +wB(k) + -80.0;
    a = l < 0.0;
    m = l * 0.0007999999797903001;
    FB(k, 19937056, j | 0);
    do {
      if ((c[5385956] | 0) == 1) {
        n = 1.0;
        o = 1.0;
      } else {
        l = -0.0 - +g[(j + 4) >> 2];
        p = (l + 1.0) * 0.5;
        q = (1.0 - l) * 0.5;
        l = p < 0.0 ? 0.0 : p;
        if (!(q < 0.0)) {
          n = l;
          o = q;
          break;
        }
        n = l;
        o = 0.0;
      }
    } while (0);
    l = 1.0 - (a ? 0.0 : m);
    m = +(b | 0);
    b = ~~(m * l * n);
    c[e >> 2] = (b | 0) < 0 ? 0 : b;
    b = ~~(m * l * o);
    c[d >> 2] = (b | 0) < 0 ? 0 : b;
    i = f;
    return;
  }
  function Nw(a, b, c, d) {
    a = a | 0;
    b = b | 0;
    c = c | 0;
    d = d | 0;
    Ow(a, b, c, d, 0);
    return;
  }
  function Ow(b, d, e, f, h) {
    b = b | 0;
    d = d | 0;
    e = e | 0;
    f = f | 0;
    h = h | 0;
    var j = 0,
      k = 0,
      l = 0,
      m = 0,
      n = 0,
      o = 0,
      p = 0,
      q = 0,
      r = 0,
      s = 0,
      t = 0,
      u = 0,
      v = 0.0,
      w = 0.0,
      x = 0.0,
      y = 0,
      z = 0,
      A = 0,
      B = 0,
      C = 0,
      D = 0,
      E = 0,
      F = 0,
      G = 0;
    j = i;
    if (a[9184] | (a[9176] ^ 1)) {
      i = j;
      return;
    }
    k = (b | 0) != 0;
    if ((d >>> 0 > 1023 >>> 0) & (k ^ 1)) {
      Ur(1, 117672, ((l = i), (i = (i + 8) | 0), (c[l >> 2] = d), l) | 0);
      i = l;
    }
    if (!(((f | 0) > -1) & ((c[4780712] | 0) > (f | 0)))) {
      Sr(116648, ((l = i), (i = (i + 8) | 0), (c[l >> 2] = f), l) | 0);
      i = l;
      i = j;
      return;
    }
    m = (19124952 + ((f * 100) | 0)) | 0;
    n = (19124960 + ((f * 100) | 0)) | 0;
    if ((c[n >> 2] | 0) == 0) {
      if ((kx(m) | 0) == 0) {
        c[(19124956 + ((f * 100) | 0)) >> 2] = 1;
      }
      c[n >> 2] = 1;
    }
    if ((c[((c[553494] | 0) + 32) >> 2] | 0) == 1) {
      Sr(
        115344,
        ((l = i),
        (i = (i + 16) | 0),
        (c[l >> 2] = c[4780710]),
        (c[(l + 8) >> 2] = 19124980 + ((f * 100) | 0)),
        l) | 0
      );
      i = l;
    }
    n = Bs() | 0;
    o = c[4984262] | 0;
    p = (o | 0) == (d | 0);
    q = p ? 8 : 4;
    do {
      if ((h | 0) == 0) {
        if ((b | 0) == 0) {
          r = (19869688 + ((d * 56) | 0)) | 0;
          s = (19869692 + ((d * 56) | 0)) | 0;
          t = (19869696 + ((d * 56) | 0)) | 0;
        } else {
          r = b;
          s = (b + 4) | 0;
          t = (b + 8) | 0;
        }
        if (!p) {
          u = 0;
          break;
        }
        v = +g[4984258] - +g[r >> 2];
        w = +g[4984259] - +g[s >> 2];
        x = +g[4984260] - +g[t >> 2];
        if (v * v + w * w + x * x <= 2304.0) {
          y = 18;
        } else {
          u = 0;
        }
      } else {
        y = 18;
      }
    } while (0);
    if ((y | 0) == 18) {
      u = 1;
    }
    t = 0;
    s = 19538976;
    r = 0;
    a: while (1) {
      do {
        if ((c[(s + 8) >> 2] | 0) == (d | 0)) {
          if ((c[(s + 52) >> 2] | 0) != (m | 0)) {
            z = r;
            break;
          }
          if (((n - (c[s >> 2] | 0)) | 0) < 50) {
            y = 47;
            break a;
          }
          z = (r + 1) | 0;
        } else {
          z = r;
        }
      } while (0);
      p = (t + 1) | 0;
      if ((p | 0) < 96) {
        t = p;
        s = (s + 64) | 0;
        r = z;
      } else {
        break;
      }
    }
    if ((y | 0) == 47) {
      i = j;
      return;
    }
    if ((z | 0) > (q | 0)) {
      i = j;
      return;
    }
    c[(19125044 + ((f * 100) | 0)) >> 2] = n;
    f = c[5145154] | 0;
    if ((f | 0) == 0) {
      q = 0;
      z = n;
      y = -1;
      r = 19538976;
      while (1) {
        s = c[(r + 8) >> 2] | 0;
        do {
          if (((s | 0) != (o | 0)) & ((s | 0) == (d | 0))) {
            t = c[r >> 2] | 0;
            if ((t | 0) >= (z | 0)) {
              A = y;
              B = z;
              break;
            }
            p = (c[(r + 12) >> 2] | 0) == 7;
            A = p ? y : q;
            B = p ? z : t;
          } else {
            A = y;
            B = z;
          }
        } while (0);
        s = (q + 1) | 0;
        if ((s | 0) < 96) {
          q = s;
          z = B;
          y = A;
          r = (r + 64) | 0;
        } else {
          break;
        }
      }
      do {
        if ((A | 0) == -1) {
          r = 0;
          y = B;
          z = -1;
          q = 19538976;
          while (1) {
            do {
              if ((c[(q + 8) >> 2] | 0) == (o | 0)) {
                C = z;
                D = y;
              } else {
                s = c[q >> 2] | 0;
                if ((s | 0) >= (y | 0)) {
                  C = z;
                  D = y;
                  break;
                }
                t = (c[(q + 12) >> 2] | 0) == 7;
                C = t ? z : r;
                D = t ? y : s;
              }
            } while (0);
            s = (r + 1) | 0;
            if ((s | 0) < 96) {
              r = s;
              y = D;
              z = C;
              q = (q + 64) | 0;
            } else {
              break;
            }
          }
          if (!((C | 0) == -1)) {
            E = C;
            break;
          }
          if ((c[4884746] | 0) == (o | 0)) {
            q = 0;
            z = D;
            y = -1;
            r = 19538976;
            while (1) {
              s = c[r >> 2] | 0;
              t = (s | 0) < (z | 0);
              F = t ? q : y;
              p = (q + 1) | 0;
              if ((p | 0) < 96) {
                q = p;
                z = t ? s : z;
                y = F;
                r = (r + 64) | 0;
              } else {
                break;
              }
            }
            if (!((F | 0) == -1)) {
              E = F;
              break;
            }
          }
          Sr(
            114096,
            ((l = i),
            (i = (i + 1) | 0),
            (i = (i + 7) & -8),
            (c[l >> 2] = 0),
            l) | 0
          );
          i = l;
          i = j;
          return;
        } else {
          E = A;
        }
      } while (0);
      A = (19538976 + (E << 6)) | 0;
      c[A >> 2] = n;
      G = A;
    } else {
      c[5145154] = c[f >> 2];
      c[f >> 2] = Bs() | 0;
      G = f;
    }
    if (k) {
      g[(G + 36) >> 2] = +g[b >> 2];
      g[(G + 40) >> 2] = +g[(b + 4) >> 2];
      g[(G + 44) >> 2] = +g[(b + 8) >> 2];
      c[(G + 48) >> 2] = 1;
    } else {
      c[(G + 48) >> 2] = 0;
    }
    c[(G + 24) >> 2] = 127;
    c[(G + 8) >> 2] = d;
    c[(G + 52) >> 2] = m;
    c[(G + 4) >> 2] = 2147483647;
    c[(G + 12) >> 2] = e;
    c[(G + 16) >> 2] = 127;
    c[(G + 20) >> 2] = 127;
    c[(G + 56) >> 2] = 0;
    c[(G + 60) >> 2] = u;
    i = j;
    return;
  }
  function Pw(b, d) {
    b = b | 0;
    d = d | 0;
    var e = 0;
    e = i;
    if (a[9184] | (a[9176] ^ 1)) {
      i = e;
      return;
    }
    if (((b | 0) > -1) & ((c[4780712] | 0) > (b | 0))) {
      Ow(0, c[4984262] | 0, d, b, 1);
      i = e;
      return;
    } else {
      Sr(149320, ((d = i), (i = (i + 8) | 0), (c[d >> 2] = b), d) | 0);
      i = d;
      i = e;
      return;
    }
  }
  function Qw() {
    var b = 0,
      d = 0,
      e = 0,
      f = 0;
    b = i;
    if (!(a[9176] | 0)) {
      i = b;
      return;
    }
    n$(19869688, 0, 57344) | 0;
    n$(19863544, 0, 6144) | 0;
    c[4938832] = 0;
    n$(19538976, 0, 6144) | 0;
    d = 19545120;
    e = 19545056;
    while (1) {
      c[e >> 2] = d - 128;
      f = (e - 64) | 0;
      if (f >>> 0 > 19538976 >>> 0) {
        d = e;
        e = f;
      } else {
        break;
      }
    }
    c[4884744] = 0;
    c[5145154] = 19545056;
    Tr(
      155592,
      ((e = i), (i = (i + 1) | 0), (i = (i + 7) & -8), (c[e >> 2] = 0), e) | 0
    );
    i = e;
    n$(19122320, 0, 516) | 0;
    e = c[5385959] | 0;
    DL();
    d = c[5385961] | 0;
    if ((d | 0) != 0) {
      n$(
        d | 0,
        ((e | 0) == 8 ? -128 : 0) | 0,
        ((da(c[5385959] | 0, c[5385957] | 0) | 0) / 8) | 0 | 0
      ) | 0;
    }
    CL();
    i = b;
    return;
  }
  function Rw() {
    var a = 0;
    a = c[4886280] | 0;
    if ((a | 0) == 0) {
      return;
    }
    Yx(a);
    c[4886280] = 0;
    c[4780580] = 0;
    return;
  }
  function Sw(a) {
    a = a | 0;
    c[(19869720 + ((a * 56) | 0)) >> 2] = 0;
    c[(19869724 + ((a * 56) | 0)) >> 2] = 0;
    return;
  }
  function Tw(a) {
    a = a | 0;
    var b = 0,
      d = 0,
      e = 0;
    if ((a | 0) == 0) {
      b = 0;
    } else {
      a = 0;
      do {
        c[(19869720 + ((a * 56) | 0)) >> 2] = 0;
        c[(19869724 + ((a * 56) | 0)) >> 2] = 0;
        a = (a + 1) | 0;
      } while ((a | 0) < 1024);
      c[4938832] = 0;
      return;
    }
    do {
      a = (19869724 + ((b * 56) | 0)) | 0;
      do {
        if ((c[a >> 2] | 0) == 1) {
          d = 5;
        } else {
          e = c[(19869712 + ((b * 56) | 0)) >> 2] | 0;
          if ((e | 0) == 0) {
            break;
          }
          if ((c[(e + 20) >> 2] | 0) == 0) {
            d = 5;
          }
        }
      } while (0);
      if ((d | 0) == 5) {
        d = 0;
        c[(19869720 + ((b * 56) | 0)) >> 2] = 0;
        c[a >> 2] = 0;
      }
      b = (b + 1) | 0;
    } while ((b | 0) < 1024);
    c[4938832] = 0;
    return;
  }
  function Uw(b, d, e, f) {
    b = b | 0;
    d = d | 0;
    e = e | 0;
    f = f | 0;
    var h = 0,
      j = 0,
      k = 0,
      l = 0,
      m = 0.0,
      n = 0.0,
      o = 0.0,
      p = 0.0,
      q = 0.0,
      r = 0.0,
      s = 0,
      t = 0.0,
      u = 0.0,
      v = 0.0,
      w = 0.0,
      x = 0.0,
      y = 0.0,
      z = 0.0;
    h = i;
    if (a[9184] | (a[9176] ^ 1)) {
      i = h;
      return;
    }
    if (!(((f | 0) > -1) & ((c[4780712] | 0) > (f | 0)))) {
      Sr(146752, ((j = i), (i = (i + 8) | 0), (c[j >> 2] = f), j) | 0);
      i = j;
      i = h;
      return;
    }
    k = (19124952 + ((f * 100) | 0)) | 0;
    l = (19124960 + ((f * 100) | 0)) | 0;
    if ((c[l >> 2] | 0) == 0) {
      if ((kx(k) | 0) == 0) {
        c[(19124956 + ((f * 100) | 0)) >> 2] = 1;
      }
      c[l >> 2] = 1;
    }
    if ((c[(19124972 + ((f * 100) | 0)) >> 2] | 0) == 0) {
      Ur(
        1,
        144344,
        ((j = i),
        (i = (i + 8) | 0),
        (c[j >> 2] = 19124980 + ((f * 100) | 0)),
        j) | 0
      );
      i = j;
    }
    m = +g[d >> 2];
    g[(19869688 + ((b * 56) | 0)) >> 2] = m;
    n = +g[(d + 4) >> 2];
    g[(19869692 + ((b * 56) | 0)) >> 2] = n;
    o = +g[(d + 8) >> 2];
    g[(19869696 + ((b * 56) | 0)) >> 2] = o;
    p = +g[e >> 2];
    g[(19869700 + ((b * 56) | 0)) >> 2] = p;
    d = (e + 4) | 0;
    q = +g[d >> 2];
    g[(19869704 + ((b * 56) | 0)) >> 2] = q;
    j = (e + 8) | 0;
    r = +g[j >> 2];
    g[(19869708 + ((b * 56) | 0)) >> 2] = r;
    c[(19869720 + ((b * 56) | 0)) >> 2] = 1;
    c[(19869724 + ((b * 56) | 0)) >> 2] = 1;
    f = (19869728 + ((b * 56) | 0)) | 0;
    c[f >> 2] = 0;
    l = (19869736 + ((b * 56) | 0)) | 0;
    g[l >> 2] = 1.0;
    s = (19869732 + ((b * 56) | 0)) | 0;
    g[s >> 2] = 1.0;
    c[(19869712 + ((b * 56) | 0)) >> 2] = k;
    do {
      if ((c[((c[4883770] | 0) + 32) >> 2] | 0) != 0) {
        t = +g[e >> 2];
        u = +g[d >> 2];
        v = +g[j >> 2];
        if (!(t * t + u * u + v * v > 0.0)) {
          break;
        }
        c[f >> 2] = 1;
        k = c[4984262] | 0;
        v = +g[(19869688 + ((k * 56) | 0)) >> 2];
        u = +g[(19869692 + ((k * 56) | 0)) >> 2];
        t = +g[(19869696 + ((k * 56) | 0)) >> 2];
        w = m - v;
        x = n - u;
        y = o - t;
        z = m + p - v;
        v = n + q - u;
        u = o + r - t;
        g[l >> 2] = 1.0;
        t = (z * z + v * v + u * u) / ((w * w + x * x + y * y) * 100.0);
        g[s >> 2] = t;
        if (!(t > 1.0)) {
          c[f >> 2] = 0;
          break;
        }
        if (!(t > 50.0)) {
          break;
        }
        g[s >> 2] = 50.0;
      }
    } while (0);
    c[(19869740 + ((b * 56) | 0)) >> 2] = c[5497080];
    i = h;
    return;
  }
  function Vw(b, d, e, f) {
    b = b | 0;
    d = d | 0;
    e = e | 0;
    f = f | 0;
    var h = 0,
      j = 0,
      k = 0,
      l = 0;
    h = i;
    if (a[9184] | (a[9176] ^ 1)) {
      i = h;
      return;
    }
    if (!(((f | 0) > -1) & ((c[4780712] | 0) > (f | 0)))) {
      Sr(141720, ((j = i), (i = (i + 8) | 0), (c[j >> 2] = f), j) | 0);
      i = j;
      i = h;
      return;
    }
    k = (19124952 + ((f * 100) | 0)) | 0;
    l = (19124960 + ((f * 100) | 0)) | 0;
    if ((c[l >> 2] | 0) == 0) {
      if ((kx(k) | 0) == 0) {
        c[(19124956 + ((f * 100) | 0)) >> 2] = 1;
      }
      c[l >> 2] = 1;
    }
    if ((c[(19124972 + ((f * 100) | 0)) >> 2] | 0) == 0) {
      Ur(
        1,
        144344,
        ((j = i),
        (i = (i + 8) | 0),
        (c[j >> 2] = 19124980 + ((f * 100) | 0)),
        j) | 0
      );
      i = j;
    }
    g[(19869688 + ((b * 56) | 0)) >> 2] = +g[d >> 2];
    g[(19869692 + ((b * 56) | 0)) >> 2] = +g[(d + 4) >> 2];
    g[(19869696 + ((b * 56) | 0)) >> 2] = +g[(d + 8) >> 2];
    g[(19869700 + ((b * 56) | 0)) >> 2] = +g[e >> 2];
    g[(19869704 + ((b * 56) | 0)) >> 2] = +g[(e + 4) >> 2];
    g[(19869708 + ((b * 56) | 0)) >> 2] = +g[(e + 8) >> 2];
    c[(19869712 + ((b * 56) | 0)) >> 2] = k;
    c[(19869720 + ((b * 56) | 0)) >> 2] = 1;
    c[(19869724 + ((b * 56) | 0)) >> 2] = 0;
    c[(19869728 + ((b * 56) | 0)) >> 2] = 0;
    i = h;
    return;
  }
  function Ww() {
    var a = 0,
      b = 0,
      d = 0,
      e = 0,
      f = 0,
      h = 0,
      j = 0,
      k = 0,
      l = 0,
      m = 0,
      n = 0,
      o = 0,
      p = 0,
      q = 0,
      r = 0;
    a = i;
    i = (i + 32) | 0;
    b = a | 0;
    d = (a + 8) | 0;
    e = (a + 16) | 0;
    f = (a + 24) | 0;
    c[4938832] = 0;
    h = Bs() | 0;
    c[7095832] = (c[7095832] | 0) + 1;
    j = 0;
    a: while (1) {
      b: do {
        if ((c[(19869720 + ((j * 56) | 0)) >> 2] | 0) != 0) {
          if ((c[(19869716 + ((j * 56) | 0)) >> 2] | 0) == (c[7095832] | 0)) {
            break;
          }
          k = (19869688 + ((j * 56) | 0)) | 0;
          if ((c[(19869724 + ((j * 56) | 0)) >> 2] | 0) == 0) {
            Mw(k, 90, b, d);
          } else {
            Mw(k, 127, b, d);
          }
          k = (19869712 + ((j * 56) | 0)) | 0;
          c[((c[k >> 2] | 0) + 92) >> 2] = h;
          l = (j + 1) | 0;
          if ((l | 0) < 1024) {
            m = l;
            do {
              do {
                if ((c[(19869720 + ((m * 56) | 0)) >> 2] | 0) != 0) {
                  if ((c[(19869728 + ((m * 56) | 0)) >> 2] | 0) != 0) {
                    break;
                  }
                  l = (19869712 + ((m * 56) | 0)) | 0;
                  if ((c[l >> 2] | 0) != (c[k >> 2] | 0)) {
                    break;
                  }
                  c[(19869716 + ((m * 56) | 0)) >> 2] = c[7095832];
                  n = (19869688 + ((m * 56) | 0)) | 0;
                  if ((c[(19869724 + ((m * 56) | 0)) >> 2] | 0) == 0) {
                    Mw(n, 90, e, f);
                  } else {
                    Mw(n, 127, e, f);
                  }
                  c[((c[l >> 2] | 0) + 92) >> 2] = h;
                  c[b >> 2] = (c[b >> 2] | 0) + (c[e >> 2] | 0);
                  c[d >> 2] = (c[d >> 2] | 0) + (c[f >> 2] | 0);
                }
              } while (0);
              m = (m + 1) | 0;
            } while ((m | 0) < 1024);
          }
          m = c[b >> 2] | 0;
          do {
            if ((m | 0) == 0) {
              if ((c[d >> 2] | 0) == 0) {
                break b;
              }
              o = 0;
              p = c[4938832] | 0;
            } else {
              l = c[4938832] | 0;
              if ((m | 0) <= 255) {
                o = m;
                p = l;
                break;
              }
              c[b >> 2] = 255;
              o = 255;
              p = l;
            }
          } while (0);
          m = c[d >> 2] | 0;
          if ((m | 0) > 255) {
            c[d >> 2] = 255;
            q = 255;
          } else {
            q = m;
          }
          c[(19863568 + (p << 6)) >> 2] = 127;
          c[(19863560 + (p << 6)) >> 2] = o;
          c[(19863564 + (p << 6)) >> 2] = q;
          c[(19863596 + (p << 6)) >> 2] = c[k >> 2];
          c[(19863600 + (p << 6)) >> 2] = c[(19869728 + ((j * 56) | 0)) >> 2];
          g[(19863572 + (p << 6)) >> 2] = +g[(19869732 + ((j * 56) | 0)) >> 2];
          g[(19863576 + (p << 6)) >> 2] = +g[(19869736 + ((j * 56) | 0)) >> 2];
          c[(19863604 + (p << 6)) >> 2] = 0;
          m = (p + 1) | 0;
          c[4938832] = m;
          if ((m | 0) == 96) {
            r = 25;
            break a;
          }
        }
      } while (0);
      m = (j + 1) | 0;
      if ((m | 0) < 1024) {
        j = m;
      } else {
        r = 25;
        break;
      }
    }
    if ((r | 0) == 25) {
      i = a;
      return;
    }
  }
  function Xw(e, f, h, j, k, l, m, n) {
    e = e | 0;
    f = f | 0;
    h = h | 0;
    j = j | 0;
    k = k | 0;
    l = l | 0;
    m = +m;
    n = n | 0;
    var o = 0,
      p = 0,
      q = 0,
      r = 0.0,
      s = 0.0,
      t = 0.0,
      u = 0,
      v = 0,
      w = 0,
      x = 0,
      y = 0,
      z = 0,
      A = 0,
      B = 0,
      C = 0,
      D = 0,
      E = 0,
      F = 0,
      G = 0,
      H = 0,
      I = 0,
      J = 0,
      K = 0,
      L = 0,
      M = 0;
    o = i;
    i = (i + 16) | 0;
    p = o | 0;
    q = (o + 8) | 0;
    if (a[9184] | (a[9176] ^ 1) | (e >>> 0 > 128 >>> 0)) {
      i = o;
      return;
    }
    if ((c[((c[4781226] | 0) + 32) >> 2] | 0) == 0) {
      if (n >>> 0 < 1024 >>> 0) {
        Mw((19869688 + ((n * 56) | 0)) | 0, 256, p, q);
        r = +(c[p >> 2] | 0);
        s = +(c[q >> 2] | 0);
      } else {
        c[q >> 2] = 256;
        c[p >> 2] = 256;
        r = 256.0;
        s = 256.0;
      }
      t = +g[((c[553082] | 0) + 28) >> 2];
      u = ~~(t * s * m);
      v = ~~(r * m * t);
    } else {
      u = 0;
      v = 0;
    }
    p = (19122320 + (e << 2)) | 0;
    q = c[p >> 2] | 0;
    n = c[553086] | 0;
    if ((q | 0) < (n | 0)) {
      Tr(
        139440,
        ((w = i),
        (i = (i + 16) | 0),
        (c[w >> 2] = q),
        (c[(w + 8) >> 2] = n),
        w) | 0
      );
      i = w;
      x = c[553086] | 0;
      c[p >> 2] = x;
      y = x;
      z = x;
    } else {
      y = q;
      z = n;
    }
    t = +(h | 0) / +(c[5385960] | 0);
    h = (k | 0) == 2;
    n = (j | 0) == 2;
    a: do {
      if (h & n) {
        if (t == 1.0) {
          if ((f | 0) <= 0) {
            A = y;
            break;
          }
          q = l;
          x = 0;
          B = y;
          while (1) {
            C = B & 16383;
            D = x << 1;
            c[(2214032 + (e << 17) + (C << 3)) >> 2] =
              da(b[(q + (D << 1)) >> 1] | 0, v) | 0;
            c[(2214032 + (e << 17) + (C << 3) + 4) >> 2] =
              da(b[(q + ((D | 1) << 1)) >> 1] | 0, u) | 0;
            D = (x + 1) | 0;
            if ((D | 0) < (f | 0)) {
              x = D;
              B = (B + 1) | 0;
            } else {
              break;
            }
          }
          B = (y + f) | 0;
          c[p >> 2] = B;
          A = B;
          break;
        } else {
          B = ~~(t * 0.0);
          if ((B | 0) >= (f | 0)) {
            A = y;
            break;
          }
          x = l;
          q = 0;
          D = B;
          B = y;
          do {
            C = B & 16383;
            B = (B + 1) | 0;
            E = D << 1;
            c[(2214032 + (e << 17) + (C << 3)) >> 2] =
              da(b[(x + (E << 1)) >> 1] | 0, v) | 0;
            c[(2214032 + (e << 17) + (C << 3) + 4) >> 2] =
              da(b[(x + ((E | 1) << 1)) >> 1] | 0, u) | 0;
            q = (q + 1) | 0;
            D = ~~(t * +(q | 0));
          } while ((D | 0) < (f | 0));
          c[p >> 2] = B;
          A = B;
          break;
        }
      } else {
        D = (k | 0) == 1;
        if (D & n) {
          q = ~~(t * 0.0);
          if ((q | 0) >= (f | 0)) {
            A = y;
            break;
          }
          x = l;
          E = 0;
          C = q;
          q = y;
          do {
            F = q & 16383;
            q = (q + 1) | 0;
            G = b[(x + (C << 1)) >> 1] | 0;
            c[(2214032 + (e << 17) + (F << 3)) >> 2] = da(G, v) | 0;
            c[(2214032 + (e << 17) + (F << 3) + 4) >> 2] = da(G, u) | 0;
            E = (E + 1) | 0;
            C = ~~(t * +(E | 0));
          } while ((C | 0) < (f | 0));
          c[p >> 2] = q;
          A = q;
          break;
        }
        C = (j | 0) == 1;
        if (h & C) {
          E = v << 8;
          x = u << 8;
          B = ~~(t * 0.0);
          if ((B | 0) < (f | 0)) {
            H = 0;
            I = B;
            J = y;
          } else {
            A = y;
            break;
          }
          while (1) {
            B = J & 16383;
            G = (J + 1) | 0;
            c[p >> 2] = G;
            F = I << 1;
            c[(2214032 + (e << 17) + (B << 3)) >> 2] =
              da(E, a[(l + F) | 0] | 0) | 0;
            c[(2214032 + (e << 17) + (B << 3) + 4) >> 2] =
              da(x, a[(l + (F | 1)) | 0] | 0) | 0;
            F = (H + 1) | 0;
            B = ~~(t * +(F | 0));
            if ((B | 0) < (f | 0)) {
              H = F;
              I = B;
              J = G;
            } else {
              A = G;
              break a;
            }
          }
        }
        if (!(D & C)) {
          A = y;
          break;
        }
        x = v << 8;
        E = u << 8;
        q = ~~(t * 0.0);
        if ((q | 0) < (f | 0)) {
          K = 0;
          L = q;
          M = y;
        } else {
          A = y;
          break;
        }
        while (1) {
          q = M & 16383;
          G = (M + 1) | 0;
          c[p >> 2] = G;
          B = (l + L) | 0;
          c[(2214032 + (e << 17) + (q << 3)) >> 2] =
            da(x, ((d[B] | 0) - 128) | 0) | 0;
          c[(2214032 + (e << 17) + (q << 3) + 4) >> 2] =
            da(E, ((d[B] | 0) - 128) | 0) | 0;
          B = (K + 1) | 0;
          q = ~~(t * +(B | 0));
          if ((q | 0) < (f | 0)) {
            K = B;
            L = q;
            M = G;
          } else {
            A = G;
            break;
          }
        }
      }
    } while (0);
    if ((A | 0) <= ((z + 16384) | 0)) {
      i = o;
      return;
    }
    Tr(
      137544,
      ((w = i), (i = (i + 16) | 0), (c[w >> 2] = A), (c[(w + 8) >> 2] = z), w) |
        0
    );
    i = w;
    i = o;
    return;
  }
  function Yw(a, b) {
    a = a | 0;
    b = b | 0;
    var d = 0,
      e = 0;
    d = i;
    if (a >>> 0 > 1023 >>> 0) {
      Ur(1, 136032, ((e = i), (i = (i + 8) | 0), (c[e >> 2] = a), e) | 0);
      i = e;
    } else {
      g[(19869688 + ((a * 56) | 0)) >> 2] = +g[b >> 2];
      g[(19869692 + ((a * 56) | 0)) >> 2] = +g[(b + 4) >> 2];
      g[(19869696 + ((a * 56) | 0)) >> 2] = +g[(b + 8) >> 2];
      i = d;
      return;
    }
  }
  function Zw(b, d, e, f) {
    b = b | 0;
    d = d | 0;
    e = e | 0;
    f = f | 0;
    var h = 0,
      j = 0,
      k = 0,
      l = 0;
    f = i;
    i = (i + 16) | 0;
    h = f | 0;
    if (a[9184] | (a[9176] ^ 1)) {
      i = f;
      return;
    }
    c[4984262] = b;
    g[4984258] = +g[d >> 2];
    g[4984259] = +g[(d + 4) >> 2];
    g[4984260] = +g[(d + 8) >> 2];
    g[4984264] = +g[e >> 2];
    g[4984265] = +g[(e + 4) >> 2];
    g[4984266] = +g[(e + 8) >> 2];
    g[4984267] = +g[(e + 12) >> 2];
    g[4984268] = +g[(e + 16) >> 2];
    g[4984269] = +g[(e + 20) >> 2];
    g[4984270] = +g[(e + 24) >> 2];
    g[4984271] = +g[(e + 28) >> 2];
    g[4984272] = +g[(e + 32) >> 2];
    e = h | 0;
    d = (h + 4) | 0;
    b = (h + 8) | 0;
    h = 0;
    j = 19538976;
    while (1) {
      do {
        if ((c[(j + 52) >> 2] | 0) != 0) {
          if ((c[(j + 60) >> 2] | 0) != 0) {
            k = c[(j + 24) >> 2] | 0;
            c[(j + 16) >> 2] = k;
            c[(j + 20) >> 2] = k;
            break;
          }
          if ((c[(j + 48) >> 2] | 0) == 0) {
            k = c[(j + 8) >> 2] | 0;
            g[e >> 2] = +g[(19869688 + ((k * 56) | 0)) >> 2];
            g[d >> 2] = +g[(19869692 + ((k * 56) | 0)) >> 2];
            l = (19869696 + ((k * 56) | 0)) | 0;
          } else {
            g[e >> 2] = +g[(j + 36) >> 2];
            g[d >> 2] = +g[(j + 40) >> 2];
            l = (j + 44) | 0;
          }
          g[b >> 2] = +g[l >> 2];
          Mw(e, c[(j + 24) >> 2] | 0, (j + 16) | 0, (j + 20) | 0);
        }
      } while (0);
      k = (h + 1) | 0;
      if ((k | 0) < 96) {
        h = k;
        j = (j + 64) | 0;
      } else {
        break;
      }
    }
    Ww();
    i = f;
    return;
  }
  function _w() {
    var b = 0,
      d = 0,
      e = 0,
      f = 0,
      g = 0,
      h = 0,
      j = 0,
      k = 0,
      l = 0;
    b = i;
    if (a[9184] | (a[9176] ^ 1)) {
      i = b;
      return;
    }
    if ((c[((c[553494] | 0) + 32) >> 2] | 0) == 2) {
      d = 0;
      e = 0;
      f = 19538976;
      while (1) {
        g = c[(f + 52) >> 2] | 0;
        do {
          if ((g | 0) == 0) {
            h = e;
          } else {
            j = c[(f + 16) >> 2] | 0;
            k = c[(f + 20) >> 2] | 0;
            if ((j | k | 0) == 0) {
              h = e;
              break;
            }
            Sr(
              134584,
              ((l = i),
              (i = (i + 24) | 0),
              (c[l >> 2] = j),
              (c[(l + 8) >> 2] = k),
              (c[(l + 16) >> 2] = g + 28),
              l) | 0
            );
            i = l;
            h = (e + 1) | 0;
          }
        } while (0);
        g = (d + 1) | 0;
        if ((g | 0) < 96) {
          d = g;
          e = h;
          f = (f + 64) | 0;
        } else {
          break;
        }
      }
      f = c[4780710] | 0;
      Sr(
        133e3,
        ((l = i),
        (i = (i + 16) | 0),
        (c[l >> 2] = h),
        (c[(l + 8) >> 2] = f),
        l) | 0
      );
      i = l;
    }
    $w();
    ax();
    i = b;
    return;
  }
  function $w() {
    var b = 0,
      d = 0,
      e = 0,
      f = 0,
      h = 0,
      j = 0,
      k = 0,
      l = 0,
      m = 0,
      n = 0,
      o = 0,
      p = 0,
      q = 0,
      r = 0,
      s = 0,
      t = 0,
      u = 0;
    b = i;
    i = (i + 3e4) | 0;
    d = b | 0;
    e = c[4886280] | 0;
    if ((e | 0) == 0) {
      f = 3e4;
      h = 0;
      i = b;
      return;
    }
    if (!(+g[((c[4781232] | 0) + 28) >> 2] > 0.0)) {
      f = 3e4;
      h = 0;
      i = b;
      return;
    }
    j = c[4780580] | 0;
    k = c[553086] | 0;
    do {
      if ((j | 0) < (k | 0)) {
        c[4780580] = k;
        l = k;
        m = k;
        n = e;
      } else {
        if ((j | 0) < ((k + 16384) | 0)) {
          l = j;
          m = k;
          n = e;
          break;
        }
        f = 3e4;
        h = 0;
        i = b;
        return;
      }
    } while (0);
    while (1) {
      e = da(c[(n + 8) >> 2] | 0, (16384 - l + m) | 0) | 0;
      k = ((e | 0) / (c[5385960] | 0)) | 0;
      if ((k | 0) == 0) {
        o = 26;
        break;
      }
      e = da(c[(n + 16) >> 2] | 0, c[(n + 12) >> 2] | 0) | 0;
      j = da(e, k) | 0;
      if (j >>> 0 > 3e4 >>> 0) {
        p = (3e4 / (e | 0)) | 0;
        q = 3e4;
      } else {
        p = k;
        q = j;
      }
      j = Zx(n, q, d) | 0;
      if ((j | 0) < (q | 0)) {
        k = c[4886280] | 0;
        r =
          ((j | 0) / (da(c[(k + 16) >> 2] | 0, c[(k + 12) >> 2] | 0) | 0)) | 0;
      } else {
        r = p;
      }
      if ((j | 0) > 0) {
        j = c[4886280] | 0;
        Xw(
          0,
          r,
          c[(j + 8) >> 2] | 0,
          c[(j + 12) >> 2] | 0,
          c[(j + 16) >> 2] | 0,
          d,
          +g[((c[4781232] | 0) + 28) >> 2],
          -1
        );
      } else {
        s = c[4886280] | 0;
        t = (s | 0) == 0;
        if ((a[19545192] | 0) == 0) {
          o = 24;
          break;
        }
        if (!t) {
          Yx(s);
          c[4886280] = 0;
        }
        j = Xx(19545192) | 0;
        c[4886280] = j;
        do {
          if ((j | 0) == 0) {
            Sr(
              120264,
              ((u = i), (i = (i + 8) | 0), (c[u >> 2] = 19545192), u) | 0
            );
            i = u;
          } else {
            if ((c[(j + 16) >> 2] | 0) == 2) {
              if ((c[(j + 8) >> 2] | 0) == 22050) {
                break;
              }
            }
            Sr(
              118856,
              ((u = i), (i = (i + 8) | 0), (c[u >> 2] = 19545192), u) | 0
            );
            i = u;
          }
        } while (0);
        if ((c[4886280] | 0) == 0) {
          o = 26;
          break;
        }
      }
      j = c[4780580] | 0;
      k = c[553086] | 0;
      if ((j | 0) >= ((k + 16384) | 0)) {
        o = 26;
        break;
      }
      l = j;
      m = k;
      n = c[4886280] | 0;
    }
    if ((o | 0) == 24) {
      if (t) {
        f = 3e4;
        h = 0;
        i = b;
        return;
      }
      Yx(s);
      c[4886280] = 0;
      c[4780580] = 0;
      f = 3e4;
      h = 0;
      i = b;
      return;
    } else if ((o | 0) == 26) {
      f = 3e4;
      h = 0;
      i = b;
      return;
    }
  }
  function ax() {
    var b = 0.0,
      d = 0,
      e = 0,
      f = 0,
      h = 0,
      i = 0,
      j = 0,
      k = 0.0,
      l = 0.0,
      m = 0.0,
      n = 0.0;
    if (a[9184] | (a[9176] ^ 1)) {
      return;
    }
    b = +(Bs() | 0);
    bx();
    d = c[553086] | 0;
    if ((d | 0) == (c[46590] | 0)) {
      return;
    }
    c[46590] = d;
    d = 19538976;
    e = 0;
    while (1) {
      f = (d + 52) | 0;
      h = c[f >> 2] | 0;
      do {
        if ((h | 0) != 0) {
          i = (d + 4) | 0;
          j = c[i >> 2] | 0;
          if ((j | 0) == 2147483647) {
            c[i >> 2] = c[4780710];
            break;
          }
          if ((((c[(h + 20) >> 2] | 0) + j) | 0) > (c[4780710] | 0)) {
            break;
          }
          c[f >> 2] = 0;
          c[d >> 2] = c[5145154];
          c[5145154] = d;
        }
      } while (0);
      f = (e + 1) | 0;
      if ((f | 0) < 96) {
        d = (d + 64) | 0;
        e = f;
      } else {
        break;
      }
    }
    k = b - +g[46592];
    l = +(c[5385960] | 0);
    m = +g[((c[4781234] | 0) + 28) >> 2] * l;
    n = +g[((c[4781236] | 0) + 28) >> 2] + (k < 11.0 ? 11.0 : k) * l * 0.01;
    e = c[553086] | 0;
    d = c[5385958] | 0;
    f = (d - 1 + ~~(+(e | 0) + (n < m ? n : m))) & -d;
    d = c[5385957] >> ((c[5385956] | 0) - 1);
    DL();
    rx(((f - e) | 0) >>> 0 > d >>> 0 ? (d + e) | 0 : f);
    CL();
    g[46592] = b;
    return;
  }
  function bx() {
    var a = 0,
      b = 0.0,
      d = 0.0,
      e = 0,
      f = 0;
    a = ((c[5385957] | 0) / (c[5385956] | 0)) | 0;
    if ((cq() | 0) != 0) {
      b = +g[((c[5811772] | 0) + 28) >> 2];
      d = +(c[5385960] | 0) / (b < 1.0e3 ? b : 1.0e3);
      b = +g[5760963] + (d > 1.0 ? d : 1.0);
      e = ~~b;
      c[553086] = e + (c[553086] | 0);
      g[5760963] = b - +(e | 0);
      return;
    }
    e = AL() | 0;
    do {
      if ((e | 0) < (c[7095828] | 0)) {
        c[7095830] = (c[7095830] | 0) + 1;
        if ((c[4780710] | 0) <= 1073741824) {
          break;
        }
        c[7095830] = 0;
        c[4780710] = a;
        Jw();
      }
    } while (0);
    c[7095828] = e;
    f = da(c[7095830] | 0, a) | 0;
    a = ((((e | 0) / (c[5385956] | 0)) | 0) + f) | 0;
    c[553086] = a;
    f = c[5385958] | 0;
    if ((f | 0) < 256) {
      c[4780710] = ~~(
        +(a | 0) +
        +g[((c[4781236] | 0) + 28) >> 2] * +(c[5385960] | 0)
      );
      return;
    } else {
      c[4780710] = a + f;
      return;
    }
  }
  function cx(b, d) {
    b = b | 0;
    d = d | 0;
    var e = 0,
      f = 0,
      g = 0,
      h = 0;
    e = i;
    f = (b | 0) == 0 ? 28378640 : b;
    if ((d | 0) == 0) {
      g = 3;
    } else {
      if ((a[d] | 0) == 0) {
        g = 3;
      } else {
        h = d;
      }
    }
    if ((g | 0) == 3) {
      h = f;
    }
    Tr(
      130792,
      ((g = i), (i = (i + 16) | 0), (c[g >> 2] = f), (c[(g + 8) >> 2] = h), g) |
        0
    );
    i = g;
    if ((a[f] | 0) == 0) {
      d = c[4886280] | 0;
      if ((d | 0) == 0) {
        i = e;
        return;
      }
      Yx(d);
      c[4886280] = 0;
      c[4780580] = 0;
      i = e;
      return;
    }
    TB(19545192, h, 64);
    h = c[4886280] | 0;
    if ((h | 0) != 0) {
      Yx(h);
      c[4886280] = 0;
    }
    h = Xx(f) | 0;
    c[4886280] = h;
    if ((h | 0) == 0) {
      Sr(120264, ((g = i), (i = (i + 8) | 0), (c[g >> 2] = f), g) | 0);
      i = g;
      i = e;
      return;
    }
    do {
      if ((c[(h + 16) >> 2] | 0) == 2) {
        if ((c[(h + 8) >> 2] | 0) != 22050) {
          break;
        }
        i = e;
        return;
      }
    } while (0);
    Sr(118856, ((g = i), (i = (i + 8) | 0), (c[g >> 2] = f), g) | 0);
    i = g;
    i = e;
    return;
  }
  function dx() {
    var a = 0,
      b = 0,
      d = 0,
      e = 0,
      f = 0,
      g = 0,
      h = 0,
      j = 0,
      k = 0,
      l = 0,
      m = 0,
      n = 0;
    a = i;
    b = Bs() | 0;
    d = c[4780712] | 0;
    if ((d | 0) > 1) {
      e = b;
      b = 0;
      f = 1;
      while (1) {
        if ((c[(19124960 + ((f * 100) | 0)) >> 2] | 0) == 0) {
          g = b;
          h = e;
        } else {
          j = c[(19125044 + ((f * 100) | 0)) >> 2] | 0;
          k = (j | 0) < (e | 0);
          g = k ? f : b;
          h = k ? j : e;
        }
        j = (f + 1) | 0;
        if ((j | 0) < (d | 0)) {
          e = h;
          b = g;
          f = j;
        } else {
          l = g;
          break;
        }
      }
    } else {
      l = 0;
    }
    Tr(
      129432,
      ((g = i),
      (i = (i + 8) | 0),
      (c[g >> 2] = 19124980 + ((l * 100) | 0)),
      g) | 0
    );
    i = g;
    g = (19124952 + ((l * 100) | 0)) | 0;
    f = c[g >> 2] | 0;
    if ((f | 0) == 0) {
      m = (19124960 + ((l * 100) | 0)) | 0;
      c[m >> 2] = 0;
      c[g >> 2] = 0;
      i = a;
      return;
    } else {
      n = f;
    }
    while (1) {
      f = c[(n + 2048) >> 2] | 0;
      gx(n);
      if ((f | 0) == 0) {
        break;
      } else {
        n = f;
      }
    }
    m = (19124960 + ((l * 100) | 0)) | 0;
    c[m >> 2] = 0;
    c[g >> 2] = 0;
    i = a;
    return;
  }
  function ex() {
    if (!(a[9176] | 0)) {
      return;
    }
    BL();
    jx();
    a[9176] = 0;
    c[4780712] = 0;
    Ir(128312);
    return;
  }
  function fx(b) {
    b = b | 0;
    var d = 0;
    if ((b | 0) == 0) {
      d = 0;
      return d | 0;
    }
    c[4781234] = gt(127088, 125712, 1) | 0;
    c[4781236] = gt(124784, 123936, 1) | 0;
    c[553494] = gt(123144, 122264, 512) | 0;
    c[553084] = gt(121480, 122264, 512) | 0;
    if ((yL() | 0) == 0) {
      d = 0;
      return d | 0;
    }
    a[9176] = 1;
    a[9184] = 1;
    n$(2170496, 0, 512) | 0;
    c[553086] = 0;
    c[4780710] = 0;
    Jw();
    c[b >> 2] = 56;
    c[(b + 4) >> 2] = 108;
    c[(b + 8) >> 2] = 34;
    c[(b + 12) >> 2] = 74;
    c[(b + 16) >> 2] = 346;
    c[(b + 20) >> 2] = 6;
    c[(b + 24) >> 2] = 68;
    c[(b + 28) >> 2] = 170;
    c[(b + 32) >> 2] = 94;
    c[(b + 36) >> 2] = 44;
    c[(b + 40) >> 2] = 246;
    c[(b + 44) >> 2] = 10;
    c[(b + 48) >> 2] = 96;
    c[(b + 52) >> 2] = 352;
    c[(b + 56) >> 2] = 62;
    c[(b + 60) >> 2] = 216;
    c[(b + 64) >> 2] = 146;
    c[(b + 68) >> 2] = 256;
    c[(b + 72) >> 2] = 100;
    c[(b + 76) >> 2] = 378;
    d = 1;
    return d | 0;
  }
  function gx(a) {
    a = a | 0;
    c[a >> 2] = c[5145152];
    c[5145152] = a;
    c[5115572] = (c[5115572] | 0) + 2060;
    return;
  }
  function hx() {
    var a = 0,
      b = 0,
      d = 0;
    a = c[5145152] | 0;
    if ((a | 0) == 0) {
      while (1) {
        dx();
        b = c[5145152] | 0;
        if ((b | 0) != 0) {
          d = b;
          break;
        }
      }
    } else {
      d = a;
    }
    c[5115572] = (c[5115572] | 0) - 2060;
    c[304336] = (c[304336] | 0) + 2060;
    c[5145152] = c[d >> 2];
    c[(d + 2048) >> 2] = 0;
    return d | 0;
  }
  function ix() {
    var a = 0,
      b = 0,
      d = 0,
      e = 0,
      f = 0,
      g = 0,
      h = 0;
    a = i;
    b = c[((gt(156232, 178152, 33) | 0) + 32) >> 2] | 0;
    d = (b * 1536) | 0;
    e = da(b, 3164160) | 0;
    b = V_(e) | 0;
    c[6924892] = b;
    c[542622] = V_(8192) | 0;
    c[542618] = 0;
    c[5115572] = e;
    e = (d - 1) | 0;
    f = (b + ((e * 2060) | 0)) | 0;
    if ((e | 0) > 0) {
      e = (b + ((d * 2060) | 0)) | 0;
      d = f;
      while (1) {
        c[d >> 2] = e - 4120;
        g = (d - 2060) | 0;
        if (g >>> 0 > b >>> 0) {
          e = d;
          d = g;
        } else {
          h = g;
          break;
        }
      }
    } else {
      h = f;
    }
    c[h >> 2] = 0;
    c[5145152] = f;
    Sr(
      149856,
      ((f = i), (i = (i + 1) | 0), (i = (i + 7) & -8), (c[f >> 2] = 0), f) | 0
    );
    i = f;
    i = a;
    return;
  }
  function jx() {
    W_(c[542622] | 0);
    W_(c[6924892] | 0);
    return;
  }
  function kx(a) {
    a = a | 0;
    var e = 0,
      f = 0,
      g = 0,
      h = 0,
      j = 0,
      k = 0,
      l = 0,
      m = 0,
      n = 0,
      o = 0,
      p = 0,
      q = 0,
      r = 0,
      s = 0.0,
      t = 0,
      u = 0,
      v = 0,
      w = 0,
      x = 0,
      y = 0,
      z = 0,
      A = 0,
      B = 0,
      C = 0,
      D = 0,
      E = 0,
      F = 0,
      G = 0,
      H = 0,
      I = 0;
    e = i;
    i = (i + 24) | 0;
    f = e | 0;
    g = (a + 28) | 0;
    h = Vx(g, f) | 0;
    if ((h | 0) == 0) {
      j = 0;
      i = e;
      return j | 0;
    }
    k = (f + 4) | 0;
    if ((c[k >> 2] | 0) == 1) {
      Tr(131160, ((l = i), (i = (i + 8) | 0), (c[l >> 2] = g), l) | 0);
      i = l;
    }
    m = f | 0;
    if ((c[m >> 2] | 0) != 22050) {
      Tr(120568, ((l = i), (i = (i + 8) | 0), (c[l >> 2] = g), l) | 0);
      i = l;
    }
    l = (f + 8) | 0;
    g = (f + 12) | 0;
    n = ss(da(c[l >> 2] << 2, c[g >> 2] | 0) | 0) | 0;
    o = n;
    c[(a + 92) >> 2] = (Bs() | 0) + 1;
    p = c[l >> 2] | 0;
    do {
      if ((p | 0) == 1) {
        if ((c[(a + 12) >> 2] | 0) != 1) {
          q = 13;
          break;
        }
        c[(a + 16) >> 2] = 1;
        c[a >> 2] = 0;
        r = c[(f + 20) >> 2] | 0;
        s = +(c[m >> 2] | 0) / +(c[5385960] | 0);
        t = ~~(+(c[g >> 2] | 0) / s);
        u = ~~(s * 256.0);
        if ((t | 0) > 0) {
          v = (h + r) | 0;
          if ((c[k >> 2] | 0) == 2) {
            w = 0;
            x = 0;
            while (1) {
              b[(o + (x << 1)) >> 1] = b[(v + ((w >> 8) << 1)) >> 1] | 0;
              y = (x + 1) | 0;
              if ((y | 0) < (t | 0)) {
                w = (w + u) | 0;
                x = y;
              } else {
                break;
              }
            }
          } else {
            x = 0;
            w = 0;
            while (1) {
              b[(o + (w << 1)) >> 1] =
                ((d[(h + ((x >> 8) + r)) | 0] | 0) << 8) ^ -32768;
              v = (w + 1) | 0;
              if ((v | 0) < (t | 0)) {
                x = (x + u) | 0;
                w = v;
              } else {
                break;
              }
            }
          }
        }
        c[(a + 20) >> 2] = t;
        Fw(a, o);
      } else {
        q = 13;
      }
    } while (0);
    if ((q | 0) == 13) {
      c[(a + 16) >> 2] = 0;
      q = a | 0;
      c[q >> 2] = 0;
      o = c[(f + 20) >> 2] | 0;
      s = +(c[m >> 2] | 0) / +(c[5385960] | 0);
      m = ~~(+(c[g >> 2] | 0) / s);
      g = ~~(+(p | 0) * s * 256.0);
      if ((m | 0) > 0) {
        f = (p | 0) > 0;
        w = (c[k >> 2] | 0) == 2;
        k = (h + o) | 0;
        u = 0;
        x = 0;
        r = 0;
        while (1) {
          v = u >> 8;
          y = (u + g) | 0;
          if (f) {
            z = da(r, p) | 0;
            A = 0;
            B = x;
            while (1) {
              C = (A + v) | 0;
              if (w) {
                D = b[(k + (C << 1)) >> 1] | 0;
              } else {
                D = ((d[(h + (C + o)) | 0] | 0) << 8) ^ -32768;
              }
              C = (A + z) & 1023;
              do {
                if ((C | 0) == 0) {
                  E = c[5145152] | 0;
                  if ((E | 0) == 0) {
                    while (1) {
                      dx();
                      F = c[5145152] | 0;
                      if ((F | 0) != 0) {
                        G = F;
                        break;
                      }
                    }
                  } else {
                    G = E;
                  }
                  c[5115572] = (c[5115572] | 0) - 2060;
                  c[304336] = (c[304336] | 0) + 2060;
                  c[5145152] = c[G >> 2];
                  c[(G + 2048) >> 2] = 0;
                  if ((B | 0) == 0) {
                    c[q >> 2] = G;
                    H = G;
                    break;
                  } else {
                    c[(B + 2048) >> 2] = G;
                    H = G;
                    break;
                  }
                } else {
                  H = B;
                }
              } while (0);
              b[(H + (C << 1)) >> 1] = D;
              F = (A + 1) | 0;
              if ((F | 0) < (p | 0)) {
                A = F;
                B = H;
              } else {
                I = H;
                break;
              }
            }
          } else {
            I = x;
          }
          B = (r + 1) | 0;
          if ((B | 0) < (m | 0)) {
            u = y;
            x = I;
            r = B;
          } else {
            break;
          }
        }
      }
      c[(a + 20) >> 2] = m;
    }
    c[(a + 24) >> 2] = c[l >> 2];
    ts(n);
    ts(h);
    j = 1;
    i = e;
    return j | 0;
  }
  function lx() {
    var a = 0,
      b = 0,
      d = 0;
    a = i;
    b = c[304336] | 0;
    Sr(
      109832,
      ((d = i),
      (i = (i + 16) | 0),
      (c[d >> 2] = c[5115572]),
      (c[(d + 8) >> 2] = b),
      d) | 0
    );
    i = d;
    i = a;
    return;
  }
  function mx(a, d) {
    a = a | 0;
    d = d | 0;
    var e = 0,
      f = 0,
      g = 0,
      h = 0,
      i = 0,
      j = 0,
      k = 0;
    c[540150] = 19722400;
    e = c[4780710] | 0;
    if ((e | 0) < (d | 0)) {
      f = e;
    } else {
      return;
    }
    do {
      e = c[5385957] >> 1;
      g = (e - 1) & f;
      h = (a + (g << 2)) | 0;
      c[540152] = h;
      i = (e - g) | 0;
      g = (((i + f) | 0) > (d | 0) ? (d - f) | 0 : i) << 1;
      c[540154] = g;
      i = c[540150] | 0;
      if ((g | 0) > 0) {
        e = 0;
        do {
          j = c[(i + (e << 2)) >> 2] >> 8;
          do {
            if ((j | 0) > 32767) {
              b[(h + (e << 1)) >> 1] = 32767;
            } else {
              if ((j | 0) < -32768) {
                b[(h + (e << 1)) >> 1] = -32768;
                break;
              } else {
                b[(h + (e << 1)) >> 1] = j;
                break;
              }
            }
          } while (0);
          j = e | 1;
          k = c[(i + (j << 2)) >> 2] >> 8;
          do {
            if ((k | 0) > 32767) {
              b[(h + (j << 1)) >> 1] = 32767;
            } else {
              if ((k | 0) < -32768) {
                b[(h + (j << 1)) >> 1] = -32768;
                break;
              } else {
                b[(h + (j << 1)) >> 1] = k;
                break;
              }
            }
          } while (0);
          e = (e + 2) | 0;
        } while ((e | 0) < (g | 0));
      }
      c[540150] = i + (g << 2);
      f = ((g >> 1) + f) | 0;
      if ((cq() | 0) != 0) {
        $p(c[540152] | 0, c[540154] << 1);
      }
    } while ((f | 0) < (d | 0));
    return;
  }
  function nx(d) {
    d = d | 0;
    var e = 0,
      f = 0,
      g = 0,
      h = 0,
      i = 0,
      j = 0,
      k = 0,
      l = 0,
      m = 0,
      n = 0,
      o = 0,
      p = 0,
      q = 0,
      r = 0,
      s = 0,
      t = 0;
    e = c[5385961] | 0;
    f = e;
    do {
      if ((c[((c[553084] | 0) + 32) >> 2] | 0) != 0) {
        g = c[4780710] | 0;
        h = (d - g) | 0;
        if ((h | 0) > 0) {
          i = 0;
        } else {
          break;
        }
        do {
          j = ~~(+W(+((g + i) | 0) * 0.1) * 2.0e4 * 256.0);
          c[(19722404 + (i << 3)) >> 2] = j;
          c[(19722400 + (i << 3)) >> 2] = j;
          i = (i + 1) | 0;
        } while ((i | 0) < (h | 0));
      }
    } while (0);
    i = c[5385959] | 0;
    h = (i | 0) == 16;
    g = c[5385956] | 0;
    if (h & ((g | 0) == 2)) {
      mx(f, d);
      return;
    }
    f = c[4780710] | 0;
    j = da((d - f) | 0, g) | 0;
    d = ((c[5385957] | 0) - 1) | 0;
    k = d & (da(f, g) | 0);
    f = (3 - g) | 0;
    if (h) {
      h = e;
      if ((j | 0) == 0) {
        return;
      } else {
        l = 19722400;
        m = k;
        n = j;
      }
      while (1) {
        g = (n - 1) | 0;
        o = c[l >> 2] >> 8;
        if ((o | 0) > 32767) {
          p = 32767;
        } else {
          p = (o | 0) < -32768 ? -32768 : o & 65535;
        }
        b[(h + (m << 1)) >> 1] = p;
        if ((g | 0) == 0) {
          break;
        } else {
          l = (l + (f << 2)) | 0;
          m = (m + 1) & d;
          n = g;
        }
      }
      return;
    } else {
      if (((i | 0) != 8) | ((j | 0) == 0)) {
        return;
      } else {
        q = 19722400;
        r = k;
        s = j;
      }
      while (1) {
        j = (s - 1) | 0;
        k = c[q >> 2] >> 8;
        if ((k | 0) > 32767) {
          t = -1;
        } else {
          t = (k | 0) < -32768 ? 0 : ((k >>> 8) + 128) & 255;
        }
        a[(e + r) | 0] = t;
        if ((j | 0) == 0) {
          break;
        } else {
          q = (q + (f << 2)) | 0;
          r = (r + 1) & d;
          s = j;
        }
      }
      return;
    }
  }
  function ox(a, d, e, f, g) {
    a = a | 0;
    d = d | 0;
    e = e | 0;
    f = f | 0;
    g = g | 0;
    var h = 0,
      i = 0,
      j = 0,
      k = 0,
      l = 0,
      m = 0,
      n = 0,
      o = 0,
      p = 0,
      q = 0,
      r = 0,
      s = 0,
      t = 0,
      u = 0,
      v = 0;
    h = c[540148] | 0;
    i = da(h, c[(a + 16) >> 2] | 0) | 0;
    j = da(c[(a + 20) >> 2] | 0, h) | 0;
    h = c[d >> 2] | 0;
    if ((f | 0) > 2047) {
      a = (f - 2048) | 0;
      k = a >>> 11;
      l = k << 11;
      m = f;
      n = h;
      do {
        m = (m - 2048) | 0;
        n = c[(n + 2048) >> 2] | 0;
      } while ((m | 0) > 2047);
      o = (k + 1) | 0;
      p = (a - l) | 0;
      q = n;
    } else {
      o = 0;
      p = f;
      q = h;
    }
    if (!(((o | 0) == (c[542620] | 0)) & ((c[542618] | 0) == (d | 0)))) {
      Ew(q, c[542622] | 0);
      c[542620] = o;
      c[542618] = d;
    }
    d = c[542622] | 0;
    if ((e | 0) > 0) {
      r = 0;
      s = q;
      t = p;
    } else {
      return;
    }
    while (1) {
      p = (t + 1) | 0;
      q = b[(d + (t << 1)) >> 1] | 0;
      o = (da(i, q) | 0) >> 8;
      h = (r + g) | 0;
      f = (19722400 + (h << 3)) | 0;
      c[f >> 2] = o + (c[f >> 2] | 0);
      f = (da(j, q) | 0) >> 8;
      q = (19722404 + (h << 3)) | 0;
      c[q >> 2] = f + (c[q >> 2] | 0);
      if ((p | 0) == 2048) {
        q = c[(s + 2048) >> 2] | 0;
        ux(q, c[542622] | 0);
        c[542620] = (c[542620] | 0) + 1;
        u = 0;
        v = q;
      } else {
        u = p;
        v = s;
      }
      p = (r + 1) | 0;
      if ((p | 0) < (e | 0)) {
        r = p;
        s = v;
        t = u;
      } else {
        break;
      }
    }
    return;
  }
  function px(a, d, e, f, h) {
    a = a | 0;
    d = d | 0;
    e = e | 0;
    f = f | 0;
    h = h | 0;
    var i = 0,
      j = 0,
      k = 0,
      l = 0,
      m = 0,
      n = 0,
      o = 0,
      p = 0,
      q = 0,
      r = 0,
      s = 0,
      t = 0,
      u = 0,
      v = 0,
      w = 0;
    i = c[540148] | 0;
    j = da(i, c[(a + 16) >> 2] | 0) | 0;
    k = da(c[(a + 20) >> 2] | 0, i) | 0;
    i = c[d >> 2] | 0;
    if ((c[(a + 56) >> 2] | 0) == 0) {
      l = f;
    } else {
      l = ~~(+(f | 0) * +g[(a + 32) >> 2]);
    }
    if ((l | 0) > 4095) {
      a = (l - 4096) | 0;
      f = a >>> 12;
      m = f << 12;
      n = i;
      o = l;
      do {
        n = c[(n + 2048) >> 2] | 0;
        o = (o - 4096) | 0;
      } while ((o | 0) > 4095);
      p = (f + 1) | 0;
      q = n;
      r = (a - m) | 0;
    } else {
      p = 0;
      q = i;
      r = l;
    }
    if (!(((p | 0) == (c[542620] | 0)) & ((c[542618] | 0) == (d | 0)))) {
      Ew(q, c[542622] | 0);
      c[542620] = p;
      c[542618] = d;
    }
    d = c[542622] | 0;
    if ((e | 0) > 0) {
      s = 0;
      t = q;
      u = r;
    } else {
      return;
    }
    while (1) {
      r = (u + 1) | 0;
      q = b[(d + (u << 1)) >> 1] | 0;
      p = (da(j, q) | 0) >> 8;
      l = (s + h) | 0;
      i = (19722400 + (l << 3)) | 0;
      c[i >> 2] = p + (c[i >> 2] | 0);
      i = (da(k, q) | 0) >> 8;
      q = (19722404 + (l << 3)) | 0;
      c[q >> 2] = i + (c[q >> 2] | 0);
      if ((r | 0) == 4096) {
        q = c[(t + 2048) >> 2] | 0;
        Ew(q, c[542622] | 0);
        c[542620] = (c[542620] | 0) + 1;
        v = 0;
        w = q;
      } else {
        v = r;
        w = t;
      }
      r = (s + 1) | 0;
      if ((r | 0) < (e | 0)) {
        s = r;
        t = w;
        u = v;
      } else {
        break;
      }
    }
    return;
  }
  function qx(a, e, f, h, i) {
    a = a | 0;
    e = e | 0;
    f = f | 0;
    h = h | 0;
    i = i | 0;
    var j = 0,
      k = 0,
      l = 0,
      m = 0,
      n = 0,
      o = 0,
      p = 0,
      q = 0.0,
      r = 0.0,
      s = 0.0,
      t = 0,
      u = 0,
      v = 0,
      w = 0.0,
      x = 0,
      y = 0,
      z = 0,
      A = 0;
    j = c[540148] | 0;
    k = da(j, c[(a + 16) >> 2] | 0) | 0;
    l = da(c[(a + 20) >> 2] | 0, j) | 0;
    j = c[e >> 2] | 0;
    if ((h | 0) > 2047) {
      e = h;
      m = j;
      do {
        n = c[(m + 2048) >> 2] | 0;
        e = (e - 2048) | 0;
        m = (n | 0) == 0 ? j : n;
      } while ((e | 0) > 2047);
      o = h & 2047;
      p = m;
    } else {
      o = h;
      p = j;
    }
    h = (f | 0) > 0;
    if ((c[(a + 56) >> 2] | 0) != 0) {
      if (!h) {
        return;
      }
      q = +g[(a + 28) >> 2];
      a = 0;
      m = p;
      e = p;
      r = +(o | 0);
      while (1) {
        n = b[(19759512 + (d[(e + ~~r) | 0] << 1)) >> 1] | 0;
        s = r + q;
        t = (da(n, k) | 0) >> 8;
        u = (a + i) | 0;
        v = (19722400 + (u << 3)) | 0;
        c[v >> 2] = t + (c[v >> 2] | 0);
        v = (da(n, l) | 0) >> 8;
        n = (19722404 + (u << 3)) | 0;
        c[n >> 2] = (c[n >> 2] | 0) + v;
        if (s < 2048.0) {
          w = s;
          x = e;
          y = m;
        } else {
          v = c[(m + 2048) >> 2] | 0;
          n = (v | 0) == 0 ? j : v;
          w = 0.0;
          x = n;
          y = n;
        }
        n = (a + 1) | 0;
        if ((n | 0) < (f | 0)) {
          a = n;
          m = y;
          e = x;
          r = w;
        } else {
          break;
        }
      }
      return;
    }
    if (!h) {
      return;
    }
    h = 0;
    x = p;
    e = (p + o) | 0;
    while (1) {
      o = b[(19759512 + (d[e] << 1)) >> 1] | 0;
      p = (da(o, k) | 0) >> 8;
      y = (h + i) | 0;
      m = (19722400 + (y << 3)) | 0;
      c[m >> 2] = p + (c[m >> 2] | 0);
      m = (da(o, l) | 0) >> 8;
      o = (19722404 + (y << 3)) | 0;
      c[o >> 2] = m + (c[o >> 2] | 0);
      o = (e + 1) | 0;
      do {
        if ((x | 0) == 0) {
          z = o;
          A = 0;
        } else {
          m = (x + 2048) | 0;
          if ((o | 0) != (m | 0)) {
            z = o;
            A = x;
            break;
          }
          y = c[m >> 2] | 0;
          z = y;
          A = y;
        }
      } while (0);
      o = (h + 1) | 0;
      if ((o | 0) < (f | 0)) {
        h = o;
        x = A;
        e = z;
      } else {
        break;
      }
    }
    return;
  }
  function rx(a) {
    a = a | 0;
    var b = 0,
      d = 0,
      e = 0,
      f = 0,
      h = 0,
      i = 0,
      j = 0,
      k = 0,
      l = 0,
      m = 0,
      n = 0,
      o = 0,
      p = 0,
      q = 0,
      r = 0,
      s = 0,
      t = 0,
      u = 0,
      v = 0;
    if ((c[((c[4781226] | 0) + 32) >> 2] | 0) == 0) {
      b = ~~(+g[((c[553082] | 0) + 28) >> 2] * 255.0);
    } else {
      b = 0;
    }
    c[540148] = b;
    b = c[4780710] | 0;
    if ((b | 0) < (a | 0)) {
      d = b;
    } else {
      return;
    }
    while (1) {
      b = ((a - d) | 0) > 4096 ? (d + 4096) | 0 : a;
      n$(19722400, 0, 32768) | 0;
      e = 0;
      while (1) {
        f = c[(19122320 + (e << 2)) >> 2] | 0;
        do {
          if ((f | 0) >= (d | 0)) {
            h = (b | 0) < (f | 0) ? b : f;
            if ((d | 0) < (h | 0)) {
              i = d;
            } else {
              break;
            }
            do {
              j = i & 16383;
              k = (i - d) | 0;
              l = (19722400 + (k << 3)) | 0;
              c[l >> 2] =
                (c[l >> 2] | 0) +
                (c[(2214032 + (e << 17) + (j << 3)) >> 2] | 0);
              l = (19722404 + (k << 3)) | 0;
              c[l >> 2] =
                (c[l >> 2] | 0) +
                (c[(2214032 + (e << 17) + (j << 3) + 4) >> 2] | 0);
              i = (i + 1) | 0;
            } while ((i | 0) < (h | 0));
          }
        } while (0);
        f = (e + 1) | 0;
        if ((f | 0) < 129) {
          e = f;
        } else {
          m = 19538976;
          n = 0;
          break;
        }
      }
      while (1) {
        e = c[(m + 52) >> 2] | 0;
        do {
          if ((e | 0) != 0) {
            if ((c[(m + 16) >> 2] | 0) < 1) {
              if ((c[(m + 20) >> 2] | 0) < 1) {
                break;
              }
            }
            f = c[4780710] | 0;
            h = (f - (c[(m + 4) >> 2] | 0)) | 0;
            j = (b - f) | 0;
            f = c[(e + 20) >> 2] | 0;
            l = ((h + j) | 0) > (f | 0) ? (f - h) | 0 : j;
            if ((l | 0) <= 0) {
              break;
            }
            j = c[(e + 16) >> 2] | 0;
            if ((j | 0) == 2) {
              ox(m, e, l, h, 0);
              break;
            } else if ((j | 0) == 3) {
              qx(m, e, l, h, 0);
              break;
            } else if ((j | 0) == 1) {
              px(m, e, l, h, 0);
              break;
            } else {
              sx(m, e, l, h, 0);
              break;
            }
          }
        } while (0);
        e = (n + 1) | 0;
        if ((e | 0) < 96) {
          m = (m + 64) | 0;
          n = e;
        } else {
          break;
        }
      }
      e = c[4938832] | 0;
      if ((e | 0) > 0) {
        h = 19863544;
        l = 0;
        j = e;
        while (1) {
          e = c[(h + 52) >> 2] | 0;
          do {
            if ((e | 0) == 0) {
              o = j;
            } else {
              if ((c[(h + 16) >> 2] | 0) == 0) {
                if ((c[(h + 20) >> 2] | 0) == 0) {
                  o = j;
                  break;
                }
              }
              if ((c[e >> 2] | 0) == 0) {
                o = j;
                break;
              }
              f = (e + 20) | 0;
              k = c[f >> 2] | 0;
              if ((k | 0) == 0) {
                o = j;
                break;
              }
              p = (e + 16) | 0;
              q = c[4780710] | 0;
              r = k;
              while (1) {
                k = (q | 0) % (r | 0) | 0;
                s = (b - q) | 0;
                t = ((k + s) | 0) > (r | 0) ? (r - k) | 0 : s;
                if ((t | 0) > 0) {
                  s = c[p >> 2] | 0;
                  do {
                    if ((s | 0) == 2) {
                      ox(h, e, t, k, (q - (c[4780710] | 0)) | 0);
                    } else if ((s | 0) == 1) {
                      px(h, e, t, k, (q - (c[4780710] | 0)) | 0);
                    } else {
                      u = (q - (c[4780710] | 0)) | 0;
                      if ((s | 0) == 3) {
                        qx(h, e, t, k, u);
                        break;
                      } else {
                        sx(h, e, t, k, u);
                        break;
                      }
                    }
                  } while (0);
                  v = (t + q) | 0;
                } else {
                  v = q;
                }
                if ((v | 0) >= (b | 0)) {
                  break;
                }
                q = v;
                r = c[f >> 2] | 0;
              }
              o = c[4938832] | 0;
            }
          } while (0);
          e = (l + 1) | 0;
          if ((e | 0) < (o | 0)) {
            h = (h + 64) | 0;
            l = e;
            j = o;
          } else {
            break;
          }
        }
      }
      nx(b);
      c[4780710] = b;
      if ((b | 0) < (a | 0)) {
        d = b;
      } else {
        break;
      }
    }
    return;
  }
  function sx(a, d, e, f, h) {
    a = a | 0;
    d = d | 0;
    e = e | 0;
    f = f | 0;
    h = h | 0;
    var i = 0,
      j = 0,
      k = 0,
      l = 0,
      m = 0,
      n = 0,
      o = 0,
      p = 0,
      q = 0.0,
      r = 0.0,
      s = 0.0,
      t = 0.0,
      u = 0,
      v = 0.0,
      w = 0,
      x = 0,
      y = 0,
      z = 0,
      A = 0.0,
      B = 0.0,
      C = 0.0,
      D = 0,
      E = 0,
      F = 0.0,
      G = 0,
      H = 0,
      I = 0.0,
      J = 0.0,
      K = 0,
      L = 0,
      M = 0.0,
      N = 0.0,
      O = 0.0,
      P = 0.0,
      Q = 0,
      R = 0,
      S = 0.0,
      T = 0,
      U = 0,
      V = 0,
      W = 0,
      X = 0;
    i = (c[(a + 56) >> 2] | 0) == 0;
    if (i) {
      j = f;
    } else {
      j = ~~(+(f | 0) * +g[(a + 32) >> 2]);
    }
    f = (d + 24) | 0;
    k = c[f >> 2] | 0;
    l = j << ((k | 0) == 2);
    j = c[d >> 2] | 0;
    if ((l | 0) > 1023) {
      d = j;
      m = l;
      do {
        n = c[(d + 2048) >> 2] | 0;
        m = (m - 1024) | 0;
        d = (n | 0) == 0 ? j : n;
      } while ((m | 0) > 1023);
      o = d;
      p = l & 1023;
    } else {
      o = j;
      p = l;
    }
    do {
      if (!i) {
        q = +g[(a + 28) >> 2];
        if (q == 1.0) {
          break;
        }
        l = c[540148] | 0;
        r = +(da(l, c[(a + 16) >> 2] | 0) | 0);
        s = +(da(c[(a + 20) >> 2] | 0, l) | 0);
        if ((e | 0) <= 0) {
          return;
        }
        l = o;
        d = o | 0;
        t = +(p | 0);
        m = 0;
        n = k;
        while (1) {
          u = ~~t;
          v = t + q * +(n | 0);
          w = ~~v;
          if ((u | 0) < (w | 0)) {
            if ((n | 0) == 2) {
              x = u;
              y = l;
              z = d;
              A = v;
              B = 0.0;
              C = 0.0;
              while (1) {
                if ((x | 0) == 1024) {
                  D = c[(y + 2048) >> 2] | 0;
                  E = (D | 0) == 0 ? j : D;
                  F = A + -1024.0;
                  G = E | 0;
                  H = E;
                } else {
                  F = A;
                  G = z;
                  H = y;
                }
                I = C + +(b[(G + ((x & 1023) << 1)) >> 1] | 0);
                J = B + +(b[(G + (((x + 1) & 1023) << 1)) >> 1] | 0);
                E = (x + 2) | 0;
                if ((E | 0) < (w | 0)) {
                  x = E;
                  y = H;
                  z = G;
                  A = F;
                  B = J;
                  C = I;
                } else {
                  K = H;
                  L = G;
                  M = F;
                  N = J;
                  O = I;
                  break;
                }
              }
            } else {
              z = u;
              y = l;
              x = d;
              C = v;
              B = 0.0;
              A = 0.0;
              while (1) {
                if ((z | 0) == 1024) {
                  E = c[(y + 2048) >> 2] | 0;
                  D = (E | 0) == 0 ? j : E;
                  P = C + -1024.0;
                  Q = D | 0;
                  R = D;
                } else {
                  P = C;
                  Q = x;
                  R = y;
                }
                I = +(b[(Q + ((z & 1023) << 1)) >> 1] | 0);
                J = A + I;
                S = B + I;
                D = (z + n) | 0;
                if ((D | 0) < (w | 0)) {
                  z = D;
                  y = R;
                  x = Q;
                  C = P;
                  B = S;
                  A = J;
                } else {
                  K = R;
                  L = Q;
                  M = P;
                  N = S;
                  O = J;
                  break;
                }
              }
            }
          } else {
            K = l;
            L = d;
            M = v;
            N = 0.0;
            O = 0.0;
          }
          A = +(((((w - u) << 8) | 0) / (n | 0)) | 0 | 0);
          x = (m + h) | 0;
          y = (19722400 + (x << 3)) | 0;
          c[y >> 2] = ~~((r * O) / A + +(c[y >> 2] | 0));
          y = (19722404 + (x << 3)) | 0;
          c[y >> 2] = ~~((s * N) / A + +(c[y >> 2] | 0));
          y = (m + 1) | 0;
          if ((y | 0) >= (e | 0)) {
            break;
          }
          l = K;
          d = L;
          t = M;
          m = y;
          n = c[f >> 2] | 0;
        }
        return;
      }
    } while (0);
    L = c[540148] | 0;
    K = da(L, c[(a + 16) >> 2] | 0) | 0;
    Q = da(c[(a + 20) >> 2] | 0, L) | 0;
    if ((e | 0) <= 0) {
      return;
    }
    L = o;
    a = o | 0;
    o = 0;
    R = p;
    while (1) {
      p = (R + 1) | 0;
      j = b[(a + (R << 1)) >> 1] | 0;
      G = (da(K, j) | 0) >> 8;
      H = (o + h) | 0;
      k = (19722400 + (H << 3)) | 0;
      c[k >> 2] = G + (c[k >> 2] | 0);
      if ((c[f >> 2] | 0) == 2) {
        T = (R + 2) | 0;
        U = b[(a + (p << 1)) >> 1] | 0;
      } else {
        T = p;
        U = j;
      }
      j = (da(Q, U) | 0) >> 8;
      p = (19722404 + (H << 3)) | 0;
      c[p >> 2] = (c[p >> 2] | 0) + j;
      if ((T | 0) == 1024) {
        j = c[(L + 2048) >> 2] | 0;
        V = 0;
        W = j | 0;
        X = j;
      } else {
        V = T;
        W = a;
        X = L;
      }
      j = (o + 1) | 0;
      if ((j | 0) < (e | 0)) {
        L = X;
        a = W;
        o = j;
        R = V;
      } else {
        break;
      }
    }
    return;
  }
  function tx(a, b, c) {
    a = a | 0;
    b = b | 0;
    c = c | 0;
    var d = 0,
      e = 0,
      f = 0,
      h = 0,
      j = 0,
      k = 0,
      l = 0.0,
      m = 0,
      n = 0,
      o = 0,
      p = 0,
      q = 0.0,
      r = 0.0,
      s = 0.0,
      t = 0.0,
      u = 0,
      v = 0.0,
      w = 0.0,
      x = 0.0,
      y = 0.0,
      z = 0,
      A = 0,
      B = 0,
      C = 0.0,
      D = 0;
    d = i;
    i = (i + 16392) | 0;
    e = d | 0;
    n$(e | 0, 0, 16388) | 0;
    if (b >>> 0 < 4 >>> 0) {
      f = 16388;
      h = 0;
      i = d;
      return;
    }
    j = b >>> 1;
    do {
      if ((c | 0) > -1) {
        k = (b - 3) | 0;
        l = +g[a >> 2];
        m = (a + 4) | 0;
        if ((k | 0) == 0) {
          n = 1;
        } else {
          o = 1;
          p = 1;
          q = l;
          r = +g[m >> 2];
          while (1) {
            s = q;
            t = r;
            u = (p + 2) | 0;
            v = +g[(a + ((p + 1) << 2)) >> 2];
            w = v;
            x = +g[(a + (u << 2)) >> 2];
            y = x;
            g[(e + (o << 2)) >> 2] =
              s * 0.4829629131445341 +
              t * 0.8365163037378079 +
              w * 0.2241438680420134 +
              y * -0.1294095225512604;
            g[(e + ((o + j) << 2)) >> 2] =
              s * -0.1294095225512604 -
              t * 0.2241438680420134 +
              w * 0.8365163037378079 -
              y * 0.4829629131445341;
            z = (o + 1) | 0;
            if (u >>> 0 > k >>> 0) {
              n = z;
              break;
            } else {
              o = z;
              p = u;
              q = v;
              r = x;
            }
          }
        }
        r = +g[(a + ((b - 2) << 2)) >> 2];
        q = +g[(a + ((b - 1) << 2)) >> 2];
        x = l;
        v = +g[m >> 2];
        g[(e + (n << 2)) >> 2] =
          r * 0.4829629131445341 +
          q * 0.8365163037378079 +
          x * 0.2241438680420134 +
          v * -0.1294095225512604;
        g[(e + ((n + j) << 2)) >> 2] =
          r * -0.1294095225512604 -
          q * 0.2241438680420134 +
          x * 0.8365163037378079 -
          v * 0.4829629131445341;
      } else {
        v = +g[(a + ((j - 1) << 2)) >> 2];
        x = +g[(a + ((b - 1) << 2)) >> 2];
        q = +g[a >> 2];
        r = q;
        y = +g[(a + (j << 2)) >> 2];
        g[(e + 4) >> 2] =
          v * 0.2241438680420134 +
          x * 0.8365163037378079 +
          r * 0.4829629131445341 +
          y * -0.1294095225512604;
        g[(e + 8) >> 2] =
          v * -0.1294095225512604 -
          x * 0.4829629131445341 +
          r * 0.8365163037378079 -
          y * 0.2241438680420134;
        if (b >>> 0 > 3 >>> 0) {
          A = 1;
          B = 3;
          C = q;
        } else {
          break;
        }
        while (1) {
          q = C;
          p = (A + j) | 0;
          y = +g[(a + ((p - 1) << 2)) >> 2];
          o = (A + 1) | 0;
          r = +g[(a + (A << 2)) >> 2];
          x = r;
          v = +g[(a + (p << 2)) >> 2];
          g[(e + (B << 2)) >> 2] =
            q * 0.2241438680420134 +
            y * 0.8365163037378079 +
            x * 0.4829629131445341 +
            v * -0.1294095225512604;
          g[(e + ((B + 1) << 2)) >> 2] =
            q * -0.1294095225512604 -
            y * 0.4829629131445341 +
            x * 0.8365163037378079 -
            v * 0.2241438680420134;
          if (o >>> 0 < j >>> 0) {
            A = o;
            B = (B + 2) | 0;
            C = r;
          } else {
            break;
          }
        }
      }
    } while (0);
    if ((b | 0) == 0) {
      f = 16388;
      h = 0;
      i = d;
      return;
    } else {
      D = 1;
    }
    do {
      g[(a + ((D - 1) << 2)) >> 2] = +g[(e + (D << 2)) >> 2];
      D = (D + 1) | 0;
    } while (!(D >>> 0 > b >>> 0));
    f = 16388;
    h = 0;
    i = d;
    return;
  }
  function ux(a, e) {
    a = a | 0;
    e = e | 0;
    var f = 0,
      h = 0,
      j = 0,
      k = 0,
      l = 0,
      m = 0,
      n = 0,
      o = 0,
      p = 0;
    f = i;
    i = (i + 16392) | 0;
    h = f | 0;
    j = c[(a + 2052) >> 2] | 0;
    k = a;
    a = (j | 0) > 0;
    if (a) {
      l = 0;
      do {
        g[(h + (l << 2)) >> 2] = +(
          b[(19759512 + (d[(k + l) | 0] << 1)) >> 1] | 0
        );
        l = (l + 1) | 0;
      } while ((l | 0) < (j | 0));
    }
    l = h | 0;
    k = j >>> 2;
    if (!(k >>> 0 > j >>> 0)) {
      m = k;
      do {
        tx(l, m, -1);
        m = m << 1;
      } while (!(m >>> 0 > j >>> 0));
    }
    if (((e | 0) == 0) | (a ^ 1)) {
      n = 16388;
      o = 0;
      i = f;
      return;
    } else {
      p = 0;
    }
    do {
      b[(e + (p << 1)) >> 1] = ~~+g[(h + (p << 2)) >> 2];
      p = (p + 1) | 0;
    } while ((p | 0) < (j | 0));
    n = 16388;
    o = 0;
    i = f;
    return;
  }
  function vx(a, b, d, e) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    e = e | 0;
    var f = 0;
    f = c[540185] | 0;
    if ((f | 0) == 0) {
      return;
    }
    Yk[f & 255](a, b, d, e);
    return;
  }
  function wx(a, b) {
    a = a | 0;
    b = b | 0;
    var d = 0;
    d = c[540186] | 0;
    if ((d | 0) == 0) {
      return;
    }
    hk[d & 255](a, b);
    return;
  }
  function xx(a, b) {
    a = a | 0;
    b = b | 0;
    var d = 0;
    d = c[540187] | 0;
    if ((d | 0) == 0) {
      return;
    }
    hk[d & 255](a, b);
    return;
  }
  function yx() {
    var a = 0;
    a = c[540188] | 0;
    if ((a | 0) == 0) {
      return;
    }
    Uk[a & 511]();
    return;
  }
  function zx(a, b, d, e, f, g, h, i) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    e = e | 0;
    f = f | 0;
    g = g | 0;
    h = +h;
    i = i | 0;
    var j = 0;
    j = c[540189] | 0;
    if ((j | 0) == 0) {
      return;
    }
    dk[j & 7](a, b, d, e, f, g, h, i);
    return;
  }
  function Ax() {
    var a = 0;
    a = c[540190] | 0;
    if ((a | 0) == 0) {
      return;
    }
    Uk[a & 511]();
    return;
  }
  function Bx(a) {
    a = a | 0;
    var b = 0;
    b = c[540191] | 0;
    if ((b | 0) == 0) {
      return;
    }
    vk[b & 511](a);
    return;
  }
  function Cx(a, b, d, e) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    e = e | 0;
    var f = 0;
    f = c[540192] | 0;
    if ((f | 0) == 0) {
      return;
    }
    Yk[f & 255](a, b, d, e);
    return;
  }
  function Dx(a, b, d, e) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    e = e | 0;
    var f = 0;
    f = c[540193] | 0;
    if ((f | 0) == 0) {
      return;
    }
    Yk[f & 255](a, b, d, e);
    return;
  }
  function Ex(a) {
    a = a | 0;
    var b = 0;
    b = c[540194] | 0;
    if ((b | 0) == 0) {
      return;
    }
    vk[b & 511](a);
    return;
  }
  function Fx(a, b, d, e) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    e = e | 0;
    var f = 0;
    f = c[540195] | 0;
    if ((f | 0) == 0) {
      return;
    }
    Yk[f & 255](a, b, d, e);
    return;
  }
  function Gx(a, b) {
    a = a | 0;
    b = b | 0;
    var d = 0;
    d = c[540196] | 0;
    if ((d | 0) == 0) {
      return;
    }
    hk[d & 255](a, b);
    return;
  }
  function Hx() {
    var a = 0,
      b = 0,
      d = 0,
      e = 0;
    a = c[4781226] | 0;
    b = (a + 32) | 0;
    d = (c[((c[4781230] | 0) + 32) >> 2] | 0) != 0;
    do {
      if ((c[b >> 2] | 0) == 0) {
        if (d) {
          if ((c[((c[5457486] | 0) + 32) >> 2] | 0) == 0) {
            e = 9;
          }
        } else {
          e = 9;
        }
        if ((e | 0) == 9) {
          if ((c[((c[4781228] | 0) + 32) >> 2] | 0) == 0) {
            break;
          }
          if ((c[((c[5450804] | 0) + 32) >> 2] | 0) == 0) {
            break;
          }
        }
        c[b >> 2] = 1;
        c[(a + 20) >> 2] = 1;
      } else {
        if (d) {
          if ((c[((c[5457486] | 0) + 32) >> 2] | 0) != 0) {
            break;
          }
        }
        if ((c[((c[4781228] | 0) + 32) >> 2] | 0) != 0) {
          if ((c[((c[5450804] | 0) + 32) >> 2] | 0) != 0) {
            break;
          }
        }
        c[b >> 2] = 0;
        c[(a + 20) >> 2] = 1;
      }
    } while (0);
    a = c[540197] | 0;
    if ((a | 0) == 0) {
      return;
    }
    Uk[a & 511]();
    return;
  }
  function Ix() {
    var a = 0;
    a = c[540198] | 0;
    if ((a | 0) == 0) {
      return;
    }
    Uk[a & 511]();
    return;
  }
  function Jx() {
    var a = 0;
    a = c[540199] | 0;
    if ((a | 0) == 0) {
      return;
    }
    Uk[a & 511]();
    return;
  }
  function Kx(a, b) {
    a = a | 0;
    b = b | 0;
    var d = 0,
      e = 0;
    d = c[540200] | 0;
    if ((d | 0) == 0) {
      e = 0;
      return e | 0;
    }
    e = Kk[d & 255](a, b) | 0;
    return e | 0;
  }
  function Lx() {
    var a = 0;
    a = c[540201] | 0;
    if ((a | 0) == 0) {
      return;
    }
    Uk[a & 511]();
    return;
  }
  function Mx() {
    var a = 0;
    a = c[540202] | 0;
    if ((a | 0) == 0) {
      return;
    }
    Uk[a & 511]();
    return;
  }
  function Nx() {
    var a = 0;
    a = c[540203] | 0;
    if ((a | 0) == 0) {
      return;
    }
    Uk[a & 511]();
    return;
  }
  function Ox() {
    var a = 0,
      b = 0,
      d = 0,
      e = 0,
      f = 0,
      g = 0;
    a = i;
    if (!(((c[540200] | 0) != 0) & ((c[540186] | 0) != 0))) {
      i = a;
      return;
    }
    b = nr() | 0;
    if ((b | 0) < 2) {
      Sr(
        155800,
        ((d = i), (i = (i + 1) | 0), (i = (i + 7) & -8), (c[d >> 2] = 0), d) | 0
      );
      i = d;
      i = a;
      return;
    } else {
      e = 1;
    }
    do {
      d = c[540200] | 0;
      f = or(e) | 0;
      g = Kk[d & 255](f, 0) | 0;
      if ((g | 0) != 0) {
        hk[c[540186] & 255](g, 6);
      }
      e = (e + 1) | 0;
    } while ((e | 0) < (b | 0));
    i = a;
    return;
  }
  function Px() {
    var a = 0,
      b = 0,
      d = 0,
      e = 0,
      f = 0;
    a = i;
    if ((c[540187] | 0) == 0) {
      i = a;
      return;
    }
    b = nr() | 0;
    if ((b | 0) == 3) {
      d = c[540187] | 0;
      e = or(1) | 0;
      f = or(2) | 0;
      hk[d & 255](e, f);
      i = a;
      return;
    } else if ((b | 0) == 2) {
      b = c[540187] | 0;
      f = or(1) | 0;
      hk[b & 255](f, 0);
      i = a;
      return;
    } else {
      Sr(
        178104,
        ((f = i), (i = (i + 1) | 0), (i = (i + 7) & -8), (c[f >> 2] = 0), f) | 0
      );
      i = f;
      i = a;
      return;
    }
  }
  function Qx() {
    var a = 0;
    a = c[540188] | 0;
    if ((a | 0) == 0) {
      return;
    }
    Uk[a & 511]();
    return;
  }
  function Rx() {
    var a = 0,
      b = 0,
      d = 0,
      e = 0;
    a = i;
    Sr(
      149800,
      ((b = i), (i = (i + 1) | 0), (i = (i + 7) & -8), (c[b >> 2] = 0), b) | 0
    );
    i = b;
    c[553082] = gt(131128, 120552, 1) | 0;
    c[4781232] = gt(109816, 100312, 1) | 0;
    c[4781226] = gt(58184, 51504, 64) | 0;
    c[4883770] = gt(46264, 185416, 1) | 0;
    c[4886314] = gt(181464, 28378712, 64) | 0;
    c[4781230] = gt(173264, 51504, 1) | 0;
    c[4781228] = gt(170144, 51504, 1) | 0;
    if ((c[((gt(167088, 185416, 0) | 0) + 32) >> 2] | 0) == 0) {
      Sr(
        163464,
        ((b = i), (i = (i + 1) | 0), (i = (i + 7) & -8), (c[b >> 2] = 0), b) | 0
      );
      i = b;
      Sr(
        134520,
        ((b = i), (i = (i + 1) | 0), (i = (i + 7) & -8), (c[b >> 2] = 0), b) | 0
      );
      i = b;
      i = a;
      return;
    }
    Tx();
    Gr(160704, 38);
    Gr(158120, 78);
    Gr(155576, 122);
    Gr(153552, 276);
    Gr(151664, 92);
    Gr(149312, 104);
    if ((c[((gt(146736, 185416, 1) | 0) + 32) >> 2] | 0) == 0) {
      d = 5;
    } else {
      e = qy(2160736) | 0;
      kt(181464, 144336);
      if ((e | 0) == 0) {
        d = 5;
      }
    }
    do {
      if ((d | 0) == 5) {
        e = fx(2160736) | 0;
        kt(181464, 141712);
        if ((e | 0) != 0) {
          break;
        }
        Sr(
          136e3,
          ((b = i), (i = (i + 1) | 0), (i = (i + 7) & -8), (c[b >> 2] = 0), b) |
            0
        );
        i = b;
        Sr(
          134520,
          ((b = i), (i = (i + 1) | 0), (i = (i + 7) & -8), (c[b >> 2] = 0), b) |
            0
        );
        i = b;
        i = a;
        return;
      }
    } while (0);
    d = c[540202] | 0;
    if (
      ((c[540184] | 0) == 0) |
      ((c[540185] | 0) == 0) |
      ((c[540186] | 0) == 0) |
      ((c[540187] | 0) == 0) |
      ((c[540188] | 0) == 0) |
      ((c[540189] | 0) == 0) |
      ((c[540190] | 0) == 0) |
      ((c[540191] | 0) == 0) |
      ((c[540192] | 0) == 0) |
      ((c[540193] | 0) == 0) |
      ((c[540194] | 0) == 0) |
      ((c[540195] | 0) == 0) |
      ((c[540196] | 0) == 0) |
      ((c[540197] | 0) == 0) |
      ((c[540198] | 0) == 0) |
      ((c[540199] | 0) == 0) |
      ((c[540200] | 0) == 0) |
      ((c[540201] | 0) == 0) |
      ((d | 0) == 0) |
      ((c[540203] | 0) == 0)
    ) {
      Ur(
        0,
        139416,
        ((b = i), (i = (i + 1) | 0), (i = (i + 7) & -8), (c[b >> 2] = 0), b) | 0
      );
      i = b;
    }
    Uk[d & 511]();
    Sr(
      137504,
      ((b = i), (i = (i + 1) | 0), (i = (i + 7) & -8), (c[b >> 2] = 0), b) | 0
    );
    i = b;
    Sr(
      134520,
      ((b = i), (i = (i + 1) | 0), (i = (i + 7) & -8), (c[b >> 2] = 0), b) | 0
    );
    i = b;
    i = a;
    return;
  }
  function Sx() {
    var a = 0;
    a = c[540184] | 0;
    if ((a | 0) != 0) {
      Uk[a & 511]();
    }
    n$(2160736 | 0, 0 | 0, 80 | 0) | 0;
    Ir(160704);
    Ir(158120);
    Ir(155576);
    Ir(153552);
    Ir(151664);
    Ir(149312);
    Ux();
    return;
  }
  function Tx() {
    c[2693] = 0;
    c[291] = 10752;
    c[5458856] = 1144;
    return;
  }
  function Ux() {
    c[5458856] = 0;
    return;
  }
  function Vx(a, b) {
    a = a | 0;
    b = b | 0;
    return Wx(a, b) | 0;
  }
  function Wx(b, d) {
    b = b | 0;
    d = d | 0;
    var e = 0,
      f = 0,
      g = 0,
      h = 0,
      j = 0,
      k = 0,
      l = 0,
      m = 0,
      n = 0,
      o = 0,
      p = 0,
      q = 0,
      r = 0,
      s = 0,
      t = 0,
      u = 0,
      v = 0;
    e = i;
    i = (i + 128) | 0;
    f = e | 0;
    g = (e + 64) | 0;
    TB(f, b, 64);
    h = RB(f) | 0;
    a: do {
      if ((a[h] | 0) == 0) {
        j = 0;
        k = 0;
        l = 10;
      } else {
        m = c[5458856] | 0;
        if ((m | 0) == 0) {
          break;
        } else {
          n = m;
        }
        while (1) {
          if ((VB(h, c[n >> 2] | 0) | 0) == 0) {
            break;
          }
          m = c[(n + 20) >> 2] | 0;
          if ((m | 0) == 0) {
            j = 0;
            k = 0;
            l = 10;
            break a;
          } else {
            n = m;
          }
        }
        if ((d | 0) == 0) {
          o = jk[c[(n + 8) >> 2] & 255](f) | 0;
        } else {
          o = Kk[c[(n + 4) >> 2] & 255](f, d) | 0;
        }
        if ((o | 0) == 0) {
          SB(b, f, 64);
          j = 1;
          k = n;
          l = 10;
          break;
        } else {
          p = o;
          q = 64;
          r = 0;
          s = 64;
          t = 0;
          i = e;
          return p | 0;
        }
      }
    } while (0);
    b: do {
      if ((l | 0) == 10) {
        o = c[5458856] | 0;
        if ((o | 0) == 0) {
          break;
        }
        c: do {
          if ((d | 0) == 0) {
            n = o;
            while (1) {
              if ((n | 0) != (k | 0)) {
                h = c[n >> 2] | 0;
                $B(
                  g,
                  64,
                  177664,
                  ((u = i),
                  (i = (i + 16) | 0),
                  (c[u >> 2] = f),
                  (c[(u + 8) >> 2] = h),
                  u) | 0
                ) | 0;
                i = u;
                h = jk[c[(n + 8) >> 2] & 255](g) | 0;
                if ((h | 0) != 0) {
                  v = h;
                  break c;
                }
              }
              n = c[(n + 20) >> 2] | 0;
              if ((n | 0) == 0) {
                break b;
              }
            }
          } else {
            n = o;
            while (1) {
              if ((n | 0) != (k | 0)) {
                h = c[n >> 2] | 0;
                $B(
                  g,
                  64,
                  177664,
                  ((u = i),
                  (i = (i + 16) | 0),
                  (c[u >> 2] = f),
                  (c[(u + 8) >> 2] = h),
                  u) | 0
                ) | 0;
                i = u;
                h = Kk[c[(n + 4) >> 2] & 255](g, d) | 0;
                if ((h | 0) != 0) {
                  v = h;
                  break c;
                }
              }
              n = c[(n + 20) >> 2] | 0;
              if ((n | 0) == 0) {
                break b;
              }
            }
          }
        } while (0);
        if ((j | 0) == 0) {
          p = v;
          q = 64;
          r = 0;
          s = 64;
          t = 0;
          i = e;
          return p | 0;
        }
        Tr(
          149720,
          ((u = i),
          (i = (i + 16) | 0),
          (c[u >> 2] = b),
          (c[(u + 8) >> 2] = g),
          u) | 0
        );
        i = u;
        p = v;
        q = 64;
        r = 0;
        s = 64;
        t = 0;
        i = e;
        return p | 0;
      }
    } while (0);
    Sr(
      131024,
      ((u = i),
      (i = (i + 16) | 0),
      (c[u >> 2] = (d | 0) != 0 ? 120544 : 109784),
      (c[(u + 8) >> 2] = b),
      u) | 0
    );
    i = u;
    p = 0;
    q = 64;
    r = 0;
    s = 64;
    t = 0;
    i = e;
    return p | 0;
  }
  function Xx(a) {
    a = a | 0;
    return Wx(a, 0) | 0;
  }
  function Yx(a) {
    a = a | 0;
    vk[c[((c[a >> 2] | 0) + 16) >> 2] & 511](a);
    return;
  }
  function Zx(a, b, d) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    return rk[c[((c[a >> 2] | 0) + 12) >> 2] & 63](a, b, d) | 0;
  }
  function _x(a, b) {
    a = a | 0;
    b = b | 0;
    var d = 0,
      e = 0,
      f = 0,
      g = 0,
      h = 0;
    d = i;
    i = (i + 8) | 0;
    e = d | 0;
    f = cu(a, e, 1) | 0;
    if ((c[e >> 2] | 0) == 0) {
      Tr(154096, ((g = i), (i = (i + 8) | 0), (c[g >> 2] = a), g) | 0);
      i = g;
      h = 0;
      i = d;
      return h | 0;
    }
    g = gs(44) | 0;
    if ((g | 0) == 0) {
      Yt(c[e >> 2] | 0);
      h = 0;
      i = d;
      return h | 0;
    } else {
      c[g >> 2] = b;
      c[(g + 4) >> 2] = c[e >> 2];
      c[(g + 32) >> 2] = f;
      h = g;
      i = d;
      return h | 0;
    }
    return 0;
  }
  function $x(a) {
    a = a | 0;
    Yt(c[((c[a >> 2] | 0) + 4) >> 2] | 0);
    es(c[a >> 2] | 0);
    c[a >> 2] = 0;
    return;
  }
  function ay(a, b) {
    a = a | 0;
    b = b | 0;
    var d = 0,
      e = 0,
      f = 0,
      g = 0,
      h = 0;
    d = i;
    i = (i + 8) | 0;
    e = d | 0;
    cu(a, e, 1) | 0;
    f = c[e >> 2] | 0;
    if ((f | 0) == 0) {
      g = 0;
      i = d;
      return g | 0;
    }
    if ((ey(f, b) | 0) == 0) {
      Yt(c[e >> 2] | 0);
      Sr(177592, ((h = i), (i = (i + 8) | 0), (c[h >> 2] = a), h) | 0);
      i = h;
      g = 0;
      i = d;
      return g | 0;
    }
    f = (b + 16) | 0;
    b = ss(c[f >> 2] | 0) | 0;
    if ((b | 0) == 0) {
      Yt(c[e >> 2] | 0);
      Sr(149664, ((h = i), (i = (i + 8) | 0), (c[h >> 2] = a), h) | 0);
      i = h;
      g = 0;
      i = d;
      return g | 0;
    } else {
      fu(b, c[f >> 2] | 0, c[e >> 2] | 0) | 0;
      Yt(c[e >> 2] | 0);
      g = b;
      i = d;
      return g | 0;
    }
    return 0;
  }
  function by(a) {
    a = a | 0;
    var b = 0,
      d = 0,
      e = 0,
      f = 0;
    b = i;
    i = (i + 8) | 0;
    d = b | 0;
    e = _x(a, 1144) | 0;
    c[d >> 2] = e;
    do {
      if ((e | 0) == 0) {
        f = 0;
      } else {
        if ((ey(c[(e + 4) >> 2] | 0, (e + 8) | 0) | 0) == 0) {
          $x(d);
          f = 0;
          break;
        } else {
          f = c[d >> 2] | 0;
          break;
        }
      }
    } while (0);
    i = b;
    return f | 0;
  }
  function cy(a, b, d) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    var e = 0,
      f = 0,
      g = 0,
      h = 0,
      i = 0;
    e = (a + 36) | 0;
    f = c[e >> 2] | 0;
    g = ((c[(a + 24) >> 2] | 0) - f) | 0;
    if ((g | 0) < 1) {
      h = 0;
      return h | 0;
    }
    i = (g | 0) < (b | 0) ? g : b;
    c[e >> 2] = i + f;
    fu(d, i, c[(a + 4) >> 2] | 0) | 0;
    h = i;
    return h | 0;
  }
  function dy(a) {
    a = a | 0;
    var b = 0,
      d = 0;
    b = i;
    i = (i + 8) | 0;
    d = b | 0;
    c[d >> 2] = a;
    $x(d);
    i = b;
    return;
  }
  function ey(a, d) {
    a = a | 0;
    d = d | 0;
    var e = 0,
      f = 0,
      g = 0,
      h = 0,
      j = 0,
      k = 0,
      l = 0,
      m = 0;
    e = i;
    i = (i + 64) | 0;
    f = e | 0;
    g = (e + 24) | 0;
    h = (e + 32) | 0;
    fu((e + 48) | 0, 12, a) | 0;
    j = fy(a, 130992) | 0;
    if ((j | 0) < 0) {
      Sr(
        120488,
        ((k = i), (i = (i + 1) | 0), (i = (i + 7) & -8), (c[k >> 2] = 0), k) | 0
      );
      i = k;
      l = 0;
      i = e;
      return l | 0;
    }
    fu((e + 40) | 0, 2, a) | 0;
    fu(h, 2, a) | 0;
    m = (d + 8) | 0;
    c[m >> 2] = b[h >> 1] | 0;
    fu(g, 4, a) | 0;
    c[d >> 2] = c[g >> 2];
    fu((e + 16) | 0, 4, a) | 0;
    fu((e + 8) | 0, 2, a) | 0;
    fu(f, 2, a) | 0;
    g = b[f >> 1] | 0;
    if ((g << 16) >> 16 < 8) {
      Sr(
        109664,
        ((k = i), (i = (i + 1) | 0), (i = (i + 7) & -8), (c[k >> 2] = 0), k) | 0
      );
      i = k;
      l = 0;
      i = e;
      return l | 0;
    }
    f = (d + 4) | 0;
    c[f >> 2] = ((((g << 16) >> 16) | 0) / 8) | 0;
    c[(d + 20) >> 2] = 0;
    if ((j | 0) > 16) {
      iu(a, (j - 16) | 0, 0) | 0;
    }
    j = fy(a, 100248) | 0;
    c[(d + 16) >> 2] = j;
    if ((j | 0) < 0) {
      Sr(
        58136,
        ((k = i), (i = (i + 1) | 0), (i = (i + 7) & -8), (c[k >> 2] = 0), k) | 0
      );
      i = k;
      l = 0;
      i = e;
      return l | 0;
    } else {
      c[(d + 12) >> 2] =
        ((((j | 0) / (c[f >> 2] | 0)) | 0 | 0) / (c[m >> 2] | 0)) | 0;
      l = 1;
      i = e;
      return l | 0;
    }
    return 0;
  }
  function fy(b, d) {
    b = b | 0;
    d = d | 0;
    var e = 0,
      f = 0,
      g = 0,
      h = 0,
      j = 0,
      k = 0,
      l = 0,
      m = 0;
    e = i;
    i = (i + 16) | 0;
    f = e | 0;
    g = (e + 8) | 0;
    h = g | 0;
    j = (g + 4) | 0;
    a[j] = 0;
    if ((fu(h, 4, b) | 0) != 4) {
      k = -1;
      i = e;
      return k | 0;
    }
    g = f;
    while (1) {
      fu(g, 4, b) | 0;
      l = c[f >> 2] | 0;
      if ((l | 0) < 0) {
        m = 4;
        break;
      }
      if ((kC(h, d, 4) | 0) == 0) {
        k = l;
        m = 7;
        break;
      }
      iu(b, (l + 1) & -2, 0) | 0;
      a[j] = 0;
      if ((fu(h, 4, b) | 0) != 4) {
        k = -1;
        m = 7;
        break;
      }
    }
    if ((m | 0) == 4) {
      Sr(
        51456,
        ((b = i), (i = (i + 1) | 0), (i = (i + 7) & -8), (c[b >> 2] = 0), b) | 0
      );
      i = b;
      k = -1;
      i = e;
      return k | 0;
    } else if ((m | 0) == 7) {
      i = e;
      return k | 0;
    }
    return 0;
  }
  function gy(a, b) {
    a = a | 0;
    b = b | 0;
    var d = 0,
      e = 0,
      f = 0,
      g = 0,
      h = 0,
      j = 0,
      k = 0,
      l = 0,
      m = 0,
      n = 0,
      o = 0,
      p = 0,
      q = 0,
      r = 0,
      s = 0,
      t = 0,
      u = 0,
      v = 0,
      w = 0;
    d = i;
    i = (i + 24) | 0;
    e = d | 0;
    f = (d + 8) | 0;
    g = (d + 16) | 0;
    if (((a | 0) == 0) | ((b | 0) == 0)) {
      h = 0;
      i = d;
      return h | 0;
    }
    j = hy(a) | 0;
    if ((j | 0) == 0) {
      h = 0;
      i = d;
      return h | 0;
    }
    c[b >> 2] = c[(j + 8) >> 2];
    a = (j + 12) | 0;
    c[(b + 4) >> 2] = c[a >> 2];
    k = (j + 16) | 0;
    c[(b + 8) >> 2] = c[k >> 2];
    c[(b + 12) >> 2] = c[(j + 20) >> 2];
    l = c[(j + 24) >> 2] | 0;
    m = (b + 16) | 0;
    c[m >> 2] = l;
    c[(b + 20) >> 2] = c[(j + 28) >> 2];
    b = ss(l) | 0;
    if ((b | 0) == 0) {
      c[g >> 2] = j;
      hO(c[(j + 40) >> 2] | 0);
      $x(g);
      h = 0;
      i = d;
      return h | 0;
    }
    g = c[m >> 2] | 0;
    do {
      if ((g | 0) >= 1) {
        m = c[k >> 2] | 0;
        l = ((((g | 0) / (m | 0)) | 0 | 0) / (c[a >> 2] | 0)) | 0;
        n = b;
        if ((l | 0) < 1) {
          break;
        }
        o = (j + 40) | 0;
        p = nO(c[o >> 2] | 0, n, da(l, m) | 0, 0) | 0;
        a: do {
          if ((p | 0) < 1) {
            q = 0;
          } else {
            m = l;
            r = 0;
            s = p;
            while (1) {
              t = (s + r) | 0;
              u = (m - s) | 0;
              if ((u | 0) < 1) {
                q = t;
                break a;
              }
              v = c[k >> 2] | 0;
              w =
                nO(
                  c[o >> 2] | 0,
                  (n + ((da(t, v) | 0) << 1)) | 0,
                  da(u, v) | 0,
                  0
                ) | 0;
              if ((w | 0) < 1) {
                q = t;
                break;
              } else {
                m = u;
                r = t;
                s = w;
              }
            }
          }
        } while (0);
        n = da(c[k >> 2] | 0, q) | 0;
        if ((da(n, c[a >> 2] | 0) | 0) < 1) {
          break;
        }
        c[e >> 2] = j;
        hO(c[o >> 2] | 0);
        $x(e);
        h = b;
        i = d;
        return h | 0;
      }
    } while (0);
    ts(b);
    c[f >> 2] = j;
    hO(c[(j + 40) >> 2] | 0);
    $x(f);
    h = 0;
    i = d;
    return h | 0;
  }
  function hy(a) {
    a = a | 0;
    var b = 0,
      d = 0,
      e = 0,
      f = 0,
      g = 0,
      h = 0,
      j = 0,
      k = 0;
    b = i;
    i = (i + 8) | 0;
    d = b | 0;
    if ((a | 0) == 0) {
      e = 0;
      i = b;
      return e | 0;
    }
    f = _x(a, 10752) | 0;
    c[d >> 2] = f;
    if ((f | 0) == 0) {
      e = 0;
      i = b;
      return e | 0;
    }
    a = fO(f, 186376, 0, 0, 0) | 0;
    if ((a | 0) == 0) {
      $x(d);
      e = 0;
      i = b;
      return e | 0;
    }
    if ((jO(a) | 0) == 0) {
      hO(a);
      $x(d);
      e = 0;
      i = b;
      return e | 0;
    }
    f = kO(a, -1) | 0;
    if ((f | 0) == 0) {
      hO(a);
      $x(d);
      e = 0;
      i = b;
      return e | 0;
    }
    if ((c[(f + 24) >> 2] | 0) != 1) {
      hO(a);
      $x(d);
      Sr(
        177520,
        ((g = i), (i = (i + 1) | 0), (i = (i + 7) & -8), (c[g >> 2] = 0), g) | 0
      );
      i = g;
      e = 0;
      i = b;
      return e | 0;
    }
    h = (f + 4) | 0;
    if ((((c[h >> 2] | 0) - 1) | 0) >>> 0 < 2 >>> 0) {
      f = lO(a, -1) | 0;
      j = c[d >> 2] | 0;
      c[(j + 8) >> 2] = 48e3;
      c[(j + 12) >> 2] = 2;
      k = c[h >> 2] | 0;
      c[(j + 16) >> 2] = k;
      h = f;
      c[(j + 20) >> 2] = h;
      c[(j + 24) >> 2] = (da(k, h) | 0) << 1;
      c[(j + 28) >> 2] = 0;
      c[(j + 36) >> 2] = 0;
      c[(j + 40) >> 2] = a;
      e = c[d >> 2] | 0;
      i = b;
      return e | 0;
    } else {
      hO(a);
      $x(d);
      Sr(
        149608,
        ((g = i), (i = (i + 1) | 0), (i = (i + 7) & -8), (c[g >> 2] = 0), g) | 0
      );
      i = g;
      e = 0;
      i = b;
      return e | 0;
    }
    return 0;
  }
  function iy(a, b, d) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    var e = 0,
      f = 0,
      g = 0,
      h = 0,
      i = 0,
      j = 0,
      k = 0,
      l = 0,
      m = 0;
    if (((a | 0) == 0) | ((d | 0) == 0) | ((b | 0) < 1)) {
      e = 0;
      return e | 0;
    }
    f = (a + 16) | 0;
    g = c[f >> 2] | 0;
    h = (a + 12) | 0;
    i = ((((b | 0) / (g | 0)) | 0 | 0) / (c[h >> 2] | 0)) | 0;
    b = d;
    if ((i | 0) < 1) {
      e = 0;
      return e | 0;
    }
    d = (a + 40) | 0;
    a = 0;
    j = i;
    i = g;
    while (1) {
      g =
        nO(c[d >> 2] | 0, (b + ((da(i, a) | 0) << 1)) | 0, da(i, j) | 0, 0) | 0;
      if ((g | 0) < 1) {
        k = a;
        break;
      }
      l = (g + a) | 0;
      m = (j - g) | 0;
      if ((m | 0) < 1) {
        k = l;
        break;
      }
      a = l;
      j = m;
      i = c[f >> 2] | 0;
    }
    i = da(c[f >> 2] | 0, k) | 0;
    e = da(i, c[h >> 2] | 0) | 0;
    return e | 0;
  }
  function jy(a) {
    a = a | 0;
    var b = 0,
      d = 0;
    b = i;
    i = (i + 8) | 0;
    d = b | 0;
    c[d >> 2] = a;
    if ((a | 0) == 0) {
      i = b;
      return;
    }
    hO(c[(a + 40) >> 2] | 0);
    $x(d);
    i = b;
    return;
  }
  function ky(a, b, d) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    var e = 0,
      f = 0;
    if ((b | 0) == 0) {
      c[(Fc() | 0) >> 2] = 14;
      e = -1;
      return e | 0;
    }
    if ((d | 0) == 0) {
      c[(Fc() | 0) >> 2] = 0;
      e = 0;
      return e | 0;
    }
    if ((d | 0) < 0) {
      c[(Fc() | 0) >> 2] = 22;
      e = -1;
      return e | 0;
    }
    if ((a | 0) == 0) {
      c[(Fc() | 0) >> 2] = 9;
      e = -1;
      return e | 0;
    } else {
      f = fu(b, d, c[(a + 4) >> 2] | 0) | 0;
      d = (a + 36) | 0;
      c[d >> 2] = (c[d >> 2] | 0) + f;
      e = f;
      return e | 0;
    }
    return 0;
  }
  function ly(a, b, d, e) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    e = e | 0;
    var f = 0,
      g = 0,
      h = 0,
      i = 0;
    if ((a | 0) == 0) {
      c[(Fc() | 0) >> 2] = 9;
      f = -1;
      return f | 0;
    }
    do {
      if ((e | 0) == 2) {
        d = b;
        g = iu(c[(a + 4) >> 2] | 0, d, 1) | 0;
        if ((g | 0) < 0) {
          f = g;
          return f | 0;
        } else {
          g = ((c[(a + 32) >> 2] | 0) + d) | 0;
          c[(a + 36) >> 2] = g;
          h = g;
          break;
        }
      } else if ((e | 0) == 1) {
        g = b;
        d = iu(c[(a + 4) >> 2] | 0, g, 0) | 0;
        if ((d | 0) < 0) {
          f = d;
          return f | 0;
        } else {
          d = (a + 36) | 0;
          i = ((c[d >> 2] | 0) + g) | 0;
          c[d >> 2] = i;
          h = i;
          break;
        }
      } else if ((e | 0) == 0) {
        i = b;
        d = iu(c[(a + 4) >> 2] | 0, i, 2) | 0;
        if ((d | 0) < 0) {
          f = d;
          return f | 0;
        } else {
          c[(a + 36) >> 2] = i;
          h = i;
          break;
        }
      } else {
        c[(Fc() | 0) >> 2] = 22;
        f = -1;
        return f | 0;
      }
    } while (0);
    b = (h | 0) < 0 ? 0 : h;
    h = c[(a + 32) >> 2] | 0;
    c[(a + 36) >> 2] = (b | 0) > (h | 0) ? h : b;
    f = 0;
    return f | 0;
  }
  function my(a) {
    a = a | 0;
    return 0;
  }
  function ny(a) {
    a = a | 0;
    var b = 0,
      d = 0,
      e = 0;
    if ((a | 0) == 0) {
      c[(Fc() | 0) >> 2] = 9;
      b = -1;
      d = -1;
      return ((H = b), d) | 0;
    } else {
      e = ju(c[(a + 4) >> 2] | 0) | 0;
      b = ((e | 0) < 0) | 0 ? -1 : 0;
      d = e;
      return ((H = b), d) | 0;
    }
    return 0;
  }
  function oy(a) {
    a = a | 0;
    return 1;
  }
  function py() {
    return;
  }
  function qy(b) {
    b = b | 0;
    var d = 0,
      e = 0,
      f = 0,
      h = 0,
      j = 0,
      k = 0,
      l = 0,
      m = 0,
      n = 0,
      o = 0,
      p = 0,
      q = 0,
      r = 0,
      s = 0,
      t = 0;
    d = i;
    i = (i + 16384) | 0;
    e = d | 0;
    if ((b | 0) == 0) {
      f = 0;
      i = d;
      return f | 0;
    }
    n$(2127760, -1 | 0, 516) | 0;
    n$(2128280, 0, 516) | 0;
    n$(2127240, 0, 516) | 0;
    n$(2128800, 0, 516) | 0;
    n$(2139640, 0, 516) | 0;
    c[4886320] = gt(153648, 177512, 1) | 0;
    c[4886330] = gt(149592, 130984, 1) | 0;
    c[4886316] = gt(120472, 109656, 1) | 0;
    c[4886336] = gt(100224, 130984, 1) | 0;
    c[4886334] = gt(58112, 51448, 1) | 0;
    c[4886322] = gt(46240, 185392, 512) | 0;
    c[4886324] = gt(181440, 176776, 512) | 0;
    c[4886318] = gt(173232, 170120, 512) | 0;
    c[4886328] = gt(167024, 163440, 512) | 0;
    c[4886332] = gt(160672, 158088, 33) | 0;
    c[4886326] = gt(155544, 28378664, 33) | 0;
    c[4886338] = gt(151632, 28378664, 33) | 0;
    do {
      if ((oy(c[((c[4886332] | 0) + 4) >> 2] | 0) | 0) == 0) {
        Sr(
          149272,
          ((h = i),
          (i = (i + 8) | 0),
          (c[h >> 2] = c[((c[4886332] | 0) + 4) >> 2]),
          h) | 0
        );
        i = h;
        if ((VB(c[((c[4886332] | 0) + 4) >> 2] | 0, 158088) | 0) == 0) {
          f = 0;
          i = d;
          return f | 0;
        }
        if ((oy(158088) | 0) == 0) {
          f = 0;
        } else {
          break;
        }
        i = d;
        return f | 0;
      }
    } while (0);
    j = c[((c[4886338] | 0) + 4) >> 2] | 0;
    if ((j | 0) == 0) {
      k = 0;
    } else {
      k = (a[j] | 0) == 0 ? 0 : j;
    }
    c[5312730] = ((Od(0, 146656) | 0) << 24) >> 24;
    j = Od(0, 144296) | 0;
    c[5312728] = (j << 24) >> 24;
    l = c[5312730] | 0;
    if (((j << 24) >> 24 != 0) | ((l | 0) != 0)) {
      j = e | 0;
      n$(j | 0, 0, 16384) | 0;
      if ((l | 0) == 0) {
        l = Id(0, 4101) | 0;
        c[5312728] = 1;
        m = l;
      } else {
        m = Id(0, 4115) | 0;
      }
      do {
        if ((m | 0) != 0) {
          l = o$(m | 0) | 0;
          if ((l | 0) == 0) {
            break;
          } else {
            n = m;
            o = l;
          }
          do {
            XB(j, 16384, n);
            XB(j, 16384, 141688);
            n = (n + (o + 1)) | 0;
            o = o$(n | 0) | 0;
          } while ((o | 0) != 0);
        }
      } while (0);
      c[4886340] = gt(139360, j, 1088) | 0;
    }
    j = Mi(k | 0) | 0;
    c[7094376] = j;
    if (((j | 0) != 0) | ((k | 0) == 0)) {
      p = j;
    } else {
      Sr(137416, ((h = i), (i = (i + 8) | 0), (c[h >> 2] = k), h) | 0);
      i = h;
      k = Mi(0) | 0;
      c[7094376] = k;
      p = k;
    }
    if ((p | 0) == 0) {
      py();
      Sr(
        135920,
        ((h = i), (i = (i + 1) | 0), (i = (i + 7) & -8), (c[h >> 2] = 0), h) | 0
      );
      i = h;
      f = 0;
      i = d;
      return f | 0;
    }
    k = ze(p | 0, 0) | 0;
    c[7094378] = k;
    if ((k | 0) == 0) {
      py();
      Ae(c[7094376] | 0) | 0;
      Sr(
        134464,
        ((h = i), (i = (i + 1) | 0), (i = (i + 7) & -8), (c[h >> 2] = 0), h) | 0
      );
      i = h;
      f = 0;
      i = d;
      return f | 0;
    }
    zi(k | 0) | 0;
    if (!(a[42992] | 0)) {
      n$(19945336, 0, 507904) | 0;
      c[4938828] = 0;
      k = Ly(56224) | 0;
      c[5385978] = k;
      if ((a[(19945336 + ((k * 124) | 0)) | 0] | 0) == 0) {
        q = k;
      } else {
        do {
          if ((c[(19945436 + ((k * 124) | 0)) >> 2] | 0) == 0) {
            if ((c[(19945428 + ((k * 124) | 0)) >> 2] | 0) != 0) {
              break;
            }
            My(k, 1);
          }
        } while (0);
        c[(19945444 + ((k * 124) | 0)) >> 2] = wf() | 0;
        q = c[5385978] | 0;
      }
      c[(19945440 + ((q * 124) | 0)) >> 2] = 1;
      a[42992] = 1;
    }
    n$(2145968, 0, 10240) | 0;
    c[539052] = 0;
    c[539054] = 0;
    q = c[((c[4886316] | 0) + 32) >> 2] | 0;
    if ((q | 0) > 128) {
      r = 128;
    } else {
      r = (q | 0) < 16 ? 16 : q;
    }
    q = si() | 0;
    if ((q | 0) == 40962) {
      s = 120240;
      t = 36;
    } else if ((q | 0) == 40963) {
      s = 118840;
      t = 36;
    } else if ((q | 0) == 40964) {
      s = 117648;
      t = 36;
    } else if ((q | 0) == 40965) {
      s = 116632;
      t = 36;
    } else if ((q | 0) == 40961) {
      s = 121408;
      t = 36;
    } else if ((q | 0) != 0) {
      s = 115328;
      t = 36;
    }
    if ((t | 0) == 36) {
      Sr(113048, ((h = i), (i = (i + 8) | 0), (c[h >> 2] = s), h) | 0);
      i = h;
    }
    a: do {
      if ((r | 0) > 0) {
        s = 0;
        do {
          mh(1, (2145968 + ((s * 80) | 0)) | 0);
          if ((si() | 0) != 0) {
            break a;
          }
          c[539052] = (c[539052] | 0) + 1;
          s = (s + 1) | 0;
        } while ((s | 0) < (r | 0));
      }
    } while (0);
    Sr(56904, ((h = i), (i = (i + 8) | 0), (c[h >> 2] = c[539052]), h) | 0);
    i = h;
    a[42984] = 1;
    ah(53250);
    Ze(+(+g[((c[4886336] | 0) + 28) >> 2]));
    $c(+(+g[((c[4886334] | 0) + 28) >> 2]));
    c[b >> 2] = 80;
    c[(b + 4) >> 2] = 82;
    c[(b + 8) >> 2] = 182;
    c[(b + 12) >> 2] = 88;
    c[(b + 16) >> 2] = 240;
    c[(b + 20) >> 2] = 4;
    c[(b + 24) >> 2] = 338;
    c[(b + 28) >> 2] = 26;
    c[(b + 32) >> 2] = 58;
    c[(b + 36) >> 2] = 46;
    c[(b + 40) >> 2] = 260;
    c[(b + 44) >> 2] = 24;
    c[(b + 48) >> 2] = 118;
    c[(b + 52) >> 2] = 206;
    c[(b + 56) >> 2] = 130;
    c[(b + 60) >> 2] = 272;
    c[(b + 64) >> 2] = 32;
    c[(b + 68) >> 2] = 290;
    c[(b + 72) >> 2] = 178;
    c[(b + 76) >> 2] = 66;
    f = 1;
    i = d;
    return f | 0;
  }
  function ry() {
    var b = 0,
      d = 0,
      e = 0,
      f = 0,
      g = 0,
      h = 0,
      j = 0,
      k = 0,
      l = 0,
      m = 0,
      n = 0,
      o = 0,
      p = 0;
    b = i;
    d = 0;
    do {
      e = (2127760 + (d << 2)) | 0;
      if (!((c[e >> 2] | 0) == -1)) {
        c[(2128280 + (d << 2)) >> 2] = 0;
        f = (2127240 + (d << 2)) | 0;
        nc(c[f >> 2] | 0);
        gi(c[f >> 2] | 0, 4105, 0);
        g = (2128800 + (d << 2)) | 0;
        h = c[g >> 2] | 0;
        if ((h | 0) > 0) {
          ng(h | 0, (2129320 + ((d * 80) | 0)) | 0);
          c[g >> 2] = 0;
        }
        g = c[e >> 2] | 0;
        c[(2146e3 + ((g * 80) | 0)) >> 2] = 0;
        Py(g);
        c[f >> 2] = 0;
        c[e >> 2] = -1;
      }
      d = (d + 1) | 0;
    } while ((d | 0) < 129);
    vy();
    if (a[42984] | 0) {
      if ((c[539052] | 0) > 0) {
        d = 0;
        do {
          if ((c[(2146e3 + ((d * 80) | 0)) >> 2] | 0) != 0) {
            Tr(57928, ((j = i), (i = (i + 8) | 0), (c[j >> 2] = d), j) | 0);
            i = j;
          }
          e = c[(2145984 + ((d * 80) | 0)) >> 2] | 0;
          if ((e | 0) > 0) {
            c[(21250948 + ((e * 36) | 0)) >> 2] = 0;
          }
          e = (2145968 + ((d * 80) | 0)) | 0;
          nc(c[e >> 2] | 0);
          vh(1, e | 0);
          d = (d + 1) | 0;
        } while ((d | 0) < (c[539052] | 0));
      }
      n$(2145968, 0, 10240) | 0;
      a[42984] = 0;
    }
    if (!(a[42992] | 0)) {
      k = c[7094378] | 0;
      ig(k | 0);
      l = c[7094376] | 0;
      m = Ae(l | 0) | 0;
      n$(2127760, -1 | 0, 516) | 0;
      n$(2128280, 0, 516) | 0;
      n$(2127240, 0, 516) | 0;
      py();
      i = b;
      return;
    }
    c[(19945440 + (((c[5385978] | 0) * 124) | 0)) >> 2] = 0;
    d = c[4938828] | 0;
    if ((d | 0) > 0) {
      e = 0;
      f = d;
      while (1) {
        d = (19945336 + ((e * 124) | 0)) | 0;
        do {
          if ((a[d] | 0) == 0) {
            n = f;
          } else {
            g = (19945436 + ((e * 124) | 0)) | 0;
            if ((c[g >> 2] | 0) == 0) {
              n = f;
              break;
            }
            h = si() | 0;
            if ((h | 0) == 40964) {
              o = 117648;
              p = 25;
            } else if ((h | 0) == 40965) {
              o = 116632;
              p = 25;
            } else if ((h | 0) == 40962) {
              o = 120240;
              p = 25;
            } else if ((h | 0) == 40963) {
              o = 118840;
              p = 25;
            } else if ((h | 0) == 40961) {
              o = 121408;
              p = 25;
            } else if ((h | 0) != 0) {
              o = 115328;
              p = 25;
            }
            if ((p | 0) == 25) {
              p = 0;
              Sr(113048, ((j = i), (i = (i + 8) | 0), (c[j >> 2] = o), j) | 0);
              i = j;
            }
            ng(1, (19945400 + ((e * 124) | 0)) | 0);
            if ((si() | 0) != 0) {
              Sr(114048, ((j = i), (i = (i + 8) | 0), (c[j >> 2] = d), j) | 0);
              i = j;
            }
            c[g >> 2] = 0;
            n = c[4938828] | 0;
          }
        } while (0);
        d = (e + 1) | 0;
        if ((d | 0) < (n | 0)) {
          e = d;
          f = n;
        } else {
          break;
        }
      }
    }
    c[4938828] = 0;
    a[42992] = 0;
    k = c[7094378] | 0;
    ig(k | 0);
    l = c[7094376] | 0;
    m = Ae(l | 0) | 0;
    n$(2127760, -1 | 0, 516) | 0;
    n$(2128280, 0, 516) | 0;
    n$(2127240, 0, 516) | 0;
    py();
    i = b;
    return;
  }
  function sy(a, b, d, e) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    e = e | 0;
    var f = 0,
      h = 0,
      j = 0,
      k = 0.0,
      l = 0.0,
      m = 0.0,
      n = 0.0,
      o = 0,
      p = 0.0,
      q = 0.0,
      r = 0.0,
      s = 0.0,
      t = 0,
      u = 0;
    f = i;
    i = (i + 16) | 0;
    h = f | 0;
    j = (a | 0) != 0;
    do {
      if (j) {
        if (((e | 0) > -1) & ((c[4938828] | 0) > (e | 0))) {
          k = +g[a >> 2];
          g[h >> 2] = k;
          l = +g[(a + 4) >> 2];
          g[(h + 4) >> 2] = l;
          g[(h + 8) >> 2] = +g[(a + 8) >> 2];
          m = k;
          n = l;
          break;
        }
        Sr(61320, ((o = i), (i = (i + 8) | 0), (c[o >> 2] = e), o) | 0);
        i = o;
        i = f;
        return;
      } else {
        if (b >>> 0 > 1023 >>> 0) {
          Ur(1, 62080, ((o = i), (i = (i + 8) | 0), (c[o >> 2] = b), o) | 0);
          i = o;
        }
        if (!(((e | 0) > -1) & ((c[4938828] | 0) > (e | 0)))) {
          Sr(61320, ((o = i), (i = (i + 8) | 0), (c[o >> 2] = e), o) | 0);
          i = o;
          i = f;
          return;
        }
        l = +g[(21250936 + ((b * 36) | 0)) >> 2];
        k = +g[(21250940 + ((b * 36) | 0)) >> 2];
        p = +g[(21250944 + ((b * 36) | 0)) >> 2];
        do {
          if ((c[3586] | 0) == (b | 0)) {
            q = +g[4986330] - l;
            r = +g[4986331] - k;
            s = +g[4986332] - p;
            if (!(q * q + r * r + s * s <= 2304.0)) {
              break;
            }
            t = Uy(3) | 0;
            if ((t | 0) == -1) {
              i = f;
              return;
            }
            Ry(t, e, 3, -1, d, 1);
            c[(2145996 + ((t * 80) | 0)) >> 2] = 1;
            Ub(c[(2145968 + ((t * 80) | 0)) >> 2] | 0);
            i = f;
            return;
          }
        } while (0);
        g[h >> 2] = l;
        g[(h + 4) >> 2] = k;
        g[(h + 8) >> 2] = p;
        m = l;
        n = k;
      }
    } while (0);
    a = h | 0;
    t = (h + 4) | 0;
    do {
      if ((NB(m) | 0) == 0) {
        if ((NB(n) | 0) != 0) {
          u = 17;
          break;
        }
        if ((NB(+g[(h + 8) >> 2]) | 0) != 0) {
          u = 17;
        }
      } else {
        u = 17;
      }
    } while (0);
    if ((u | 0) == 17) {
      Tr(
        96520,
        ((o = i),
        (i = (i + 16) | 0),
        (c[o >> 2] = 63992),
        (c[(o + 8) >> 2] = 1269),
        o) | 0
      );
      i = o;
      g[(h + 8) >> 2] = 0.0;
      g[t >> 2] = 0.0;
      g[a >> 2] = 0.0;
    }
    do {
      if ((c[539054] | 0) > (((((c[539052] | 0) * 5) | 0 | 0) / 3) | 0 | 0)) {
        n = +g[4986330] - +g[a >> 2];
        m = +g[4986331] - +g[t >> 2];
        s = +g[4986332] - +g[(h + 8) >> 2];
        r = +g[((c[4886324] | 0) + 28) >> 2] + +g[((c[4886328] | 0) + 28) >> 2];
        if (n * n + m * m + s * s < r * r) {
          break;
        }
        i = f;
        return;
      }
    } while (0);
    h = Uy(2) | 0;
    if ((h | 0) == -1) {
      i = f;
      return;
    }
    Ry(h, e, 2, b, d, 0);
    d = (2145968 + ((h * 80) | 0)) | 0;
    if (!j) {
      c[(2146008 + ((h * 80) | 0)) >> 2] = 1;
    }
    j = d | 0;
    Kg(c[j >> 2] | 0, 4100, a | 0);
    Sy(d, a);
    c[(2145996 + ((h * 80) | 0)) >> 2] = 1;
    Ub(c[j >> 2] | 0);
    i = f;
    return;
  }
  function ty(a, b) {
    a = a | 0;
    b = b | 0;
    var d = 0,
      e = 0;
    d = i;
    if (!(((a | 0) > -1) & ((c[4938828] | 0) > (a | 0)))) {
      Sr(61320, ((e = i), (i = (i + 8) | 0), (c[e >> 2] = a), e) | 0);
      i = e;
      i = d;
      return;
    }
    e = Uy(3) | 0;
    if ((e | 0) == -1) {
      i = d;
      return;
    }
    Ry(e, a, 3, -1, b, 1);
    c[(2145996 + ((e * 80) | 0)) >> 2] = 1;
    Ub(c[(2145968 + ((e * 80) | 0)) >> 2] | 0);
    i = d;
    return;
  }
  function uy(b, d) {
    b = b | 0;
    d = d | 0;
    var e = 0,
      f = 0,
      h = 0,
      i = 0,
      j = 0,
      k = 0;
    vy();
    e = (b | 0) != 0;
    if (e) {
      if ((a[b] | 0) == 0) {
        f = 3;
      }
    } else {
      f = 3;
    }
    do {
      if ((f | 0) == 3) {
        if ((d | 0) == 0) {
          return;
        }
        if ((a[d] | 0) != 0) {
          break;
        }
        return;
      }
    } while (0);
    h = Uy(4) | 0;
    c[2758] = h;
    if ((h | 0) == -1) {
      return;
    }
    c[(2146e3 + ((h * 80) | 0)) >> 2] = 1;
    i = c[(2145968 + ((h * 80) | 0)) >> 2] | 0;
    c[4939870] = i;
    g[(2146020 + ((h * 80) | 0)) >> 2] = 0.0;
    Pb(i | 0, 4100, +0.0, +0.0, +0.0);
    Pb(c[4939870] | 0, 4102, +0.0, +0.0, +0.0);
    Pb(c[4939870] | 0, 4101, +0.0, +0.0, +0.0);
    hi(c[4939870] | 0, 4129, +0.0);
    gi(c[4939870] | 0, 514, 1);
    if ((c[2758] | 0) == -1) {
      return;
    }
    a: do {
      if ((d | 0) == 0) {
        j = b;
        f = 12;
      } else {
        if ((a[d] | 0) == 0) {
          j = b;
          f = 12;
          break;
        }
        do {
          if (e) {
            if ((a[b] | 0) == 0) {
              break;
            }
            if ((k$(b, d) | 0) == 0) {
              j = d;
              f = 12;
              break a;
            }
          }
        } while (0);
        q$(19545128, d | 0, 64) | 0;
        k = Xx(b) | 0;
      }
    } while (0);
    if ((f | 0) == 12) {
      q$(19545128, j | 0, 64) | 0;
      k = 0;
    }
    c[5114360] = k;
    k = Xx(19545128) | 0;
    c[4939876] = k;
    if ((k | 0) == 0) {
      k = c[5114360] | 0;
      do {
        if ((k | 0) != 0) {
          Yx(k);
          c[5114360] = 0;
          j = c[4939876] | 0;
          if ((j | 0) == 0) {
            break;
          }
          Yx(j);
          c[4939876] = 0;
        }
      } while (0);
      k = c[2758] | 0;
      c[(2146e3 + ((k * 80) | 0)) >> 2] = 0;
      Py(k);
      c[4939870] = 0;
      c[2758] = -1;
      return;
    }
    if ((Ny(4, 19759488, 58816) | 0) == 0) {
      return;
    }
    Oy(c[4939872] | 0);
    Oy(c[4939873] | 0);
    Oy(c[4939874] | 0);
    Oy(c[4939875] | 0);
    Md(c[4939870] | 0, 4, 19759488);
    k = c[4939870] | 0;
    if ((c[((c[4781226] | 0) + 32) >> 2] | 0) == 0) {
      hi(
        k | 0,
        4106,
        +(+g[((c[4781232] | 0) + 28) >> 2] * +g[((c[4886330] | 0) + 28) >> 2])
      );
    } else {
      hi(k | 0, 4106, +0.0);
    }
    Ub(c[4939870] | 0);
    a[11040] = 1;
    return;
  }
  function vy() {
    var b = 0;
    if (!(a[11040] | 0)) {
      return;
    }
    nc(c[4939870] | 0);
    gi(c[4939870] | 0, 4105, 0);
    ng(4, 19759488);
    b = c[2758] | 0;
    c[(2146e3 + ((b * 80) | 0)) >> 2] = 0;
    Py(b);
    c[4939870] = 0;
    c[2758] = -1;
    b = c[5114360] | 0;
    if ((b | 0) != 0) {
      Yx(b);
      c[5114360] = 0;
    }
    b = c[4939876] | 0;
    if ((b | 0) != 0) {
      Yx(b);
      c[4939876] = 0;
    }
    a[11040] = 0;
    return;
  }
  function wy(a, b, d, e, f, h, j, k) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    e = e | 0;
    f = f | 0;
    h = h | 0;
    j = +j;
    k = k | 0;
    var l = 0,
      m = 0,
      n = 0,
      o = 0,
      p = 0,
      q = 0,
      r = 0,
      s = 0,
      t = 0,
      u = 0,
      v = 0,
      w = 0,
      x = 0,
      y = 0,
      z = 0;
    l = i;
    i = (i + 96) | 0;
    m = l | 0;
    n = (l + 8) | 0;
    o = (l + 16) | 0;
    if (a >>> 0 > 128 >>> 0) {
      i = l;
      return;
    }
    do {
      if ((e | 0) == 1) {
        if ((f | 0) == 1) {
          p = 4352;
          break;
        }
        p = (f | 0) == 2 ? 4354 : 4353;
      } else if ((e | 0) == 2) {
        p = (f | 0) == 2 ? 4355 : 4353;
      } else {
        p = 4353;
      }
    } while (0);
    q = (2127760 + (a << 2)) | 0;
    do {
      if ((c[q >> 2] | 0) == -1) {
        do {
          if ((k | 0) > -1) {
            r = Uy(1) | 0;
            if ((r | 0) < 0) {
              break;
            }
            Ry(r, -1, 1, k, 0, 0);
            s = c[(2145968 + ((r * 80) | 0)) >> 2] | 0;
            c[(2146008 + ((r * 80) | 0)) >> 2] = 1;
            c[(2146012 + ((r * 80) | 0)) >> 2] = 1;
            t = s;
            u = r;
            v = 12;
          } else {
            r = Uy(4) | 0;
            if ((r | 0) < 0) {
              break;
            }
            s = c[(2145968 + ((r * 80) | 0)) >> 2] | 0;
            c[(2146e3 + ((r * 80) | 0)) >> 2] = 1;
            g[(2146020 + ((r * 80) | 0)) >> 2] = 0.0;
            gi(s | 0, 4105, 0);
            gi(s | 0, 4103, 0);
            Pb(s | 0, 4100, +0.0, +0.0, +0.0);
            Pb(s | 0, 4102, +0.0, +0.0, +0.0);
            Pb(s | 0, 4101, +0.0, +0.0, +0.0);
            hi(s | 0, 4129, +0.0);
            gi(s | 0, 514, 1);
            t = s;
            u = r;
            v = 12;
          }
        } while (0);
        if ((v | 0) == 12) {
          c[q >> 2] = u;
          c[(2127240 + (a << 2)) >> 2] = t;
          c[(2128800 + (a << 2)) >> 2] = 0;
          c[(2139640 + (a << 2)) >> 2] = 0;
        }
        if (!((c[q >> 2] | 0) == -1)) {
          break;
        }
        Sr(
          60616,
          ((w = i), (i = (i + 1) | 0), (i = (i + 7) & -8), (c[w >> 2] = 0), w) |
            0
        );
        i = w;
        i = l;
        return;
      }
    } while (0);
    q = (2127240 + (a << 2)) | 0;
    Bc(c[q >> 2] | 0, 4117, m | 0);
    t = c[m >> 2] | 0;
    if ((t | 0) == 20) {
      Tr(
        59912,
        ((w = i), (i = (i + 1) | 0), (i = (i + 7) & -8), (c[w >> 2] = 0), w) | 0
      );
      i = w;
      i = l;
      return;
    }
    w = (2128800 + (a << 2)) | 0;
    m = c[w >> 2] | 0;
    if ((t | 0) == (m | 0)) {
      if ((Ny(1, n, 59296) | 0) == 0) {
        i = l;
        return;
      }
      m$(o | 0, (2129320 + ((a * 80) | 0)) | 0, 80) | 0;
      t = c[w >> 2] | 0;
      u = (2139640 + (a << 2)) | 0;
      if ((t | 0) > 0) {
        v = c[u >> 2] | 0;
        r = 0;
        do {
          c[(2129320 + ((a * 80) | 0) + (r << 2)) >> 2] =
            c[(o + ((((v + r) | 0) % (t | 0) | 0) << 2)) >> 2];
          r = (r + 1) | 0;
        } while ((r | 0) < (t | 0));
      }
      r = c[n >> 2] | 0;
      c[(2129320 + ((a * 80) | 0) + (t << 2)) >> 2] = r;
      c[u >> 2] = t;
      u = (t + 1) | 0;
      c[w >> 2] = u;
      x = u;
      y = t;
      z = r;
    } else {
      r = c[(2139640 + (a << 2)) >> 2] | 0;
      x = m;
      y = r;
      z = c[(2129320 + ((a * 80) | 0) + (r << 2)) >> 2] | 0;
    }
    c[n >> 2] = z;
    c[(2139640 + (a << 2)) >> 2] = ((y + 1) | 0) % (x | 0) | 0;
    Yc(z | 0, p | 0, h | 0, da(da(e, b) | 0, f) | 0, d | 0);
    Md(c[q >> 2] | 0, 1, n | 0);
    do {
      if ((k | 0) < 0) {
        n = c[q >> 2] | 0;
        if ((c[((c[4781226] | 0) + 32) >> 2] | 0) == 0) {
          hi(
            n | 0,
            4106,
            +(
              +g[((c[553082] | 0) + 28) >> 2] *
              j *
              +g[((c[4886330] | 0) + 28) >> 2]
            )
          );
          break;
        } else {
          hi(n | 0, 4106, +0.0);
          break;
        }
      }
    } while (0);
    k = (2128280 + (a << 2)) | 0;
    if ((c[k >> 2] | 0) != 0) {
      i = l;
      return;
    }
    Ub(c[q >> 2] | 0);
    c[k >> 2] = 1;
    i = l;
    return;
  }
  function xy() {
    var a = 0,
      b = 0,
      d = 0,
      e = 0,
      f = 0;
    if ((c[539052] | 0) > 0) {
      a = 0;
      do {
        Py(a);
        a = (a + 1) | 0;
      } while ((a | 0) < (c[539052] | 0));
    }
    vy();
    a = 0;
    do {
      b = (2127760 + (a << 2)) | 0;
      if (!((c[b >> 2] | 0) == -1)) {
        c[(2128280 + (a << 2)) >> 2] = 0;
        d = (2127240 + (a << 2)) | 0;
        nc(c[d >> 2] | 0);
        gi(c[d >> 2] | 0, 4105, 0);
        e = (2128800 + (a << 2)) | 0;
        f = c[e >> 2] | 0;
        if ((f | 0) > 0) {
          ng(f | 0, (2129320 + ((a * 80) | 0)) | 0);
          c[e >> 2] = 0;
        }
        e = c[b >> 2] | 0;
        c[(2146e3 + ((e * 80) | 0)) >> 2] = 0;
        Py(e);
        c[d >> 2] = 0;
        c[b >> 2] = -1;
      }
      a = (a + 1) | 0;
    } while ((a | 0) < 129);
    return;
  }
  function yy(a) {
    a = a | 0;
    var b = 0,
      d = 0;
    a = c[539052] | 0;
    if ((a | 0) > 0) {
      b = 0;
    } else {
      return;
    }
    do {
      do {
        if ((c[(2146004 + ((b * 80) | 0)) >> 2] | 0) != 0) {
          d = c[(2145984 + ((b * 80) | 0)) >> 2] | 0;
          if ((d | 0) == -1) {
            break;
          }
          c[(21250956 + ((d * 36) | 0)) >> 2] = 0;
        }
      } while (0);
      b = (b + 1) | 0;
    } while ((b | 0) < (a | 0));
    return;
  }
  function zy(a, b, c, d) {
    a = a | 0;
    b = b | 0;
    c = c | 0;
    d = d | 0;
    Ty(1, d, b, c, a);
    return;
  }
  function Ay(a, b, c, d) {
    a = a | 0;
    b = b | 0;
    c = c | 0;
    d = d | 0;
    Ty(0, d, b, c, a);
    return;
  }
  function By(a) {
    a = a | 0;
    if ((c[(21250948 + ((a * 36) | 0)) >> 2] | 0) == 0) {
      return;
    }
    Py(c[(21250952 + ((a * 36) | 0)) >> 2] | 0);
    return;
  }
  function Cy(a, b, d, e) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    e = e | 0;
    var f = 0,
      h = 0,
      j = 0.0,
      k = 0,
      l = 0.0,
      m = 0,
      n = 0,
      o = 0,
      p = 0,
      q = 0,
      r = 0,
      s = 0,
      t = 0.0,
      u = 0.0,
      v = 0.0;
    e = i;
    i = (i + 40) | 0;
    f = e | 0;
    h = (e + 24) | 0;
    j = +g[b >> 2];
    k = h | 0;
    g[k >> 2] = j;
    l = +g[(b + 4) >> 2];
    m = (h + 4) | 0;
    g[m >> 2] = l;
    n = (h + 8) | 0;
    g[n >> 2] = +g[(b + 8) >> 2];
    do {
      if ((NB(j) | 0) == 0) {
        if ((NB(l) | 0) != 0) {
          o = 4;
          break;
        }
        if ((NB(+g[n >> 2]) | 0) != 0) {
          o = 4;
        }
      } else {
        o = 4;
      }
    } while (0);
    if ((o | 0) == 4) {
      Tr(
        96520,
        ((p = i),
        (i = (i + 16) | 0),
        (c[p >> 2] = 63992),
        (c[(p + 8) >> 2] = 2251),
        p) | 0
      );
      i = p;
      g[n >> 2] = 0.0;
      g[m >> 2] = 0.0;
      g[k >> 2] = 0.0;
    }
    b = d | 0;
    h = (d + 4) | 0;
    do {
      if ((NB(+g[b >> 2]) | 0) == 0) {
        if ((NB(+g[h >> 2]) | 0) != 0) {
          o = 8;
          break;
        }
        if ((NB(+g[(d + 8) >> 2]) | 0) != 0) {
          o = 8;
        }
      } else {
        o = 8;
      }
    } while (0);
    if ((o | 0) == 8) {
      Tr(
        96520,
        ((p = i),
        (i = (i + 16) | 0),
        (c[p >> 2] = 63992),
        (c[(p + 8) >> 2] = 2253),
        p) | 0
      );
      i = p;
      g[(d + 8) >> 2] = 0.0;
      g[h >> 2] = 0.0;
      g[b >> 2] = 0.0;
    }
    q = (d + 12) | 0;
    r = (d + 16) | 0;
    do {
      if ((NB(+g[q >> 2]) | 0) == 0) {
        if ((NB(+g[r >> 2]) | 0) != 0) {
          o = 12;
          break;
        }
        if ((NB(+g[(d + 20) >> 2]) | 0) != 0) {
          o = 12;
        }
      } else {
        o = 12;
      }
    } while (0);
    if ((o | 0) == 12) {
      Tr(
        96520,
        ((p = i),
        (i = (i + 16) | 0),
        (c[p >> 2] = 63992),
        (c[(p + 8) >> 2] = 2254),
        p) | 0
      );
      i = p;
      g[(d + 20) >> 2] = 0.0;
      g[r >> 2] = 0.0;
      g[q >> 2] = 0.0;
    }
    q = (d + 24) | 0;
    r = (d + 28) | 0;
    do {
      if ((NB(+g[q >> 2]) | 0) == 0) {
        if ((NB(+g[r >> 2]) | 0) != 0) {
          o = 17;
          break;
        }
        s = (d + 32) | 0;
        if ((NB(+g[s >> 2]) | 0) != 0) {
          o = 17;
          break;
        }
        t = +g[q >> 2];
        u = +g[r >> 2];
        v = +g[s >> 2];
      } else {
        o = 17;
      }
    } while (0);
    if ((o | 0) == 17) {
      Tr(
        96520,
        ((p = i),
        (i = (i + 16) | 0),
        (c[p >> 2] = 63992),
        (c[(p + 8) >> 2] = 2255),
        p) | 0
      );
      i = p;
      g[(d + 32) >> 2] = 0.0;
      g[r >> 2] = 0.0;
      g[q >> 2] = 0.0;
      t = 0.0;
      u = 0.0;
      v = 0.0;
    }
    q = f | 0;
    g[q >> 2] = +g[b >> 2];
    g[(f + 4) >> 2] = +g[h >> 2];
    g[(f + 8) >> 2] = +g[(d + 8) >> 2];
    g[(f + 12) >> 2] = t;
    g[(f + 16) >> 2] = u;
    g[(f + 20) >> 2] = v;
    c[3586] = a;
    g[4986330] = +g[k >> 2];
    g[4986331] = +g[m >> 2];
    g[4986332] = +g[n >> 2];
    fh(4100, k | 0);
    fh(4102, 876376);
    fh(4111, q | 0);
    i = e;
    return;
  }
  function Dy(a, b) {
    a = a | 0;
    b = b | 0;
    var d = 0,
      e = 0.0,
      f = 0.0,
      h = 0.0,
      j = 0,
      k = 0.0,
      l = 0.0,
      m = 0.0,
      n = 0;
    d = i;
    e = +g[b >> 2];
    f = +g[(b + 4) >> 2];
    h = +g[(b + 8) >> 2];
    do {
      if ((NB(e) | 0) == 0) {
        if ((NB(f) | 0) != 0) {
          j = 4;
          break;
        }
        if ((NB(h) | 0) == 0) {
          k = e;
          l = f;
          m = h;
        } else {
          j = 4;
        }
      } else {
        j = 4;
      }
    } while (0);
    if ((j | 0) == 4) {
      Tr(
        96520,
        ((n = i),
        (i = (i + 16) | 0),
        (c[n >> 2] = 63992),
        (c[(n + 8) >> 2] = 1179),
        n) | 0
      );
      i = n;
      k = 0.0;
      l = 0.0;
      m = 0.0;
    }
    if (a >>> 0 > 1023 >>> 0) {
      Ur(1, 99936, ((n = i), (i = (i + 8) | 0), (c[n >> 2] = a), n) | 0);
      i = n;
    } else {
      g[(21250936 + ((a * 36) | 0)) >> 2] = k;
      g[(21250940 + ((a * 36) | 0)) >> 2] = l;
      g[(21250944 + ((a * 36) | 0)) >> 2] = m;
      i = d;
      return;
    }
  }
  function Ey() {
    var b = 0,
      d = 0,
      e = 0,
      f = 0,
      h = 0,
      j = 0,
      k = 0,
      l = 0,
      m = 0,
      n = 0,
      o = 0,
      p = 0,
      q = 0,
      r = 0,
      s = 0,
      t = 0,
      u = 0,
      v = 0,
      w = 0,
      x = 0,
      y = 0.0,
      z = 0.0,
      A = 0,
      B = 0,
      C = 0,
      D = 0,
      E = 0,
      F = 0,
      G = 0,
      H = 0,
      I = 0,
      J = 0,
      K = 0,
      L = 0,
      M = 0,
      N = 0,
      O = 0;
    b = i;
    i = (i + 64) | 0;
    d = b | 0;
    e = (b + 8) | 0;
    f = (b + 16) | 0;
    h = (b + 24) | 0;
    j = (b + 32) | 0;
    k = (b + 40) | 0;
    l = (b + 48) | 0;
    m = (b + 56) | 0;
    n = c[4781226] | 0;
    if ((c[(n + 20) >> 2] | 0) != 0) {
      if ((c[539052] | 0) > 0) {
        o = 0;
        do {
          do {
            if ((c[(2145992 + ((o * 80) | 0)) >> 2] | 0) != 0) {
              p = c[(2145968 + ((o * 80) | 0)) >> 2] | 0;
              if ((c[((c[4781226] | 0) + 32) >> 2] | 0) == 0) {
                hi(p | 0, 4106, +(+g[(2146020 + ((o * 80) | 0)) >> 2]));
                break;
              } else {
                hi(p | 0, 4106, +0.0);
                break;
              }
            }
          } while (0);
          o = (o + 1) | 0;
        } while ((o | 0) < (c[539052] | 0));
        q = c[4781226] | 0;
      } else {
        q = n;
      }
      c[(q + 20) >> 2] = 0;
    }
    if ((c[539052] | 0) > 0) {
      q = 0;
      do {
        n = (2145968 + ((q * 80) | 0)) | 0;
        o = c[(2145984 + ((q * 80) | 0)) >> 2] | 0;
        a: do {
          if ((c[(2146e3 + ((q * 80) | 0)) >> 2] | 0) == 0) {
            p = (2145992 + ((q * 80) | 0)) | 0;
            if ((c[p >> 2] | 0) == 0) {
              break;
            }
            r = c[4886330] | 0;
            s = c[553082] | 0;
            if ((c[(r + 20) >> 2] | 0) == 0) {
              if ((c[(s + 20) >> 2] | 0) != 0) {
                t = 15;
              }
            } else {
              t = 15;
            }
            if ((t | 0) == 15) {
              t = 0;
              g[(2146016 + ((q * 80) | 0)) >> 2] =
                +g[(r + 28) >> 2] * +g[(s + 28) >> 2];
            }
            s = c[4886318] | 0;
            do {
              if ((c[(s + 20) >> 2] | 0) != 0) {
                if ((c[(2146044 + ((q * 80) | 0)) >> 2] | 0) != 0) {
                  break;
                }
                hi(c[n >> 2] | 0, 4129, +(+g[(s + 28) >> 2]));
              }
            } while (0);
            s = c[4886322] | 0;
            if ((c[(s + 20) >> 2] | 0) != 0) {
              hi(c[n >> 2] | 0, 4128, +(+g[(s + 28) >> 2]));
            }
            s = (2146004 + ((q * 80) | 0)) | 0;
            if ((c[s >> 2] | 0) == 0) {
              r = n | 0;
              do {
                if ((c[(2146012 + ((q * 80) | 0)) >> 2] | 0) == 0) {
                  Bc(c[r >> 2] | 0, 4112, l | 0);
                  if ((c[l >> 2] | 0) != 4116) {
                    break;
                  }
                  c[(2145996 + ((q * 80) | 0)) >> 2] = 0;
                  Py(q);
                  break a;
                }
              } while (0);
              Bc(c[r >> 2] | 0, 514, l | 0);
              if ((c[(2146008 + ((q * 80) | 0)) >> 2] | 0) == 0) {
                break;
              }
              if ((c[l >> 2] | 0) != 0) {
                break;
              }
              u = (21250936 + ((o * 36) | 0)) | 0;
              Kg(c[r >> 2] | 0, 4100, u | 0);
              Sy(n, u);
              break;
            }
            if ((c[(21250956 + ((o * 36) | 0)) >> 2] | 0) == 0) {
              if ((c[(2145980 + ((q * 80) | 0)) >> 2] | 0) != 0) {
                Py(q);
                break;
              }
              u = (2145996 + ((q * 80) | 0)) | 0;
              if ((c[u >> 2] | 0) == 0) {
                break;
              }
              Qy(n, 0);
              nc(c[n >> 2] | 0);
              c[u >> 2] = 0;
              break;
            }
            u = (21250968 + ((o * 36) | 0)) | 0;
            v = (c[u >> 2] | 0) == 0;
            do {
              if ((c[p >> 2] | 0) == 0) {
                if (!v) {
                  t = 29;
                  break;
                }
                w = c[(2145972 + ((q * 80) | 0)) >> 2] | 0;
              } else {
                if (!v) {
                  t = 29;
                  break;
                }
                x = c[(2145972 + ((q * 80) | 0)) >> 2] | 0;
                if ((x | 0) == (c[(21250964 + ((o * 36) | 0)) >> 2] | 0)) {
                  w = x;
                  break;
                }
                Qy(n, 1);
                c[(2145996 + ((q * 80) | 0)) >> 2] = 0;
                x = n | 0;
                nc(c[x >> 2] | 0);
                gi(c[x >> 2] | 0, 4105, 0);
                c[u >> 2] = 1;
                t = 29;
              }
            } while (0);
            if ((t | 0) == 29) {
              t = 0;
              Ry(
                q,
                c[(21250964 + ((o * 36) | 0)) >> 2] | 0,
                c[(21250960 + ((o * 36) | 0)) >> 2] | 0,
                o,
                -1,
                c[(2146044 + ((q * 80) | 0)) >> 2] | 0
              );
              c[s >> 2] = 1;
              v = c[(2145972 + ((q * 80) | 0)) >> 2] | 0;
              p = (19945448 + ((v * 124) | 0)) | 0;
              c[p >> 2] = (c[p >> 2] | 0) + 1;
              c[u >> 2] = 0;
              w = v;
            }
            Sy(n, (2146032 + ((q * 80) | 0)) | 0);
            v = (2145996 + ((q * 80) | 0)) | 0;
            p = (c[v >> 2] | 0) != 0;
            if (!(+g[(2146020 + ((q * 80) | 0)) >> 2] != 0.0)) {
              if (p) {
                Qy(n, 0);
                nc(c[n >> 2] | 0);
                c[v >> 2] = 0;
                break;
              }
              if ((c[(19945452 + ((w * 124) | 0)) >> 2] | 0) != 0) {
                break;
              }
              r = (19945456 + ((w * 124) | 0)) | 0;
              if ((c[r >> 2] | 0) >= 0) {
                break;
              }
              c[r >> 2] = q;
              break;
            }
            r = n | 0;
            if (!p) {
              gi(c[r >> 2] | 0, 4103, 1);
              c[v >> 2] = 1;
              Ub(c[r >> 2] | 0);
              b: do {
                if ((c[(2145980 + ((q * 80) | 0)) >> 2] | 0) == 0) {
                  if ((c[(19945452 + ((w * 124) | 0)) >> 2] | 0) == 0) {
                    v = (19945456 + ((w * 124) | 0)) | 0;
                    do {
                      if ((c[(19945448 + ((w * 124) | 0)) >> 2] | 0) != 0) {
                        p = c[v >> 2] | 0;
                        if (!((p | 0) > -1)) {
                          break;
                        }
                        y = +g[(2146024 + ((p * 80) | 0)) >> 2];
                        if (!(y < 0.0)) {
                          x = wf() | 0;
                          z = +Td(
                            +(
                              y +
                              +(
                                (x - (c[(2146028 + ((p * 80) | 0)) >> 2] | 0)) |
                                0
                              ) /
                                1.0e3
                            ),
                            +(
                              +(c[(19945416 + ((w * 124) | 0)) >> 2] | 0) /
                              +(c[(19945404 + ((w * 124) | 0)) >> 2] | 0)
                            )
                          );
                          hi(c[r >> 2] | 0, 4132, +z);
                        }
                        c[v >> 2] = q;
                        break b;
                      }
                    } while (0);
                    c[v >> 2] = q;
                    break;
                  }
                  p = si() | 0;
                  if ((p | 0) == 40961) {
                    A = 121408;
                    t = 45;
                  } else if ((p | 0) == 40962) {
                    A = 120240;
                    t = 45;
                  } else if ((p | 0) == 40963) {
                    A = 118840;
                    t = 45;
                  } else if ((p | 0) == 40964) {
                    A = 117648;
                    t = 45;
                  } else if ((p | 0) == 40965) {
                    A = 116632;
                    t = 45;
                  } else if ((p | 0) != 0) {
                    A = 115328;
                    t = 45;
                  }
                  if ((t | 0) == 45) {
                    t = 0;
                    Sr(
                      113048,
                      ((B = i), (i = (i + 8) | 0), (c[B >> 2] = A), B) | 0
                    );
                    i = B;
                  }
                  Bc(
                    c[
                      (2145968 +
                        (((c[(19945456 + ((w * 124) | 0)) >> 2] | 0) * 80) |
                          0)) >>
                        2
                    ] | 0,
                    4133,
                    m | 0
                  );
                  p = si() | 0;
                  if ((p | 0) == 40962) {
                    break;
                  } else if ((p | 0) == 40963) {
                    C = 118840;
                  } else if ((p | 0) == 40964) {
                    C = 117648;
                  } else if ((p | 0) == 40965) {
                    C = 116632;
                  } else if ((p | 0) == 40961) {
                    C = 121408;
                  } else if ((p | 0) == 0) {
                    gi(c[r >> 2] | 0, 4133, c[m >> 2] | 0);
                    break;
                  } else {
                    C = 115328;
                  }
                  Sr(
                    101112,
                    ((B = i),
                    (i = (i + 16) | 0),
                    (c[B >> 2] = q),
                    (c[(B + 8) >> 2] = C),
                    B) | 0
                  );
                  i = B;
                } else {
                  z = +g[(2146024 + ((q * 80) | 0)) >> 2];
                  if (z < 0.0) {
                    break;
                  }
                  p = wf() | 0;
                  y = +Td(
                    +(
                      z +
                      +((p - (c[(2146028 + ((q * 80) | 0)) >> 2] | 0)) | 0) /
                        1.0e3
                    ),
                    +(
                      +(c[(19945416 + ((w * 124) | 0)) >> 2] | 0) /
                      +(c[(19945404 + ((w * 124) | 0)) >> 2] | 0)
                    )
                  );
                  hi(c[r >> 2] | 0, 4132, +y);
                }
              } while (0);
              u = (19945452 + ((w * 124) | 0)) | 0;
              c[u >> 2] = (c[u >> 2] | 0) + 1;
            }
            u = c[r >> 2] | 0;
            if ((c[(2146044 + ((q * 80) | 0)) >> 2] | 0) == 0) {
              gi(u | 0, 514, 0);
              hi(c[r >> 2] | 0, 4129, +(+g[((c[4886318] | 0) + 28) >> 2]));
              break;
            } else {
              gi(u | 0, 514, 1);
              hi(c[r >> 2] | 0, 4129, +0.0);
              break;
            }
          }
        } while (0);
        q = (q + 1) | 0;
      } while ((q | 0) < (c[539052] | 0));
    }
    q = 0;
    do {
      w = (2127760 + (q << 2)) | 0;
      do {
        if (!((c[w >> 2] | 0) == -1)) {
          C = (2127240 + (q << 2)) | 0;
          Bc(c[C >> 2] | 0, 4118, h | 0);
          m = c[h >> 2] | 0;
          c[h >> 2] = m - 1;
          A = c[C >> 2] | 0;
          if ((m | 0) == 0) {
            D = A;
          } else {
            m = A;
            while (1) {
              yc(m | 0, 1, k | 0);
              A = c[h >> 2] | 0;
              c[h >> 2] = A - 1;
              l = c[C >> 2] | 0;
              if ((A | 0) == 0) {
                D = l;
                break;
              } else {
                m = l;
              }
            }
          }
          Bc(D | 0, 4117, h | 0);
          Bc(c[C >> 2] | 0, 4112, j | 0);
          m = (2128280 + (q << 2)) | 0;
          do {
            if ((c[j >> 2] | 0) == 4116) {
              c[m >> 2] = 0;
              if ((c[h >> 2] | 0) != 0) {
                break;
              }
              gi(c[C >> 2] | 0, 4105, 0);
              r = (2128800 + (q << 2)) | 0;
              l = c[r >> 2] | 0;
              if ((l | 0) > 0) {
                ng(l | 0, (2129320 + ((q * 80) | 0)) | 0);
                c[r >> 2] = 0;
              }
              r = c[w >> 2] | 0;
              c[(2146e3 + ((r * 80) | 0)) >> 2] = 0;
              Py(r);
              c[C >> 2] = 0;
              c[w >> 2] = -1;
              t = 85;
            } else {
              t = 85;
            }
          } while (0);
          if ((t | 0) == 85) {
            t = 0;
            if ((c[m >> 2] | 0) != 0) {
              break;
            }
            if ((c[h >> 2] | 0) == 0) {
              break;
            }
          }
          Ub(c[C >> 2] | 0);
          c[m >> 2] = 1;
        }
      } while (0);
      q = (q + 1) | 0;
    } while ((q | 0) < 129);
    do {
      if (a[11040] | 0) {
        Bc(c[4939870] | 0, 4118, d | 0);
        q = c[d >> 2] | 0;
        c[d >> 2] = q - 1;
        h = c[4939870] | 0;
        if ((q | 0) == 0) {
          E = h;
        } else {
          q = h;
          while (1) {
            yc(q | 0, 1, f | 0);
            Oy(c[f >> 2] | 0);
            Md(c[4939870] | 0, 1, f | 0);
            h = c[d >> 2] | 0;
            c[d >> 2] = h - 1;
            t = c[4939870] | 0;
            if ((h | 0) == 0) {
              E = t;
              break;
            } else {
              q = t;
            }
          }
        }
        Bc(E | 0, 4112, e | 0);
        Bc(c[4939870] | 0, 4117, d | 0);
        do {
          if ((c[e >> 2] | 0) == 4116) {
            if ((c[d >> 2] | 0) == 0) {
              break;
            }
            Tr(
              103648,
              ((B = i),
              (i = (i + 1) | 0),
              (i = (i + 7) & -8),
              (c[B >> 2] = 0),
              B) | 0
            );
            i = B;
            Ub(c[4939870] | 0);
          }
        } while (0);
        q = c[4939870] | 0;
        if ((c[((c[4781226] | 0) + 32) >> 2] | 0) == 0) {
          hi(
            q | 0,
            4106,
            +(
              +g[((c[4781232] | 0) + 28) >> 2] *
              +g[((c[4886330] | 0) + 28) >> 2]
            )
          );
          break;
        } else {
          hi(q | 0, 4106, +0.0);
          break;
        }
      }
    } while (0);
    if ((c[((c[4883770] | 0) + 20) >> 2] | 0) != 0) {
      c[((c[4886336] | 0) + 20) >> 2] = 1;
      c[((c[4883770] | 0) + 20) >> 2] = 0;
    }
    B = c[4886336] | 0;
    if ((c[(B + 20) >> 2] | 0) != 0) {
      if ((c[((c[4883770] | 0) + 32) >> 2] | 0) == 0) {
        Ze(+0.0);
      } else {
        Ze(+(+g[(B + 28) >> 2]));
      }
      c[((c[4886336] | 0) + 20) >> 2] = 0;
    }
    B = c[4886334] | 0;
    if ((c[(B + 20) >> 2] | 0) == 0) {
      F = c[4886330] | 0;
      G = (F + 20) | 0;
      c[G >> 2] = 0;
      H = c[553082] | 0;
      I = (H + 20) | 0;
      c[I >> 2] = 0;
      J = c[4781232] | 0;
      K = (J + 20) | 0;
      c[K >> 2] = 0;
      L = c[4886322] | 0;
      M = (L + 20) | 0;
      c[M >> 2] = 0;
      N = c[4886318] | 0;
      O = (N + 20) | 0;
      c[O >> 2] = 0;
      i = b;
      return;
    }
    $c(+(+g[(B + 28) >> 2]));
    c[((c[4886334] | 0) + 20) >> 2] = 0;
    F = c[4886330] | 0;
    G = (F + 20) | 0;
    c[G >> 2] = 0;
    H = c[553082] | 0;
    I = (H + 20) | 0;
    c[I >> 2] = 0;
    J = c[4781232] | 0;
    K = (J + 20) | 0;
    c[K >> 2] = 0;
    L = c[4886322] | 0;
    M = (L + 20) | 0;
    c[M >> 2] = 0;
    N = c[4886318] | 0;
    O = (N + 20) | 0;
    c[O >> 2] = 0;
    i = b;
    return;
  }
  function Fy() {
    xy();
    return;
  }
  function Gy() {
    var b = 0,
      d = 0;
    if ((c[4938828] | 0) != 0) {
      return;
    }
    if (a[42992] | 0) {
      return;
    }
    n$(19945336, 0, 507904) | 0;
    c[4938828] = 0;
    b = Ly(56224) | 0;
    c[5385978] = b;
    if ((a[(19945336 + ((b * 124) | 0)) | 0] | 0) == 0) {
      d = b;
    } else {
      do {
        if ((c[(19945436 + ((b * 124) | 0)) >> 2] | 0) == 0) {
          if ((c[(19945428 + ((b * 124) | 0)) >> 2] | 0) != 0) {
            break;
          }
          My(b, 1);
        }
      } while (0);
      c[(19945444 + ((b * 124) | 0)) >> 2] = wf() | 0;
      d = c[5385978] | 0;
    }
    c[(19945440 + ((d * 124) | 0)) >> 2] = 1;
    a[42992] = 1;
    return;
  }
  function Hy(a, b) {
    a = a | 0;
    b = b | 0;
    b = Ly(a) | 0;
    a = (19945428 + ((b * 124) | 0)) | 0;
    do {
      if ((c[(19945436 + ((b * 124) | 0)) >> 2] | 0) == 0) {
        if ((c[a >> 2] | 0) != 0) {
          break;
        }
        My(b, c[((c[4886320] | 0) + 32) >> 2] | 0);
      }
    } while (0);
    c[(19945444 + ((b * 124) | 0)) >> 2] = Bs() | 0;
    return ((c[a >> 2] | 0) == 0 ? b : 0) | 0;
  }
  function Iy() {
    return;
  }
  function Jy() {
    var a = 0,
      b = 0,
      d = 0;
    a = i;
    Sr(
      132976,
      ((b = i), (i = (i + 1) | 0), (i = (i + 7) & -8), (c[b >> 2] = 0), b) | 0
    );
    i = b;
    d = pj(45057) | 0;
    Sr(131960, ((b = i), (i = (i + 8) | 0), (c[b >> 2] = d), b) | 0);
    i = b;
    d = pj(45058) | 0;
    Sr(130768, ((b = i), (i = (i + 8) | 0), (c[b >> 2] = d), b) | 0);
    i = b;
    d = pj(45059) | 0;
    Sr(129408, ((b = i), (i = (i + 8) | 0), (c[b >> 2] = d), b) | 0);
    i = b;
    d = pj(45060) | 0;
    Sr(128288, ((b = i), (i = (i + 8) | 0), (c[b >> 2] = d), b) | 0);
    i = b;
    d = Id(c[7094376] | 0, 4102) | 0;
    Sr(127064, ((b = i), (i = (i + 8) | 0), (c[b >> 2] = d), b) | 0);
    i = b;
    do {
      if ((c[5312730] | 0) == 0) {
        if ((c[5312728] | 0) == 0) {
          break;
        }
        d = Id(c[7094376] | 0, 4101) | 0;
        Sr(125688, ((b = i), (i = (i + 8) | 0), (c[b >> 2] = d), b) | 0);
        i = b;
      } else {
        d = Id(c[7094376] | 0, 4115) | 0;
        Sr(125688, ((b = i), (i = (i + 8) | 0), (c[b >> 2] = d), b) | 0);
        i = b;
      }
    } while (0);
    if ((c[5312728] | c[5312730] | 0) == 0) {
      i = a;
      return;
    }
    Sr(
      124760,
      ((b = i),
      (i = (i + 8) | 0),
      (c[b >> 2] = c[((c[4886340] | 0) + 4) >> 2]),
      b) | 0
    );
    i = b;
    i = a;
    return;
  }
  function Ky() {
    return;
  }
  function Ly(b) {
    b = b | 0;
    var d = 0,
      e = 0,
      f = 0,
      g = 0,
      h = 0,
      j = 0,
      k = 0,
      l = 0,
      m = 0;
    d = i;
    if ((b | 0) == 0) {
      Ur(
        0,
        108192,
        ((e = i), (i = (i + 1) | 0), (i = (i + 7) & -8), (c[e >> 2] = 0), e) | 0
      );
      i = e;
      return 0;
    }
    f = a[b] | 0;
    if ((f << 24) >> 24 == 0) {
      Sr(
        107320,
        ((e = i), (i = (i + 1) | 0), (i = (i + 7) & -8), (c[e >> 2] = 0), e) | 0
      );
      i = e;
      g = 0;
      i = d;
      return g | 0;
    }
    if ((o$(b | 0) | 0) >>> 0 > 63 >>> 0) {
      Sr(106384, ((e = i), (i = (i + 8) | 0), (c[e >> 2] = b), e) | 0);
      i = e;
      g = 0;
      i = d;
      return g | 0;
    }
    if ((f << 24) >> 24 == 42) {
      Sr(105400, ((e = i), (i = (i + 8) | 0), (c[e >> 2] = b), e) | 0);
      i = e;
      g = 0;
      i = d;
      return g | 0;
    }
    a: do {
      if ((c[4938828] | 0) > 0) {
        f = 0;
        while (1) {
          h = (f + 1) | 0;
          if ((VB((19945336 + ((f * 124) | 0)) | 0, b) | 0) == 0) {
            break;
          }
          if ((h | 0) < (c[4938828] | 0)) {
            f = h;
          } else {
            j = 0;
            break a;
          }
        }
        if ((f | 0) == -1) {
          j = 0;
          break;
        } else {
          g = f;
        }
        i = d;
        return g | 0;
      } else {
        j = 0;
      }
    } while (0);
    while (1) {
      k = (19945336 + ((j * 124) | 0)) | 0;
      l = (j + 1) | 0;
      if ((a[k] | 0) == 0) {
        break;
      }
      if ((l | 0) < 4096) {
        j = l;
      } else {
        m = 17;
        break;
      }
    }
    if ((m | 0) == 17) {
      Ur(
        0,
        104616,
        ((e = i), (i = (i + 1) | 0), (i = (i + 7) & -8), (c[e >> 2] = 0), e) | 0
      );
      i = e;
      return 0;
    }
    if ((j | 0) >= (c[4938828] | 0)) {
      c[4938828] = l;
    }
    n$(k | 0, 0, 124) | 0;
    c[(19945456 + ((j * 124) | 0)) >> 2] = -1;
    r$(k | 0, b | 0) | 0;
    g = j;
    i = d;
    return g | 0;
  }
  function My(d, e) {
    d = d | 0;
    e = e | 0;
    var f = 0,
      g = 0,
      h = 0,
      j = 0,
      k = 0,
      l = 0,
      m = 0,
      n = 0,
      o = 0,
      p = 0,
      q = 0,
      r = 0,
      s = 0,
      t = 0,
      u = 0,
      v = 0,
      w = 0,
      x = 0,
      y = 0,
      z = 0,
      A = 0,
      B = 0;
    f = i;
    i = (i + 32) | 0;
    g = f | 0;
    h = (f + 24) | 0;
    j = (19945336 + ((d * 124) | 0)) | 0;
    if ((a[j] | 0) == 0) {
      i = f;
      return;
    }
    k = (19945436 + ((d * 124) | 0)) | 0;
    if ((c[k >> 2] | 0) != 0) {
      i = f;
      return;
    }
    l = (19945428 + ((d * 124) | 0)) | 0;
    if ((c[l >> 2] | 0) != 0) {
      i = f;
      return;
    }
    m = (e | 0) != 0;
    do {
      if (!m) {
        if ((c[(19945432 + ((d * 124) | 0)) >> 2] | 0) == 0) {
          break;
        }
        i = f;
        return;
      }
    } while (0);
    e = Vx(j, g) | 0;
    if ((e | 0) == 0) {
      if ((c[5385978] | 0) == (d | 0)) {
        Ur(0, 110552, ((n = i), (i = (i + 8) | 0), (c[n >> 2] = j), n) | 0);
        i = n;
      }
      Sr(109336, ((n = i), (i = (i + 8) | 0), (c[n >> 2] = j), n) | 0);
      i = n;
      c[l >> 2] = 1;
      c[(19945400 + ((d * 124) | 0)) >> 2] =
        c[(19945400 + (((c[5385978] | 0) * 124) | 0)) >> 2];
      i = f;
      return;
    }
    c[(19945432 + ((d * 124) | 0)) >> 2] = 1;
    if (!m) {
      ts(e);
      i = f;
      return;
    }
    m = c[(g + 4) >> 2] | 0;
    o = c[(g + 8) >> 2] | 0;
    do {
      if ((m | 0) == 1) {
        if ((o | 0) == 1) {
          p = 4352;
          break;
        }
        p = (o | 0) == 2 ? 4354 : 4353;
      } else if ((m | 0) == 2) {
        p = (o | 0) == 2 ? 4355 : 4353;
      } else {
        p = 4353;
      }
    } while (0);
    o = (19945400 + ((d * 124) | 0)) | 0;
    if ((Ny(1, o, j) | 0) == 0) {
      if ((c[5385978] | 0) == (d | 0)) {
        Ur(0, 110552, ((n = i), (i = (i + 8) | 0), (c[n >> 2] = j), n) | 0);
        i = n;
      }
      Sr(109336, ((n = i), (i = (i + 8) | 0), (c[n >> 2] = j), n) | 0);
      i = n;
      c[l >> 2] = 1;
      c[o >> 2] = c[(19945400 + (((c[5385978] | 0) * 124) | 0)) >> 2];
      ts(e);
      i = f;
      return;
    }
    m = (g + 16) | 0;
    q = c[m >> 2] | 0;
    if ((q | 0) == 0) {
      b[h >> 1] = 0;
      Yc(c[o >> 2] | 0, 4353, h | 0, 2, 22050);
      r = g | 0;
    } else {
      h = g | 0;
      Yc(c[o >> 2] | 0, p | 0, e | 0, q | 0, c[h >> 2] | 0);
      r = h;
    }
    h = si() | 0;
    while (1) {
      if ((h | 0) == 0) {
        s = 57;
        break;
      } else if ((h | 0) != 40965) {
        s = 47;
        break;
      }
      q = wf() | 0;
      t = c[4938828] | 0;
      if ((t | 0) > 0) {
        u = 0;
        v = -1;
        w = q;
      } else {
        s = 43;
        break;
      }
      while (1) {
        do {
          if ((a[(19945336 + ((u * 124) | 0)) | 0] | 0) == 0) {
            x = w;
            y = v;
          } else {
            if ((c[(19945436 + ((u * 124) | 0)) >> 2] | 0) == 0) {
              x = w;
              y = v;
              break;
            }
            q = c[(19945444 + ((u * 124) | 0)) >> 2] | 0;
            z = (q | 0) < (w | 0);
            x = z ? q : w;
            y = z ? u : v;
          }
        } while (0);
        z = (u + 1) | 0;
        if ((z | 0) < (t | 0)) {
          u = z;
          v = y;
          w = x;
        } else {
          break;
        }
      }
      if (!((y | 0) > -1)) {
        s = 43;
        break;
      }
      t = (19945336 + ((y * 124) | 0)) | 0;
      do {
        if ((a[t] | 0) != 0) {
          z = (19945436 + ((y * 124) | 0)) | 0;
          if ((c[z >> 2] | 0) == 0) {
            break;
          }
          q = si() | 0;
          if ((q | 0) == 40962) {
            A = 120240;
            s = 39;
          } else if ((q | 0) == 40963) {
            A = 118840;
            s = 39;
          } else if ((q | 0) == 40964) {
            A = 117648;
            s = 39;
          } else if ((q | 0) == 40965) {
            A = 116632;
            s = 39;
          } else if ((q | 0) == 40961) {
            A = 121408;
            s = 39;
          } else if ((q | 0) != 0) {
            A = 115328;
            s = 39;
          }
          if ((s | 0) == 39) {
            s = 0;
            Sr(113048, ((n = i), (i = (i + 8) | 0), (c[n >> 2] = A), n) | 0);
            i = n;
          }
   